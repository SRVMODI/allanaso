package com.astix.allanasosfa.database;

import android.content.ContentValues;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.SharedPreferences;
import android.content.SharedPreferences.Editor;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteException;
import android.os.Environment;
import android.text.TextUtils;
import android.util.Log;

import com.allanasosfa.truetime.TimeUtils;
import com.astix.Common.CommonInfo;
import com.astix.allanasosfa.SplashScreen;
import com.astix.allanasosfa.model.InvoiceList;
import com.astix.allanasosfa.model.JointVisitDetail;
import com.astix.allanasosfa.model.JointVisitMemberDetail;
import com.astix.allanasosfa.model.TblActualVsTargetReport;
import com.astix.allanasosfa.model.TblAllSummaryDay;
import com.astix.allanasosfa.model.TblAppMasterFlags;
import com.astix.allanasosfa.model.TblBankMaster;
import com.astix.allanasosfa.model.TblCoverageDsr;
import com.astix.allanasosfa.model.TblCoverageMaster;
import com.astix.allanasosfa.model.TblDAGetAddedOutletSummaryOverallReport;
import com.astix.allanasosfa.model.TblDAGetAddedOutletSummaryReport;
import com.astix.allanasosfa.model.TblDistributorProductStock;
import com.astix.allanasosfa.model.TblGetPDAQuestGrpMapping;
import com.astix.allanasosfa.model.TblGetPDAQuestMstr;
import com.astix.allanasosfa.model.TblGetPDAQuestOptionMstr;
import com.astix.allanasosfa.model.TblInvoiceExecutionProductList;
import com.astix.allanasosfa.model.TblInvoiceLastVisitDetails;
import com.astix.allanasosfa.model.TblLastOutstanding;
import com.astix.allanasosfa.model.TblPDAGetExecutionSummary;
import com.astix.allanasosfa.model.TblPDAGetLODQty;
import com.astix.allanasosfa.model.TblPDAGetLastOrderDate;
import com.astix.allanasosfa.model.TblPDAGetLastOrderDetails;
import com.astix.allanasosfa.model.TblPDAGetLastOrderDetailsTotalValues;
import com.astix.allanasosfa.model.TblPDAGetLastVisitDate;
import com.astix.allanasosfa.model.TblPDAGetLastVisitDetails;
import com.astix.allanasosfa.model.TblPendingInvoices;
import com.astix.allanasosfa.model.TblPreAddedStores;
import com.astix.allanasosfa.model.TblPreAddedStoresDataDetails;
import com.astix.allanasosfa.model.TblProductListLastVisitStockOrOrderMstr;
import com.astix.allanasosfa.model.TblProductListMaster;
import com.astix.allanasosfa.model.TblProductSegementMap;
import com.astix.allanasosfa.model.TblProductWiseInvoice;
import com.astix.allanasosfa.model.TblRptDistribution;
import com.astix.allanasosfa.model.TblRptManDays;
import com.astix.allanasosfa.model.TblRptPrimaryVol;
import com.astix.allanasosfa.model.TblRptSecVol;
import com.astix.allanasosfa.model.TblSKUWiseDaySummary;
import com.astix.allanasosfa.model.TblStoreImageList;
import com.astix.allanasosfa.model.TblStoreListMaster;
import com.astix.allanasosfa.model.TblStoreListWithPaymentAddress;
import com.astix.allanasosfa.model.TblStoreSKUWiseDaySummary;
import com.astix.allanasosfa.model.TblStoreSomeProdQuotePriceMstr;
import com.astix.allanasosfa.model.TblStoreWiseDaySummary;
import com.astix.allanasosfa.model.TblValueVolumeTarget;
import com.astix.allanasosfa.model.TblVanProductStock;
import com.astix.allanasosfa.SplashScreen;
import com.astix.allanasosfa.model.InvoiceList;
import com.astix.allanasosfa.model.JointVisitDetail;
import com.astix.allanasosfa.model.JointVisitMemberDetail;
import com.astix.allanasosfa.model.TblActualVsTargetReport;
import com.astix.allanasosfa.model.TblAllSummaryDay;
import com.astix.allanasosfa.model.TblAppMasterFlags;
import com.astix.allanasosfa.model.TblBankMaster;
import com.astix.allanasosfa.model.TblCoverageDsr;
import com.astix.allanasosfa.model.TblCoverageMaster;
import com.astix.allanasosfa.model.TblDAGetAddedOutletSummaryOverallReport;
import com.astix.allanasosfa.model.TblDAGetAddedOutletSummaryReport;
import com.astix.allanasosfa.model.TblDistributorProductStock;
import com.astix.allanasosfa.model.TblGetPDAQuestGrpMapping;
import com.astix.allanasosfa.model.TblGetPDAQuestMstr;
import com.astix.allanasosfa.model.TblGetPDAQuestOptionMstr;
import com.astix.allanasosfa.model.TblInvoiceExecutionProductList;
import com.astix.allanasosfa.model.TblInvoiceLastVisitDetails;
import com.astix.allanasosfa.model.TblLastOutstanding;
import com.astix.allanasosfa.model.TblPDAGetExecutionSummary;
import com.astix.allanasosfa.model.TblPDAGetLODQty;
import com.astix.allanasosfa.model.TblPDAGetLastOrderDate;
import com.astix.allanasosfa.model.TblPDAGetLastOrderDetails;
import com.astix.allanasosfa.model.TblPDAGetLastOrderDetailsTotalValues;
import com.astix.allanasosfa.model.TblPDAGetLastVisitDate;
import com.astix.allanasosfa.model.TblPDAGetLastVisitDetails;
import com.astix.allanasosfa.model.TblPendingInvoices;
import com.astix.allanasosfa.model.TblPreAddedStores;
import com.astix.allanasosfa.model.TblPreAddedStoresDataDetails;
import com.astix.allanasosfa.model.TblProductListLastVisitStockOrOrderMstr;
import com.astix.allanasosfa.model.TblProductListMaster;
import com.astix.allanasosfa.model.TblProductSegementMap;
import com.astix.allanasosfa.model.TblProductWiseInvoice;
import com.astix.allanasosfa.model.TblRptDistribution;
import com.astix.allanasosfa.model.TblRptManDays;
import com.astix.allanasosfa.model.TblRptPrimaryVol;
import com.astix.allanasosfa.model.TblRptSecVol;
import com.astix.allanasosfa.model.TblSKUWiseDaySummary;
import com.astix.allanasosfa.model.TblStoreImageList;
import com.astix.allanasosfa.model.TblStoreListMaster;
import com.astix.allanasosfa.model.TblStoreListWithPaymentAddress;
import com.astix.allanasosfa.model.TblStoreSKUWiseDaySummary;
import com.astix.allanasosfa.model.TblStoreSomeProdQuotePriceMstr;
import com.astix.allanasosfa.model.TblStoreWiseDaySummary;
import com.astix.allanasosfa.model.TblValueVolumeTarget;
import com.astix.allanasosfa.model.TblVanProductStock;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Map.Entry;
import java.util.StringTokenizer;
import java.util.regex.Pattern;

import static android.content.Context.MODE_PRIVATE;

public class AppDataSource {
//This is the AppDataSource File
    public static final String KEY_PHID = "phID";
    private static final String TAG = "AppDataSource";
    public static int gblQuestIDForOutChannel = 0;
    public static SharedPreferences sPref, sharedPrefReport;

    public String[] tblJointVisitMemberColumns = new String[]{
            DBHelper.JOINTVISITID,
            DBHelper.FELLOWPERSONNODEID,
            DBHelper.FELLOWPERSONNODETYPE,
            DBHelper.FELLOWPERSONNAME
    };
    //Incentive Tables Ends Here
    public static Cursor cursor;
    public static int checkNumberOfStore = 1;
    public static SQLiteDatabase db;
    private static Context mContext;
    private static AppDataSource sInstance;
    public DBHelper dbHelper;
    Locale locale = new Locale("en", "UK");
    String pattern = "###.##";
    DecimalFormat decimalFormat = (DecimalFormat) NumberFormat.getNumberInstance(locale);
    private boolean isDBOpenflag = false;


    public AppDataSource(Context context) {
        mContext = context;
        dbHelper = new DBHelper(context);
        db = dbHelper.getWritableDatabase();
    }

    public static synchronized AppDataSource getInstance(Context context) {

        // Use the application context, which will ensure that you
        // don't accidentally leak an Activity's context.
        // See this article for more information: http://bit.ly/6LRzfx
        mContext = context;
        if (sInstance == null) {
            sInstance = new AppDataSource(context.getApplicationContext());

        }
        return sInstance;
    }

    public static void saveOutletChammetQstnIdGrpId(int grpQstId, int qstId, String optId, int section_count) {
        ContentValues values = new ContentValues();
        values.put("GrpQstId", grpQstId);
        values.put("QuestID", qstId);
        values.put("OptID", optId);
        values.put("SectionCount", section_count);
        gblQuestIDForOutChannel = qstId;
        db.insert(DBHelper.TABLE_QSTOUTCHANNEL, null, values);

    }

    public static ArrayList<HashMap<String, String>> fnctnSchemeSlabIdSchmVal(String storeID) {
        //open();
        // tblSchemeSlabDetail (SchemeID text null,SchemeSlabID text null,SchemeSlabDesc text null,BenifitDescr text null);";

        ArrayList<HashMap<String, String>> arrayListSchemeSlabDteail = new ArrayList<HashMap<String, String>>();

        //hmapSchmeSlabIdSchemeId= key =SchemeSlabId         value=SchemeID
        HashMap<String, String> hmapSchmeSlabIdSchemeId = new HashMap<String, String>();
        //hmapSchmeSlabIdSchemeId= key =SchemeSlabId         value=SchemeSlabDes
        HashMap<String, String> hmapSchmeSlabIdSlabDes = new HashMap<String, String>();
        //hmapSchmeSlabIdSchemeId= key = SchemeSlabId        value=BenifitDescription
        HashMap<String, String> hmapSchmeSlabIdBenifitDes = new HashMap<String, String>();
        Cursor cursor = db.rawQuery("Select tblSchemeSlabDetail.SchemeID,tblSchemeSlabDetail.SchemeSlabID,tblSchemeSlabDetail.SchemeSlabDesc,tblSchemeSlabDetail.BenifitDescr from tblSchemeSlabDetail inner join tblSchemeStoreMapping ON tblSchemeSlabDetail.SchemeID tblSchemeStoreMapping.SchemeID Where tblSchemeStoreMapping.StoreID='" + storeID + "'", null);
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int i = 0; i < cursor.getCount(); i++) {
                    hmapSchmeSlabIdSchemeId.put(cursor.getString(1), cursor.getString(0));
                    hmapSchmeSlabIdSlabDes.put(cursor.getString(1), cursor.getString(2));
                    hmapSchmeSlabIdBenifitDes.put(cursor.getString(1), cursor.getString(3));

                    cursor.moveToNext();
                }

                arrayListSchemeSlabDteail.add(hmapSchmeSlabIdSchemeId);
                arrayListSchemeSlabDteail.add(hmapSchmeSlabIdSlabDes);
                arrayListSchemeSlabDteail.add(hmapSchmeSlabIdBenifitDes);

            }
        }
        // close();
        if (cursor != null) {
            cursor.close();
        }
        return arrayListSchemeSlabDteail;
    }


    // function for new store master data start

    public static void fnUpdateflgTransferStatusInInvoiceHeader(String storeID, String StoreVisitCode, String TmpInvoiceCodePDA, int flgTransferStatus) {
        final ContentValues values = new ContentValues();
        values.put("flgTransferStatus", flgTransferStatus);
        int affected1 = db.update("tblTmpInvoiceHeader", values, "StoreID=? AND StoreVisitCode=? AND TmpInvoiceCodePDA=?", new String[]{storeID, StoreVisitCode, TmpInvoiceCodePDA});
    }

    private static int round(double d) {
        double dAbs = Math.abs(d);
        int i = (int) dAbs;
        double result = dAbs - (double) i;
        if (result < 0.5) {
            return d < 0 ? -i : i;
        } else {
            return d < 0 ? -(i + 1) : i + 1;
        }
    }



    // function for new store master data end

    public boolean isDBOpen() {
        this.isDBOpenflag = false;
        return this.isDBOpenflag;
    }

    public void savetblQuestIDForName(int id, int grpQstId, int qstId, String QuestDesc) {
  /*private static final String TABLE_QSTOUTCHANNEL = "tblQuestIDForOutChannel";
   private static final String TABLE_QST_NAME = "tblQuestIDForName";
    private static final String DATABASE_CREATE_TABLE_QSTOUTCHANNEL = "create table tblGetPDAQuestOptionMstr(GrpQstId int null,QuestID int null);";
    private static final String DATABASE_CREATE_TABLE_QST_NAME = "create table tblGetPDAQuestOptionMstr(GrpQstId int null,QuestID int null);";*/
        ContentValues values = new ContentValues();
        values.put("ID", id);
        values.put("QuestID", qstId);
        values.put("GrpQstId", grpQstId);
        values.put("QuestDesc", QuestDesc);
        db.insert(DBHelper.TABLE_QST_NAME, null, values);

    }

    public void savetblPDAQuestOptionValuesDependentMstr(int DepQstId, String DepAnswValId, int QstId, String AnswValId, String OptDescr, int Sequence, int GrpQuestID, int GrpDepQuestID) {

        ContentValues values = new ContentValues();
        values.put("DepQstId", DepQstId);
        values.put("DepAnswValId", DepAnswValId);
        values.put("QstId", QstId);
        values.put("AnswValId", AnswValId);
        values.put("OptDescr", OptDescr);
        values.put("Sequence", Sequence);
        values.put("GrpQuestID", GrpQuestID);
        values.put("GrpDepQuestID", GrpDepQuestID);
        db.insert(DBHelper.TABLE_QuestOptionValuesDependentMstr, null, values);

    }

    public void Delete_tblMessageTextFileContainer() {
        db.execSQL("DELETE FROM tblMessageTextFileContainer");
    }

    public void Delete_tblDsrRegDetails() {
        db.execSQL("DELETE FROM tblDsrRegDetails");
    }

    public void Delete_tblUserRegistarationStatus() {
        db.execSQL("DELETE FROM tblUserRegistarationStatus");
    }

    //tblStockUploadedStatus
    public void Delete_tblStockUploadedStatus() {
        db.execSQL("DELETE FROM tblStockUploadedStatus");
    }

    public int countNumberOFTextFile() throws IOException {
        // int entryCount;sdfsfsf

        Cursor cursorE2 = db.rawQuery("SELECT Count(*) from tblMessageTextFileContainer where FileFlag=0", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String[] returnTextFileName() {

        String qry = "select FileName from tblMessageTextFileContainer where FileFlag=0";
        Cursor cur = db.rawQuery(qry, null);
        String TextFileUpload[] = new String[cur.getCount()];
        try {
            if (cur.moveToFirst()) {
                //for(int i=0;i<cur.getCount();i++)
                for (int i = 0; i < cur.getCount(); i++) {
                    TextFileUpload[i] = (String) cur.getString(0).toString();
                    cur.moveToNext();

                }


            }
            return TextFileUpload;
        } finally {
            cur.close();
        }
    }

    public void upDateTextFileFlag(String FileName, int FileFlag) {

        try {

            //initialValues.put("FileName", FileName);
            //initialValues.put("FileFlag", FileFlag);

            final ContentValues values = new ContentValues();
            values.put("FileFlag", FileFlag);

            int affected = db.update("tblMessageTextFileContainer", values, "FileName=?",
                    new String[]{FileName});

            Log.w(TAG, "Record(s) Updated..");

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }




	/* private static final String DATABASE_CREATE_TABLE_231 = "create table tblSKUWiseDaySummary (AutoId int not null,ProductId text null," +
		 		"Product text null,MRP text null,Rate text null,NoofStores text null,OrderQty text null,FreeQty text null," +
		 		"DiscValue text null,ValBeforeTax text null,TaxValue text null,ValAfterTax text null,Lvl text null," +
		 		"Category text null,UOM text null);";*/

    // change by sunil for Summary Report

    public void deleteTextFileRow(String fileName) {

        db.execSQL("DELETE FROM tblMessageTextFileContainer WHERE FileName ='" + fileName + "'");
    }

    public void deleteViewAddedStore() {
        //open();
        db.execSQL("DELETE FROM tblViewOutletQuestAnsMstr");
        db.execSQL("DELETE FROM tblViewOutletNameAndId");
        // close();
    }

    public void deleteAllSingleCallWebServiceTable() {
        //open();
        db.execSQL("DELETE FROM tblNewStoreSalesQuotePaymentDetails");

        db.execSQL("DELETE FROM tblGetPDAQuestMstr");
        db.execSQL("DELETE FROM tblOutletChannelBusinessSegmentMaster");
        db.execSQL("DELETE FROM tblGetPDAQuestOptionMstr");
        db.execSQL("DELETE FROM tblPDAQuestOptionDependentMstr");
        db.execSQL("DELETE FROM tblPDAQuestOptionValuesDependentMstr");
        //db.execSQL("DELETE FROM tblLatLongDetails");
        //  db.execSQL("DELETE FROM tblOutletMstr");
        //  db.execSQL("DELETE FROM tblOutletQuestAnsMstr");

      /*  db.execSQL("DELETE FROM tblStoreList WHERE Sstat ="+ 4);
        db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE Sstat ="+ 4);

        db.execSQL("DELETE FROM tblNewAddedStoreLocationDetails WHERE Sstat ="+ 4);


        db.execSQL("DELETE FROM tblOutletPhotoDetail WHERE Sstat ="+ 4);*/


        //  db.execSQL("DELETE FROM tblOutletPhotoDetail");
        //db.execSQL("DELETE FROM tblAvailableVersion");
        db.execSQL("DELETE FROM tblGetPDAQuestionDependentMstr");
        db.execSQL("DELETE FROM tblGetPDAQuestGrpMapping");
        db.execSQL("DELETE FROM tblGetReturnsReasonForPDAMstr");

        // db.execSQL("DELETE FROM tblViewOutletNameAndId");

        db.execSQL("DELETE FROM tblsameLocationForStoreRestartDone");

        //close();
    }

    public void deleteAllSingleCallWebServiceTableWhole() {
        //open();
        //db.execSQL("DELETE FROM tblNewStoreSalesQuotePaymentDetails");

        //db.execSQL("DELETE FROM tblGetPDAQuestMstr");
        //db.execSQL("DELETE FROM tblOutletChannelBusinessSegmentMaster");
        //db.execSQL("DELETE FROM tblGetPDAQuestOptionMstr");
        //db.execSQL("DELETE FROM tblPDAQuestOptionDependentMstr");
        //db.execSQL("DELETE FROM tblPDAQuestOptionValuesDependentMstr");
        //db.execSQL("DELETE FROM tblLatLongDetails");
        //  db.execSQL("DELETE FROM tblOutletMstr");
        //  db.execSQL("DELETE FROM tblOutletQuestAnsMstr");

        //db.execSQL("DELETE FROM tblStoreList");
        //	db.execSQL("DELETE FROM tblOutletQuestAnsMstr");


        // db.execSQL("DELETE FROM tblOutletPhotoDetail");


        //  db.execSQL("DELETE FROM tblOutletPhotoDetail");
        //db.execSQL("DELETE FROM tblAvailableVersion");
        //db.execSQL("DELETE FROM tblGetPDAQuestionDependentMstr");
        //db.execSQL("DELETE FROM tblGetPDAQuestGrpMapping");
        //db.execSQL("DELETE FROM tblGetReturnsReasonForPDAMstr");

        // db.execSQL("DELETE FROM tblViewOutletNameAndId");

        db.execSQL("DELETE FROM tblsameLocationForStoreRestartDone");

        // close();
    }

    public int checkCountIntblSalesQuotePersonMeetMstr(String StoreId) {

        Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblSalesQuotePersonMeetMstr WHERE  StoreId ='" + StoreId + "'", null);

        try {

            int check = 0;

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = 1;
                        cursor.moveToNext();
                    }
                }

            }
            return check;

        } finally {
            cursor.close();
        }

    }

    public long savetbltblUOMMstr(String UOMID, String UOM) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("UOMID", UOMID.toString().trim());
        initialValues.put("UOM", UOM.toString().trim());

        return db.insert(DBHelper.DATABASE_TABLE_UOMMstr, null, initialValues);
    }

    public long saveSalesQuotePrcsMstr(String SalesQuotePrcsId, String SalesQuotePrcs) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("SalesQuotePrcsId", SalesQuotePrcsId.toString().trim());
        initialValues.put("SalesQuotePrcs", SalesQuotePrcs.toString().trim());

        return db.insert(DBHelper.DATABASE_TABLE_SalesQuotePrcsMstr, null, initialValues);
    }

    public long SavetblSalesQuotePaymentModeMstr(String PymtModeId, String PymtMode) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("PymtModeId", PymtModeId.toString().trim());
        initialValues.put("PymtMode", PymtMode.toString().trim());

        return db.insert(DBHelper.DATABASE_TABLE_tblSalesQuotePaymentModeMstr, null, initialValues);
    }

    public long SavetblSalesQuotePaymentStageMstr(String PymtStageId, String PymtStage, String PymtModeId) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("PymtStageId", PymtStageId.toString().trim());
        initialValues.put("PymtStage", PymtStage.toString().trim());
        initialValues.put("PymtModeId", PymtModeId.toString().trim());

        return db.insert(DBHelper.DATABASE_TABLE_tblSalesQuotePaymentStageMstr, null, initialValues);
    }

    //surbhi
    public long SavetblSalesQuoteTypeMstr(String SalesQuotetypeId, String SalesQuoteType) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("SalesQuotetypeId", SalesQuotetypeId);
        initialValues.put("SalesQuoteType", SalesQuoteType);

        return db.insert(DBHelper.DATABASE_TABLE_tblSalesQuoteTypeMstr, null, initialValues);
    }

    public long SavetblSalesQuotePaymentStageModeMapMstr(String PymtStageId, String PymtModeId) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("PymtStageId", PymtStageId);
        initialValues.put("PymtModeId", PymtModeId);

        return db.insert(DBHelper.DATABASE_TABLE_tblSalesQuotePaymentStageModeMapMstr, null, initialValues);
    }

    public LinkedHashMap<String, String> fnGettblUOMMstr() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
        // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'

        // (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            Cursor cursor = db.rawQuery("SELECT UOMID,UOM from tblUOMMstr   ", null);// Where PNodeID='"+TSIID+"'
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put(cursor.getString(1), cursor.getString(0));
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            //close();
            return hmapQuestionMstr;
        }
    }

    public String fngettblSalesQuotePersonMeetMstr(String SalesQuoteId) {
        String flag = "0";
        try {
            //open();
            Cursor cursor = db.rawQuery("SELECT SalesQuotePrcsId,SalesQuotePrcs,SalesQuoteValidFrom,SalesQuoteValidTo,SalesQuoteType from tblSalesQuotePersonMeetMstr where SalesQuoteId = '" + SalesQuoteId + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    flag = cursor.getString(0).toString() + "^" + cursor.getString(1).toString() + "^" + cursor.getString(2).toString() + "^" + cursor.getString(3).toString() + "^" + cursor.getString(4).toString();
                }

            }
            return flag;
        } catch (Exception e) {

        } finally {

            //close();
            return flag;
        }
    }

    public long SalesQuoteProductsMstr(String SalesQuoteId, String Row_No, String PrdId, String StandardRate, String StandardRateBeforeTax, String RateOffer, String InclusiveTax, String ValidFrom, String ValidTo, String MinDlvryQty, String UOMID, String Remarks, String LastTranscRate, String ProductTaxRateBK) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("SalesQuoteId", SalesQuoteId.toString().trim());
        initialValues.put("Row_No", Row_No.toString().trim());
        initialValues.put("PrdId", PrdId.toString().trim());
        initialValues.put("StandardRate", StandardRate.toString().trim());
        initialValues.put("StandardRateBeforeTax", StandardRateBeforeTax.toString().trim());
        initialValues.put("RateOffer", RateOffer.toString().trim());
        initialValues.put("InclusiveTax", InclusiveTax.toString().trim());
        initialValues.put("ValidFrom", ValidFrom.toString().trim());
        initialValues.put("ValidTo", ValidTo.toString().trim());
        initialValues.put("MinDlvryQty", MinDlvryQty.toString().trim());
        initialValues.put("UOMID", UOMID.toString().trim());
        initialValues.put("Remarks", Remarks.toString().trim());
        initialValues.put("LastTranscRate", LastTranscRate.toString().trim());
        initialValues.put("TaxRate", ProductTaxRateBK.toString().trim());
        initialValues.put("Sstat", "1");

        //LastTranscRate

        return db.insert(DBHelper.DATABASE_TABLE_SalesQuoteProductsMstr, null, initialValues);
    }





	/* private static final String DATABASE_CREATE_TABLE_232 = "create table tblStoreWiseDaySummary (AutoId int not null,Store text null," +
		 		"LinesperBill text null,StockValue text null,DiscValue text null,ValBeforeTax text null,TaxValue text null," +
		 		"ValAfterTax text null,Lvl text null);";*/

    public void deleteAllQuotationTables() {

        db.execSQL("DELETE FROM tblUOMMstr");
        db.execSQL("DELETE FROM tblSalesQuotePrcsMstr");
        db.execSQL("DELETE FROM tblSalesQuotePersonMeetMstr");
        db.execSQL("DELETE FROM tblSalesQuoteProductsMstr");
        db.execSQL("DELETE FROM tblSalesQuotePaymentModeMstr");
        db.execSQL("DELETE FROM tblSalesQuotePaymentStageMstr");
        db.execSQL("DELETE FROM tblSalesQuoteTypeMstr");
        db.execSQL("DELETE FROM tblSalesQuotePaymentStageModeMapMstr");
        db.execSQL("DELETE FROM tblSalesQuoteSponsorMstr");
        db.execSQL("DELETE FROM tblManufacturerMstrMain");

    }

    /*private static final String DATABASE_CREATE_TABLE_233 = "create table tblStoreSKUWiseDaySummary (AutoId int not null,
	 * ProductId text null," +
	 		"Product text null,MRP text null,Rate text null,OrderQty text null,FreeQty text null," +
	 		"DiscValue text null,ValBeforeTax text null,TaxValue text null,ValAfterTax text null,Lvl text null,
	 		StoreId text null);";

	*/

    public void deletetblSalesQuoteProductsMstr(String PrdId, String SalesQuoteId) {

        db.execSQL("DELETE FROM tblSalesQuoteProductsMstr WHERE PrdId ='" + PrdId + "' and SalesQuoteId='" + SalesQuoteId + "' ");
    }

    public void deletetblRateDistribution(String SalesQuoteId, String StoreId) {

        db.execSQL("DELETE FROM tblRateDistribution WHERE SalesQuoteId ='" + SalesQuoteId + "' and StoreId='" + StoreId + "' ");
    }

    public String[] fetchAllDataFromtblSKUWiseDaySummary() {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT AutoId,ifnull(ProductId ,0),ifnull(Product ,0),ifnull(MRP ,0),ifnull(Rate ,0),ifnull(NoofStores ,0),ifnull(OrderQty ,0),ifnull(FreeQty ,0),ifnull(DiscValue ,0),ifnull(ValBeforeTax ,0),ifnull(TaxValue ,0),ifnull(ValAfterTax ,0),ifnull(Lvl ,0),ifnull(Category ,0),ifnull(UOM ,0)  FROM tblSKUWiseDaySummary", null);

        try {
            String allData[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = 1;
                    allData[i] = (String) cursor.getString(0).toString().trim() + "^" + (String) cursor.getString(1).toString().trim() + "^" + (String) cursor.getString(2).toString().trim() + "^" + (String) cursor.getString(3).toString().trim() + "^" + (String) cursor.getString(4).toString().trim() + "^" + (String) cursor.getString(5).toString().trim() + "^" + (String) cursor.getString(6).toString().trim() + "^" + (String) cursor.getString(7).toString().trim() + "^" + (String) cursor.getString(8).toString().trim() + "^" + (String) cursor.getString(9).toString().trim() + "^" + (String) cursor.getString(10).toString().trim() + "^" + (String) cursor.getString(11).toString().trim() + "^" + (String) cursor.getString(12).toString().trim() + "^" + (String) cursor.getString(13).toString().trim() + "^" + (String) cursor.getString(14).toString().trim();
                    //// System.out.println("Value inserting 231 fetching :"+allData[i]);
                    cursor.moveToNext();
                    // cursor.close();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return allData;
        } finally {
            cursor.close();
        }

    }

    public String[] fetchAllDataFromtblStoreWiseDaySummary() {

        Cursor cursor = db.rawQuery("SELECT ifnull(AutoId ,0),ifnull(Store ,0),ifnull(LinesperBill ,0),ifnull(StockValue ,0),ifnull(DiscValue ,0),ifnull(ValBeforeTax ,0),ifnull(TaxValue ,0),ifnull(ValAfterTax ,0),ifnull(Lvl ,0)  FROM tblStoreWiseDaySummary", null);


        try {
            String allData[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {

                    allData[i] = (String) cursor.getString(0).toString().trim() + "^" + (String) cursor.getString(1).toString().trim() + "^" + (String) cursor.getString(2).toString().trim() + "^" + (String) cursor.getString(3).toString().trim() + "^" + (String) cursor.getString(4).toString().trim() + "^" + (String) cursor.getString(5).toString().trim() + "^" + (String) cursor.getString(6).toString().trim() + "^" + (String) cursor.getString(7).toString().trim() + "^" + (String) cursor.getString(8).toString().trim();
                    //// System.out.println("Value inserting 232 fetching :"+allData[i]);
                    cursor.moveToNext();
                    // cursor.close();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return allData;
        } finally {
            cursor.close();
        }

    }

    public void deleteSalesQuotePersonMeetMstr(String SalesQuoteId) {

        db.execSQL("DELETE FROM tblSalesQuotePersonMeetMstr WHERE SalesQuoteId ='" + SalesQuoteId + "'");
    }

    public long saveSalesQuotePersonMeetMstr(String SalesQuoteId, String SalesQuoteCode, String SalesQuotePrcsId, String SalesQuotePrcs,
                                             String StoreName, String Remarks, String StoreId, String CreditLimit, String CreditDays,
                                             String ExpectedBusinessValue, String SalesQuoteValidFrom, String SalesQuoteValidTo, String SalesQuoteDate,
                                             String SalesQuoteType, String ContactPerson, String ContactPersonEmail, String ContactPersonPhone,
                                             String PaymentModeId, String PaymentStageId, String ManufacturerID, String ManufacturerName) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("SalesQuoteId", SalesQuoteId.toString().trim());
        initialValues.put("SalesQuoteCode", SalesQuoteCode.toString().trim());
        initialValues.put("SalesQuotePrcsId", SalesQuotePrcsId.toString().trim());
        initialValues.put("SalesQuotePrcs", SalesQuotePrcs.toString().trim());
        initialValues.put("StoreName", StoreName.toString().trim());
        initialValues.put("Remarks", Remarks.toString().trim());
        initialValues.put("StoreId", StoreId.toString().trim());
        initialValues.put("CreditLimit", CreditLimit.toString().trim());
        initialValues.put("CreditDays", CreditDays.toString().trim());
        initialValues.put("ExpectedBusinessValue", ExpectedBusinessValue.toString().trim());
        initialValues.put("SalesQuoteValidFrom", SalesQuoteValidFrom.toString().trim());
        initialValues.put("SalesQuoteValidTo", SalesQuoteValidTo.toString().trim());
        initialValues.put("SalesQuoteDate", SalesQuoteDate.toString().trim());
        initialValues.put("SalesQuoteType", SalesQuoteType.toString().trim());
        initialValues.put("ContactPerson", ContactPerson.toString().trim());
        initialValues.put("ContactPersonEmail", ContactPersonEmail.toString().trim());
        initialValues.put("ContactPersonPhone", ContactPersonPhone.toString().trim());
        initialValues.put("PaymentModeId", PaymentModeId.toString().trim());
        initialValues.put("PymtStageId", PaymentStageId.toString().trim());
        initialValues.put("ManufacturerID", ManufacturerID.toString().trim());
        initialValues.put("ManufacturerName", ManufacturerName.toString().trim());
        initialValues.put("Sstat", "1");

        return db.insert(DBHelper.DATABASE_TABLE_SalesQuotePersonMeetMstr, null, initialValues);
    }

    public String fngetPaymentModeIDsBasedOnStageID(String PaymentStageID) {

        String flag = "0";
        try {
            ////open();
            Cursor cursor = db.rawQuery("SELECT PymtModeId from tblSalesQuotePaymentStageMstr where PymtStageId= '" + PaymentStageID + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    flag = cursor.getString(0).toString();
                }

            }
            return flag;
        } catch (Exception e) {

        } finally {

            //close();
            return flag;
        }

    }

    public LinkedHashMap<String, String> fnGettblSalesQuotePaymentStageMstr() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
        Cursor cursor = db.rawQuery("SELECT PymtStageId,PymtStage from tblSalesQuotePaymentStageMstr", null);// Where PNodeID='"+TSIID+"'
        //(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        } finally {
            cursor.close();
            //   close();
        }
    }


	/* private static final String DATABASE_CREATE_TABLE_234 = "create table tblAllSummary (AutoId int not null,Measures text null," +
		 		"TodaysSummary text null,MTDSummary text null);";*/

    public LinkedHashMap<String, String> fnGettblSalesQuoteTypeMstr() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
        Cursor cursor = db.rawQuery("SELECT SalesQuotetypeId,SalesQuoteType from tblSalesQuoteTypeMstr", null);// Where PNodeID='"+TSIID+"'
        //(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(1).toString(), (String) cursor.getString(0).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        } finally {
            cursor.close();
            //close();
        }
    }

    public String[] fetchAllDataFromtblStoreSKUWiseDaySummary() {

        Cursor cursor = db.rawQuery("SELECT AutoId ,ifnull(ProductId,0) ,ifnull(Product,0) ,ifnull(MRP,0) ,ifnull(Rate,0) ,ifnull(OrderQty,0) ,ifnull(FreeQty,0) ,ifnull(DiscValue,0) ,ifnull(ValBeforeTax,0) ,ifnull(TaxValue,0) ,ifnull(ValAfterTax,0) ,ifnull(Lvl,0) ,ifnull(StoreId,0) ,ifnull(StockQty,0)  FROM tblStoreSKUWiseDaySummary", null);

        try {
            String allData[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {

                    allData[i] = (String) cursor.getString(0).toString().trim() + "^" + (String) cursor.getString(1).toString().trim() + "^" + (String) cursor.getString(2).toString().trim() + "^" + (String) cursor.getString(3).toString().trim() + "^" + (String) cursor.getString(4).toString().trim() + "^" + (String) cursor.getString(5).toString().trim() + "^" + (String) cursor.getString(6).toString().trim() + "^" + (String) cursor.getString(7).toString().trim() + "^" + (String) cursor.getString(8).toString().trim() + "^" + (String) cursor.getString(9).toString().trim() + "^" + (String) cursor.getString(10).toString().trim() + "^" + (String) cursor.getString(11).toString().trim() + "^" + (String) cursor.getString(12).toString().trim() + "^" + (String) cursor.getString(13).toString().trim();
                    //// System.out.println("Value inserting 233 fetching :"+allData[i]);
                    cursor.moveToNext();
                    // cursor.close();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return allData;
        } finally {
            cursor.close();
        }

    }

    public long savetblAllSummary(int AutoId, String Measures, String TodaysSummary, String MTDSummary) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("AutoId", AutoId);
        initialValues.put("Measures", Measures.trim());
        initialValues.put("TodaysSummary", TodaysSummary.trim());
        initialValues.put("MTDSummary", MTDSummary.trim());


        return db.insert(DBHelper.DATABASE_TABLE_MAIN234, null, initialValues);
    }


/* tblStoreMaterialPhotoDetail (RouteID text null,StoreID text null,MaterialID text null,ClickedDateTime text null,
		 PhotoName text null,PhotoValidation text null,PDAPhotoPath text null,Sstat integer null)*/

    public String[] fetchAllDataFromtblAllSummary() {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT *  FROM tblAllSummary", null);
        try {
            String allData[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = 1;
                    allData[i] = (String) cursor.getString(0).toString().trim() + "^" + (String) cursor.getString(1).toString().trim() + "^" + (String) cursor.getString(2).toString().trim() + "^" + (String) cursor.getString(3).toString().trim();
                    //// System.out.println("Value inserting 231 fetching :"+allData[i]);
                    cursor.moveToNext();
                    // cursor.close();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return allData;
        } finally {
            cursor.close();
        }

    }




 /*private static final String DATABASE_CREATE_TABLE_163 = "create table tblStoreMaterialDetail" +
 		" (RouteID text null,StoreID text null,MaterialID text null,ExistStock integer null,ReturntoDistributor integer null," +
 		"FreshOrder integer null,DiscardDamage integer null,Sstat integer null);";*/

    public HashMap<String, String> getProductPicInfo(File[] fileImageName, String storeId, String TmpInvoiceCodePDA) {
        HashMap<String, String> pathForPhotoInfo = new HashMap<String, String>();//=null;
        //open();
        for (int position = 0; position < fileImageName.length; position++) {
            Cursor cur = db.rawQuery("Select PhotoName,ProductID,ReasonForReturn from tblStoreProductPhotoDetail where PhotoName = '" + fileImageName[position].getName().toString() + "' and StoreID = '" + storeId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    // System.out.println("System Value :"+cur.getString(0)+"="+ cur.getString(1)+"~"+cur.getString(2));
                    pathForPhotoInfo.put(cur.getString(0), cur.getString(1) + "~" + cur.getString(2));

                }

            }
        }

        return pathForPhotoInfo;
    }

    public long insertPhotoDetail(String storeId, String productId, String clickedDate, String photoName,
                                  String reasonForPhotoReturn, String photoValidation, String pdaPhotoPath, int Sstat, String OrderPDAID, String TmpInvoiceCodePDA) {

        //open();
        ContentValues initialValues = new ContentValues();
        // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat
        initialValues.put("StoreID", storeId.trim());
        initialValues.put("ProductID", productId.trim());
        initialValues.put("ClickedDateTime", clickedDate.trim());
        initialValues.put("PhotoName", photoName.trim());
        initialValues.put("ReasonForReturn", reasonForPhotoReturn.trim());

        initialValues.put("PhotoValidation", photoValidation.trim());
        initialValues.put("PDAPhotoPath", pdaPhotoPath.trim());
        initialValues.put("Sstat", Sstat);
        initialValues.put("OrderIDPDA", OrderPDAID);
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        long inserted = db.insert(DBHelper.DATABASE_TABLE_Main212, null, initialValues);
        //close();
        return inserted;
    }

    public long insertMaterialPhotoDetail(String storeId, String MaterialID, String clickedDate, String photoName,
                                          String reasonForPhotoReturn, String photoValidation, String pdaPhotoPath, int Sstat) {

        //open();

        String RouteID = GetActiveRouteID(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);
        ContentValues initialValues = new ContentValues();
        // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat
        initialValues.put("RouteID", RouteID.trim());
        initialValues.put("StoreID", storeId.trim());
        initialValues.put("MaterialID", MaterialID.trim());
        initialValues.put("ClickedDateTime", clickedDate.trim());
        initialValues.put("PhotoName", photoName.trim());

        initialValues.put("PhotoValidation", photoValidation.trim());
        initialValues.put("PDAPhotoPath", pdaPhotoPath.trim());
        initialValues.put("Sstat", Sstat);

        long inserted = db.insert(DBHelper.DATABASE_TABLE_Main164, null, initialValues);
        //close();
        return inserted;
    }

    public long insertStoreMaterialDetail(String storeId, String MaterialID, int ExistStock, int ReturntoDistributor,
                                          int FreshOrder, int DiscardDamage, int Sstat) {

        //open();

        String RouteID = GetActiveRouteID(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);
        ContentValues initialValues = new ContentValues();
        // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat
        initialValues.put("RouteID", RouteID.trim());
        initialValues.put("StoreID", storeId.trim());
        initialValues.put("MaterialID", MaterialID.trim());
        initialValues.put("ExistStock", ExistStock);
        initialValues.put("ReturntoDistributor", ReturntoDistributor);

        initialValues.put("FreshOrder", FreshOrder);
        initialValues.put("DiscardDamage", DiscardDamage);
        initialValues.put("Sstat", Sstat);

        long inserted = db.insert(DBHelper.DATABASE_TABLE_Main163, null, initialValues);
        //close();
        return inserted;
    }

    public void updatePhotoValidation(String validation, String imageNameToUpdate) {

        //open();
        final ContentValues values = new ContentValues();
        values.put("PhotoValidation", validation);
        int affected = db.update("tblStoreProductPhotoDetail", values, "PhotoName=?",
                new String[]{imageNameToUpdate});
        //close();

    }

    public void updatePhotoValidationMaterial(String validation, String imageNameToUpdate) {

        //open();
        final ContentValues values = new ContentValues();
        values.put("PhotoValidation", validation);
        int affected = db.update("tblStoreMaterialPhotoDetail", values, "PhotoName=?",
                new String[]{imageNameToUpdate});
        //close();

    }

    public String[] deletFromSDcCardPhotoValidation(String storeId) {

        String[] imageNameToBeDeleted = null;
        //open();

        Cursor cursor = db.rawQuery("SELECT  PhotoName from tblStoreProductPhotoDetail where StoreID='" + storeId + "'", null);
        try {
            if (cursor.getCount() > 0) {
                imageNameToBeDeleted = new String[cursor.getCount()];
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        imageNameToBeDeleted[i] = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }
            } else {
                imageNameToBeDeleted = new String[1];
                imageNameToBeDeleted[0] = "No Data";
            }
        } finally {
            cursor.close();
            //close();
        }


        //	Log.w(TAG, "affected records: " + affected);


        return imageNameToBeDeleted;
    }

    public long insertPhotoDetail(String storeId, String productId, String clickedDate, String photoName, String photoValidation, String pdaPhotoPath, String outstat) {

        ContentValues initialValues = new ContentValues();
        // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat
        initialValues.put("StoreID", storeId.trim());
        initialValues.put("ProductID", productId.trim());
        initialValues.put("ClickedDateTime", clickedDate.trim());
        initialValues.put("PhotoName", photoName.trim());
        initialValues.put("PhotoValidation", photoValidation.trim());
        initialValues.put("PDAPhotoPath", pdaPhotoPath.trim());
        initialValues.put("outstat", outstat.trim());


        return db.insert(DBHelper.DATABASE_TABLE_Main212, null, initialValues);
    }

    public long savetblStoreTypeMstr(int AutoIdStore, int StoreTypeID, String StoreTypeDescr) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("AutoIdStore", AutoIdStore);
        initialValues.put("StoreTypeID", StoreTypeID);
        initialValues.put("StoreTypeDescr", StoreTypeDescr.trim());

        //// System.out.println("Arjun data insert properly tblStoreTypeMstrr ");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN221, null, initialValues);
    }

    public String fetchStoreTypeDescrBasicOfStoreTypeID(int StoreTypeID) {

        int SnamecolumnIndex1 = 0;
        String LocIDDesc = "0";
        Cursor cursor = db.rawQuery("SELECT  StoreTypeDescr from tblStoreTypeMstr where StoreTypeID='" + StoreTypeID + "'", null);
        try {

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    LocIDDesc = (String) cursor.getString(SnamecolumnIndex1).toString().trim();

                    //// System.out.println("Fetching StoreTypeDescr:"+LocIDDesc);
                    cursor.moveToNext();
                }

            }
            return LocIDDesc;
        } finally {
            cursor.close();
        }


    }

    public long savetblTradeChannelMstr(int AutoIdStore, int TradeChannelID, String TradeChannelName) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("AutoIdStore", AutoIdStore);
        initialValues.put("TradeChannelID", TradeChannelID);
        initialValues.put("TradeChannelName", TradeChannelName.trim());

        //// System.out.println("Arjun data insert properly tblTradeChannelMstr ");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN223, null, initialValues);
    }

    public String[] fnGetAllTradeChannelNames() {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT TradeChannelName FROM tblTradeChannelMstr", null);
        try {
            String strStoreTypeNamesDetais[] = new String[cursor2.getCount() + 1];
            if (cursor2.getCount() == 0) {
                strStoreTypeNamesDetais[0] = "Please Select Trade Channel";
            }
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (i == 0) {
                        strStoreTypeNamesDetais[i] = "Please Select Trade Channel";
                    }
                    strStoreTypeNamesDetais[i + 1] = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            return strStoreTypeNamesDetais;
        } finally {
            cursor2.close();
        }

    }

    public String[] fnGetAllTradeChannelIDs() {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT TradeChannelID FROM tblTradeChannelMstr", null);
        try {
            String strStoreTypeIdsDetais[] = new String[cursor2.getCount() + 1];
            if (cursor2.getCount() == 0) {
                strStoreTypeIdsDetais[0] = "0";
            }
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (i == 0) {
                        strStoreTypeIdsDetais[i] = "0";
                    }
                    strStoreTypeIdsDetais[i + 1] = cursor2
                            .getString(LoncolumnIndex);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strStoreTypeIdsDetais;
        } finally {
            cursor2.close();
        }

    }

    // Start Fifth Table Working
    public long savetblStoreProductClassificationTypeListMstr(int AutoIdStore, int CategoryNodeID,
                                                              int CategoryNodeType, String Category, int ProductTypeNodeID, int ProductTypeNodeType, String ProductType, int IsCategorySeleted, int IsSubCategorySeleted, String SubCategoryValue) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("AutoIdStore", AutoIdStore);
        initialValues.put("CategoryNodeID", CategoryNodeID);
        initialValues.put("CategoryNodeType", CategoryNodeType);
        initialValues.put("Category", Category);
        initialValues.put("ProductTypeNodeID", ProductTypeNodeID);
        initialValues.put("ProductTypeNodeType", ProductTypeNodeType);
        initialValues.put("ProductType", ProductType);
        initialValues.put("IsCategorySeleted", IsCategorySeleted);
        initialValues.put("IsSubCategorySeleted", IsSubCategorySeleted);
        initialValues.put("SubCategoryValue", SubCategoryValue);

        //	// System.out.println("Arjun data insert properly StoreProductClassificationType ");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN222, null, initialValues);
    }

    public void fnCheckCategoryIds() {
        try {
            db.execSQL("UPDATE tblStoreProductClassificationTypeListMstr SET IsCategorySeleted=0");
            // // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    public void fnTickCheckCategoryId(int CatId) {
        try {
            db.execSQL("UPDATE tblStoreProductClassificationTypeListMstr SET IsCategorySeleted=1 where CategoryNodeID=" + CatId);
            // // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    public void funInsertDataStoreCategoryProductWise(String RouteID, String StoreID) {
        db.execSQL("INSERT INTO tblTemp (ProductType,RouteID,StoreID,CategoryNodeID,CategoryNodeType,Category,ProductTypeNodeID,ProductTypeNodeType,IsCategorySeleted,IsSubCategorySeleted,SubCategoryValue,Sstat) SELECT DISTINCT ProductType,'" + RouteID + "','" + StoreID + "',CategoryNodeID,CategoryNodeType,Category,ProductTypeNodeID,ProductTypeNodeType,IsCategorySeleted,IsSubCategorySeleted,ifnull(SubCategoryValue,'0'),1 FROM   tblStoreProductClassificationTypeListMstr where tblStoreProductClassificationTypeListMstr.IsCategorySeleted=1 and tblStoreProductClassificationTypeListMstr.IsSubCategorySeleted=1");
    }

    public void funResetMainTables() {
        db.execSQL("Update tblStoreProductClassificationTypeListMstr Set IsCategorySeleted=0");
        db.execSQL("Update tblStoreProductClassificationTypeListMstr Set IsSubCategorySeleted=0");
        db.execSQL("Update tblStoreProductClassificationTypeListMstr Set SubCategoryValue=''");
    }

    public void fnCheckUnCheckSubCategoryId(int CatId, int SubCatId, int SelectStatus) {
		/*try
        {*/
        db.execSQL("UPDATE tblStoreProductClassificationTypeListMstr SET IsSubCategorySeleted=" + SelectStatus + " where CategoryNodeID=" + CatId + " and ProductTypeNodeID=" + SubCatId);
        // // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
		/*}
      catch (Exception ex)
        {
			Log.e(TAG, ex.toString());
		}*/
    }

    public void fnUpdateSubCategoryValue(int CatId, int SubCatId, String SubCatValue) {
		/*try
        {*/
        db.execSQL("UPDATE tblStoreProductClassificationTypeListMstr SET SubCategoryValue='" + SubCatValue + "' where CategoryNodeID=" + CatId + " and ProductTypeNodeID=" + SubCatId);
        // // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
		/*}
      catch (Exception ex)
        {
			Log.e(TAG, ex.toString());
		}*/
    }

    public String[] fnGetAllSubCategoryNames(String CategoryNodeID) {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductType  FROM tblStoreProductClassificationTypeListMstr where CategoryNodeID='" + CategoryNodeID + "'", null);
        try {
            String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];
			/*if(cursor2.getCount()==0)
			{
				strStoreTypeNamesDetais[0]="Please select Store Product Classification";
			}*/
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
					/*if(i==0)
					{
						strStoreTypeNamesDetais[i]="Please select Store Product Classification";
					}*/
                    //strStoreTypeNamesDetais[i+1] = cursor2.getString(LoncolumnIndex);
                    strStoreTypeNamesDetais[i] = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            return strStoreTypeNamesDetais;
        } finally {
            cursor2.close();
        }

    }

    public String[] fnGetAllSubCategoryCheckStatus(String CategoryNodeID) {

        int LoncolumnIndex = 1;

        Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductType,IsSubCategorySeleted  FROM tblStoreProductClassificationTypeListMstr where CategoryNodeID=" + CategoryNodeID, null);
        try {
            String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];
			/*if(cursor2.getCount()==0)
			{
				strStoreTypeNamesDetais[0]="Please select Store Product Classification";
			}*/
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
					/*if(i==0)
					{
						strStoreTypeNamesDetais[i]="Please select Store Product Classification";
					}*/
                    //strStoreTypeNamesDetais[i+1] = cursor2.getString(LoncolumnIndex);
                    strStoreTypeNamesDetais[i] = cursor2.getString(LoncolumnIndex);

                    //	// System.out.println("Sunil SubCategory check  strStoreTypeNamesDetais[i] :"+strStoreTypeNamesDetais[i]);
                    cursor2.moveToNext();

                }

            }
            return strStoreTypeNamesDetais;
        } finally {
            cursor2.close();
        }

    }

    public String[] fnGetAllSubCategoryValues(String CategoryNodeID) {

        int LoncolumnIndex = 1;

        Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductType,SubCategoryValue  FROM tblStoreProductClassificationTypeListMstr where CategoryNodeID=" + CategoryNodeID, null);
        try {
            String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];
			/*if(cursor2.getCount()==0)
			{
				strStoreTypeNamesDetais[0]="Please select Store Product Classification";
			}*/
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
					/*if(i==0)
					{
						strStoreTypeNamesDetais[i]="Please select Store Product Classification";
					}*/
                    //strStoreTypeNamesDetais[i+1] = cursor2.getString(LoncolumnIndex);
                    strStoreTypeNamesDetais[i] = cursor2.getString(LoncolumnIndex);

                    //	// System.out.println("Sunil SubCategory check  strStoreTypeNamesDetais[i] :"+strStoreTypeNamesDetais[i]);
                    cursor2.moveToNext();

                }

            }
            return strStoreTypeNamesDetais;
        } finally {
            cursor2.close();
        }

    }

    public String[] fnGetAllSubCategoryIds(String CategoryNodeID) {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductTypeNodeID FROM tblStoreProductClassificationTypeListMstr where CategoryNodeID='" + CategoryNodeID + "'", null);
        try {
            String strStoreTypeIdsDetais[] = new String[cursor2.getCount()];
			/*if(cursor2.getCount()==0)
			{
				strStoreTypeIdsDetais[0]="0";
			}*/
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
					/*if(i==0)
					{
						strStoreTypeIdsDetais[i]="0";
					}*/
                    strStoreTypeIdsDetais[i] = cursor2
                            .getString(LoncolumnIndex);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strStoreTypeIdsDetais;
        } finally {
            cursor2.close();
        }

    }

    // End Second Table Working

    public String fetchStoreProductClassificationDescrBasicOfStoreProductClassificationID(int StoreProductClassificationID) {

        int SnamecolumnIndex1 = 0;
        String LocIDDesc = "0";
        Cursor cursor = db.rawQuery("SELECT  StoreProductClassificationDescr from tblStoreProductClassificationTypeListMstr where StoreProductClassificationID='" + StoreProductClassificationID + "'", null);
        try {

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    LocIDDesc = (String) cursor.getString(SnamecolumnIndex1).toString().trim();

                    //	// System.out.println("Fetching StoreTypeDescr:"+LocIDDesc);
                    cursor.moveToNext();
                }

            }
            return LocIDDesc;
        } finally {
            cursor.close();
        }


    }



    public String[] fnGetAllStoreProductClassificationTypeNames() {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT DISTINCT Category  FROM tblStoreProductClassificationTypeListMstr order by CategoryNodeID", null);
        try {
            String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];

            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStoreTypeNamesDetais[i] = cursor2.getString(LoncolumnIndex);
                    //// System.out.println("Abhiav Raj New :"+strStoreTypeNamesDetais[i]);
                    cursor2.moveToNext();

                }

            }
            return strStoreTypeNamesDetais;
        } finally {
            cursor2.close();
        }

    }

    public String[] fnGetAllStoreProductClassificationTypeIds() {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT DISTINCT CategoryNodeID FROM tblStoreProductClassificationTypeListMstr order by CategoryNodeID", null);
        try {
            String strStoreTypeIdsDetais[] = new String[cursor2.getCount()];

            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    strStoreTypeIdsDetais[i] = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            return strStoreTypeIdsDetais;
        } finally {
            cursor2.close();
        }

    }





    public String[] fnGetAllStoreTypeNames() {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT StoreTypeDescr FROM tblStoreTypeMstr", null);
        try {
            String strStoreTypeNamesDetais[] = new String[cursor2.getCount() + 1];
            if (cursor2.getCount() == 0) {
                strStoreTypeNamesDetais[0] = "Please Select Store Type";
            }
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (i == 0) {
                        strStoreTypeNamesDetais[i] = "Please Select Store Type";
                    }
                    strStoreTypeNamesDetais[i + 1] = cursor2.getString(LoncolumnIndex);

                    cursor2.moveToNext();

                }

            }
            return strStoreTypeNamesDetais;
        } finally {
            cursor2.close();
        }

    }






/*	public static void deletetblstoreMstrOnStoreIDBasis(String StoreID) {

		db.execSQL("DELETE FROM tblStoreList WHERE StoreID ='"+ StoreID +"'");
		db.execSQL("DELETE FROM tblNewStoreListEntries WHERE StoreID ='"+ StoreID +"'");

	}*/

    public String[] fnGetAllStoreTypeIds() {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT StoreTypeID FROM tblStoreTypeMstr", null);
        try {
            String strStoreTypeIdsDetais[] = new String[cursor2.getCount() + 1];
            if (cursor2.getCount() == 0) {
                strStoreTypeIdsDetais[0] = "0";
            }
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (i == 0) {
                        strStoreTypeIdsDetais[i] = "0";
                    }
                    strStoreTypeIdsDetais[i + 1] = cursor2.getString(LoncolumnIndex);
                    //	// System.out.println("Fetching tblStoreTypeMstr from tblStoreTypeMstr is Desc :"+strStoreTypeIdsDetais[i+1]);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strStoreTypeIdsDetais;
        } finally {
            cursor2.close();
        }

    }

    public void fnReleaseTableUnReuqiredData() {
        try {
            db.execSQL("Delete from tblTemp where Sstat=4");
            db.execSQL("Delete from tblNewStoreEntries where Sstat=4");
            //   // System.out.println("Anil Dangi SET flgTodayRoute= 0 :");
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public long savetblStoreMainAfterCountNUmberOfStore(String RouteID, String StoreID, String StoreName, String RetailerName, String emailID, String TinNo,
                                                        String RetailerContactNo, String StoreAddress, String StorePincode, String City, String KeyAccount, int TradeChannelID, int StoreTypeId,
                                                        int StoreCategoryId, int RetailSalesTypeId, int StorePotentialId, String StoreProductClassificationId,
                                                        String VisitStartTS, String Imei, String BatteryStatus, int Sstat, int CityId,
                                                        String ActualLatitude, String ActualLongitude, String Accuracy, String LocProvider) {

        long syncTIMESTAMP = System.currentTimeMillis();
        Date dateobj = new Date(syncTIMESTAMP);
        SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss", Locale.ENGLISH);
        String StampEndsTime = TimeUtils.getNetworkDateTime(mContext, TimeUtils.DATE_TIME_FORMAT);


        ContentValues initialValues = new ContentValues();

        initialValues.put("RouteID", RouteID);
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("StoreName", StoreName.trim());
        initialValues.put("RetailerName", RetailerName.trim());
        initialValues.put("emailID", emailID);
        initialValues.put("TinNo", TinNo);
        initialValues.put("RetailerContactNo", RetailerContactNo.trim());
        initialValues.put("StoreAddress", StoreAddress);
        initialValues.put("StorePincode", StorePincode);
        initialValues.put("City", City);
        initialValues.put("KeyAccount", KeyAccount);
        initialValues.put("TradeChannelID", TradeChannelID);

        initialValues.put("StoreAttrHierID", StoreTypeId);

        initialValues.put("StoreProductClassificationId", StoreProductClassificationId.trim());


        initialValues.put("ActualLatitude", ActualLatitude.trim());
        initialValues.put("ActualLongitude", ActualLongitude.trim());
        initialValues.put("LocProvider", LocProvider.trim());
        initialValues.put("Accuracy", Accuracy.trim());
        //initialValues.put("Accuracy", LocProvider.trim());
        //// System.out.println("DateTime fnDBKenya savetblStoreMainAfterCountNUmberOfStore = "+VisitStartTS);
        initialValues.put("VisitStartTS", VisitStartTS.trim());
        initialValues.put("VisitEndTS", StampEndsTime.trim());


        initialValues.put("Imei", Imei.trim());
        initialValues.put("BatteryStatus", BatteryStatus.trim());
        initialValues.put("Sstat", Sstat);
        initialValues.put("CityId", CityId);


        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        initialValues.put("AppVersion", DBHelper.DATABASE_VERSION);


        checkNumberOfStore++;

        //// System.out.println("Data insert Properly in DATABASE_TABLE_MAIN21");


        return db.insert(DBHelper.DATABASE_TABLE_MAIN21, null, initialValues);
    }

    public void deletetblstoreMstrOnStoreIDBasis(String StoreID) {

        db.execSQL("DELETE FROM tblStoreList WHERE StoreID ='" + StoreID + "'");
        db.execSQL("DELETE FROM tblNewAddedStoreLocationDetails WHERE StoreID ='" + StoreID + "'");
        db.execSQL("DELETE FROM tblNewStoreListEntries WHERE StoreID ='" + StoreID + "'");


    }
    public LinkedHashMap<String, String> fnGeStoreListAllBelowHundredMeter()
    {
        LinkedHashMap<String, String> hmapStoreLisMstr= new LinkedHashMap<>();

        try {
            Cursor cursor=null;

            cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode from tblPreAddedStores Where  DistanceNear < 100", null);



            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapStoreLisMstr.put((String) cursor.getString(0),(String) cursor.getString(1) +"~"+(String) cursor.getString(2) +"~"+(String) cursor.getString(3));
                        cursor.moveToNext();
                    }
                }
            }

        }
        catch (Exception e) {

        }
        finally
        {

            return hmapStoreLisMstr;
        }
    }

    public String fnGetOptionDescrFromtblOptionMstr(String QuestID,String AnsValue)
    {

        Cursor cursor =null;
        String DDlStringCity="";
        try
        {
           ;
            cursor= db.rawQuery("SELECT OptionDescr FROM tblGetPDAQuestOptionMstr WHERE  QuestID ='"+ QuestID.trim() + "' and OptID='"+AnsValue.trim()+"'", null);
            if (cursor.getCount() > 0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        DDlStringCity= cursor.getString(0).trim();

                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = "+e.toString());
        }
        finally {
            //cursor.close();


        }
        return DDlStringCity;
    }


    public void savetblStoreMain(String RouteID, String StoreID, String StoreName, String RetailerName, String emailID,
                                 String TinNo,
                                 String RetailerContactNo, String StoreAddress, String StorePincode, String City, String KeyAccount,
                                 int TradeChannelID, int StoreTypeId,
                                 int StoreCategoryId, int RetailSalesTypeId, int StorePotentialId, String StoreProductClassificationId,
                                 String VisitStartTS, String Imei, String BatteryStatus, int Sstat, int CityId, String ActualLatitude,
                                 String ActualLongitude, String Accuracy, String LocProvider, int IsNewStoreDataCompleteSaved,
                                 String fetchAddress, String PaymentStage, int flgHasQuote, int flgAllowQuotation,
                                 int flgSubmitFromQuotation, String flgGSTCapture, String flgGSTCompliance, String GSTNumber, int flgGSTRecordFromServer, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgRestart, int flgStoreOrder, String StoreCity, String StorePinCode, String StoreState, String DBR, String OwnerName, String StoreContactNo, String StoreCatType, int flgRuleTaxVal, int flgTransType, String mobileFnl, String SalesPersonName, String SalesPersonContactNo, int IsComposite, int StoreStateID, int StoreCityID,int slctdBeatNodeType) {

        int MaxAutoStore = 0;
        int cntTotStore = 0;
        cntTotStore = fnGetCountForNewStore();
        String strGetMaxIDForNewStore = "0";
        //String activeRid;
        //activeRid = GetActiveRouteID();
        if (cntTotStore > 0) {
            MaxAutoStore = fnGetMaxAutoStoreIncrementForNewStore();
            MaxAutoStore = MaxAutoStore + 1;
            strGetMaxIDForNewStore = fnGetMaxIdWithIncrementForNewStore(MaxAutoStore);
        } else {
            MaxAutoStore = 0;
            MaxAutoStore = MaxAutoStore + 1;

            strGetMaxIDForNewStore = "-000^" + (1) + "$" + MaxAutoStore;

        }

        if (!StoreID.equals("") && !StoreID.equals(null) && !StoreID.equals(0)) {

            String prevDate2Send = fnGetDateTimeString();//GetPrevDate();

            if (prevDate2Send.equals("") || prevDate2Send.equals("NA")) {
                long syncTIMESTAMP = System.currentTimeMillis();
                Date dateobj = new Date(syncTIMESTAMP);
                SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH);
                prevDate2Send = TimeUtils.getNetworkDateTime(mContext, TimeUtils.DATE_FORMAT);
            }

            //saveSOAPdataStoreList = DBR,flgRetailerCredit
            saveSOAPdataStoreListNewStore(StoreID, "" + StoreTypeId, StoreName, Double.parseDouble(ActualLatitude.trim()), Double.parseDouble(ActualLongitude.trim()), "", "", prevDate2Send, MaxAutoStore, Sstat, Accuracy.trim(), LocProvider.trim(), RouteID, BatteryStatus, IsNewStoreDataCompleteSaved, fetchAddress, PaymentStage, flgHasQuote, flgAllowQuotation, flgSubmitFromQuotation, flgGSTCapture, flgGSTCompliance, GSTNumber, flgGSTRecordFromServer, flgLocationServicesOnOff, flgGPSOnOff, flgNetworkOnOff, flgFusedOnOff, flgInternetOnOffWhileLocationTracking, flgRestart, flgStoreOrder, StoreCity, StorePinCode, StoreState, DBR, OwnerName, StoreContactNo, StoreCatType, flgRuleTaxVal, flgTransType, SalesPersonName, SalesPersonContactNo, IsComposite, StoreStateID, StoreCityID,slctdBeatNodeType); // in last parameter Fdate

            fnInsert_tblNewAddedStoreLocationDetails(StoreID, Sstat, ActualLatitude, ActualLongitude, prevDate2Send, LocProvider, Accuracy, BatteryStatus, flgLocationServicesOnOff, flgGPSOnOff, flgNetworkOnOff, flgFusedOnOff, flgInternetOnOffWhileLocationTracking);
        }


    }

    public int checkRouteIDExistInStoreListTable(int StoreRouteID) {

        Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblStoreList WHERE StoreRouteID=" + StoreRouteID, null);

        try {

            int check = 0;

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = 1;
                        cursor.moveToNext();
                    }
                }

            }
            return check;

        } finally {
            cursor.close();
        }

    }

    public int counttblForPDAGetLastVisitDate(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblPDAGetLastVisitDate WHERE StoreID ='" + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String fnGetVisitDateAndflgOrderFromtblForPDAGetLastVisitDate(String StoreID) {

        Cursor cursorE2 = db.rawQuery("SELECT VisitDate,flgOrder FROM tblPDAGetLastVisitDate WHERE StoreID ='"
                + StoreID + "'", null);
        String LastTransDate = "";
        int ScodecolumnIndex = 0;
        try {

            if (cursorE2.moveToFirst()) {

                for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                    LastTransDate = (String) cursorE2.getString(0).toString() + "^" + (String) cursorE2.getString(1).toString();
                    // // System.out.println("Sunil Jai Testing LastTransDate :"+LastTransDate);
                    cursorE2.moveToNext();
                }
            }
            return LastTransDate;
        } finally {
            cursorE2.close();
        }

    }

    public int counttblForPDAGetLastOrderDate(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblPDAGetLastOrderDate WHERE StoreID ='"
                + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String fnGettblForPDAGetLastOrderDate(String StoreID) {
        int ScodecolumnIndex = 0;

        Cursor cursorE2 = db.rawQuery("SELECT OrderDate,flgExecutionSummary FROM tblPDAGetLastOrderDate WHERE StoreID ='" + StoreID + "' Limit 1", null);
        String LastTransDate = "";

        try {

            if (cursorE2.moveToFirst()) {

                for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                    LastTransDate = (String) cursorE2.getString(0).toString() + "^" + (String) cursorE2.getString(1).toString();
                    cursorE2.moveToNext();
                }
            }
            return LastTransDate;
        } finally {
            cursorE2.close();
        }

    }

    public int counttblForPDAGetLastVisitDetails(String StoreID) {
        Cursor cursorE2 = db.rawQuery("select Count(*) from tblPDAGetLastVisitDetails WHERE StoreID ='" + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String[] fetchDateFromtblForPDAGetLastVisitDetails(String StoreID) {

        Cursor cursor = db
                .rawQuery("SELECT Date123 FROM tblPDAGetLastVisitDetails WHERE StoreID ='" + StoreID + "'", null);

        try {

            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString();

                        ////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String[] fetchAllDataFromtblForPDAGetLastVisitDetails(String StoreID) {

        Cursor cursor = db
                .rawQuery("SELECT SKUName, Stock, Order123, ExecutionQty FROM tblPDAGetLastVisitDetails WHERE StoreID ='" + StoreID + "'", null);

        try {

            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString()
                                + "^"
                                + (String) cursor.getString(1).toString()
                                + "^"
                                + (String) cursor.getString(2).toString()
                                + "^"
                                + (String) cursor.getString(3).toString();

                        ////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public HashMap<String, String> getProductPicInfoMaterial(File[] fileImageName, String storeId) {
        HashMap<String, String> pathForPhotoInfo = new HashMap<String, String>();//=null;
        //open();
        for (int position = 0; position < fileImageName.length; position++) {
            Cursor cur = db.rawQuery("Select PhotoName,MaterialID from tblStoreMaterialPhotoDetail where PhotoName = '" + fileImageName[position].getName().toString() + "' and StoreID = '" + storeId + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    // System.out.println("System Value :"+cur.getString(0)+"="+ cur.getString(1)+"~"+cur.getString(2));
                    pathForPhotoInfo.put(cur.getString(0), cur.getString(1));

                }

            }
        }

        // close();
        return pathForPhotoInfo;
    }

    public ArrayList<HashMap<String, String>> fetch_matID_ReturnData(String storeId) {
        // System.out.println("Abhinav Raj is 2");
        //open();
        ArrayList<HashMap<String, String>> totalProductDetail = new ArrayList<HashMap<String, String>>(4);

        HashMap<String, String> hmapMatIDExistingStock = new HashMap<String, String>();
        HashMap<String, String> hmapMatIDReturntoDistributor = new HashMap<String, String>();
        HashMap<String, String> hmapMatIDFreshOrder = new HashMap<String, String>();

        HashMap<String, String> hmapMatIDDiscardDamage = new HashMap<String, String>();




		    /*  private static final String DATABASE_CREATE_TABLE_163 = "create table tblStoreMaterialDetail " +
		      		"(RouteID text null,StoreID text null,MaterialID text null,ExistStock integer null," +
		      		"ReturntoDistributor integer null,FreshOrder integer null,DiscardDamage integer null,Sstat integer null);";*/

        //Cursor cursor = db.rawQuery("SELECT ProductID,CategoryID,ProductShortName FROM tblProductListMaster",null);
        Cursor cursor = db.rawQuery("SELECT MaterialID,ExistStock,ReturntoDistributor,FreshOrder,DiscardDamage FROM tblStoreMaterialDetail where StoreID='" + storeId + "'", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {
                        hmapMatIDExistingStock.put(cursor.getString(0), cursor.getString(1));

                        hmapMatIDReturntoDistributor.put(cursor.getString(0), cursor.getString(2));
                        hmapMatIDFreshOrder.put(cursor.getString(0), cursor.getString(3));
                        hmapMatIDDiscardDamage.put(cursor.getString(0), cursor.getString(4));
                        cursor.moveToNext();

                    }
                    totalProductDetail.add(0, hmapMatIDExistingStock);
                    totalProductDetail.add(1, hmapMatIDReturntoDistributor);
                    totalProductDetail.add(2, hmapMatIDFreshOrder);
                    totalProductDetail.add(3, hmapMatIDDiscardDamage);

                }
            }


            return totalProductDetail;
        } finally {
            cursor.close();

            // close();
        }


    }

    public int counttblForPDAGetLastOrderDetails(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblPDAGetLastOrderDetails WHERE StoreID ='"
                + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String[] fetchOrderDateFromtblForPDAGetLastOrderDetails(String StoreID) {

        Cursor cursor = db
                .rawQuery(
                        "SELECT OrderDate FROM tblPDAGetLastOrderDetails WHERE StoreID ='" + StoreID + "'", null);

        try {

            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString();

                        ////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

	/*SELECT DISTINCT Category, MAX(CreationDate)
	FROM MonitoringJob
	GROUP BY Category
	ORDER BY MAX(CreationDate) DESC, Category*/

    public String[] fetchAllDataFromtblForPDAGetLastOrderDetails(String StoreID) {

        Cursor cursor = db
                .rawQuery(
                        "SELECT PrdName, OrderQty, FreeQty, ExecutionQty FROM tblPDAGetLastOrderDetails WHERE StoreID ='" + StoreID + "'", null);

        try {

            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString()
                                + "^"
                                + (String) cursor.getString(1).toString()
                                + "^"
                                + (String) cursor.getString(2).toString()
                                + "^"
                                + (String) cursor.getString(3).toString();

                        ////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public int counttblspForPDAGetLastOrderDetails_TotalValues(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblPDAGetLastOrderDetailsTotalValues WHERE StoreID ='"
                + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String[] fetchAllDataFromtblspForPDAGetLastOrderDetails_TotalValues(String StoreID) {

        Cursor cursor = db
                .rawQuery(
                        "SELECT OrderValue,ExecutionValue FROM tblPDAGetLastOrderDetailsTotalValues WHERE StoreID ='" + StoreID + "'", null);

        try {

            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString()
                                + "_"
                                + (String) cursor.getString(1).toString();

                        ////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String[] fetchOrderDateFromtblForPDAGetExecutionSummary(String StoreID) {

        Cursor cursor = db
                .rawQuery(
                        "SELECT DISTINCT OrderDate FROM tblPDAGetExecutionSummary WHERE StoreID ='" + StoreID + "'", null);

        try {

            //// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
            String DateResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        DateResult[i] = (String) cursor.getString(0)
                                .toString();

                        // // System.out.println("Aajtak value DateResult :"+DateResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return DateResult;

        } finally {
            cursor.close();
        }

    }

    public int fnfetchMinNoOfSKUFromtblCouponMasterNewFormat() {


        Cursor cursorE2 = db.rawQuery(
                "SELECT MinNoOfSKU FROM tblCouponMasterNewFormat", null);

        //////////// // System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {
                for (int i = 0; i < cursorE2.getCount(); i++) {
                    if (!cursorE2.isNull(0)) {
                        chkI = Integer.parseInt(cursorE2.getString(0));
                    } else {
                        chkI = 0;
                    }
                    cursorE2.moveToNext();
                }

            }

        } finally {
            cursorE2.close();
        }
        //////////// // System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;

    }

    public Double fnfetchAdditionalAmountFromtblCouponSlabNewFormat() {

        Cursor cursorE2 = db.rawQuery(
                "SELECT AdditionalAmount FROM tblCouponSlabNewFormat", null);

        //////////// // System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
        Double chkI = 0.0;
        try {
            if (cursorE2.moveToFirst()) {
                for (int i = 0; i < cursorE2.getCount(); i++) {
                    if (!cursorE2.isNull(0)) {
                        chkI = Double.parseDouble((cursorE2.getString(0)));
                    } else {
                        chkI = 0.0;
                    }
                    cursorE2.moveToNext();
                }

            }

        } finally {
            cursorE2.close();
        }
        //////////// // System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;

    }

    public int countCouponNewFormatApplyOrNot(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT ProductID,flgMust,Qty FROM tblTempNewFormat WHERE flgMust=1 AND Qty>=MinQty_Value And StoreID='" + StoreID + "'", null);
        //Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblTempNewFormat WHERE (flgMust ="+1+" AND Qty>=MinQty_Value)", null);
        //Cursor cursorE2 = db.rawQuery("SELECT Qty,MinQty_Value FROM tblTempNewFormat WHERE flgMust = 1", null);
        //Cursor cursorE2 = db.rawQuery("SELECT Qty,MinQty_Value,flgMust FROM tblTempNewFormat", null);
        int chkI = 0;
        try {
            // // System.out.println("Sunil grater value getCount"+cursorE2.getCount());
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    chkI = 1;
					/*for (int i = 0; i < cursorE2.getCount(); i++)
					{


						// // System.out.println("Sunil grater value ProductID"+cursorE2.getString(0).toString());
						// // System.out.println("Sunil grater value flgMust"+cursorE2.getString(1).toString());
						// // System.out.println("Sunil grater value Qty"+cursorE2.getString(2).toString());
							cursorE2.moveToNext();

					}*/
                    cursorE2.moveToNext();
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public long fninsertPDAProductReturnDetails(int AutoReturnIdMstr,
                                                int AutoReturnIdDetails, String strProductId,
                                                String strProdReturnQty, Double ProdRate, Double ProdReturnValue,
                                                int proSingleAdjQty, Double proSingleAdjAmt, String CatId) {

        ContentValues initialValues = new ContentValues();

        //////////// // System.out.println("Saved AutoReturnIdMstr:" + AutoReturnIdMstr+ "Saved AutoReturnIdDetails:" + "" + AutoReturnIdDetails);

        String activeRid;
        activeRid = GetActiveRouteID(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);

        initialValues.put("AutoReturnDetailsId", AutoReturnIdDetails);
        initialValues.put("ReturnIdMstr", AutoReturnIdMstr);
        initialValues.put("ProductId", strProductId.trim());
        initialValues.put("ProdReturnQty", strProdReturnQty.trim());
        initialValues.put("ProdRate", ProdRate);
        initialValues.put("ProdReturnValue", ProdReturnValue);

        initialValues.put("AdjustReturnQty", proSingleAdjQty);
        initialValues.put("AdjustReturnValue", proSingleAdjAmt);


        initialValues.put("ProdReturnReason", " ");
        initialValues.put("ProdReturnReasonDescr", " ");
        initialValues.put("ProdLastOrderDate", " ");
        initialValues.put("ProdLastOrderQyt", " ");
        initialValues.put("CatId", CatId.trim());
        initialValues.put("RouteID", Integer.parseInt(activeRid));


        return db.insert(DBHelper.DATABASE_TABLE_MAIN20, null, initialValues);
    }

    public int fnCheckflgToShowCouponNewFormat() {


        Cursor cursorE2 = db.rawQuery(
                "SELECT CouponApplicable FROM tblCouponApplicableNewFormat", null);

        //////////// // System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {
                for (int i = 0; i < cursorE2.getCount(); i++) {
                    if (!cursorE2.isNull(0)) {
                        chkI = Integer.parseInt(cursorE2.getString(0));
                    } else {
                        chkI = 0;
                    }
                    cursorE2.moveToNext();
                }

            }

        } finally {
            cursorE2.close();
        }
        //////////// // System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;

    }

    public Double fnfetchMinInvoiceAmountFromtblCouponMasterNewFormat() {

        Cursor cursorE2 = db.rawQuery(
                "SELECT MinInvoiceAmount FROM tblCouponMasterNewFormat", null);

        //////////// // System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
        Double chkI = 0.0;
        try {
            if (cursorE2.moveToFirst()) {
                for (int i = 0; i < cursorE2.getCount(); i++) {
                    if (!cursorE2.isNull(0)) {
                        chkI = Double.parseDouble((cursorE2.getString(0)));
                    } else {
                        chkI = 0.0;
                    }
                    cursorE2.moveToNext();
                }

            }

        } finally {
            cursorE2.close();
        }
        //////////// // System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;

    }

    public String[] fetchProductIDFromtblForPDAGetExecutionSummary(String StoreID) {

        Cursor cursor = db
                .rawQuery(
                        "SELECT DISTINCT ProductID FROM tblPDAGetExecutionSummary WHERE StoreID ='" + StoreID + "'", null);

        try {

            //// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
            String DateResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        DateResult[i] = (String) cursor.getString(0)
                                .toString();

                        // // System.out.println("Aajtak value DateResult :"+DateResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return DateResult;

        } finally {
            cursor.close();
        }

    }

    public String[] fetchPrdNameFromtblForPDAGetExecutionSummary(String StoreID) {

        Cursor cursor = db
                .rawQuery(
                        "SELECT DISTINCT PrdName FROM tblPDAGetExecutionSummary WHERE StoreID ='" + StoreID + "'", null);

        try {

            //// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
            String DateResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        DateResult[i] = (String) cursor.getString(0)
                                .toString();

                        // // System.out.println("Aajtak value DateResult :"+DateResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return DateResult;

        } finally {
            cursor.close();
        }

    }

    public String[] fetchAllDataNewFromtbltblForPDAGetExecutionSummary(String StoreID, String OrderDate, String ProductID) {

        Cursor cursor = db
                .rawQuery(
                        "SELECT  OrderQty,ProductQty FROM tblPDAGetExecutionSummary WHERE StoreID ='" + StoreID.trim() + "' and OrderDate ='" + OrderDate.trim() + "' and ProductID ='" + ProductID.trim() + "'", null);

        try {

            //// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString()
                                + "_"
                                + (String) cursor.getString(1).toString();

                        ////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String[] fetchAllDataFromtbltblForPDAGetExecutionSummary(String StoreID) {

        Cursor cursor = db
                .rawQuery(
                        "SELECT PrdName, OrderQty, flgInvStatus, ProductQty FROM tblPDAGetExecutionSummary WHERE StoreID ='" + StoreID + "'", null);

        try {

            //// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString()
                                + "_"
                                + (String) cursor.getString(1).toString()
                                + "_"
                                + (String) cursor.getString(2).toString()
                                + "_"
                                + (String) cursor.getString(3).toString();

                        ////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String fetchNoti_textFromtblPDANotificationMaster() {

        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;

        Cursor cursor2 = db.rawQuery("SELECT MsgServerID,Noti_text  FROM tblPDANotificationMaster where Noti_NewOld=1 and Noti_ReadStatus=1", null);

        try {
            String UniqueProductShortName = "Null";

            if (cursor2.getCount() > 0) {

                if (cursor2.moveToFirst()) {

                    UniqueProductShortName = cursor2.getString(LoncolumnIndex).toString() + "_" + cursor2.getString(LoncolumnIndex1).toString();


                    cursor2.moveToNext();
                }

            }


            return UniqueProductShortName;
        } finally {
            cursor2.close();
        }
    }

    public void updatetblPDANotificationMaster(int MsgServerID, String Noti_text, int Noti_ReadStatus, String Noti_ReadDateTime, int Sstat) {

        final ContentValues values = new ContentValues();
        values.put("Noti_ReadStatus", Noti_ReadStatus);
        values.put("Noti_ReadDateTime", Noti_ReadDateTime.trim());
        values.put("Sstat", Sstat);


        int affected = db.update(DBHelper.TABLE_tblPDANotificationMaster_Define, values, "MsgServerID=?", new String[]{"" + MsgServerID});

        Log.w(TAG, "tblPDANotificationMaster Updated..");
    }

    public int countNoRowIntblPDANotificationMaster() {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblPDANotificationMaster", null);
        int chkI = 0;
        try {
            // // System.out.println("Sunil LastNitificationrList cursorE2.getCount() SerialNo : "+cursorE2.getCount());

            if (cursorE2.getCount() > 0) {
                cursorE2.moveToFirst();
                // // System.out.println("Sunil LastNitificationrList cursorE2.getCount() SerialNo value : "+cursorE2.getString(0).toString());

                chkI = Integer.parseInt(cursorE2.getString(0).toString());
            }


        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String[] LastNitificationrListDB() {

        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;

        Cursor cursor2 = db.rawQuery("SELECT Noti_DateTime,Noti_text  FROM tblPDANotificationMaster Order By SerialNo desc ", null);

        try {
            String UniqueProductShortName[] = new String[cursor2.getCount()];
            // // System.out.println("Sunil Prev Noti List cursor2.getCount() :"+cursor2.getCount());
            if (cursor2.getCount() > 0) {
                // // System.out.println("Sunil Prev Noti List H1:");
                if (cursor2.moveToFirst()) {
                    // // System.out.println("Sunil Prev Noti List H2:");
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        // // System.out.println("Sunil Prev Noti List H3:");
                        if (!cursor2.isNull(LoncolumnIndex)) {
                            // // System.out.println("Sunil Prev Noti List H4:");
                            UniqueProductShortName[i] = cursor2.getString(LoncolumnIndex).toString() + "_" + cursor2.getString(LoncolumnIndex1).toString();
                            // // System.out.println("Sunil Prev Noti List :"+UniqueProductShortName[i]);

                            cursor2.moveToNext();
                        }

                    }

                }
            }

            return UniqueProductShortName;
        } finally {
            cursor2.close();
        }
    }

    public void deletetblPDANotificationMasterOneRow(int SerialNo) {

        db.execSQL("DELETE FROM tblPDANotificationMaster WHERE SerialNo =" + SerialNo);
        for (int i = 0; i < 9; i++) {
            final ContentValues values = new ContentValues();
            values.put("SerialNo", i + 1);

            int affected = db.update(DBHelper.TABLE_tblPDANotificationMaster_Define, values, "SerialNo=?", new String[]{"" + (i + 2)});

        }

    }

    public void updateInvoiceButtonRecordsSyncd(String flag) {

        try {

            Log.w(TAG, "Updating Synced Records..");
            //String flag1="3";

            final ContentValues values = new ContentValues();
            values.put("Sstat", "4");
            int affected = db.update("tblInvoiceButtonTransac", values, "Sstat=?",
                    new String[]{flag});

            int affected1 = db.update("tblPendingInvoices", values, "Sstat=?",
                    new String[]{flag});



			/*db.execSQL("Update tblInvoiceButtonTransac Set Sstat=4 where Sstat=7");
			db.execSQL("Update tblPendingInvoices Set Sstat=4 where Sstat=7");*/


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public String fnGetPdaDate() {

        int LoncolumnIndex = 0;
        String strPDADate = "";
        Cursor cursor2 = db.rawQuery("SELECT PdaDate FROM tblPdaDate", null);

        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    strPDADate = cursor2.getString(LoncolumnIndex).toString();
                }
            }

            return strPDADate;
        } finally {
            cursor2.close();
        }
    }

    public String fnGetServerDate() {

        int LoncolumnIndex = 0;
        String strServerDate = "";
        Cursor cursor2 = db.rawQuery("SELECT ServerDate FROM tblAvailableVersion", null);

        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    strServerDate = cursor2.getString(LoncolumnIndex).toString();
                }
            }

            return strServerDate;
        } finally {
            cursor2.close();
        }
    }

    public long maintainPDADate() {
        db.execSQL("DELETE FROM tblPdaDate");
        Date pdaDate = new Date();
        SimpleDateFormat sdfPDaDate = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH);
        String fDatePda = TimeUtils.getNetworkDateTime(mContext, TimeUtils.DATE_FORMAT);
        ContentValues initialValues = new ContentValues();
        initialValues.put("PdaDate", fDatePda);

        return db.insert("tblPdaDate", null, initialValues);
    }

    public long maintainSplashPDADate() {
        db.execSQL("DELETE FROM tblPdaDate");
        Date pdaDate = new Date();
        SimpleDateFormat sdfPDaDate = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH);
        String fDatePda = TimeUtils.getNetworkDateTime(mContext, TimeUtils.DATE_FORMAT);
        ContentValues initialValues = new ContentValues();
        initialValues.put("PdaDate", fDatePda);

        return db.insert("tblPdaDate", null, initialValues);
    }

    public int fnCheckPdaDateExistOrNot() {

        int strReturnPDADateExistOrNot = 0;

        Cursor cursor2 = db.rawQuery("SELECT PdaDate FROM  tblPdaDate", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnPDADateExistOrNot = 1;
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strReturnPDADateExistOrNot;
        } finally {
            cursor2.close();
        }
    }

    public String[] fnGetStoreListForInvoice(String DistID, String RouteID, String ForDate) {
         /*  if(DistID.equals("null"))
           {
           	DistID="0";
           }
           if(RouteID.equals("null"))
           {
           	RouteID="0";
           }*/
        /*= cursor=db.rawQuery("SELECT StoreName || '(Distributor:' || DistName || ',Route:'|| RouteName ||',Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate AS SRDITag  from tblPendingInvoices Order BY StoreName", null);;
         */ // // System.out.println("Dangi new testing  DB DistID:"+DistID);
        // // System.out.println("Dangi new testing DB RouteID:"+RouteID);

        if (Integer.parseInt(DistID) != 0 && Integer.parseInt(RouteID) == 0 && ForDate.equals("")) {
            cursor = db.rawQuery("SELECT StoreName || '(Route:'|| RouteName || ',Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel from tblPendingInvoices Where DistId='" + DistID + "' and Sstat<>4  Order BY StoreName", null);
        } else if (Integer.parseInt(DistID) != 0 && Integer.parseInt(RouteID) != 0 && ForDate.equals("")) {
            cursor = db.rawQuery("SELECT StoreName || '(Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblPendingInvoices Where DistId='" + DistID + "' and RouteId='" + RouteID + "' and Sstat<>4  Order BY StoreName", null);
        } else if (Integer.parseInt(DistID) != 0 && Integer.parseInt(RouteID) != 0 && !ForDate.equals("")) {
            cursor = db.rawQuery("SELECT StoreName  AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblPendingInvoices Where DistId='" + DistID + "' and RouteId='" + RouteID + "' and InvoiceForDate='" + ForDate + "' and Sstat<>4 Order BY StoreName", null);
        } else if (Integer.parseInt(DistID) == 0 && Integer.parseInt(RouteID) != 0 && ForDate.equals("")) {
            cursor = db.rawQuery("SELECT StoreName || '(Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblPendingInvoices Where RouteId='" + RouteID + "' and Sstat<>4 Order BY StoreName", null);
        } else if (Integer.parseInt(DistID) == 0 && Integer.parseInt(RouteID) != 0 && !ForDate.equals("")) {
            cursor = db.rawQuery("SELECT StoreName  AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblPendingInvoices Where RouteId='" + RouteID + "' and InvoiceForDate='" + ForDate + "' and Sstat<>4 Order BY StoreName", null);
        } else if (Integer.parseInt(DistID) == 0 && Integer.parseInt(RouteID) == 0 && !ForDate.equals("")) {
            cursor = db.rawQuery("SELECT StoreName || '(Route:'|| RouteName ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblPendingInvoices Where InvoiceForDate='" + ForDate + "' and Sstat<>4 Order BY StoreName", null);
        } else if (Integer.parseInt(DistID) != 0 && Integer.parseInt(RouteID) == 0 && !ForDate.equals("")) {
            cursor = db.rawQuery("SELECT StoreName || '(Route:'|| RouteName ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblPendingInvoices Where DistId='" + DistID + "' and InvoiceForDate='" + ForDate + "' and Sstat<>4 Order BY StoreName", null);
        } else if (Integer.parseInt(DistID) == 0 && Integer.parseInt(RouteID) == 0 && ForDate.equals("")) {
            cursor = db.rawQuery("SELECT StoreName || '(Route:'|| RouteName ||',Date:'|| InvoiceForDate ||')' AS StoreList,StoreId||'_'||OrderID||'_'||RouteId||'_'||DistId||'_'||InvoiceForDate||'_'||Sstat||'_'||flgCancel AS SRDITag,Sstat,flgCancel As flgCancel  from tblPendingInvoices WHERE   Sstat<>4 Order BY StoreName", null);
        }

        try {
            String StoreInvoiceList[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        // // System.out.println("getDataListAdapter = "+cursor.getString(1));
                        StoreInvoiceList[i] = cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2) + "^" + cursor.getString(3);
                        cursor.moveToNext();
                    }
                }

            }

            return StoreInvoiceList;

        } finally {
            cursor.close();
        }

    }

    public String[] fnGetDistinctDistributorsID() {

        Cursor cursor = db.rawQuery("SELECT DISTINCT DistID from tblPendingInvoices Order BY DistId", null);

        try {
            String DistinctDistributorsID[] = new String[cursor.getCount() + 1];
            if (cursor.getCount() == 0) {
                DistinctDistributorsID[0] = "0";
            } else {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {
                        if (i == 0) {
                            DistinctDistributorsID[i] = "0";
                        }

                        DistinctDistributorsID[i + 1] = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }

            }
            return DistinctDistributorsID;

        } finally {
            cursor.close();
        }

    }

    public String[] fnGetDistinctDistributorsName() {
        Cursor cursor = db.rawQuery("SELECT DISTINCT DistName from tblPendingInvoices Order BY DistId", null);

        try {
            String DistinctDistributorsName[] = new String[cursor.getCount() + 1];
            if (cursor.getCount() == 0) {
                DistinctDistributorsName[0] = "Please Select Distributor";
            } else {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {
                        if (i == 0) {
                            DistinctDistributorsName[i] = "Please Select Distributor";
                        }

                        DistinctDistributorsName[i + 1] = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }


            }
            return DistinctDistributorsName;

        } finally {
            cursor.close();
        }

    }

	/*private static final String DATABASE_CREATE_TABLE_222 = "create table tblStoreProductClassificationTypeListMstr(AutoIdStore integer null," +
			"CategoryNodeID integer null,CategoryNodeType integer null, Category text null,ProductTypeNodeID integer null,ProductTypeNodeType integer null,ProductType text null,IsCategorySeleted int null,IsSubCategorySeleted int null,SubCategoryValue text null);";
*/

    public long saveInvoiceButtonStoreTransac(String IMEIno, String TransDate,
                                              String StoreID, String ProdID, String ProductShortName, Double ProductRate, int OrderQty,
                                              int DelQty, int FreeQty, String OrderID, String CatID, String Sstat, int flgCancel, Double DiscountVal, String RutID
            , String additionalDiscount, String CancelRemarks, String cancelReasonId, String InvNumber, String InvDate, String LineValue) {


        ContentValues initialValues = new ContentValues();

        initialValues.put("IMEIno", IMEIno.trim());
        initialValues.put("TransDate", TransDate.trim());
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("ProdID", ProdID.trim());
        initialValues.put("ProductShortName", ProductShortName.trim());
        initialValues.put("ProductPrice", ProductRate);
        initialValues.put("OrderQty", OrderQty);
        initialValues.put("DelQty", DelQty);
        initialValues.put("FreeQty", FreeQty);


        initialValues.put("Sstat", Sstat.trim());

        initialValues.put("RouteID", Integer.parseInt(RutID));
        initialValues.put("OrderID", OrderID.trim());
        initialValues.put("CatID", CatID.trim());
        initialValues.put("flgCancel", flgCancel);
        initialValues.put("DiscountVal", DiscountVal);
        initialValues.put("additionalDiscount", additionalDiscount);
        initialValues.put("CancelRemarks", CancelRemarks);
        initialValues.put("CancelReasonId", cancelReasonId);
        initialValues.put("InvNumber", InvNumber);
        initialValues.put("InvDate", InvDate);
        initialValues.put("LineValue", LineValue);
        //initialValues.put("CancelRemarks", CancelRemarks);

        //initialValues.put(Key_DisplayUnit, DisplayUnit);

        ////// // System.out.println("inserting saveStoreTransac records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN114, null, initialValues);
    }

    public String[] ProcessCancelStoreReq() {

        int LoncolumnIndex = 0;
        int LoncolumnIndex2 = 1;

        Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblPendingInvoices WHERE (Sstat=10) and Sstat<>4", null);
        //// // System.out.println("Nitish Invoice :"+cursor2.getCount());
        try {
            String strAreaIdsDetais[] = new String[cursor2.getCount()];

            ////// // System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());
            //// // System.out.println("Nitish Invoice 2 :"+cursor2.getCount());
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strAreaIdsDetais[i] = (String) cursor2.getString(LoncolumnIndex) + "%" + (String) cursor2.getString(LoncolumnIndex2);

                    ////// // System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
                    cursor2.moveToNext();
                }

            }
            return strAreaIdsDetais;
        } finally {

            cursor2.close();
        }

    }

    public int CheckNonSubmitDataIntblPendingInvoices() {

        int LoncolumnIndex = 0;
        int LoncolumnIndex2 = 1;

        Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblPendingInvoices WHERE (Sstat = 7 ) or (Sstat = 9 )  ", null);
        try {
            int check = 0;

            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    check = 1;
                    cursor2.moveToNext();
                }

            }
            return check;
        } finally {
            cursor2.close();
        }

    }

    public HashMap<String, String> FetchtblStoreProductClassificationType() {

        //open();
        Cursor cursor = db.rawQuery("SELECT ProductTypeNodeID,CategoryNodeID,CategoryNodeType,Category,ProductTypeNodeType,ProductType FROM tblStoreProductClassificationTypeListMstr", null);
        try {
            HashMap<String, String> SchemeIDFreePRodQtyDetails = new HashMap<String, String>();
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        SchemeIDFreePRodQtyDetails.put(cursor.getString(0).toString(), cursor.getString(1).toString() + "^" + cursor.getString(2).toString() + "^" + cursor.getString(3).toString() + "^" + cursor.getString(0).toString() + "^" + cursor.getString(4).toString() + "^" + cursor.getString(5).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return SchemeIDFreePRodQtyDetails;
        } finally {
            cursor.close();
            //close();
        }


    }

    public String[] ProcessConformStoreReq() {

        int LoncolumnIndex = 0;
        int LoncolumnIndex2 = 1;    //tblPendingInvoices

        Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblPendingInvoices WHERE (Sstat=10) and Sstat<>4", null);
        try {
            String strAreaIdsDetais[] = new String[cursor2.getCount()];

            ////// // System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());

            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strAreaIdsDetais[i] = (String) cursor2.getString(LoncolumnIndex) + "%" + (String) cursor2.getString(LoncolumnIndex2);

                    ////// // System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
                    cursor2.moveToNext();
                }

            }
            return strAreaIdsDetais;
        } finally {
            cursor2.close();
        }

    }

    public String[] fnGetDistinctRouteId(String DistId) {
        //String[] DistinctDistributorsID;
        Cursor cursor = db.rawQuery("SELECT DISTINCT RouteId from tblPendingInvoices Where DistId='" + DistId + "'  Order BY RouteId", null);

        try {
            String DistinctRouteId[] = new String[cursor.getCount() + 1];
            if (cursor.getCount() == 0) {
                DistinctRouteId[0] = "0";
            } else {
                if (cursor.getCount() > 0) {

                    if (cursor.moveToFirst()) {

                        for (int i = 0; i < cursor.getCount(); i++) {
                            if (cursor.getCount() == 0) {
                                DistinctRouteId[0] = "0";
                            }
                            DistinctRouteId[i + 1] = cursor.getString(0);
                            cursor.moveToNext();
                        }
                    }

                }
            }
            return DistinctRouteId;

        } finally {
            cursor.close();
        }

    }

    public String[] fnGetDistinctRouteName(String DistId) {
        //String[] DistinctDistributorsID;
        Cursor cursor = db.rawQuery("SELECT DISTINCT RouteName from tblPendingInvoices Where DistId='" + DistId + "'  Order BY RouteId", null);

        try {
            String DistinctRouteName[] = new String[cursor.getCount() + 1];
            if (cursor.getCount() == 0) {
                DistinctRouteName[0] = "Please Select Route";
            } else {


                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {
                        if (i == 0) {
                            DistinctRouteName[0] = "Please Select Route";
                        }
                        DistinctRouteName[i + 1] = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }


            }
            return DistinctRouteName;

        } finally {
            cursor.close();
        }

    }

    public void deleteOldInvoiceButtonStoreTransac(String sID2del) {
        // int entryCount;
        db.execSQL("DELETE FROM tblPendingInvoices WHERE StoreID ='" + sID2del + "'");


    }

    //public static void UpdateInvoiceButtonStoreFlag(String sID, int flag2set, String RouteId, String DistId, String Invdate,int flgCancel)
    public void UpdateInvoiceButtonStoreFlag(String sID, int flag2set, int flgCancel, String OrderID) {

        try {


            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            values.put("flgCancel", flgCancel);
            ////// // System.out.println("Updating Status for Store ID: " + sID);
            //int affected = db.update("tblPendingInvoices", values, "StoreID=? AND RouteId=? AND DistId=? AND InvoiceForDate=?",new String[] { sID,RouteId,DistId,Invdate });

            int affected = db.update("tblPendingInvoices", values, "StoreID=? AND OrderID=?", new String[]{sID, OrderID});

            //int affected2 = db.update("tblPendingInvoices", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
            //int affected1 = db.update("tblPendingInvoices", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void UpdatetblInvoiceButtonTransac(String sID, int flag2set, int flgCancel, String OrderID, String strReason, String idSelectedRsn) {

        try {


            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            values.put("flgCancel", flgCancel);

            values.put("CancelRemarks", strReason);
            values.put("CancelReasonId", idSelectedRsn);

            int affected1 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?", new String[]{sID, OrderID});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void deleteInvoiceRelatedTableEtrySavedData(String sID, String OrderID) {

        try {


            db.execSQL("DELETE FROM tblInvoiceButtonTransac WHERE StoreID='" + sID + "' and OrderID='" + OrderID + "'");


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void UpdateInvoiceButtonCancelStoreSynFlag(String sID, int flag2set, int flgCancel) {

        try {

            final ContentValues values = new ContentValues();
            // // System.out.println("After Sync Successful Sstat: " + flag2set);
            // // System.out.println("After Sync Successful flgCancel: " + flgCancel);
            values.put("Sstat", flag2set);
            values.put("flgCancel", flgCancel);

            int affected = db.update("tblPendingInvoices", values, "StoreID=?", new String[]{sID});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public String FetchPNameInvoice(String ProductId)
    //public static String FetchPNameInvoice()
    {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT ProductName FROM tblInvoiceExecutionProductList where ProductId='" + ProductId + "'", null);
        //Cursor cursor = db.rawQuery("SELECT ProductName FROM tblInvoiceExecutionProductList", null);

        try {
            String StoreName = "0";// = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName = (String) cursor.getString(ScodecolumnIndex)
                            .toString();
                    ////// // System.out.println("product short name :"+StoreName[i]);
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public String[] FetchCategoryIDfromInvoiceProduct() {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT CatID FROM tblProductWiseInvoice", null);
        try {
            String TaxRate[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                ////// // System.out.println("CategoryID Sunil Available");
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    TaxRate[i] = (String) cursor.getString(ScodecolumnIndex);
                    cursor.moveToNext();
                }
            }
            ////// // System.out.println("CategoryID Sunil: not");
            return TaxRate;
        } finally {
            cursor.close();
        }
    }

    public String[] FetchOrderQtyInvoice(String StoreID, String InvoiceForDate, String OrderID) {

        int ScodecolumnIndex = 0;


        Cursor cursor = db.rawQuery("SELECT OrderQty FROM tblProductWiseInvoice where StoreID='" + StoreID + "'  and OrderID='" + OrderID + "'", null);
        try {
            String StoreName[] = new String[cursor.getCount()];
            ;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex)
                            .toString();
                    // // System.out.println("Sunil data OrderQty FROM tblProductWiseInvoice: "+ StoreName[i]);
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public String[] FetchOrderDiscountInvoice(String StoreID, String InvoiceForDate, String OrderID) {

        int ScodecolumnIndex = 0;


        Cursor cursor = db.rawQuery("SELECT TotLineDiscVal FROM tblProductWiseInvoice where StoreID='" + StoreID + "'  and OrderID='" + OrderID + "'", null);
        try {
            String StoreName[] = new String[cursor.getCount()];
            ;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex)
                            .toString();
                    // // System.out.println("Sunil data OrderQty FROM tblProductWiseInvoice: "+ StoreName[i]);
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public String[] FetchOrderFreeQtyInvoice(String StoreID, String InvoiceForDate, String OrderID) {

        int ScodecolumnIndex = 0;


        Cursor cursor = db.rawQuery("SELECT Freeqty FROM tblProductWiseInvoice where StoreID='" + StoreID + "'  and OrderID='" + OrderID + "'", null);
        try {
            String StoreName[] = new String[cursor.getCount()];
            ;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex)
                            .toString();
                    // // System.out.println("Sunil data OrderQty FROM tblProductWiseInvoice: "+ StoreName[i]);
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public String[] FetchRateInvoice(String StoreID, String InvoiceForDate, String OrderID)
    //public static String[] FetchRateInvoice()
    {

        int ScodecolumnIndex = 0;


        Cursor cursor = db.rawQuery("SELECT ProductPrice FROM tblProductWiseInvoice where StoreID='" + StoreID + "' and OrderID='" + OrderID + "'", null);
        //Cursor cursor = db.rawQuery("SELECT ProductPrice FROM tblProductWiseInvoice",null);

        try {
            String StoreName[] = new String[cursor.getCount()];
            ;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex)
                            .toString();
                    // // System.out.println("Sunil data ProductPrice FROM tblProductWiseInvoice: "+ StoreName[i]);
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public String[] FetchPidInvoice(String StoreID, String InvoiceForDate, String OrderID)
    //public static String[] FetchPidInvoice()

    {
        int ScodecolumnIndex = 0;
        ////// // System.out.println("a");
        // // System.out.println("Sameer cursor StoreID :"+ StoreID);
        // // System.out.println("Sameer cursor InvoiceForDate :"+ InvoiceForDate);

        //Cursor cursor = db.rawQuery("SELECT ProductID FROM tblProductListMaster where CategoryID='"+CATID+"'",null);
        Cursor cursor = db.rawQuery("SELECT ProductId FROM tblProductWiseInvoice where StoreID='" + StoreID + "'  and OrderID='" + OrderID + "'", null);
        //Cursor cursor = db.rawQuery("SELECT ProductId FROM tblProductWiseInvoice",null);

        ////// // System.out.println("b");
        try {
            String ProductId[] = new String[cursor.getCount()];

            // // System.out.println("Sameer cursor count in DBAdapter1"+ cursor.getCount());
            ////// // System.out.println("c");
            if (cursor.moveToFirst()) {
                ////// // System.out.println("d");
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    ////// // System.out.println("e");
                    ProductId[i] = (String) cursor.getString(ScodecolumnIndex).toString();

                    // // System.out.println("Sunil data ProductID FROM tblProductWiseInvoice: "+ ProductId[i]);
                    cursor.moveToNext();
                }
            }
            ////// // System.out.println("f");
            return ProductId;
        } finally {
            cursor.close();
        }
    }

    public String FetchStoreNameBasedStoreID(String StoreID, String Data) {

        int ScodecolumnIndex = 0;
        int ScodecolumnIndex1 = 1;
        int ScodecolumnIndex2 = 2;

        Cursor cursor = db.rawQuery("SELECT StoreName,RouteName,InvoiceForDate FROM tblPendingInvoices where StoreID='" + StoreID + "' and InvoiceForDate='" + Data + "'", null);
        //Cursor cursor = db.rawQuery("SELECT ProductName FROM tblInvoiceExecutionProductList", null);

        try {
            String StoreName = "0";// = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName = (String) cursor.getString(ScodecolumnIndex)
                            .toString() + "(" + (String) cursor.getString(ScodecolumnIndex1)
                            .toString() + ")(" + (String) cursor.getString(ScodecolumnIndex2)
                            .toString() + ")";
                    ////// // System.out.println("product short name :"+StoreName[i]);
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public String FetchDistNameBasedDistID(String DistId) {

        int ScodecolumnIndex = 0;
// // System.out.println("Sanjay testing DistID :"+DistId);

        //Cursor cursor = db.rawQuery("SELECT DistName FROM tblPendingInvoices where DistId='"+DistId+"'", null);
        Cursor cursor = db.rawQuery("SELECT DistName FROM tblPendingInvoices where DistId='" + DistId + "'", null);
        try {
            String StoreName = "NA";// = new String[cursor.getCount()];
            // // System.out.println("Sanjay testing cursor.getCount() :"+cursor.getCount());
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName = (String) cursor.getString(ScodecolumnIndex)
                            .toString();
                    // // System.out.println("Sanjay testing StoreName :"+StoreName);
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public void inserttblPendingInvoices(List<TblPendingInvoices> tblPendingInvoicesData, HashMap<String, String> hmapInvoiceOrderIDandStatus)//String StoreID,String StoreName,String RouteID, //String RouteName,String DistID,String DistName,String InvoiceForDate,String flgSubmit,String IMEIno,String OrderID)

    {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblPendingInvoices tblPendingInvoicesDataData : tblPendingInvoicesData) {
            int flgToInsrtOrNot = 0;
            if (hmapInvoiceOrderIDandStatus.containsKey(tblPendingInvoicesDataData.getOrderID())) {
                if (hmapInvoiceOrderIDandStatus.get(tblPendingInvoicesDataData.getOrderID()).equals("4")) {

                } else {
                    flgToInsrtOrNot = 1;
                    fnDeletetblInvoiceSubmittedRecords(tblPendingInvoicesDataData.getOrderID());
                }
            } else {
                flgToInsrtOrNot = 1;
            }
            if (flgToInsrtOrNot == 1) {
                initialValues.put("StoreID", tblPendingInvoicesDataData.getStoreId());
                initialValues.put("StoreName", tblPendingInvoicesDataData.getStoreName());
                initialValues.put("RouteID", tblPendingInvoicesDataData.getRouteID());
                initialValues.put("RouteNodeType", tblPendingInvoicesDataData.getRouteNodeType());
                initialValues.put("RouteName", tblPendingInvoicesDataData.getRouteName());
                initialValues.put("DistID", tblPendingInvoicesDataData.getDistID());
                initialValues.put("DistName", tblPendingInvoicesDataData.getDistName());
                initialValues.put("InvoiceForDate", tblPendingInvoicesDataData.getInvoiceForDate());
                initialValues.put("flgSubmit", tblPendingInvoicesDataData.getFlgSubmit());
                initialValues.put("Sstat", 0);
                initialValues.put("IMEIno", CommonInfo.imei);
                initialValues.put("OrderID", "NA");
                initialValues.put("flgCancel", 0);
                initialValues.put("OrderID", tblPendingInvoicesDataData.getOrderID());
                initialValues.put("ServerOrdersFlg", 0);

                db.insert(DBHelper.DATABASE_TABLE_MAIN111, null, initialValues);
            }

        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }
	/*public static String getVersionNumber() {
		Cursor cursor = SQLiteDatabase.openOrCreateDatabase(":memory:", null).rawQuery("select sqlite_version() AS sqlite_version", null);
		String sqliteVersion = "";
		while(cursor.moveToNext()){
		   sqliteVersion += cursor.getString(0);
		}
		return sqliteVersion;

	}*/

    //imei,startTS,rID,getVersionNumber,DayEndFlg,ChangeRouteFlg

    public int getOverAllSampleQty(String sID2Fetch) {

        // id = getAllEntries();

        int SnamecolumnIndex1 = 0;
        int OverAllSampleQty = 0;
        // int Stock,int OrderQty, Double OrderVal, int FreeQty, Double DisVal

        Cursor cursor = db.rawQuery("SELECT Sum(SampleQuantity)  FROM tblTransac WHERE StoreID ='"
                + sID2Fetch + "'", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                        OverAllSampleQty = Integer.parseInt(cursor.getString(SnamecolumnIndex1).toString());

                        cursor.moveToNext();
                        // cursor.close();

                    }

                }
            }
            return OverAllSampleQty;
        } finally {
            cursor.close();
        }

    }

    public int counttblCountRoute() {
        Cursor cursorE2 = null;
        int chkI = 0;
        try {
            cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblRoutelist", null);
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }


        } catch (Exception ex) {

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        return chkI;
    }

    public long savetblAvailbUpdatedVersion(String VersionID, String VersionSerialNo, String VersionDownloadStatus, String ServerDate) {

        db.delete(DBHelper.TABLE_tblAvailableVersionMstr_Define, null, null);
        ContentValues initialValues = new ContentValues();

        initialValues.put("VersionID", VersionID.trim());
        initialValues.put("VersionSerialNo", VersionSerialNo.trim());
        initialValues.put("VersionDownloadStatus", VersionDownloadStatus.trim());
        initialValues.put("ServerDate", ServerDate.trim());
        return db.insert(DBHelper.TABLE_tblAvailableVersionMstr_Define, null, initialValues);
    }

    public String FetchInvoiceButtonSstat1(String StoreID, String OrderID)
    //public static String[] FetchInvoiceButtonStoreStatus()
    {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Sstat FROM tblPendingInvoices WHERE StoreID ='" + StoreID.trim() + "' and  OrderID ='" + OrderID.trim() + "'", null);
        //Cursor cursor = db.rawQuery("SELECT Sstat FROM tblPendingInvoices", null);
        // // System.out.println("Arjun cursor.getCount() :"+cursor.getCount());
        try {
            String StoreName = "0";// new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName = (String) cursor.getString(ScodecolumnIndex).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public String FetchInvoiceButtonSstat(String StoreID, String OrderID)
    //public static String[] FetchInvoiceButtonStoreStatus()
    {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Sstat FROM tblInvoiceButtonTransac WHERE StoreID ='" + StoreID.trim() + "' and  OrderID ='" + OrderID.trim() + "'", null);
        //Cursor cursor = db.rawQuery("SELECT Sstat FROM tblPendingInvoices", null);
        // // System.out.println("Arjun cursor.getCount() :"+cursor.getCount());
        try {
            String StoreName = "0";// new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName = (String) cursor.getString(ScodecolumnIndex).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public String[] fngetDistictOrderIdsForSubmission()
    //public static String[] FetchInvoiceButtonStoreStatus()
    {

        int ScodecolumnIndex = 0;
        //open();
        Cursor cursor = db.rawQuery("SELECT DISTINCT OrderID FROM tblInvoiceButtonTransac  order by OrderID Desc", null);
        //Cursor cursor = db.rawQuery("SELECT Sstat FROM tblPendingInvoices", null);
        // // System.out.println("Arjun cursor.getCount() :"+cursor.getCount());
        try {
            String[] StoreName = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
            //close();
        }
    }

    public void UpdateTblDayStartEndDetails(int rID, int btnClickFlg) {//btnClickFlg=1(clicked on Day End) , btnClickFlg=1(clicked on ChangeRoute)

        final ContentValues values = new ContentValues();
        long syncTIMESTAMP = System.currentTimeMillis();
        Date dateobj = new Date(syncTIMESTAMP);
        SimpleDateFormat df = new SimpleDateFormat(
                "dd-MMM-yyyy HH:mm:ss", Locale.ENGLISH);
        String EndTS = TimeUtils.getNetworkDateTime(mContext, TimeUtils.DATE_TIME_FORMAT);
        values.put("EndTime", EndTS);
        if (btnClickFlg == 1) {
            values.put("DayEndFlag", 1);
            values.put("ChangeRouteFlg", 0);
        }
        if (btnClickFlg == 2) {
            values.put("DayEndFlag", 0);
            values.put("ChangeRouteFlg", 1);
        }
        int cycleId = fetchtblVanCycleId();
        if (cycleId != -1) {
            values.put("CycleId", String.valueOf(cycleId));
            int affected = db.update("tblDayStartEndDetails", values, "RouteID=?",
                    new String[]{"" + rID});
        } else {
            values.put("CycleId", "0");
            int affected = db.update("tblDayStartEndDetails", values, "RouteID=?",
                    new String[]{"" + rID});
        }


        //Log.w(TAG, "affected records: " + affected);

        Log.w(TAG, "UpdatetblDayStartEndDetails Updated..");
    }

    public long insertTblDayStartEndDetails(String imei, String startTS, String rID, int DayEndFlg, int ChangeRouteFlg, String ForDate, String strAppVersionID, int dayEndButtonOrCycleEnd)//,int AppVersionID//, String getVersionNumber
    {
        db.execSQL("DELETE FROM tblDayStartEndDetails");
        ContentValues initialValues = new ContentValues();


        initialValues.put("IMEINo", imei);
        initialValues.put("SyncTime", startTS.trim());
        initialValues.put("RouteID", rID);
        //initialValues.put("VersionNo", getVersionNumber.trim());
        initialValues.put("DayEndFlag", DayEndFlg);
        initialValues.put("ChangeRouteFlg", ChangeRouteFlg);
        initialValues.put("ForDate", ForDate);
        //initialValues.put("AppVersionID", AppVersionID);
        initialValues.put("AppVersionID", strAppVersionID.trim());
        initialValues.put("dayEndButtonOrCycleEnd", dayEndButtonOrCycleEnd);
        initialValues.put("Sstat", 3);

     /*   initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));*/

        //initialValues.put("StoreID", StoreID);

        //initialValues.put("Sstat", 0);

        ////// // System.out.println("inserting records in Details  TblDayStartEndDetails..");
        ////// // System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN12, null, initialValues);
    }

    public int FetchVersionDownloadStatus() {
        int SnamecolumnIndex1 = 0;
        int CatId = 0;

        Cursor cursor = db.rawQuery("SELECT VersionDownloadStatus from tblAvailableVersion", null);
        try {
            //String OldDateInfo[] = new String[cursor.getCount() ];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    //CatId = cursor.getString(SnamecolumnIndex1).toString();
                    String abc = (String) cursor.getString(SnamecolumnIndex1).toString();
                    CatId = Integer.parseInt(abc);
                    cursor.moveToNext();
                }

            }
            return CatId;
        } finally {
            cursor.close();
        }

    }

    public long inserttblFirstOrderDetailsOnLastVisitDetailsActivity(String StoreID, String Date, String SKUID, int OrderQty, String FreeQty,
                                                                     int Stock, String SKUName) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("Date", Date.trim());
        initialValues.put("SKUID", SKUID);
        initialValues.put("OrderQty", OrderQty);
        initialValues.put("FreeQty", FreeQty.trim());
        initialValues.put("Stock", Stock);
        initialValues.put("SKUName", SKUName);

        //// // System.out.println("Aaaj insert  value table 101");
        //// // System.out.println("Ashish and Anuj insert  value table 101 : "+SKUName);

        return db.insert(DBHelper.DATABASE_TABLE_MAIN101, null, initialValues);
    }

    public long inserttblSecondVisitDetailsOnLastVisitDetailsActivity(String StoreID, String Date, String SKUID, int OrderQty, String SKUName) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("Date", Date.trim());
        initialValues.put("SKUID", SKUID);
        initialValues.put("OrderQty", OrderQty);
        initialValues.put("SKUName", SKUName.trim());


        //// // System.out.println("Aaaj insert  value table 102");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN102, null, initialValues);
    }

    public String fnGettblFirstOrderDetailsOnLastVisitDetailsActivity(String StoreID) {
        int ScodecolumnIndex = 0;

        Cursor cursorE2 = db.rawQuery("SELECT Date FROM tblFirstOrderDetailsOnLastVisitDetailsActivity WHERE StoreID ='" + StoreID + "' Limit 1", null);
        String LastTransDate = "";

        try {

            if (cursorE2.moveToFirst()) {

                for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                    LastTransDate = (String) cursorE2.getString(
                            ScodecolumnIndex).toString();
                    cursorE2.moveToNext();
                }
            }
            return LastTransDate;
        } finally {
            cursorE2.close();
        }

    }

    public String[] fetchAllDataFromtblFirstOrderDetailsOnLastVisitDetailsActivity(String strStoreID) {
		/*StoreID text null, " +
		"Date string null,SKUID text  null,OrderQty integer null,FreeQty integer null,Stock integer null,SKUName text null);";
		*/
        Cursor cursor = db
                .rawQuery(
                        "SELECT SKUName, Stock, OrderQty, FreeQty FROM tblFirstOrderDetailsOnLastVisitDetailsActivity WHERE StoreID ='" + strStoreID + "'", null);

        try {

            //// // System.out.println("Aajtak value CompleteResult coung:"+cursor.getCount());
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString()
                                + "_"
                                + (String) cursor.getString(1).toString()
                                + "_"
                                + (String) cursor.getString(2).toString()
                                + "_"
                                + (String) cursor.getString(3).toString();

                        ////// // System.out.println("Aajtak value CompleteResult :"+CompleteResult[i]);
                        //// // System.out.println("Ashish and Anuj CompleteResult[i] : "+CompleteResult[i]);


                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public int counttblSecondVisitDetailsOnLastVisitDetailsActivity(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblSecondVisitDetailsOnLastVisitDetailsActivity WHERE StoreID ='"
                + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String fnGettblSecondVisitDetailsOnLastVisitDetailsActivity(String StoreID) {

        Cursor cursorE2 = db.rawQuery("SELECT Date FROM tblSecondVisitDetailsOnLastVisitDetailsActivity WHERE StoreID ='"
                + StoreID + "'", null);
        String LastTransDate = "";
        int ScodecolumnIndex = 0;
        try {

            if (cursorE2.moveToFirst()) {

                for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                    LastTransDate = (String) cursorE2.getString(
                            ScodecolumnIndex).toString();
                    cursorE2.moveToNext();
                }
            }
            return LastTransDate;
        } finally {
            cursorE2.close();
        }

    }

    public String[] fetchtblSecondVisitDetailsOnLastVisitDetailsActivity(String sID2Fetch) {

        // id = getAllEntries();

        int SnamecolumnIndex1 = 0;
        int SnamecolumnIndex2 = 1;

        Cursor cursor = db
                .rawQuery(
                        "SELECT SKUName, OrderQty  FROM tblSecondVisitDetailsOnLastVisitDetailsActivity WHERE StoreID ='"
                                + sID2Fetch + "'", null);
        try {

            String ProductTarget[] = new String[cursor.getCount()];
            ;

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    ProductTarget[i] = (String) cursor.getString(
                            SnamecolumnIndex1).toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex2)
                            .toString();

                    cursor.moveToNext();
                    // cursor.close();

                }

            }
            return ProductTarget;
        } finally {
            cursor.close();
        }

    }

    // ---opens the database---
	/*public static AppDataSource open() throws SQLException {
		db = DBHelper.getWritableDatabase();
		return this;
	}
*/
    // ---closes the database---
	/*public static void close() {
		DBHelper.close();
	}*/

    public void truncateAllSummaryDataTable() {
        db.execSQL("DELETE FROM tblAllSummary");

    }

    public void reTruncateRouteTbl() {
        db.execSQL("DELETE FROM tblRouteListMaster");
        //db.execSQL("DELETE FROM tblAvailableVersion");
    }
    public void reTruncateRouteListTbl() {
        db.execSQL("DELETE FROM tblRoutelist");
        //db.execSQL("DELETE FROM tblAvailableVersion");
    }
    public void reCreateDB() {
        sPref = mContext.getSharedPreferences(CommonInfo.Preference, MODE_PRIVATE);
        Editor editor = sPref.edit();
        editor.clear();
        editor.commit();

        sharedPrefReport = mContext.getSharedPreferences("Report", MODE_PRIVATE);
        Editor editorReport = sharedPrefReport.edit();
        editorReport.clear();
        editorReport.commit();

        SplashScreen.sPrefVanStockChanged = mContext.getSharedPreferences(CommonInfo.sPrefVanLoadedUnloaded, 0);
        Editor editorVanStockChanged = SplashScreen.sPrefVanStockChanged.edit();
        editorVanStockChanged.clear();
        editorVanStockChanged.commit();

        SharedPreferences sPrefAttandance;
        sPrefAttandance=mContext.getSharedPreferences(CommonInfo.AttandancePreference, MODE_PRIVATE);

        SharedPreferences.Editor editorAttendance=sPrefAttandance.edit();
        editorAttendance.clear();
        editorAttendance.commit();

        db.execSQL("DELETE FROM "+DBHelper.DATABASE_TABLE_tblStoreImageList+"");
        db.execSQL("DELETE FROM tblJointVisitMstr");
        db.execSQL("DELETE FROM tblJointVisitDetails");
        db.execSQL("DELETE FROM tblRoutelist");
        db.execSQL("DELETE FROM tblStoreEdit");
        db.execSQL("DELETE FROM tblStoreEditImages");
        db.execSQL("DELETE FROM  tblProductADDONScheme");
        db.execSQL("DELETE FROM  tblReasonOrderCncl");
        db.execSQL("DELETE FROM tblExecutionImages");
        db.execSQL("DELETE FROM tblSuplierDetail");

        db.execSQL("DELETE FROM tblAllServicesCalledSuccessfull");
        db.execSQL("DELETE FROM tblStoreOrderVisitDayActivity");
        db.execSQL("DELETE FROM  tblCollectionReportCashChange");
        db.execSQL("DELETE FROM  tblCollectionReportChequeChange");

        db.execSQL("DELETE FROM  tblStoreCheckInPic");

        db.execSQL("DELETE FROM  tblActualVisitStock");
        db.execSQL("DELETE FROM tblAttandanceDetails");
        db.execSQL("DELETE FROM tblInvoiceDetails");
        db.execSQL("DELETE FROM tblTmpInvoiceHeader");
        db.execSQL("DELETE FROM tblStoreVisitMstr");
        db.execSQL("DELETE FROM tblInvoiceHeader");
        db.execSQL("DELETE FROM tblStockUploadedStatus");
        db.execSQL("DELETE FROM tblCycleID");
        db.execSQL("DELETE FROM tblStockConfirm");

        db.execSQL("DELETE FROM tblVanProductStock");
        db.execSQL("DELETE FROM tblVanProductAdjStock");
        db.execSQL("DELETE FROM tblTmpDistributorStock");

        db.execSQL("DELETE FROM tblAllCollectionData");

        db.execSQL("DELETE FROM tblDayCheckIn");
        db.execSQL("DELETE FROM tblPriceApplyType");
        db.execSQL("DELETE FROM tblInvoiceCaption");
        db.execSQL("DELETE FROM tblLastOutstanding");
        db.execSQL("DELETE FROM tblInvoiceLastVisitDetails");
        db.execSQL("DELETE FROM tblStockConfirm");
        db.execSQL("DELETE FROM tblStoreList");
        db.execSQL("DELETE FROM tblNewAddedStoreLocationDetails");
        // db.execSQL("DELETE FROM tblProductListMaster");
        db.execSQL("DELETE FROM tblProductSegementMap");
        db.execSQL("DELETE FROM tblCategoryMaster");

        db.execSQL("DELETE FROM tblVisibilityMstr");
        db.execSQL("DELETE FROM tblVisibilityDetails");


        db.execSQL("DELETE FROM tblNewStoreListEntries");
        db.execSQL("DELETE FROM tblPDALastInvoiceDet");
        db.execSQL("DELETE FROM tblPDATargetQtyForSecondPage");
        db.execSQL("DELETE FROM tblPDAProductReturnMstr");
        db.execSQL("DELETE FROM tblPDAProductReturnDetails");

        db.execSQL("DELETE FROM tblTransac");
        db.execSQL("DELETE FROM tblTmpInvoiceHeader");
        db.execSQL("DELETE FROM tblStoreProductMap");
        db.execSQL("DELETE FROM tblSchemeList");
        db.execSQL("DELETE FROM tblSchemeDetails");
        db.execSQL("DELETE FROM tblschemeStoreTypeMap");
        db.execSQL("DELETE FROM tblschemeProductMap");
        db.execSQL("DELETE FROM tblspForPDASchemeApplicableList");
        db.execSQL("DELETE FROM tblPDAIsSchemeApplicable");
        db.execSQL("DELETE FROM tblLastTransactionDetails");
        db.execSQL("DELETE FROM tblPDALastTranDateForSecondPage");
        db.execSQL("DELETE FROM tblStorTypeMstr");
        db.execSQL("DELETE FROM tblSyncSummuryDetails");

        db.execSQL("DELETE FROM tblSyncSummuryForProductDetails");
        db.execSQL("DELETE FROM tblStrachApplicableOnScheme");
        db.execSQL("DELETE FROM tblStrachOnSchemeDetails");
        db.execSQL("DELETE FROM tblOutLetInfoOnQuadVolumeCategoryBasis");
        db.execSQL("DELETE FROM tblSelectedStoreIDinChangeRouteCase");
        db.execSQL("DELETE FROM tblSysVisitID");
        db.execSQL("DELETE FROM tblDaySummaryNew");

        db.execSQL("DELETE FROM tblFirstOrderDetailsOnLastVisitDetailsActivity");
        db.execSQL("DELETE FROM tblSecondVisitDetailsOnLastVisitDetailsActivity");
        db.execSQL("DELETE FROM tblPDAGetLODQty");


        //db.execSQL("DELETE FROM tblPendingInvoices");
        db.execSQL("DELETE FROM tblInvoiceExecutionProductList");
        //db.execSQL("DELETE FROM tblProductWiseInvoice");
        //db.execSQL("DELETE FROM tblInvoiceButtonTransac");

        db.execSQL("DELETE FROM  tblPDAGetLastVisitDate");
        db.execSQL("DELETE FROM  tblPDAGetLastOrderDate");
        db.execSQL("DELETE FROM  tblPDAGetLastVisitDetails");
        db.execSQL("DELETE FROM  tblPDAGetLastOrderDetails");
        db.execSQL("DELETE FROM  tblPDAGetLastOrderDetailsTotalValues");
        db.execSQL("DELETE FROM  tblPDAGetExecutionSummary");
        db.execSQL("DELETE FROM  tblStoreSchemeFreeProQtyOtherDetails");


        db.execSQL("DELETE FROM  tblSchemeStoreMapping");
        db.execSQL("DELETE FROM  tblSchemeMstr");
        db.execSQL("DELETE FROM  tblSchemeSlabDetail");
        db.execSQL("DELETE FROM  tblSchemeSlabBucketDetails");
        db.execSQL("DELETE FROM  tblSchemeSlabBucketProductMapping");
        db.execSQL("DELETE FROM  tblSchemeSlabBenefitsBucketDetails");
        db.execSQL("DELETE FROM  tblSchemeSlabBenefitsProductMappingDetail");
        db.execSQL("DELETE FROM  tblSchemeSlabBenefitsValueDetail");
        db.execSQL("DELETE FROM  tblProductRelatedScheme");
        db.execSQL("DELETE FROM  tblTmpInvoiceDetails");
        db.execSQL("DELETE FROM  tblStoreProductAppliedSchemesBenifitsRecords");

        db.execSQL("DELETE FROM  tblStoreProductPhotoDetail");
        db.execSQL("DELETE FROM  tblStoreReturnDetail");


        db.execSQL("DELETE FROM  tblAlrtVal");
        db.execSQL("DELETE FROM  tblProductMappedWithSchemeSlabApplied");

        db.execSQL("DELETE FROM tblPOSMaterialMstr");
        db.execSQL("DELETE FROM tblStoreIDAndMaterialIDMap");
        db.execSQL("DELETE FROM  tblStoreMaterialDetail");
        db.execSQL("DELETE FROM  tblStoreMaterialPhotoDetail");


        Log.w(TAG, "Table re-creation completed..");
    }

    public void refreshDataFromDB() {
        //db.execSQL("DELETE FROM tblProductListMaster");
        //db.execSQL("DELETE FROM tblPDAProductReturnMstr");
        //db.execSQL("DELETE FROM tblStoreProductMap");
        //db.execSQL("DELETE FROM tblSchemeList");
        //db.execSQL("DELETE FROM tblSchemeDetails");

        //db.execSQL("DELETE FROM tblschemeProductMap");
        //db.execSQL("DELETE FROM tblspForPDASchemeApplicableList");
        //db.execSQL("DELETE FROM tblLastTransactionDetails");
        //db.execSQL("DELETE FROM tblPDALastTranDateForSecondPage");
        //db.execSQL("DELETE FROM tblSyncSummuryForProductDetails");

    }

    public void Delete_tblProductList_for_refreshData() {
        db.execSQL("DELETE FROM tblProductListMaster");
        db.execSQL("DELETE FROM tblProductSegementMap");
        db.execSQL("DELETE FROM tblPriceApplyType");
        db.execSQL("Delete From tblUOMMaster");
        db.execSQL("Delete From tblUOMMapping");
    }

    public void Delete_tblLastOutstanding_for_refreshData() {
        db.execSQL("DELETE FROM tblLastOutstanding");
        db.execSQL("DELETE FROM tblInvoiceLastVisitDetails");

    }

    //
    public void Delete_tblCategory_for_refreshData() {
        db.execSQL("DELETE FROM tblCategoryMaster");
    }

    public void Delete_tblStore_for_refreshData() {
        db.execSQL("DELETE FROM tblStoreList");
    }

    public void Delete_tblStore_for_refreshDataButNotNewStore() {
        db.execSQL("DELETE FROM tblStoreList");// where ISNewStore<>1
        db.execSQL("DELETE FROM tblNewAddedStoreLocationDetails where Sstat=4");
    }

    public void Delete_tblMaterialAndStoreIDMap() {
        db.execSQL("DELETE FROM tblPOSMaterialMstr");

        db.execSQL("DELETE FROM tblStoreIDAndMaterialIDMap");
    }

    public void Delete_tblStoreProductMap_for_refreshData() {
        db.execSQL("DELETE FROM tblSchemeStoreMapping");

        db.execSQL("DELETE FROM tblSchemeMstr");

        db.execSQL("DELETE FROM tblSchemeSlabDetail");

        db.execSQL("DELETE FROM tblSchemeSlabBucketDetails");

        db.execSQL("DELETE FROM tblSchemeSlabBucketProductMapping");

        db.execSQL("DELETE FROM tblSchemeSlabBenefitsBucketDetails");

        db.execSQL("DELETE FROM tblSchemeSlabBenefitsProductMappingDetail");

        db.execSQL("DELETE FROM tblSchemeSlabBenefitsValueDetail");

        db.execSQL("DELETE FROM tblProductRelatedScheme");

        db.execSQL("DELETE FROM tblProductADDONScheme");
    }

    public void Delete_tblSchemeList_for_refreshData() {
        db.execSQL("DELETE FROM tblSchemeList");
    }

    public void Delete_tblSchemeDetails_for_refreshData() {
        db.execSQL("DELETE FROM tblLastTransactionDetails");
    }

    public void Delete_tblschemeProductMap_for_refreshData() {
        db.execSQL("DELETE FROM tblschemeProductMap");
    }

    public void Delete_tblspForPDASchemeApplicableList_for_refreshData() {
        db.execSQL("DELETE FROM tblspForPDASchemeApplicableList");
    }

    public void Delete_tblLastTransactionDetails_for_refreshData() {
        db.execSQL("DELETE FROM tblLastTransactionDetails");
    }

    public void Delete_tblPDALastTranDateForSecondPage_for_refreshData() {

        db.execSQL("DELETE FROM tblPDALastTranDateForSecondPage");
    }

    public void Delete_tblSyncSummuryForProductDetails_for_refreshData() {
        db.execSQL("DELETE FROM tblSyncSummuryForProductDetails");
    }

    public boolean doesDatabaseExist(ContextWrapper context, String dbName) {
        File dbFile = context.getDatabasePath(dbName);

        return dbFile.exists();
    }

    public void dropAvailbUpdatedVersionTBL() {
        db.execSQL("DROP TABLE IF EXISTS tblAvailableVersion");

    }

    public void createAvailbUpdatedVersionTBL() {
        try {
            db.execSQL(DBHelper.TABLE_tblAvailableVersionMstr_Definition);
        } catch (Exception e) {

        }

    }

    public long insertTblDaySummaryNew(int TargetCalls, int ActualCallOnRoute, int ActualCallOffRoute, int ProdCallOnRoute, int ProdCallOffRoute, Double TargetSalesForDay, Double TotalSalesForDay, int CallsRemaining, Double TargetSalesMTD, Double AchievedSalesMTD, int ProdStoresMTD, Double RunRate) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("TargetCalls", TargetCalls);
        initialValues.put("ActualCallOnRoute", ActualCallOnRoute);
        initialValues.put("ActualCallOffRoute", ActualCallOffRoute);
        initialValues.put("ProdCallOnRoute", ProdCallOnRoute);
        initialValues.put("ProdCallOffRoute", ProdCallOffRoute);
        initialValues.put("TargetSalesForDay", TargetSalesForDay);
        initialValues.put("TotalSalesForDay", TotalSalesForDay);
        initialValues.put("CallsRemaining", CallsRemaining);
        initialValues.put("TargetSalesMTD", TargetSalesMTD);
        initialValues.put("AchievedSalesMTD", AchievedSalesMTD);
        initialValues.put("ProdStoresMTD", ProdStoresMTD);
        initialValues.put("RunRate", RunRate);
        return db.insert(DBHelper.DATABASE_TABLE_SummaryDayTableSummaryNew, null, initialValues);
    }

    public int getTargetCall() {
        int LoncolumnIndex = 0;
        int TargetCall = 0;


        Cursor cursor2 = db.rawQuery("SELECT TargetCalls FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {

                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            if (Integer.parseInt(cursor2.getString(LoncolumnIndex).toString()) > 0) {
                                TargetCall = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                                ////// // System.out.println("Summary Target Call :"+TargetCall);
                            }

                            //TotSalesValueStoreBasis =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }


                    }

                }
            }

            return TargetCall;
        } finally {
            cursor2.close();
        }
    }



    public int fnGetActualCallOnRouteFromSummaryTable()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
    {

        int LoncolumnIndex = 0;
        int ActualCall = 0;
        Cursor cursor2 = db.rawQuery("SELECT ActualCallOnRoute FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            ActualCall = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return ActualCall;
        } finally {
            cursor2.close();
        }
    }

    public int fnGetActualCallOffRouteFromSummaryTable()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
    {

        int LoncolumnIndex = 0;
        int ActualCall = 0;
        Cursor cursor2 = db.rawQuery("SELECT ActualCallOffRoute FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            ActualCall = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return ActualCall;
        } finally {
            cursor2.close();
        }
    }

    public int fnGetProductiveCallOnRoute()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
    {

        int LoncolumnIndex = 0;
        int ProductiveCall = 0;
        Cursor cursor2 = db.rawQuery("SELECT ProdCallOnRoute FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            ProductiveCall = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return ProductiveCall;
        } finally {
            cursor2.close();
        }
    }

    public int fnGetProductiveCallOffRoute()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
    {

        int LoncolumnIndex = 0;
        int ProductiveCall = 0;
        Cursor cursor2 = db.rawQuery("SELECT ProdCallOffRoute FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            ProductiveCall = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return ProductiveCall;
        } finally {
            cursor2.close();
        }
    }

    public int fnGetActualCallOnOffRoute()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
    {

        int LoncolumnIndex = 0;
        int ActualCall = 0;
        Cursor cursor2 = db.rawQuery("SELECT Count(StoreID) FROM tblTmpInvoiceHeader", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            ActualCall = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return ActualCall;
        } finally {
            cursor2.close();
        }
    }

    public int fnGetProductiveCallOnOffRoute()//If fnChkFlgTodayRoute=1 it will get added to Productive Call On Route Else get Added in Off Route
    {

        int LoncolumnIndex = 0;
        int ActualProductiveCall = 0;
        Double TotInvoiceValCall = 0.00;
        Cursor cursor2 = db.rawQuery("SELECT Count(StoreID) FROM tblTmpInvoiceHeader where InvoiceVal>" + TotInvoiceValCall, null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            ActualProductiveCall = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return ActualProductiveCall;
        } finally {
            cursor2.close();
        }
    }

    public double fnGetTargetSalesforDayRoute() {
        int LoncolumnIndex = 0;
        Double TargetSalesForDay = 0.00;
        Cursor cursor2 = db.rawQuery("SELECT TargetSalesForDay FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            TargetSalesForDay = Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return TargetSalesForDay;
        } finally {
            cursor2.close();
        }
    }

    public double fnGetTotalSalesforDay() {

        int LoncolumnIndex = 0;
        Double TotalSalesForDay = fnGetTotalSalesforDayRouteFromtblSummaryNew();// 0.00;
        String TotalSalesInvoice = fnGetTotalSales();
        ////// // System.out.println("Abhinav Raj Summary New TotSalesValue from function now: "+TotalSalesInvoice);
        Double OverAllSalesForDay = 0.00;
        Double ckk11 = Double.parseDouble(TotalSalesInvoice.replace(",", ""));
        //// // System.out.println("Abhinav Raj Summary New ckk11 from function now: "+ckk11);
        //// // System.out.println("Abhinav Raj Summary New OverAllSalesForDay from function now: "+TotalSalesForDay);

        OverAllSalesForDay = TotalSalesForDay + ckk11;


        //// // System.out.println("Abhinav Raj Summary New OverAllSalesForDay from function now: "+OverAllSalesForDay);
        //OverAllSalesForDay=Double.parseDouble(new DecimalFormat("##.##").format(OverAllSalesForDay));
        //OverAllSalesForDay=Double.parseDouble(decimalFormat.format(OverAllSalesForDay));
        ////// // System.out.println("Abhinav Raj Summary New OverAllSalesForDay from function 2 now: "+OverAllSalesForDay);
        return OverAllSalesForDay;

    }

    public double fnGetTotalSalesforDayRouteFromtblSummaryNew() {
        int LoncolumnIndex = 0;
        Double TotalSalesForDay = 0.00;
        Cursor cursor2 = db.rawQuery("SELECT TotalSalesForDay FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            TotalSalesForDay = Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
                            ////// System.out.println("Abhinav Raj Summary New TotalSalesForDay from function: "+TotalSalesForDay);
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return TotalSalesForDay;
        } finally {
            cursor2.close();
        }
    }

    public double fnGetTargetSalesMTDforDayRouteFromtblSummaryNew() {
        int LoncolumnIndex = 0;
        Double TotalSalesForDay = 0.00;
        Cursor cursor2 = db.rawQuery("SELECT TargetSalesMTD FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            TotalSalesForDay = Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return TotalSalesForDay;
        } finally {
            cursor2.close();
        }
    }

    public double fnGetAchivedSalesMTDforDayRouteFromtblSummaryNew() {
        int LoncolumnIndex = 0;
        Double TotalSalesForDay = 0.00;
        Cursor cursor2 = db.rawQuery("SELECT AchievedSalesMTD FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            TotalSalesForDay = Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
							/*////// System.out.println("Abhinav Raj Summary New TotalSalesForDay from function what 1 now: "+TotalSalesForDay);
							TotalSalesForDay=Double.parseDouble(decimalFormat.format(TotalSalesForDay));
							////// System.out.println("Abhinav Raj Summary New TotalSalesForDay from function what 2 now: "+TotalSalesForDay);*/
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return TotalSalesForDay;
        } finally {
            cursor2.close();
        }
    }

    public double fnGetOverAllAchivedSalesMTD() {

        int LoncolumnIndex = 0;
        Double TotalSalesForDay = fnGetAchivedSalesMTDforDayRouteFromtblSummaryNew();// 0.00;
        String TotalSalesInvoice = fnGetTotalSales();
        Double OverAchivedSalesForDay = 0.00;
        Double chk11 = Double.parseDouble(TotalSalesInvoice);
        OverAchivedSalesForDay = TotalSalesForDay + chk11;
        //Sval= Double.parseDouble(new DecimalFormat("##.##").format(Sval));
        //OverAchivedSalesForDay=Double.parseDouble(decimalFormat.format(OverAchivedSalesForDay));
        //OverAchivedSalesForDay=Double.parseDouble(new DecimalFormat("###.##").format(OverAchivedSalesForDay));
        ////// System.out.println("Abhinav Raj Summary New What 3 OverAchivedSalesForDay:"+OverAchivedSalesForDay);
        return OverAchivedSalesForDay;

    }

    public int fnGetProdStoresMTD() {

        int LoncolumnIndex = 0;
        int ProdStoresMTD = 0;
        Cursor cursor2 = db.rawQuery("SELECT ProdStoresMTD FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            ProdStoresMTD = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return ProdStoresMTD;
        } finally {
            cursor2.close();
        }
    }

    public double fnGetRunRate() {

        int LoncolumnIndex = 0;
        Double RunRate = 0.00;
        Cursor cursor2 = db.rawQuery("SELECT RunRate FROM tblDaySummaryNew", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(LoncolumnIndex)) {
                            RunRate = Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return RunRate;
        } finally {
            cursor2.close();
        }
    }

    public HashMap<String, String> fetchHmapInvoiceOrderIDandStatus() {

        HashMap<String, String> hmapOrderIDandClickStatus = new HashMap<String, String>();
        //open();
        Cursor cursor = db.rawQuery("SELECT OrderID,Sstat FROM tblPendingInvoices", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {
                        hmapOrderIDandClickStatus.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapOrderIDandClickStatus;
        } finally {
            cursor.close();
            // close();
        }

    }

    public String[] fnGetServerOrdersFlgWith1() {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT OrderID  FROM tblPendingInvoices Where ServerOrdersFlg=1", null);
        try {
            String allData[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = 1;
                    allData[i] = (String) cursor.getString(0).toString().trim();
                    //// System.out.println("Value inserting 231 fetching :"+allData[i]);
                    cursor.moveToNext();
                    // cursor.close();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return allData;
        } finally {
            cursor.close();
        }
    }

    public void fnDeletetblInvoiceExecutionProductList() {
        try {
            db.execSQL("DELETE FROM tblInvoiceExecutionProductList");
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void fnAllServerOrdersFlgWith0() {
        try {
            //open();
            db.execSQL("Update tblPendingInvoices Set ServerOrdersFlg=1 where ServerOrdersFlg=0");
            // close();

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void fnDeleteUnWantedSubmitedInvoiceOrders() {
        try {
            String[] arrOrdersServerOrdersFlg = fnGetServerOrdersFlgWith1();
            if (arrOrdersServerOrdersFlg.length > 0) {
                for (int i = 0; i < arrOrdersServerOrdersFlg.length; i++) {
                    db.execSQL("Delete from tblPendingInvoices where OrderID='" + arrOrdersServerOrdersFlg[i] + "'");
                    db.execSQL("Delete from tblProductWiseInvoice where OrderID='" + arrOrdersServerOrdersFlg[i] + "'");
                    db.execSQL("Delete from tblInvoiceButtonTransac where OrderID='" + arrOrdersServerOrdersFlg[i] + "'");
                }
            }

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void fnDeletetblInvoiceSubmittedRecords(String OrderID) {
        try {
            db.execSQL("Delete from tblPendingInvoices where OrderID='" + OrderID + "'");
            db.execSQL("Delete from tblProductWiseInvoice where OrderID='" + OrderID + "'");
            db.execSQL("Delete from tblInvoiceButtonTransac where OrderID='" + OrderID + "'");
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void reTruncateInvoiceButtonTable() {
        db.execSQL("DELETE FROM tblPendingInvoices");
        //db.execSQL("DELETE FROM tblInvoiceExecutionProductList");
        db.execSQL("DELETE FROM tblProductWiseInvoice");
        db.execSQL("DELETE FROM tblInvoiceButtonTransac");
    }

    public int counttblCatagoryMstr() {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblCategoryMaster", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    /*	public static int fnChkStoreIdExistInDaySumaryTbl(String StrID)//On Store Selection VisitStart Activity
	{
		int flgChkStatus=0;

		int LoncolumnIndex = 0;


		Cursor cursor2 = db.rawQuery("SELECT StoreID FROM  tblDaySummary where StoreID='"+ StrID + "'", null);
		try {


			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst()) {

					for (int i = 0; i < cursor2.getCount(); i++) {
						flgChkStatus = 1;
						cursor2.moveToNext();
						// cursor.close();
					}

				}
			}
			return flgChkStatus;
		} finally {
			cursor2.close();
		}
	}

	public static long fnInsertStoreIfNotExistIntblDaySummary(String StrID)//On Store Selection VisitStart Activity/Add Store Activity
	{
		//This function will get called if fnChkStoreIdExistInDaySumaryTbl returns 0.

		ContentValues initialValues = new ContentValues();


		initialValues.put("StoreID", StrID);
		initialValues.put("flgTarget", 0);
		initialValues.put("flgActualVisited", 0);
		initialValues.put("flgProductiveDay", 0);
		initialValues.put("flgProductiveMTD", 0);
		initialValues.put("DaySales", 0.00);
		initialValues.put("MTDSales", 0.00);

		//////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_Summarytable, null, initialValues);

	}

	public static void updatePDAStoreFlgActualVisitIntblDaySummary(String StrID) //On Store Selection VisitStart Activity
	{
		final ContentValues values = new ContentValues();
		values.put("flgActualVisited", 1);

		int affected = db.update(DATABASE_TABLE_Summarytable, values,"StoreID=?", new String[] { StrID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}

	public static void updatePDAStoreFlgProductiveDayVisitIntblDaySummary(String StrID,int flgProductiveDay,int flgProductiveMTD)
	{
		final ContentValues values = new ContentValues();
		values.put("flgProductiveDay", flgProductiveDay);
		values.put("flgProductiveMTD", flgProductiveMTD);

		int affected = db.update(DATABASE_TABLE_Summarytable, values,"StoreID=?", new String[] { StrID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}
	public static void updatePDAStoreProductiveDaySalesIntblDaySummary(String StrID,Double DaySales)
	{
		final ContentValues values = new ContentValues();
		values.put("DaySales", DaySales);


		int affected = db.update(DATABASE_TABLE_Summarytable, values,"StoreID=?", new String[] { StrID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}
	public static void updatePDAStoreProductiveMTDSalesIntblDaySummary(String StrID,Double MTDSales)
	{
		final ContentValues values = new ContentValues();
		values.put("MTDSales", MTDSales);


		int affected = db.update(DATABASE_TABLE_Summarytable, values,"StoreID=?", new String[] { StrID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreStartVisit Updated..");
	}
	public static void fnChkStoreInvoiceUpdateProductiveFlgsAndSales(String StrID)//On Order Activity --Submit, Save, Save Exit
	{//TotInv=is the total invoice on activity create method will be one time when ever the Order Activity Starts
		//This should be done before deleting transaction table
		String flgChkStoreInvoiceStatusAmount="";
		flgChkStoreInvoiceStatusAmount=fnGetStoreBasiscTotalSalesForSummarytbl(StrID);
		if(Integer.parseInt(flgChkStoreInvoiceStatusAmount.split("^")[0])==1)//1= Means Sales is greater then 0
		{
			updatePDAStoreFlgProductiveDayVisitIntblDaySummary(StrID,1,1);
		}
		if(Integer.parseInt(flgChkStoreInvoiceStatusAmount.split("^")[0])==0)
		{
			updatePDAStoreFlgProductiveDayVisitIntblDaySummary(StrID,0,0);
		}
		updatePDAStoreProductiveDaySalesIntblDaySummary(StrID,0.00);
		String storeMTDSales="0.00";
		storeMTDSales=fnGetStoreBasiscMTDSalesInSummarytbl(StrID);
		Double dblTotInv=Double.parseDouble(decimalFormat.format(flgChkStoreInvoiceStatusAmount.split("^")[1]));
		Double dblstoreMTDSales=Double.parseDouble(decimalFormat.format(storeMTDSales));
		dblstoreMTDSales=dblstoreMTDSales-dblTotInv;
		dblstoreMTDSales=Double.parseDouble(decimalFormat.format(dblstoreMTDSales));
		updatePDAStoreProductiveMTDSalesIntblDaySummary(StrID,dblstoreMTDSales);
	}
	public static void fnUpdatetblSumrySalesColumn(String StrID)
	{//This will called after the Saving insertion of records in Transaction table
		String StoreNewTotInvoice="";
		StoreNewTotInvoice=fnGetStoreBasiscTotalSalesForSummarytbl(StrID);
		if(Integer.parseInt(StoreNewTotInvoice.split("^")[0])==1)//1= Means Sales is greater then 0
		{
			Double dblTotInv=Double.parseDouble(decimalFormat.format(StoreNewTotInvoice.split("^")[1]));
			updatePDAStoreProductiveDaySalesIntblDaySummary(StrID,dblTotInv);
			String storeMTDSales="0.00";
			storeMTDSales=fnGetStoreBasiscMTDSalesInSummarytbl(StrID);
			Double dblstoreMTDSales=Double.parseDouble(decimalFormat.format(storeMTDSales));
			dblstoreMTDSales=dblstoreMTDSales+dblTotInv;
			dblstoreMTDSales=Double.parseDouble(decimalFormat.format(dblstoreMTDSales));
			updatePDAStoreProductiveMTDSalesIntblDaySummary(StrID,dblstoreMTDSales);
		}


	}
	public static String fnGetStoreBasiscMTDSalesInSummarytbl(String StrID)
	{

		int LoncolumnIndex = 0;
		String TotMTDSalesStore = "0.00";


		Cursor cursor2 = db.rawQuery("SELECT MTDSales FROM tblDaySummary where StoreID'"+StrID+"'", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst())
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{

						if (!cursor2.isNull(LoncolumnIndex))
						{
							if(Integer.parseInt(cursor2.getString(LoncolumnIndex).toString())>0)
							{
								TotMTDSalesStore =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
							}

							//TotSalesValueStoreBasis =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
							cursor2.moveToNext();
						}


					}

				}
			}
			else
			{
				TotMTDSalesStore ="0.00";
				cursor2.moveToNext();
			}
			return TotMTDSalesStore;
		} finally {
			cursor2.close();
		}

	}

	public static String fnGetStoreBasiscTotalSalesForSummarytbl(String StrID)
	{
		int LoncolumnIndex = 0;
		String TotSalesValueStoreBasis = "0^0.00";


		Cursor cursor2 = db.rawQuery("SELECT SUM(InvoiceVal) FROM tblTmpInvoiceHeader where StoreID'"+StrID+"'", null);
		try {
			if(cursor2.getCount()>0)
			{
				if (cursor2.moveToFirst())
				{

					for (int i = 0; i < cursor2.getCount(); i++)
					{

						if (!cursor2.isNull(LoncolumnIndex))
						{
							if(Integer.parseInt(cursor2.getString(LoncolumnIndex).toString())>0)
							{
								TotSalesValueStoreBasis ="1^"+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
							}

							//TotSalesValueStoreBasis =""+ Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
							cursor2.moveToNext();
						}


					}

				}
			}
			else
			{
				TotSalesValueStoreBasis ="0^0.00";

			}
			return TotSalesValueStoreBasis;
		} finally {
			cursor2.close();
		}
	}


	public static String fnGetSummaryTargetCalls()//TargetCalls For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {

					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	public static String fnGetActualCallsOnRoute()//ActualCallsOnRoute For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=1 and flgActualVisited=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {

					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}

	public static String fnGetActualCallsOffRoute()//ActualCallsOffRoute For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=0 and flgActualVisited=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {

					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	public static String fnGetProductiveCallsOnRoute()//ProductiveCallsOnRoute For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=1 and flgActualVisited=1 and flgProductiveDay=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {

					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	public static String fnGetProductiveCallsOffRoute()//ProductiveCallsOffRoute For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Count(StoreID) FROM tblDaySummary where flgTarget=0 and flgActualVisited=1 and flgProductiveDay=1", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {

					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	public static String fnGetTotalSalesValueForDay()//TotalSalesValueForDay For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Sum(DaySales) FROM tblDaySummary", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {

					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}

	public static String fnGetAchievedSalesValueTillDate()//AchievedSalesValueTillDate For Summary Activity
	{
		Cursor cursorE2 = db.rawQuery("SELECT Sum(MTDSales) FROM tblDaySummary", null);
		String TotalTargetCalls = "0";
		int ScodecolumnIndex = 0;
		try {
			if(cursorE2.getCount()>0)
			{
				if (cursorE2.moveToFirst()) {

					for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
						TotalTargetCalls = (String) cursorE2.getString(ScodecolumnIndex).toString();
						cursorE2.moveToNext();
					}
				}
			}
			return TotalTargetCalls;
		} finally {
			cursorE2.close();
		}
	}
	*/
    public int fnGetAutoIdStoreOnReturnPAge(String StoreID) {
        // int chkValue=fnChkStoreIdExistsInReturnMstr(StoreID);
        // ////// System.out.println("chkValue :" + chkValue);
        // int inAutoIdForInsert=1;
        // if(chkValue==0)
        // {
        // ////// System.out.println("inAutoIdForInsert before function call when chkValue is 0:"
        // + inAutoIdForInsert);
        // inAutoIdForInsert=fnGetMaxAutoIncrementForReturnMstr();
        // ////// System.out.println("inAutoIdForInsert after function call when chkvalue is 0:"
        // + inAutoIdForInsert);
        // insertPDAProductReturnMstr(inAutoIdForInsert,StoreID);
        // }
        /*
         * else { ////// System.out.println(
         * "inAutoIdForInsert before function call when chkValue is 1:" +
         * inAutoIdForInsert);
         * inAutoIdForInsert=fnGetMaxAutoIncrementForReturnMstr();
         * ////// System.out.println
         * ("inAutoIdForInsert after function call when chkvalue is 1:" +
         * inAutoIdForInsert);
         * insertPDAProductReturnMstr(inAutoIdForInsert,StoreID); }
         */
        int autoid = fnGetAutoIDReturnMstr(StoreID);
        ////// System.out.println("autoid :" + autoid);
        return autoid;
    }

    public int fnGetMaxAutoIncrementForReturnMstr() {

        int LoncolumnIndex = 0;
        int strAutoReturnIdMstr = 1;
        String strAutoReturnMstrText;

        Cursor cursor2 = db.rawQuery(
                "SELECT Max(AutoReturnIdMstr) FROM  tblPDAProductReturnMstr",
                null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    // strAutoReturnMstrText= cursor2.getString(LoncolumnIndex);
                    // ////// System.out.println("strAutoReturnMstrText :"
                    // +strAutoReturnMstrText);
                    if (cursor2.getString(LoncolumnIndex) != null) {
                        strAutoReturnIdMstr = Integer.parseInt(cursor2
                                .getString(LoncolumnIndex)) + 1;
                    } else {
                        strAutoReturnIdMstr = 1;
                    }
                    // strAutoReturnIdMstr
                    // =Integer.parseInt(cursor2.getString(LoncolumnIndex));
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            ////// System.out.println("strAutoReturnIdMstr :" + strAutoReturnIdMstr);
            return strAutoReturnIdMstr;
        } finally {
            cursor2.close();
        }

    }

    public int fnChkAutoIdMstrForReturnDetails(int ReturnIdMstr, String pdaOrderID, String TmpInvoiceCodePDA) {

        int LoncolumnIndex = 0;
        int strReturnIdDetails = 0;

        Cursor cursor2 = db
                .rawQuery(
                        "SELECT AutoReturnDetailsId FROM  tblPDAProductReturnDetails where ReturnIdMstr='" + ReturnIdMstr + "'   AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnIdDetails = 1;
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strReturnIdDetails;
        } finally {
            cursor2.close();
        }

    }

    /*public static int fnGetAutoIdStoreOnReturnPAgeMain(String StoreID,
			String Returndate, Double previousCreditAmt) {
		int chkValue = fnChkStoreIdExistsInReturnMstr(StoreID);
		////// System.out.println("chkValue :" + chkValue);
		int inAutoIdForInsert = 1;
		if (chkValue == 0) {
			inAutoIdForInsert = fnGetMaxAutoIncrementForReturnMstr();
			insertPDAProductReturnMstr(inAutoIdForInsert, StoreID, Returndate,
					previousCreditAmt);
		}

		int autoid = fnGetAutoIDReturnMstr(StoreID);
		////// System.out.println("autoid :" + autoid);
		return autoid;
	}*/
    public void deletetblPDAProductReturnDetailsOnReturnIdMstr(int autoid) {

        db.execSQL("DELETE FROM tblPDAProductReturnDetails WHERE ReturnIdMstr ="
                + autoid);

    }


    // tblPDAProductReturnDetails (AutoReturnDetailsId int null,ReturnIdMstr int null, ProductId text null,
    //ProdReturnQty text null, ProdRate real null, ProdReturnValue real null, ProdReturnReason text null,
    //ProdReturnReasonDescr text null, ProdLastOrderDate text null, ProdLastOrderQyt text null, Sstat integer null,
    //AdjustReturnQty integer null,AdjustReturnValue real null);";

    public String[] fnGetRecordsReturnDetails(int ReturnIdMstr) {

        /*
         * Cursor cursorALL = db.rawQuery("SELECT * FROM tblStoreList", null);
         *
         * ////// System.out.println("PrevDateChk - ALL Records Count: "+
         * cursorALL.getCount());
         */

        Cursor cursor = db
                .rawQuery(
                        "SELECT ReturnIdMstr, ProductId, ProdReturnQty, ProdReturnValue, ProdReturnReason, ProdReturnReasonDescr, ProdLastOrderDate, ProdLastOrderQyt, AdjustReturnQty, AdjustReturnValue FROM tblPDAProductReturnDetails WHERE ReturnIdMstr ="
                                + ReturnIdMstr, null);

        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        String mvalue = "NA";
                        if (i > 3 && i < 8) {
                            if (cursor.getString(i).equals(" ")
                                    || cursor.getString(i).isEmpty()
                                    || cursor.getString(i).equals("")) {
                                mvalue = "NA";
                            } else {
                                mvalue = cursor.getString(i);
                            }
                        }
                        CompleteResult[i] = cursor.getString(0) + "_"
                                + cursor.getString(1) + "_"
                                + cursor.getString(2) + "_"
                                + cursor.getString(3) + "_" + mvalue + "_"
                                + mvalue + "_" + mvalue + "_" + mvalue + "_"
                                + cursor.getString(8) + "_"
                                + cursor.getString(9);
                        ////// System.out.println("fnGetRecordsReturnDetails: "+ CompleteResult[i]);
                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public int fnGetAutoIdStoreOnReturnDeatils() {
        int inReturnDetailsAutoIdForInsert = fnGetMaxAutoIncrementForReturnDetails();
        return inReturnDetailsAutoIdForInsert;
    }
    //tblPDAProductReturnMstr (AutoReturnIdMstr int null,StoreID text null, ReturnDate text null, Comment text null,
    //TotalReturnQty int null, TotalReturnValue real null, Sstat integer null,TotalAdjustQty integer null,
    //TotalAdjustValue real null,FinalBalanceAmount real null,LastCreditAmount real null);";

    public int fnGetMaxAutoIncrementForReturnDetails() {

        int LoncolumnIndex = 0;
        int strAutoReturnIdDetails = 1;
        String strAutoReturnDetailsText;

        Cursor cursor2 = db
                .rawQuery(
                        "SELECT Max(AutoReturnDetailsId) FROM  tblPDAProductReturnDetails",
                        null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    // strAutoReturnDetailsText=cursor2.getString(LoncolumnIndex);
                    if (cursor2.getString(LoncolumnIndex) != null) {
                        strAutoReturnIdDetails = Integer.parseInt(cursor2
                                .getString(LoncolumnIndex)) + 1;
                    } else {
                        strAutoReturnIdDetails = 1;
                    }
                    // strAutoReturnIdMstr
                    // =Integer.parseInt(cursor2.getString(LoncolumnIndex));
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strAutoReturnIdDetails;
        } finally {
            cursor2.close();
        }

    }

    public long fninsertPDAProductReturnDetails(int AutoReturnIdMstr,
                                                int AutoReturnIdDetails, String strProductId,
                                                String strProdReturnQty, Double ProdRate, Double ProdReturnValue,
                                                int proSingleAdjQty, Double proSingleAdjAmt) {

        ContentValues initialValues = new ContentValues();

        ////// System.out.println("Saved AutoReturnIdMstr:" + AutoReturnIdMstr+ "Saved AutoReturnIdDetails:" + "" + AutoReturnIdDetails);

        initialValues.put("AutoReturnDetailsId", AutoReturnIdDetails);
        initialValues.put("ReturnIdMstr", AutoReturnIdMstr);
        initialValues.put("ProductId", strProductId.trim());
        initialValues.put("ProdReturnQty", strProdReturnQty.trim());
        initialValues.put("ProdRate", ProdRate);
        initialValues.put("ProdReturnValue", ProdReturnValue);

        initialValues.put("AdjustReturnQty", proSingleAdjQty);
        initialValues.put("AdjustReturnValue", proSingleAdjAmt);


        initialValues.put("ProdReturnReason", " ");
        initialValues.put("ProdReturnReasonDescr", " ");
        initialValues.put("ProdLastOrderDate", " ");
        initialValues.put("ProdLastOrderQyt", " ");

        /*
         * ////// System.out.println(
         * "fninsertPDAProductReturnDetails  proSingleReturnQty: "+
         * strProdReturnQty);
         * ////// System.out.println("fninsertPDAProductReturnDetails  proSingleRateQty: "
         * +ProdReturnValue);
         *
         * ////// System.out.println("fninsertPDAProductReturnDetails  proSingleAdjQty: "
         * + proSingleAdjQty);
         * ////// System.out.println("fninsertPDAProductReturnDetails  proSingleAdjAmt: "
         * +proSingleAdjAmt);
         */

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN20, null, initialValues);
    }

    public int fnGetAutoIDReturnMstr(String ReturnStoreId) {

        int LoncolumnIndex = 0;
        int strReturnIdMstr = 0;

        Cursor cursor2 = db.rawQuery(
                "SELECT AutoReturnIdMstr FROM  tblPDAProductReturnMstr where StoreID='"
                        + ReturnStoreId + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnIdMstr = Integer.parseInt(cursor2
                            .getString(LoncolumnIndex));
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strReturnIdMstr;
        } finally {
            cursor2.close();
        }

    }

    public void updatePDAProductReturnMstr(int AutoReturnIdMstr,
                                           String ReturnDate, String Comment, int TotalReturnQty,
                                           Double TotalReturnValue, int TotalAdjustQty,
                                           Double TotalAdujustValue, Double FinalBalanceAmount,
                                           Double LastCreditAmount) {

        String strAutoReturnIdMstr = "" + AutoReturnIdMstr;
        final ContentValues values = new ContentValues();
        values.put("ReturnDate", ReturnDate.trim());
        values.put("Comment", Comment);
        values.put("TotalReturnQty", TotalReturnQty);
        values.put("TotalReturnValue", TotalReturnValue);

        values.put("TotalAdjustQty", TotalAdjustQty);
        values.put("TotalAdjustValue", TotalAdujustValue);
        values.put("FinalBalanceAmount", FinalBalanceAmount);
        values.put("LastCreditAmount", LastCreditAmount);

        int affected = db.update("tblPDAProductReturnMstr", values,
                "AutoReturnIdMstr=?", new String[]{strAutoReturnIdMstr});
        Log.w(TAG, "affected records: " + affected);

        //Log.w(TAG, "UpdateStoreStartVisit Updated..");
    }

    //tblDistributionStoreProductWiseDetails (CatId integer not null,ProductID integer not null,StoreID text not null,
    //Stock text null,ProductMfgDate text null,Sstat integer not null);";
	/*public int counttblDistributionStoreProductWiseDetails()
		{
			int check=0;

			Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblDistributionStoreProductWiseDetails", null);
			try {

				if (cursor2.getCount()>0)
				{

					check=1;

				}
				return check;
			} finally {
				cursor2.close();
			}
		}
	*/

    public int fnGetStockAgainstProduct(String StoreID, String Pid) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery(
                "SELECT Stock FROM tblTransac where StoreID='" + StoreID
                        + "' and ProdID ='" + Pid + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(
                                ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public int fnChkStoreIdExistsInReturnMstr(String ReturnStoreId, String pdaOrderID, String TmpInvoiceCodePDA) {

        int LoncolumnIndex = 0;
        int strReturnIdMstr = 0;

        Cursor cursor2 = db.rawQuery(
                "SELECT AutoReturnIdMstr FROM  tblPDAProductReturnMstr where StoreID='"
                        + ReturnStoreId + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnIdMstr = 1;
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strReturnIdMstr;
        } finally {
            cursor2.close();
        }

    }

    public String[] fnGetRecordsReturnMaster(String strStoreID) {

        /*
         * Cursor cursorALL = db.rawQuery("SELECT * FROM tblStoreList", null);
         *
         * ////// System.out.println("PrevDateChk - ALL Records Count: "+
         * cursorALL.getCount());
         */

        Cursor cursor = db
                .rawQuery(
                        "SELECT Comment, TotalReturnQty, TotalReturnValue,TotalAdjustQty,TotalAdjustValue FROM tblPDAProductReturnMstr WHERE StoreID ='"
                                + strStoreID + "'", null);

        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {
                        CompleteResult[i] = cursor.getString(0) + "_"
                                + cursor.getString(1) + "_"
                                + cursor.getString(2) + "_"
                                + cursor.getString(3) + "_"
                                + cursor.getString(4);
                        // ////// System.out.println(cursor.getString(0) + "_" +
                        // cursor.getString(1)+ "_" + cursor.getString(2));
                        cursor.moveToNext();

                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    /*public static long insertPDAProductDistributionDetails(int CatId,int ProductID, String Stock, String StoreID)
	{
		ContentValues initialValues = new ContentValues();


		initialValues.put("CatId",CatId);
		initialValues.put("ProductID",ProductID);
		initialValues.put("Stock", Stock.trim());
		initialValues.put("StoreID", StoreID.trim());


		//initialValues.put("StoreID", StoreID);

		initialValues.put("Sstat", 0);

		////// System.out.println("inserting records in Details  Stock..");
		////// System.out.println("inserting records..");

		return db.insert(DATABASE_TABLE_MAIN7, null, initialValues);
	}
	*/
    public int fnGetAutoIDReturnMstr(String DistribtutionStoreId, String DistributionProductId) {

        int LoncolumnIndex = 0;
        int strReturnIdMstr = 0;

        Cursor cursor2 = db.rawQuery("SELECT AutoId FROM  tblReturnProductMstr where StoreID='"
                + DistribtutionStoreId + "' and ProductId='" + DistributionProductId + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnIdMstr = Integer.parseInt(cursor2.getString(LoncolumnIndex));
                    cursor2.moveToNext();

                }

            }

            return strReturnIdMstr;
        } finally {
            cursor2.close();
        }

    }

    public String[] FetcReturnProductIdOverAllStock(String StoreID) {
        int ScodecolumnIndex = 0;
        int ScodecolumnIndex1 = 1;

        Cursor cursor = db.rawQuery("SELECT ProductId, OverallStock FROM tblReturnProductMstr where StoreId='" + StoreID + "'", null);
        try {
            String StoreProductIdStock[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreProductIdStock[i] = (String) cursor.getString(ScodecolumnIndex).toString() + "_" + (String) cursor.getString(ScodecolumnIndex1).toString();
                    ////// System.out.println("product short name :"+StoreProductIdStock[i]);
                    cursor.moveToNext();
                }
            }
            return StoreProductIdStock;
        } finally {
            cursor.close();
        }
    }

    public String[] FetcReturnProductIdOverAllStockDetails(int AutoDistributionIdMstr) {
        int ScodecolumnIndex = 0;
        int ScodecolumnIndex1 = 1;

        Cursor cursor = db.rawQuery("SELECT Stock, ProductMfgDate FROM tblReturnStoreProductWiseDetails where AutoID=" + AutoDistributionIdMstr, null);
        try {
            String StoreProductIdStock[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreProductIdStock[i] = (String) cursor.getString(ScodecolumnIndex).toString() + "_" + (String) cursor.getString(ScodecolumnIndex1).toString();
                    ////// System.out.println("product tblReturnStoreProductWiseDetails :"+StoreProductIdStock[i]);
                    cursor.moveToNext();
                }
            }
            return StoreProductIdStock;
        } finally {
            cursor.close();
        }
    }

    public int counttblOutLetInfoOnQuadVolumeCategoryBasis() {
        int check = 0;

        Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblOutLetInfoOnQuadVolumeCategoryBasis", null);
        try {

            ////// System.out.println("Sunil check data in table :"+cursor2.getCount());
            if (cursor2.getCount() > 0) {

                check = 1;

            }
            return check;
        } finally {
            cursor2.close();
        }
    }

    public long saveOutLetInfoOnQuadVolumeCategoryBasis(String OutID, String OutletName, String OwnerName, String ContactNo,
                                                        String MarketAreaName, String Latitude, String Longitutde) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("OutID", OutID.trim());
        initialValues.put("OutletName", OutletName.trim());
        initialValues.put("OwnerName", OwnerName.trim());
        initialValues.put("ContactNo", ContactNo.trim());
        initialValues.put("MarketAreaName", MarketAreaName.trim());
        initialValues.put("Latitude", Latitude.trim());
        initialValues.put("Longitutde", Longitutde.trim());


        ////// System.out.println("jai data  stoe in teable 3");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN91, null, initialValues);
    }

    public String[] fetchParticularStoreInfo(String OutID) {

        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        int LoncolumnIndex3 = 3;
        int LoncolumnIndex4 = 4;
        int LoncolumnIndex5 = 5;

        //Latitude text null,Longitutde
        Cursor cursor2 = db.rawQuery("SELECT OutletName,OwnerName,ContactNo,MarketAreaName,Latitude,Longitutde  FROM tblOutLetInfoOnQuadVolumeCategoryBasis where OutID='" + OutID + "'", null);
        try {
            ////// System.out.println("ajay total Store cursor2.getCount() :"+cursor2.getCount());
            String UniqueProductShortName[] = new String[cursor2.getCount()];
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        UniqueProductShortName[i] = cursor2.getString(LoncolumnIndex).toString() + "^" +
                                cursor2.getString(LoncolumnIndex1).toString() + "^" + cursor2.getString(LoncolumnIndex2).toString() + "^"
                                + cursor2.getString(LoncolumnIndex3).toString() + "^"
                                + cursor2.getString(LoncolumnIndex4).toString() + "^"
                                + cursor2.getString(LoncolumnIndex5).toString();
                        ////// System.out.println("Sunil OutletName :"+cursor2.getString(LoncolumnIndex).toString());
                        ////// System.out.println("Sunil OwnerName :"+cursor2.getString(LoncolumnIndex1).toString());
                        ////// System.out.println("Sunil ContactNo :"+cursor2.getString(LoncolumnIndex1).toString());
                        ////// System.out.println("Sunil MarketAreaName :"+cursor2.getString(LoncolumnIndex1).toString());
                        ////// System.out.println("Sunil total :"+UniqueProductShortName[i]);
                        cursor2.moveToNext();
                    }

                }

            }
            return UniqueProductShortName;
        } finally {
            cursor2.close();
        }
    }

    public String[] fetchStorelatLong() {

        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        int LoncolumnIndex3 = 3;
        ////// System.out.println("ajay one");
        //store_longitude text null,store_latitude text null
        //Cursor cursor21 = db.rawQuery("SELECT count(*) FROM tblOutLetInfoOnQuadVolumeCategoryBasis", null);
        ////// System.out.println("ajay two");
        Cursor cursor2 = db.rawQuery("SELECT Latitude,Longitutde,OutletName,OutID FROM tblOutLetInfoOnQuadVolumeCategoryBasis", null);


        //Cursor cursor2 = db.rawQuery("SELECT store_longitude,store_latitude,name,StoreID FROM tblOutLetInfoOnQuadVolumeCategoryBasis", null);
        ////// System.out.println("ajay three");
        try {
            ////// System.out.println("ajay total Store cursor2.getCount() :"+cursor2.getCount());
            //////// System.out.println("ajay total Store cursor21.getCount() :"+cursor21.getCount());
            String UniqueProductShortName[] = new String[cursor2.getCount()];
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        UniqueProductShortName[i] = cursor2.getString(LoncolumnIndex).toString() + "^" + cursor2.getString(LoncolumnIndex1).toString() + "^" + cursor2.getString(LoncolumnIndex2).toString() + "^" + cursor2.getString(LoncolumnIndex3).toString();
                        ////// System.out.println("ajay lat :"+cursor2.getString(LoncolumnIndex).toString());
                        ////// System.out.println("ajay lon :"+cursor2.getString(LoncolumnIndex1).toString());
                        ////// System.out.println("ajay OutletName :"+cursor2.getString(LoncolumnIndex1).toString());
                        ////// System.out.println("ajay OutID :"+cursor2.getString(LoncolumnIndex1).toString());
                        ////// System.out.println("ajay total :"+UniqueProductShortName[i]);
                        cursor2.moveToNext();
                    }

                }

            }
            return UniqueProductShortName;
        } finally {
            cursor2.close();
        }
    }

    public void deleteAlertValueProduct(String storeId, String _schmAlrtId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        Cursor cur = db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='" + storeId + "' and schmAlrtId = '" + _schmAlrtId + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.DATABASE_TABLE_Main214, "StoreID=? AND schmAlrtId=? AND TmpInvoiceCodePDA=? ", new String[]{storeId, _schmAlrtId, TmpInvoiceCodePDA});
        }

        //close();
    }

    public void deleteProductOldSlab215(String storeId, String _schmId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        //DATABASE_CREATE_TABLE_215 =tblProductMappedWithSchemeSlabApplied (StoreId,ProductID,schSlabId,schmIdMapped

        Cursor cur = db.rawQuery("Select ProductID from tblProductMappedWithSchemeSlabApplied where StoreId ='" + storeId + "'  and schmIdMapped ='" + _schmId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        if (cur.getCount() > 0) {
            // System.out.println("DATABASE_TABLE_Main215 Delete : StoreId = "+storeId+" schmIdMapped = "+_schmId+" cur.getCount()= "+cur.getCount());
            db.delete(DBHelper.DATABASE_TABLE_Main215, "StoreId=? AND schmIdMapped=? AND  TmpInvoiceCodePDA=?", new String[]{storeId, _schmId, TmpInvoiceCodePDA});
        }

        // close();
    }

    public void deleteProductSchemeType3(String storeId, String _productId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        //DATABASE_CREATE_TABLE_215 =tblProductMappedWithSchemeSlabApplied (StoreId,ProductID,schSlabId,schmIdMapped

        Cursor cur = db.rawQuery("Select ProductID from tblProductMappedWithSchemeSlabApplied where StoreId ='" + storeId + "'  and ProductID='" + _productId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        if (cur.getCount() > 0) {
            // System.out.println("DATABASE_TABLE_Main215 Delete : StoreId = "+storeId+" ProductID = "+_productId+" cur.getCount()= "+cur.getCount());
            db.delete(DBHelper.DATABASE_TABLE_Main215, "StoreId=? AND ProductID=? AND  TmpInvoiceCodePDA=?", new String[]{storeId, _productId, TmpInvoiceCodePDA});
        }

        // close();
    }

    public void deleteAllStoreAlertValueProduct(String storeId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        Cursor cur = db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='" + storeId + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.DATABASE_TABLE_Main214, "StoreID=?  AND TmpInvoiceCodePDA=?", new String[]{storeId, TmpInvoiceCodePDA});
        }

        // close();
    }

    public void deleteProductBenifitSlabApplieddeleteProductBenifitSlabApplied(String storeId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        Cursor cur = db.rawQuery("Select ProductID from tblProductMappedWithSchemeSlabApplied where StoreId ='" + storeId + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.DATABASE_TABLE_Main215, "StoreID=? AND TmpInvoiceCodePDA=?", new String[]{storeId, TmpInvoiceCodePDA});


        }

        //close();
    }

    public void deletetblOutLetInfoOnQuadVolumeCategoryBasis() {
        db.execSQL("DELETE FROM tblOutLetInfoOnQuadVolumeCategoryBasis ");

    }



    public String[] fnGetRouteIdsForDDL() {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT RouteNodeID FROM tblRoutelist", null);
        try {
            String strLocationIDDetais[] = new String[cursor2.getCount()];
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strLocationIDDetais[i] = cursor2.getString(LoncolumnIndex);
                    ////// System.out.println("[ROUTE] Route Id : "+ cursor2.getString(LoncolumnIndex).toString().trim());
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strLocationIDDetais;
        } finally {
            cursor2.close();
        }

    }

    public String[] fnGetRouteInfoForDDL() {

        int LoncolumnIndex = 0;
        Cursor cursor2 = db.rawQuery("SELECT Route FROM tblRoutelist", null);
        try {
            String strLocationNameDetais[] = new String[cursor2.getCount()];
            ////// System.out.println("[Route] Count : " + cursor2.getCount());
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strLocationNameDetais[i] = cursor2
                            .getString(LoncolumnIndex);
                    ////// System.out.println("[Route] Route Name : "+ cursor2.getString(LoncolumnIndex).toString().trim());

                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strLocationNameDetais;
        } finally {
            cursor2.close();
        }

    }

    public String[] FetchStorePDATargetQtyForSecondPage(String sID2Fetch) {

        // id = getAllEntries();

        int SnamecolumnIndex1 = 0;
        int SnamecolumnIndex2 = 1;

        // int Stock,int OrderQty, Double OrderVal, int FreeQty, Double DisVal

        Cursor cursor = db
                .rawQuery(
                        "SELECT SKUShortName, TargetQty  FROM tblPDATargetQtyForSecondPage WHERE StoreID ='"
                                + sID2Fetch + "'", null);
        try {

            String ProductTarget[] = new String[cursor.getCount()];
            ;

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    ProductTarget[i] = (String) cursor.getString(
                            SnamecolumnIndex1).toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex2)
                            .toString();

                    cursor.moveToNext();
                    // cursor.close();

                }

            }
            return ProductTarget;
        } finally {
            cursor.close();
        }

    }

    public String[] fnGetAllSchSlabDescbasedOnSchemeSlabID(String SchemeSlabID) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT DISTINCT SchemeSlabDesc FROM tblSchemeSlabDetail WHERE SchemeSlabID ='" + SchemeSlabID + "'", null);
        String AllSchemeSlabID[] = new String[cursorE2.getCount()];

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllSchemeSlabID[i] = (String) cursorE2.getString(0).toString();
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllSchemeSlabID;
        } finally {
            cursorE2.close();
            //close();
        }

    }

    public String[] fnGetAllBenifitDescrbasedOnSchemeSlabID(String SchemeSlabID) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT DISTINCT BenifitDescr FROM tblSchemeSlabDetail WHERE SchemeSlabID ='"
                + SchemeSlabID + "'", null);
        String AllSchemeSlabID[] = new String[cursorE2.getCount()];

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllSchemeSlabID[i] = (String) cursorE2.getString(0).toString();
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllSchemeSlabID;
        } finally {
            cursorE2.close();
            //close();
        }

    }

    public String[] fnGetSchemeIdsAppliedOnStore(String strStoreID) {
        int ScodecolumnIndex = 0;
        Cursor cursor = db.rawQuery("SELECT SchemeID FROM tblSchemeStoreMapping Where StoreID='" + strStoreID + "'", null);
        try {
            String SchemeIds[] = new String[cursor.getCount()];
            ;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    SchemeIds[i] = (String) (cursor.getString(ScodecolumnIndex).toString());
                    ////// System.out.println("DB-ADAP: PROD RLP: "+ (String) cursor.getString(ScodecolumnIndex).toString());
                    cursor.moveToNext();
                }
            }
            return SchemeIds;
        } finally {
            cursor.close();
        }
    }

    public String[] PrevPDASchemeApplicableSecondPage(String strStoreID) {


        String[] strSchemeIds = fnGetSchemeIdsAppliedOnStore(strStoreID);
        String CompleteResult[] = new String[strSchemeIds.length];
        ;
        if (strSchemeIds.length >= 1) {
            String myQuery = "SELECT SchemeID,SchemeName FROM tblSchemeMstr WHERE SchemeID in (" + makePlaceholders(strSchemeIds.length) + ")";
            Cursor cursor = db.rawQuery(myQuery, strSchemeIds);

            try {
                //CompleteResult = new String[cursor.getCount()];
                if (cursor.getCount() > 0) {

                    if (cursor.moveToFirst()) {

                        for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                            CompleteResult[i] = (String) cursor.getString(0).toString() + "_" + (String) cursor.getString(1).toString();
                            cursor.moveToNext();
                        }
                    }

                }


            } finally {
                cursor.close();
            }
        }

        return CompleteResult;
    }

    public String makePlaceholders(int len) {
        if (len < 1) {
            // It will lead to an invalid query anyway ..
            throw new RuntimeException("No placeholders");
        } else {
            StringBuilder sb = new StringBuilder(len * 2 - 1);
            sb.append("?");
            for (int i = 1; i < len; i++) {
                sb.append(",?");
            }
            return sb.toString();
        }
    }
    //tblPDAProductReturnMstr (AutoReturnIdMstr int null,StoreID text null, ReturnDate text null, Comment text null,
    //TotalReturnQty int null, TotalReturnValue real null, Sstat integer null,TotalAdjustQty integer null,
    //TotalAdjustValue real null,FinalBalanceAmount real null,LastCreditAmount real null);";

    public String[] PrevPDASchemeApplicableSecondPageSpecialScheme(String strStoreID) {

        /*
         * Cursor cursorALL = db.rawQuery("SELECT * FROM tblStoreList", null);
         *
         * ////// System.out.println("PrevDateChk - ALL Records Count: "+
         * cursorALL.getCount());
         */
        String strMystoretype = "";
        strMystoretype = fnGetStoreTypeOnStoreIdBasis(strStoreID);
        Cursor cursor = db.rawQuery(
                "SELECT SchemeDesc FROM tblspForPDASchemeApplicableList WHERE StoreType ='"
                        + strMystoretype + "' and flgSpecialScheme=1", null);

        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString();
                        //// System.out.println("strMystoretype : " + strMystoretype);
                        ////// System.out.println("CompleteResult[i] : "+ CompleteResult[i].toString().trim());
                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String[] PrevPDALastTranDetForSecondPage(String strStoreID) {

        /*
         * Cursor cursorALL = db.rawQuery("SELECT * FROM tblStoreList", null);
         *
         * ////// System.out.println("PrevDateChk - ALL Records Count: "+
         * cursorALL.getCount());
         */

        Cursor cursor = db
                .rawQuery(
                        "SELECT SKUName, LastTransDate, Stock, OrderQty, FreeQty FROM tblPDALastTranDateForSecondPage WHERE StoreID ='"
                                + strStoreID + "'", null);

        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString()
                                + "_"
                                + (String) cursor.getString(1).toString()
                                + "_"
                                + (String) cursor.getString(2).toString()
                                + "_"
                                + (String) cursor.getString(3).toString()
                                + "_"
                                + (String) cursor.getString(4).toString();
                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String fnGetPDALastInvoiceDetlastDate(String strStoreID) {

        Cursor cursorE2 = db.rawQuery(
                "SELECT LastTransDate FROM tblPDALastInvoiceDet WHERE StoreID ='"
                        + strStoreID + "'", null);
        String LastTransDate = "";
        int ScodecolumnIndex = 0;
        try {

            if (cursorE2.moveToFirst()) {

                for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                    LastTransDate = (String) cursorE2.getString(
                            ScodecolumnIndex).toString();
                    cursorE2.moveToNext();
                }
            }
            return LastTransDate;
        } finally {
            cursorE2.close();
        }

    }

    public long insertPDAProductReturnMstr(int AutoReturnIdMstr,
                                           String StoreID, String ReturnDate, Double previousCreditAmt) {
        ContentValues initialValues = new ContentValues();

        ////// System.out.println("Saved AutoReturnIdMstr:" + AutoReturnIdMstr+ "Saved StoreID:" + "" + StoreID);

        initialValues.put("AutoReturnIdMstr", AutoReturnIdMstr);
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("ReturnDate", ReturnDate.trim());
        initialValues.put("Comment", "Not Available");
        // initialValues.put(KEY_TotalReturnQty, 0);
        // initialValues.put(KEY_TotalReturnValue, 0.00);

        // initialValues.put(KEY_TotalAdjustQty, 0);
        // initialValues.put(KEY_TotalAdjustValue, 0.00);
        initialValues.put("FinalBalanceAmount", previousCreditAmt);
        // initialValues.put(KEY_LastCreditAmount, 0.00);

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN19, null, initialValues);
    }

    public int getExistingPicNos(String StoreID) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tblStoreMaterialPhotoDetail where StoreID='" + StoreID + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public Double fnGetDiscountValueOnRealSlabBasis(String strSchemeID, String SlabFrom) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        Double strSchemeIDFreeProductId = 0.00;
        Cursor cursor2 = db.rawQuery(
                "SELECT Discount FROM tblSchemeDetails where  SchemeID = '" + strSchemeID
                        + "' and SlabFrom='" + SlabFrom + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    strSchemeIDFreeProductId = Double.parseDouble(cursor2
                            .getString(LoncolumnIndex));
                    //+ "_"
                    //+ cursor2.getString(LoncolumnIndex1);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeIDFreeProductId;
        } finally {
            cursor2.close();
        }
    }

    public int fnGetFreeQuantityOnRealSlabBasis(String strSchemeID, String SlabFrom) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int strSchemeIDFreeProductId = 0;
        Cursor cursor2 = db.rawQuery(
                "SELECT FreeQuantity FROM tblSchemeDetails where  SchemeID = '" + strSchemeID
                        + "' and SlabFrom='" + SlabFrom + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    strSchemeIDFreeProductId = Integer.parseInt(cursor2
                            .getString(LoncolumnIndex));
                    //+ "_"
                    //+ cursor2.getString(LoncolumnIndex1);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeIDFreeProductId;
        } finally {
            cursor2.close();
        }
    }

    public String fnGetFreeProdIDOnRealSlabBasis(String strSchemeID, String SlabFrom) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        String strSchemeIDFreeProductId = "";
        Cursor cursor2 = db.rawQuery(
                "SELECT FreeProductID FROM tblSchemeDetails where  SchemeID = '" + strSchemeID
                        + "' and SlabFrom='" + SlabFrom + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    strSchemeIDFreeProductId = cursor2
                            .getString(LoncolumnIndex);
                    //+ "_"
                    //+ cursor2.getString(LoncolumnIndex1);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeIDFreeProductId;
        } finally {
            cursor2.close();
        }
    }

    public String fnGetMProdIDAccordingToSchemeID(String SchID) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        String strSchemeIDFreeProductId = "";
        Cursor cursor2 = db.rawQuery(
                "SELECT ProductID FROM tblschemeProductMap where SchemeID='"
                        + SchID + "' LIMIT 1", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    strSchemeIDFreeProductId = cursor2
                            .getString(LoncolumnIndex);
                    //+ "_"
                    //+ cursor2.getString(LoncolumnIndex1);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeIDFreeProductId;
        } finally {
            cursor2.close();
        }
    }

    public String fnGetMaxSlabofProductAccordingToOrder(
            String strSchemType, String strSchemeID, int strOrderValue) {
        int LoncolumnIndex = 0;
        //////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
        String strProductSabFreeOrDiscount = "";

        if (Integer.parseInt(strSchemType) == 1
                || Integer.parseInt(strSchemType) == 2) {
            Cursor cursor2 = db.rawQuery(
                    "SELECT Max(SlabFrom) FROM tblSchemeDetails where SlabFrom<="
                            + strOrderValue + " and SchemeID = '" + strSchemeID
                            + "'", null);
            try {
                if (cursor2.moveToFirst()) {

                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (strProductSabFreeOrDiscount == "") {
                            strProductSabFreeOrDiscount = cursor2
                                    .getString(LoncolumnIndex);
                        }

                        cursor2.moveToNext();
                        // cursor.close();
                    }

                    strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;

                }

            } finally {
                cursor2.close();
            }
        }
        if (Integer.parseInt(strSchemType) == 3) {
            Cursor cursor2 = db.rawQuery(
                    "SELECT Max(SlabFrom) FROM tblSchemeDetails where SlabFrom<="
                            + strOrderValue + " and SchemeID = '" + strSchemeID
                            + "'", null);
            try {
                if (cursor2.moveToFirst()) {

                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (strProductSabFreeOrDiscount == "") {
                            strProductSabFreeOrDiscount = cursor2
                                    .getString(LoncolumnIndex);
                        }

                        ////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
                        cursor2.moveToNext();
                        // cursor.close();
                    }

                    strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;

                }

            } finally {
                cursor2.close();
            }
        }
        return strProductSabFreeOrDiscount;
    }

    public String fnGetSchemeTypeonSchemeIDBasis(String strSchemeID) {
        int LoncolumnIndex = 0;
        //////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
        String strProductSabFreeOrDiscount = "";

        Cursor cursor2 = db.rawQuery(
                "SELECT  SchemeType FROM tblSchemeList where SchemeID = '" + strSchemeID
                        + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (strProductSabFreeOrDiscount == "") {
                        strProductSabFreeOrDiscount = cursor2
                                .getString(LoncolumnIndex);
                    }

                    ////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
                    cursor2.moveToNext();
                    // cursor.close();
                }

                strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;

            }

        } finally {
            cursor2.close();
        }

        return strProductSabFreeOrDiscount;
    }

    // changes by sunil for Summary in Tab
    public int fnCountDataIntblSyncSummuryForProductDetails() {


        Cursor cursorE2 = db.rawQuery("SELECT Count(SkuName) FROM tblSyncSummuryForProductDetails", null);

        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {
                for (int i = 0; i < cursorE2.getCount(); i++) {
                    if (!cursorE2.isNull(0)) {
                        chkI = Integer.parseInt(cursorE2.getString(0));
                    } else {
                        chkI = 0;
                    }
                    cursorE2.moveToNext();
                }

            }

        } finally {
            cursorE2.close();
        }
        //////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;

    }

    public int fnCountDataIntblStoreProdcutPurchaseDetails(int Sstat) {
        Cursor cursorE2 = db.rawQuery("SELECT DISTINCT ProductShortName FROM tblTmpInvoiceDetails where Sstat='" + Sstat + "' and  (OrderQty<>0 OR SampleQuantity<>0 OR FreeQty<>0)", null);

        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {
                for (int i = 0; i < cursorE2.getCount(); i++) {
                    if (!cursorE2.isNull(0)) {
                        chkI = cursorE2.getCount();
                    } else {
                        chkI = 0;
                    }
                    cursorE2.moveToNext();
                }

            }

        } finally {
            cursorE2.close();
        }
        //////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;

    }

    public int fnCountNumberOfSKUForBothServerAndPDATable() {
        int returnvalue = 0;

        //int ServerTableCount=fnCountDataIntblSyncSummuryForProductDetails();
        //int PDATableCount=fnCountDataIntblStoreProdcutPurchaseDetails(4);


        Cursor cursorE1 = db.rawQuery("SELECT DISTINCT SkuName FROM  tblSyncSummuryForProductDetails", null);


        try {
            // System.out.println("Number of row for Value from Server Table Data :"+cursorE1.getCount());
            if (cursorE1.getCount() > 0) {
                returnvalue = cursorE1.getCount();
            }
        } finally {
            cursorE1.close();
        }


        //Cursor cursorE2;
        Cursor cursorE2 = db.rawQuery("SELECT DISTINCT ProductShortName FROM tblTmpInvoiceDetails where Sstat='" + 4 + "' and  (OrderQty<>0 OR SampleQuantity<>0 OR FreeQty<>0)", null);


        try {
            // System.out.println("Number of row for Value from PDA Table Data :"+cursorE2.getCount());
            if (cursorE2.getCount() > 0) {
                returnvalue = returnvalue + cursorE2.getCount();
            }
        } finally {
            cursorE2.close();
        }


        Cursor cursorE3 = db.rawQuery("SELECT DISTINCT SkuName FROM tblSyncSummuryForProductDetails  a INNER JOIN tblTmpInvoiceDetails b ON a.SkuName = b.ProductShortName where b.Sstat='" + 4 + "' and  (b.OrderQty<>0 OR SampleQuantity<>0 OR b.FreeQty<>0)", null);


        try {
            // System.out.println("Number of row for Value from Common Table Data :"+cursorE3.getCount());
            if (cursorE3.getCount() > 0) {
                returnvalue = returnvalue - cursorE3.getCount();
            }
        } finally {
            cursorE3.close();
        }

        return returnvalue;

    }

    public HashMap<String, String> fnAllProductnameForShowingInTable() {

        HashMap<String, String> map = new HashMap<String, String>();

        Cursor cursorE1 = db.rawQuery("SELECT DISTINCT SkuName FROM  tblSyncSummuryForProductDetails", null);

        try {
            if (cursorE1.getCount() > 0) {
                if (cursorE1.moveToFirst()) {

                    for (int i = 0; i < cursorE1.getCount(); i++) {

                        // System.out.println("Ajeet and Amit row with Server Table Product Name"+ (String) cursorE1.getString(0).toString().trim() );
                        map.put((String) cursorE1.getString(0).toString().trim(), "1");
                        cursorE1.moveToNext();
                    }
                }
            }
        } finally {
            cursorE1.close();
        }

        Cursor cursorE2 = db.rawQuery("SELECT DISTINCT SkuName FROM tblSyncSummuryForProductDetails  a INNER JOIN tblTmpInvoiceDetails b ON a.SkuName = b.ProductShortName where b.Sstat='" + 4 + "' and  (b.OrderQty<>0 OR SampleQuantity<>0 OR b.FreeQty<>0)", null);


        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i < cursorE2.getCount(); i++) {

                        // System.out.println("Ajeet and Amit row with Server Table Product Name Remove"+ (String) cursorE2.getString(0).toString().trim() );
                        map.remove((String) cursorE2.getString(0).toString().trim());
                        cursorE2.moveToNext();
                    }
                }
            }
        } finally {
            cursorE2.close();
        }


        //Cursor cursorE2;
        Cursor cursorE3 = db.rawQuery("SELECT DISTINCT ProductShortName FROM tblTmpInvoiceDetails where Sstat='" + 4 + "' and  (OrderQty<>0 OR SampleQuantity<>0 OR FreeQty<>0)", null);


        try {

            if (cursorE3.getCount() > 0) {
                if (cursorE3.moveToFirst()) {

                    for (int i = 0; i < cursorE3.getCount(); i++) {
                        // System.out.println("Ajeet and Amit with PDA Table Product Name"+ (String) cursorE3.getString(0).toString().trim() );

                        map.put((String) cursorE3.getString(0).toString().trim(), "1");
                        cursorE3.moveToNext();
                    }
                }
            }
        } finally {
            cursorE3.close();
        }



				/*Cursor cursorE4 = db.rawQuery("SELECT DISTINCT SkuName FROM tblSyncSummuryForProductDetails  a INNER JOIN tblTmpInvoiceDetails b ON a.SkuName = b.ProductShortName where b.Sstat='"+4+"' and  (b.OrderQty<>0 OR SampleQuantity<>0 OR b.FreeQty<>0)", null);


				try
				{
					if(cursorE4.getCount()>0)
					{
						if (cursorE4.moveToFirst())
				         {

				             for (int i = 0; i < cursorE4.getCount(); i++)
				                 {

				            	 // System.out.println("Ajeet and Amit with PDA Table Product Name remove "+ (String) cursorE4.getString(0).toString().trim() );
						          map.remove((String) cursorE4.getString(0).toString().trim());
					                  cursorE4.moveToNext();
				                 }
			              }
					}
				}
				finally
				{
					cursorE4.close();
				}*/

        return map;

    }

    public String fnGetTotalSales(int Sstat) {
        int LoncolumnIndex = 0;
        String TotSalesValue = "0.0";


        Cursor cursor2 = db.rawQuery("SELECT SUM(InvoiceVal) FROM tblTmpInvoiceHeader where Sstat='" + Sstat + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        TotSalesValue = "" + Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
                        ////// System.out.println("Abhinav Raj Summary New TotSalesValue from function: "+TotSalesValue);
                        cursor2.moveToNext();
                    }

                }

            }
            return TotSalesValue.replace(",", "");//(TotSalesValue, ",");
        } finally {
            cursor2.close();
        }
    }

    public String fnGetTotalDiscount(int Sstat) {
        int LoncolumnIndex = 0;
        String TotDiscountValue = "0.0";


        Cursor cursor2 = db.rawQuery("SELECT SUM(TotalDis) FROM tblTmpInvoiceHeader where Sstat='" + Sstat + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        TotDiscountValue = "" + Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
                        cursor2.moveToNext();
                    }

                }

            }
            return TotDiscountValue;
        } finally {
            cursor2.close();
        }
    }

    public String fnCalculateKGLitersForTabOne() {
        int Sstat = 4;
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        String[] UniqueKgLiters;
        UniqueKgLiters = fnarrUniqueKgLiters();//fnarrUniqueKgLitersDisplayUnit();
        String val = "";
        String totalKGSales = "0.0";
        String totalSampleSalesKG = "0.0";
        String totalFreeQtySalesKG = "0.0";
        String totalLitersSales = "0.0";
        String totalSampleSalesLT = "0.0";
        String totalFreeQtySalesLT = "0.0";
        String totalDiscountLT = "0.0";
        String totalDiscountKG = "0.0";


        String totalOverallKGSales = "0.0";
        String totalOverallSampleSalesKG = "0.0";
        String totalOverallFreeQtySalesKG = "0.0";
        String totalOverallLitersSales = "0.0";
        String totalOverallSampleSalesLT = "0.0";
        String totalOverallFreeQtySalesLT = "0.0";
        String totalOverallDiscountLT = "0.0";
        String totalOverallDiscountKG = "0.0";

        String FinalReturnValue = "";
        String ppName = "";
        String pDisplayUnit = "";
        for (int kk = 0; kk < UniqueKgLiters.length; kk++) {
            StringTokenizer tokensUniqueKgLiters = new StringTokenizer(String.valueOf(UniqueKgLiters[kk]), "^");

            ppName = tokensUniqueKgLiters.nextToken().trim();

            val = "";
            val = tokensUniqueKgLiters.nextToken().trim();//UniqueKgLiters[kk].toString().trim();

            // change by sunil
            //val="0";
            //// System.out.println("Abhi UniqueKgLiters[kk] :"+UniqueKgLiters[kk]);

            pDisplayUnit = tokensUniqueKgLiters.nextToken().trim();
            //// System.out.println("Abhi pDisplayUnit:" +pDisplayUnit);
            //if(val.contains("0g"))
            if (pDisplayUnit.contains("Kg")) {
                //// System.out.println("Abhi getting Kg");
                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblTmpInvoiceDetails where ProductShortName='" + ppName + "' and Sstat='" + Sstat + "'", null);
                try {
                    //val=val.replace("g", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {
                                totalKGSales = "0.0";
                                totalFreeQtySalesKG = "0.0";
                                totalSampleSalesKG = "0.0";
                                if (!cursor2.isNull(LoncolumnIndex)) {
                                    totalKGSales = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    //	cursor2.moveToNext();

                                    ////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalKGSales-:"+ totalKGSales);
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    totalFreeQtySalesKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
                                    //	cursor2.moveToNext();
                                    ////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalFreeQtySalesKG-:"+ totalFreeQtySalesKG);
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    totalSampleSalesKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));

                                    ////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalSampleSalesKG-:"+ totalSampleSalesKG);
                                    //
                                }


                                //Write Here

                                totalOverallKGSales = "" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(totalKGSales));
                                //////// System.out.println("AbhiSunil  totalOverallKGSales-:"+ totalOverallKGSales);
                                totalOverallFreeQtySalesKG = "" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(totalFreeQtySalesKG));
                                //////// System.out.println("AbhiSunil  totalOverallFreeQtySalesKG-:"+ totalOverallFreeQtySalesKG);
                                totalOverallSampleSalesKG = "" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(totalSampleSalesKG));
                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }

            }
            //if(val.contains("0ml"))
            if (pDisplayUnit.contains("Lt")) {
                //// System.out.println("Abhi getting Liter");

                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblTmpInvoiceDetails where ProductShortName ='" + ppName + "' and Sstat='" + Sstat + "'", null);
                try {
                    //// System.out.println("Abhi  cursor2.getCount() :"+cursor2.getCount());
                    //val=val.replace("ml", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {
                                totalLitersSales = "0.0";
                                totalSampleSalesLT = "0.0";
                                totalFreeQtySalesLT = "0.0";

                                if (!cursor2.isNull(LoncolumnIndex)) {

                                    totalLitersSales = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    //	////// System.out.println("totalLitersSales :"+totalLitersSales);
                                    totalOverallLitersSales = "" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(totalLitersSales));

                                    //// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
                                    //cursor2.moveToNext();
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    totalFreeQtySalesLT = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
                                    //////// System.out.println("totalFreeQtySalesLT :"+totalFreeQtySalesLT);
                                    totalOverallFreeQtySalesLT = "" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(totalFreeQtySalesLT));

                                    //// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
                                    //cursor2.moveToNext();
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    totalSampleSalesLT = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
                                    totalOverallSampleSalesLT = "" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(totalSampleSalesLT));

                                    //// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
                                    //	////// System.out.println("totalSampleSalesLT :"+totalSampleSalesLT);
                                }


                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }


            }
        }

        //// System.out.println("Abhi Sunil  totalOverallKGSales Before:" +totalOverallKGSales);
        //// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG Before:" +totalOverallFreeQtySalesKG);
        //// System.out.println("Abhi Sunil  totalOverallSampleSalesKG Before:" +totalOverallSampleSalesKG);

        totalOverallKGSales = ConvertGramToKilo(totalOverallKGSales);

        totalOverallFreeQtySalesKG = ConvertGramToKilo(totalOverallFreeQtySalesKG);

        totalOverallSampleSalesKG = ConvertGramToKilo(totalOverallSampleSalesKG);

        //// System.out.println("Abhi Sunil  totalOverallKGSales After:" +totalOverallKGSales);
        //// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG After:" +totalOverallFreeQtySalesKG);
        //// System.out.println("Abhi Sunil  totalOverallSampleSalesKG After:" +totalOverallSampleSalesKG);

        totalOverallLitersSales = ConvertMLToLiters(totalOverallLitersSales);

        totalOverallFreeQtySalesLT = ConvertMLToLiters(totalOverallFreeQtySalesLT);

        totalOverallSampleSalesLT = ConvertMLToLiters(totalOverallSampleSalesLT);


        String strGettblSyncSummuryDetailsKGLitersDetails = "";
        strGettblSyncSummuryDetailsKGLitersDetails = fnGettblSyncSummuryDetailsKGLitersDetails();

        StringTokenizer tokensGettblSyncSummuryDetailsKGLitersDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsKGLitersDetails), "_");

        totalOverallKGSales = "" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallFreeQtySalesKG = "" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallSampleSalesKG = "" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallLitersSales = "" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallFreeQtySalesLT = "" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallSampleSalesLT = "" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));


        Double DtotalOverallKGSales = Double.parseDouble(totalOverallKGSales);
        DtotalOverallKGSales = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));

        Double DtotalOverallFreeQtySalesKG = Double.parseDouble(totalOverallFreeQtySalesKG);
        DtotalOverallFreeQtySalesKG = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));

        Double DtotalOverallSampleSalesKG = Double.parseDouble(totalOverallSampleSalesKG);
        DtotalOverallSampleSalesKG = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));

        Double DtotalOverallLitersSales = Double.parseDouble(totalOverallLitersSales);
        DtotalOverallLitersSales = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));

        Double DtotalOverallFreeQtySalesLT = Double.parseDouble(totalOverallFreeQtySalesLT);
        DtotalOverallFreeQtySalesLT = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));

        Double DtotalOverallSampleSalesLT = Double.parseDouble(totalOverallSampleSalesLT);
        DtotalOverallSampleSalesLT = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));


        //DtotalOverallKGSales = Double.parseDouble(decimalFormat.format(DtotalOverallKGSales));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));
        FinalReturnValue = FinalReturnValue + DtotalOverallKGSales + " Units";

        // DtotalOverallFreeQtySalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesKG));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallFreeQtySalesKG + " Units";

        // DtotalOverallSampleSalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesKG));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallSampleSalesKG + " Units";

        // DtotalOverallLitersSales = Double.parseDouble(decimalFormat.format(DtotalOverallLitersSales));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallLitersSales + " LT";

        // DtotalOverallFreeQtySalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesLT));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallFreeQtySalesLT + " LT";

        //DtotalOverallSampleSalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesLT));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallSampleSalesLT + " LT";


        //FinalReturnValue= "" + DtotalOverallKGSales + " KG" + "^" + DtotalOverallFreeQtySalesKG + " KG" + "^" + DtotalOverallSampleSalesKG + " KG" + "^" + DtotalOverallLitersSales + " LT" + "^" + DtotalOverallFreeQtySalesLT + " LT" + "^" + DtotalOverallSampleSalesLT + " LT";
        //// System.out.println("Abhi  FinalReturnValue :"+FinalReturnValue);
        return FinalReturnValue;

    }

    public String[] fnarrUniqueProductsSaleSummry_NewWay(int Sstat) {

        Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName FROM tblTmpInvoiceDetails where Sstat='" + Sstat + "' and  (OrderQty<>0 OR SampleQuantity<>0 OR Stock<>0 OR FreeQty<>0) ", null);
        //Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName, KGLiter, DisplayUnit FROM tblProductListMaster", null);
        try {
            String UniqueProductShortName[] = new String[cursor2.getCount()];
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(0)) {
                        UniqueProductShortName[i] = cursor2.getString(0).toString();
                        //// System.out.println("Anuj ProductShortName sunil: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"KGLiter sunil: "+(String) cursor2.getString(LoncolumnIndex1));

                        String aa[] = fnarrUniqueKGLiterAndDisplayUnitBasedProductName(UniqueProductShortName[i]);
                        UniqueProductShortName[i] = UniqueProductShortName[i] + "^" + aa[0];

                        // System.out.println("Aajad ProductShortName sunil: "+UniqueProductShortName[i]);


                        cursor2.moveToNext();
                    }

                }

            }
            return UniqueProductShortName;
        } finally {
            cursor2.close();
        }
    }

    public String[] fnarrUniqueKGLiterAndDisplayUnitBasedProductName(String ProductShortName) {

        Cursor cursor2 = db.rawQuery("SELECT  KGLiter, DisplayUnit FROM tblProductListMaster where ProductShortName= '" + ProductShortName + "' ", null);
        try {
            String UniqueProductShortName[] = new String[cursor2.getCount()];
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(0)) {
                        UniqueProductShortName[i] = cursor2.getString(0).toString() + "^" + cursor2.getString(1).toString();
                        // System.out.println("Aajad123 ProductShortName sunil: "+UniqueProductShortName[i]);

                        cursor2.moveToNext();
                    }

                }

            }
            return UniqueProductShortName;
        } finally {
            cursor2.close();
        }
    }

    public String fnCalculateKGLitersNotSync(int Sstat) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        String[] UniqueKgLiters;
        UniqueKgLiters = fnarrUniqueProductsSaleSummry_NewWay(Sstat);//fnarrUniqueKgLitersDisplayUnit();
        String val = "";
        String totalKGSales = "0.0";
        String totalSampleSalesKG = "0.0";
        String totalFreeQtySalesKG = "0.0";
        String totalLitersSales = "0.0";
        String totalSampleSalesLT = "0.0";
        String totalFreeQtySalesLT = "0.0";
        String totalDiscountLT = "0.0";
        String totalDiscountKG = "0.0";


        String totalOverallKGSales = "0.0";
        String totalOverallSampleSalesKG = "0.0";
        String totalOverallFreeQtySalesKG = "0.0";
        String totalOverallLitersSales = "0.0";
        String totalOverallSampleSalesLT = "0.0";
        String totalOverallFreeQtySalesLT = "0.0";
        String totalOverallDiscountLT = "0.0";
        String totalOverallDiscountKG = "0.0";

        String FinalReturnValue = "";
        String ppName = "";
        String pDisplayUnit = "";
        for (int kk = 0; kk < UniqueKgLiters.length; kk++) {
            StringTokenizer tokensUniqueKgLiters = new StringTokenizer(String.valueOf(UniqueKgLiters[kk]), "^");

            ppName = tokensUniqueKgLiters.nextToken().trim();

            val = "";
            val = tokensUniqueKgLiters.nextToken().trim();//UniqueKgLiters[kk].toString().trim();

            // change by sunil
            //val="0";
            //// System.out.println("Abhi UniqueKgLiters[kk] :"+UniqueKgLiters[kk]);

            pDisplayUnit = tokensUniqueKgLiters.nextToken().trim();
            //// System.out.println("Abhi pDisplayUnit:" +pDisplayUnit);
            //if(val.contains("0g"))
            if (pDisplayUnit.contains("Kg")) {
                //// System.out.println("Abhi getting Kg");
                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblTmpInvoiceDetails where ProductShortName='" + ppName + "' and Sstat='" + Sstat + "'", null);
                try {
                    //val=val.replace("g", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {
                                totalKGSales = "0.0";
                                totalFreeQtySalesKG = "0.0";
                                totalSampleSalesKG = "0.0";
                                if (!cursor2.isNull(LoncolumnIndex)) {
                                    totalKGSales = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    //	cursor2.moveToNext();

                                    ////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalKGSales-:"+ totalKGSales);
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    totalFreeQtySalesKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
                                    //	cursor2.moveToNext();
                                    ////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalFreeQtySalesKG-:"+ totalFreeQtySalesKG);
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    totalSampleSalesKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));

                                    ////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalSampleSalesKG-:"+ totalSampleSalesKG);
                                    //
                                }


                                //Write Here

                                totalOverallKGSales = "" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(totalKGSales));
                                //////// System.out.println("AbhiSunil  totalOverallKGSales-:"+ totalOverallKGSales);
                                totalOverallFreeQtySalesKG = "" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(totalFreeQtySalesKG));
                                //////// System.out.println("AbhiSunil  totalOverallFreeQtySalesKG-:"+ totalOverallFreeQtySalesKG);
                                totalOverallSampleSalesKG = "" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(totalSampleSalesKG));
                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }

            }
            //if(val.contains("0ml"))
            if (pDisplayUnit.contains("Lt")) {
                //// System.out.println("Abhi getting Liter");

                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblTmpInvoiceDetails where ProductShortName ='" + ppName + "' and Sstat='" + Sstat + "'", null);
                try {
                    //// System.out.println("Abhi  cursor2.getCount() :"+cursor2.getCount());
                    //val=val.replace("ml", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {
                                totalLitersSales = "0.0";
                                totalSampleSalesLT = "0.0";
                                totalFreeQtySalesLT = "0.0";

                                if (!cursor2.isNull(LoncolumnIndex)) {

                                    totalLitersSales = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    //	////// System.out.println("totalLitersSales :"+totalLitersSales);
                                    totalOverallLitersSales = "" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(totalLitersSales));

                                    //// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
                                    //cursor2.moveToNext();
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    totalFreeQtySalesLT = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
                                    //////// System.out.println("totalFreeQtySalesLT :"+totalFreeQtySalesLT);
                                    totalOverallFreeQtySalesLT = "" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(totalFreeQtySalesLT));

                                    //// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
                                    //cursor2.moveToNext();
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    totalSampleSalesLT = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
                                    totalOverallSampleSalesLT = "" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(totalSampleSalesLT));

                                    //// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
                                    //	////// System.out.println("totalSampleSalesLT :"+totalSampleSalesLT);
                                }


                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }


            }
        }

        //// System.out.println("Abhi Sunil  totalOverallKGSales Before:" +totalOverallKGSales);
        //// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG Before:" +totalOverallFreeQtySalesKG);
        //// System.out.println("Abhi Sunil  totalOverallSampleSalesKG Before:" +totalOverallSampleSalesKG);

        totalOverallKGSales = ConvertGramToKilo(totalOverallKGSales);

        totalOverallFreeQtySalesKG = ConvertGramToKilo(totalOverallFreeQtySalesKG);

        totalOverallSampleSalesKG = ConvertGramToKilo(totalOverallSampleSalesKG);

        //// System.out.println("Abhi Sunil  totalOverallKGSales After:" +totalOverallKGSales);
        //// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG After:" +totalOverallFreeQtySalesKG);
        //// System.out.println("Abhi Sunil  totalOverallSampleSalesKG After:" +totalOverallSampleSalesKG);

        totalOverallLitersSales = ConvertMLToLiters(totalOverallLitersSales);

        totalOverallFreeQtySalesLT = ConvertMLToLiters(totalOverallFreeQtySalesLT);

        totalOverallSampleSalesLT = ConvertMLToLiters(totalOverallSampleSalesLT);


        String strGettblSyncSummuryDetailsKGLitersDetails = "0.0_0.0_0.0_0.0_0.0_0.0_0.0_0.0";
        //strGettblSyncSummuryDetailsKGLitersDetails=fnGettblSyncSummuryDetailsKGLitersDetails();

        StringTokenizer tokensGettblSyncSummuryDetailsKGLitersDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsKGLitersDetails), "_");

        totalOverallKGSales = "" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallFreeQtySalesKG = "" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallSampleSalesKG = "" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallLitersSales = "" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallFreeQtySalesLT = "" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallSampleSalesLT = "" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));


        Double DtotalOverallKGSales = Double.parseDouble(totalOverallKGSales);
        DtotalOverallKGSales = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));

        Double DtotalOverallFreeQtySalesKG = Double.parseDouble(totalOverallFreeQtySalesKG);
        DtotalOverallFreeQtySalesKG = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));

        Double DtotalOverallSampleSalesKG = Double.parseDouble(totalOverallSampleSalesKG);
        DtotalOverallSampleSalesKG = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));

        Double DtotalOverallLitersSales = Double.parseDouble(totalOverallLitersSales);
        DtotalOverallLitersSales = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));

        Double DtotalOverallFreeQtySalesLT = Double.parseDouble(totalOverallFreeQtySalesLT);
        DtotalOverallFreeQtySalesLT = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));

        Double DtotalOverallSampleSalesLT = Double.parseDouble(totalOverallSampleSalesLT);
        DtotalOverallSampleSalesLT = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));


        //DtotalOverallKGSales = Double.parseDouble(decimalFormat.format(DtotalOverallKGSales));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));
        FinalReturnValue = FinalReturnValue + DtotalOverallKGSales + " Units";

        // DtotalOverallFreeQtySalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesKG));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallFreeQtySalesKG + " Units";

        // DtotalOverallSampleSalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesKG));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallSampleSalesKG + " Units";

        // DtotalOverallLitersSales = Double.parseDouble(decimalFormat.format(DtotalOverallLitersSales));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallLitersSales + " LT";

        // DtotalOverallFreeQtySalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesLT));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallFreeQtySalesLT + " LT";

        //DtotalOverallSampleSalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesLT));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallSampleSalesLT + " LT";


        //FinalReturnValue= "" + DtotalOverallKGSales + " KG" + "^" + DtotalOverallFreeQtySalesKG + " KG" + "^" + DtotalOverallSampleSalesKG + " KG" + "^" + DtotalOverallLitersSales + " LT" + "^" + DtotalOverallFreeQtySalesLT + " LT" + "^" + DtotalOverallSampleSalesLT + " LT";
        //// System.out.println("Abhi  FinalReturnValue :"+FinalReturnValue);
        return FinalReturnValue;

    }

    public String[] fnCalculateProductsSaleSummryForSubmitAndNotSentToServer(int Sstat) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        String[] UniqueProductsSaleSummry;
        UniqueProductsSaleSummry = fnarrUniqueProductsSaleSummry_NewWay(Sstat);   // 121 Product will come


        // System.out.println("Check data 1 UniqueProductsSaleSummry :"+UniqueProductsSaleSummry.length);

        String val = "";
        String SummryPName = "";
        String SDisplayName = "";
        String SDisplayUnit = "";


        String SumOQty[] = new String[UniqueProductsSaleSummry.length];
        String SumFQty[] = new String[UniqueProductsSaleSummry.length];
        String SumSQty[] = new String[UniqueProductsSaleSummry.length];


        String SumOQtyKG[] = new String[UniqueProductsSaleSummry.length];
        String SumFQtyKG[] = new String[UniqueProductsSaleSummry.length];
        String SumSQtyKG[] = new String[UniqueProductsSaleSummry.length];


        String SummryProductName[] = new String[UniqueProductsSaleSummry.length];
        String SummryDisplayUnit[] = new String[UniqueProductsSaleSummry.length];

        String FinalReturnValue[] = new String[UniqueProductsSaleSummry.length];

        String LineSkuWise[] = new String[UniqueProductsSaleSummry.length];


        for (int kk = 0; kk < UniqueProductsSaleSummry.length; kk++) {
            val = "";
            SummryPName = "";
            SDisplayUnit = "";
            String getVal = "";
            getVal = UniqueProductsSaleSummry[kk].toString().trim();

            StringTokenizer tokens = new StringTokenizer(String.valueOf(getVal), "^");
            SummryPName = tokens.nextToken().trim();
            val = tokens.nextToken().trim();
            SDisplayUnit = tokens.nextToken().trim();


            SummryProductName[kk] = SummryPName;
            SummryDisplayUnit[kk] = SDisplayUnit;


            LineSkuWise[kk] = fnCalculateLinesSkuWise(SummryPName);

            // by sunil
            // Sstat = 3

            //if(val.contains("0g"))
            if (SDisplayUnit.contains("Kg")) {

                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity) FROM  tblTmpInvoiceDetails where ProductShortName ='" + SummryPName + "' and Sstat='" + Sstat + "'", null);
                try {
                    //val=val.replace("g", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {

                                if (!cursor2.isNull(LoncolumnIndex)) {
                                    SumOQty[kk] = "" + Integer.parseInt(cursor2.getString(LoncolumnIndex));
                                    //////////// System.out.println("SummryPName SumOQty[kk]"+SumOQty[kk]);
                                    String OrderKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    //////////// System.out.println("SummryPName OrderKG"+OrderKG);
                                    SumOQtyKG[kk] = ConvertGramToKilo(OrderKG);
                                    //	cursor2.moveToNext();
                                } else {
                                    SumOQty[kk] = "" + "0";
                                    SumOQtyKG[kk] = "" + "0.0";
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    SumFQty[kk] = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)));
                                    String FreeKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));

                                    SumFQtyKG[kk] = ConvertGramToKilo(FreeKG);

                                    //	cursor2.moveToNext();
                                } else {
                                    SumFQty[kk] = "" + "0";
                                    SumFQtyKG[kk] = "0.0";
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    SumSQty[kk] = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)));
                                    String SampleKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
                                    SumSQtyKG[kk] = ConvertGramToKilo(SampleKG);

                                } else {
                                    SumSQty[kk] = "0";
                                    SumSQtyKG[kk] = "0.0";
                                }
                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }

            }
            //if(val.contains("0ml"))
            if (SDisplayUnit.contains("Lt")) {

                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity) FROM  tblTmpInvoiceDetails where ProductShortName ='" + SummryPName + "' and Sstat='" + Sstat + "'", null);
                try {
                    //val=val.replace("ml", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {

                                if (!cursor2.isNull(LoncolumnIndex)) {
                                    SumOQty[kk] = "" + Integer.parseInt(cursor2.getString(LoncolumnIndex));
                                    String OrderKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    SumOQtyKG[kk] = ConvertMLToLiters(OrderKG);

                                } else {
                                    SumOQty[kk] = "" + "0";
                                    SumOQtyKG[kk] = "" + "0.0";
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    SumFQty[kk] = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)));
                                    String FreeKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
                                    SumFQtyKG[kk] = ConvertMLToLiters(FreeKG);

                                } else {
                                    SumFQty[kk] = "" + "0";
                                    SumFQtyKG[kk] = "0.0";
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    SumSQty[kk] = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)));
                                    String SampleKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
                                    SumSQtyKG[kk] = ConvertMLToLiters(SampleKG);

                                } else {
                                    SumSQty[kk] = "0";
                                    SumSQtyKG[kk] = "0.0";
                                }
                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }

            }
        }


        for (int kk = 0; kk < UniqueProductsSaleSummry.length; kk++) {

            //////////// System.out.println("Sunil Check Line UniqueProductsSaleSummry :"+UniqueProductsSaleSummry[kk]);

            if (false) {
            } else {
                FinalReturnValue[kk] = SummryProductName[kk] + "^" + SumOQty[kk] + "^" + SumFQty[kk] + "^" + SumSQty[kk] + "^" + SumOQtyKG[kk] + "^" + SumFQtyKG[kk] + "^" + SumSQtyKG[kk] + "^" + LineSkuWise[kk];
                //////////// System.out.println("FinalReturnValue[kk] :" + FinalReturnValue[kk]);
            }

        }


        return FinalReturnValue;

    }

    public String fnGetFullSummryDetailsForSaleForTabTwoAndTabThree(int Sstat) {

        String FullSummryDetailsForSale;
        FullSummryDetailsForSale = "";

        int TotActualCall = 0;
        TotActualCall = fnGetActualCall();

        ////// System.out.println("TotActualCall: "	+ TotActualCall);

        int TotProductiveCall = 0;
        TotProductiveCall = fnGetProductiveCall();

        ////// System.out.println("TotProductiveCall: "	+ TotProductiveCall);

        String TotSalesValue = "0.00";
        TotSalesValue = fnGetTotalSales(Sstat);//fnGetTotalDiscount


        String TotDiscountValue = "0.00";
        TotDiscountValue = fnGetTotalDiscount(Sstat);


        ////// System.out.println("TotSalesValue: "	+ TotSalesValue);
        ////// System.out.println("fnGetTotalDiscount: "	+ TotDiscountValue);
        //String strGettblSyncSummuryDetailsCallDetails="";
        //strGettblSyncSummuryDetailsCallDetails=fnGettblSyncSummuryDetailsCallDetails();
        ////// System.out.println("strGettblSyncSummuryDetailsCallDetails: "	+ strGettblSyncSummuryDetailsCallDetails);
        //StringTokenizer tokensGettblSyncSummuryDetailsCallDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsCallDetails), "_");

				/*TotActualCall= TotActualCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
				TotProductiveCall= TotProductiveCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
				TotSalesValue="" + (Double.parseDouble(TotSalesValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
				TotDiscountValue="" + (Double.parseDouble(TotDiscountValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
				*/
        FullSummryDetailsForSale = TotActualCall + "_" + TotProductiveCall + "_" + TotSalesValue + "_" + TotDiscountValue;


        ////// System.out.println("FullSummryDetailsForSale: "	+ FullSummryDetailsForSale);

        return FullSummryDetailsForSale;
    }

    public String fnGetFullSummryDetailsForSaleForTabOne() {

        String FullSummryDetailsForSale;
        FullSummryDetailsForSale = "";

        int TotActualCall = 0;
        TotActualCall = fnGetActualCall();

        ////// System.out.println("TotActualCall: "	+ TotActualCall);

        int TotProductiveCall = 0;
        TotProductiveCall = fnGetProductiveCall();

        ////// System.out.println("TotProductiveCall: "	+ TotProductiveCall);

        String TotSalesValue = "0.00";
        TotSalesValue = fnGetTotalSales(4);//fnGetTotalDiscount


        String TotDiscountValue = "0.00";
        TotDiscountValue = fnGetTotalDiscount(4);


        ////// System.out.println("TotSalesValue: "	+ TotSalesValue);
        ////// System.out.println("fnGetTotalDiscount: "	+ TotDiscountValue);
        String strGettblSyncSummuryDetailsCallDetails = "";
        strGettblSyncSummuryDetailsCallDetails = fnGettblSyncSummuryDetailsCallDetails();
        ////// System.out.println("strGettblSyncSummuryDetailsCallDetails: "	+ strGettblSyncSummuryDetailsCallDetails);
        StringTokenizer tokensGettblSyncSummuryDetailsCallDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsCallDetails), "_");

        TotActualCall = TotActualCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
        TotProductiveCall = TotProductiveCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
        TotSalesValue = "" + (Double.parseDouble(TotSalesValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
        TotDiscountValue = "" + (Double.parseDouble(TotDiscountValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
        FullSummryDetailsForSale = TotActualCall + "_" + TotProductiveCall + "_" + TotSalesValue + "_" + TotDiscountValue;


        ////// System.out.println("FullSummryDetailsForSale: "	+ FullSummryDetailsForSale);

        return FullSummryDetailsForSale;
    }

    public String[] fnCalculateProductsSaleSummryForTabOneNew() {
        int Sstat = 4;
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        //String[] UniqueProductsSaleSummry;
        //UniqueProductsSaleSummry=fnarrUniqueProductsSaleSummry();


        int ServerTableCount = fnCountDataIntblSyncSummuryForProductDetails();
        int PDATableCount = fnCountDataIntblStoreProdcutPurchaseDetails(4);
        int noOfRow = 0;

		/*// System.out.println("Testing Sunil Value by new function ServerTableCount :"+ServerTableCount);
		// System.out.println("Testing Sunil Value by new function PDATableCount :"+PDATableCount);*/

        if (ServerTableCount > 0 && PDATableCount > 0) {
            noOfRow = fnCountNumberOfSKUForBothServerAndPDATable();
        } else if (ServerTableCount > 0) {
            noOfRow = fnCountDataIntblSyncSummuryForProductDetails();
        } else if (PDATableCount > 0) {
            noOfRow = fnCountDataIntblStoreProdcutPurchaseDetails(4);
        }

        String SummryProductName[] = new String[noOfRow];

        // System.out.println("Checking the number of row "+noOfRow);

        HashMap<String, String> hmapProductName = new HashMap<String, String>();

        hmapProductName = fnAllProductnameForShowingInTable();
        // System.out.println("Ajeet and Amit row with Product name length"+ hmapProductName.size() );
        int ii = 0;
        for (String s : hmapProductName.keySet()) {
            // System.out.println("Ajeet and Amit row with final  "+ s );
            SummryProductName[ii] = s;
            ii++;
        }


        String val = "";
        String SummryPName = "";
        String SDisplayName = "";
        String SDisplayUnit = "";


        String SumOQty[] = new String[noOfRow];
        String SumFQty[] = new String[noOfRow];
        String SumSQty[] = new String[noOfRow];
        String SumOVal[] = new String[noOfRow];
        String SumDVal[] = new String[noOfRow];


        String SummryDisplayUnit[] = new String[noOfRow];

        String FinalReturnValue[] = new String[noOfRow];

        String LineSkuWise[] = new String[noOfRow];


        for (int kk = 0; kk < noOfRow; kk++) {

            String SumOfOQtyValue = "0";
            String SumOfFQtyValue = "0";
            String SumOfSQtyValue = "0";

            String ProductPrice = "0";
            String SumOfOrderValue = "0.0";
            String SumOfDiscountValue = "0.0";


            Cursor cursor1 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),ProductPrice,OrderVal,DisVal FROM  tblTmpInvoiceDetails where ProductShortName ='" + SummryProductName[kk] + "' and Sstat='" + Sstat + "'", null);
            try {
                if (cursor1.getCount() > 0) {
                    if (cursor1.moveToFirst()) {

                        for (int i = 0; i < cursor1.getCount(); i++) {

                            if (!cursor1.isNull(0)) {
                                SumOfOQtyValue = "" + Integer.parseInt(cursor1.getString(0));
                            }


                            if (!cursor1.isNull(1)) {
                                SumOfFQtyValue = "" + Integer.parseInt(cursor1.getString(1));
                            }


                            if (!cursor1.isNull(2)) {
                                SumOfSQtyValue = "" + Integer.parseInt(cursor1.getString(2));
                            }
                            if (!cursor1.isNull(3)) {
                                ProductPrice = cursor1.getString(3).toString().trim();
                            }
                            if (!cursor1.isNull(4)) {
                                SumOfOrderValue = cursor1.getString(4).toString().trim();
                            }
                            if (!cursor1.isNull(5)) {
                                SumOfDiscountValue = cursor1.getString(5).toString().trim();
                            }

                            cursor1.moveToNext();
                        }

                    }
                }

            } finally {
                cursor1.close();
            }

            Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQty),ProductPrice,OrderVal,DisVal FROM  tblSyncSummuryForProductDetails where SkuName ='" + SummryProductName[kk] + "'", null);
            try {
                if (cursor2.getCount() > 0) {
                    if (cursor2.moveToFirst()) {

                        for (int i = 0; i < cursor2.getCount(); i++) {

                            if (!cursor2.isNull(0)) {

                                SumOfOQtyValue = "" + (Integer.parseInt(SumOfOQtyValue) + Integer.parseInt(cursor2.getString(0)));
                            }


                            if (!cursor2.isNull(1)) {
                                SumOfFQtyValue = "" + (Integer.parseInt(SumOfFQtyValue) + Integer.parseInt(cursor2.getString(1)));
                            }


                            if (!cursor2.isNull(LoncolumnIndex2)) {
                                SumOfSQtyValue = "" + (Integer.parseInt(SumOfSQtyValue) + Integer.parseInt(cursor2.getString(2)));
                            }
                            if (!cursor2.isNull(3)) {
                                ProductPrice = cursor2.getString(3).toString().trim();
                            }
                            if (!cursor2.isNull(4)) {
                                SumOfOrderValue = "" + (Double.parseDouble(SumOfOrderValue) + Double.parseDouble(cursor2.getString(4)));
                            }
                            if (!cursor2.isNull(5)) {
                                SumOfDiscountValue = "" + (Double.parseDouble(SumOfDiscountValue) + Double.parseDouble(cursor2.getString(5)));
                            }


                            cursor2.moveToNext();
                        }

                    }
                }

            } finally {
                cursor2.close();
            }

			/*String SumOfOQtyValue="0";
			String SumOfFQtyValue="0";
			String SumOfSQtyValue="0";

			String ProductPrice;
			String SumOfOrderValue="0";
			String SumOfDiscountValue="0";*/

            SumOQty[kk] = SumOfOQtyValue;
            SumFQty[kk] = SumOfFQtyValue;
            SumSQty[kk] = SumOfSQtyValue;
            SumOVal[kk] = SumOfOrderValue;
            SumDVal[kk] = SumOfDiscountValue;

            FinalReturnValue[kk] = SummryProductName[kk] + "^" + SumOQty[kk] + "^" + SumFQty[kk] + "^" + SumSQty[kk] + "^" + ProductPrice + "^" + SumOVal[kk] + "^" + SumDVal[kk] + "^" + "0";


        }


        return FinalReturnValue;

    }

    public void deleteAlrtProductWithSlab(String storeId, String _productID, String _schSlabId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        Cursor cur = db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='" + storeId + "' and ProductID = '" + _productID + "' and schSlabId = '" + _schSlabId + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.DATABASE_TABLE_Main214, "StoreID=? AND ProductID=? AND schSlabId=? AND TmpInvoiceCodePDA=?", new String[]{storeId, _productID, _schSlabId, TmpInvoiceCodePDA});
        }

        // close();
    }

    public void deleteAlertValueSlab(String storeId, String _schSlabId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        Cursor cur = db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='" + storeId + "'  and schSlabId = '" + _schSlabId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.DATABASE_TABLE_Main214, "StoreID=? AND schSlabId=? AND  TmpInvoiceCodePDA=?", new String[]{storeId, _schSlabId, TmpInvoiceCodePDA});
        }

        //close();
    }

    public String fnGetMinSlabofSchemeID(String strSchemeID) {
        int LoncolumnIndex = 0;
        //////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
        String strProductSabFreeOrDiscount = "";

        Cursor cursor2 = db.rawQuery(
                "SELECT Min(SlabFrom) FROM tblSchemeDetails where SchemeID = '" + strSchemeID
                        + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (strProductSabFreeOrDiscount == "") {
                        strProductSabFreeOrDiscount = cursor2
                                .getString(LoncolumnIndex);
                    }

                    ////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
                    cursor2.moveToNext();
                    // cursor.close();
                }

                strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;

            }

        } finally {
            cursor2.close();
        }

        return strProductSabFreeOrDiscount;
    }

    public void reTruncateRouteMstrTbl() {
        db.execSQL("DELETE FROM tblRouteListMaster");
    }
    public void reTruncateRouteListMstrTbl() {
        db.execSQL("DELETE FROM tblRoutelist");
    }
    public String[] fnGetProductIDIDOnSchemeIdBasisNew(String SchemeID) {

        Cursor cursor = db.rawQuery("SELECT ProductID  FROM tblschemeProductMap where SchemeID='" + SchemeID + "'", null);

        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = cursor.getString(0);
                        ////// System.out.println("Abhi121 ProductID:" + CompleteResult[i].toString());
                        cursor.moveToNext();
                    }

                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String[] fnGetAllProductIDsAgainstSchemeIDsofClickedProductScheme(String AllSchmeIDs) {

        Cursor cursor = db.rawQuery("SELECT ProductId FROM tblschemeProductMap where SchemeID  IN (" + AllSchmeIDs + ")", null); // where FreeProductID IN ("+AllFreeProductgainstSchemeID+")
        ////// System.out.println("New Logic SELECT ProductId FROM tblschemeProductMap where SchemeID  IN ("+AllSchmeIDs+")");
        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = cursor.getString(0);
                        ////// System.out.println("Abhi121 fnGetAllProductIDsAgainstSchemeIDsofClickedProductScheme DISTINCT ProductID:" + CompleteResult[i].toString());
                        cursor.moveToNext();
                    }

                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String[] fnGetAllSchemeIDsAgainstCommonFreeIDsofClickedProductScheme(String AllFreeProductgainstSchemeID) {

        Cursor cursor = db.rawQuery("SELECT DISTINCT SchemeID FROM tblSchemeDetails where FreeProductID IN (" + AllFreeProductgainstSchemeID + ")", null); // where FreeProductID IN ("+AllFreeProductgainstSchemeID+")

        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = cursor.getString(0);
                        ////// System.out.println("Abhi121 fnGetAllSchemeIDsAgainstCommonFreeIDs DISTINCT SchemeID:" + CompleteResult[i].toString());
                        cursor.moveToNext();
                    }

                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String fnGetProdswithnewlogicNewNEw(String AllSchemeIds) {

        Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID IN (" + AllSchemeIds + ")", null);

        try {
            String CompleteResult = "";
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (CompleteResult.equals("")) {
                            CompleteResult = "'" + cursor.getString(0) + "'";
                        } else {
                            CompleteResult = CompleteResult + ",'" + cursor.getString(0) + "'";
                        }


                        cursor.moveToNext();
                    }
                    ////// System.out.println("All Products Against All Schemes:" + CompleteResult);
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String fnGetFreeProductIDetailswithnewlogicNew(String AllSchemeIds) {

        Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID IN (" + AllSchemeIds + ")", null);

        try {
            String CompleteResult = "";
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (CompleteResult.equals("")) {
                            CompleteResult = "'" + cursor.getString(0) + "'";
                        } else {
                            CompleteResult = CompleteResult + ",'" + cursor.getString(0) + "'";
                        }


                        cursor.moveToNext();
                    }
                    ////// System.out.println("All FreeProductID Against Scheme:" + CompleteResult);
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String[] fnGetDistinctFreeProductIDetails(String AllSchemeIds) {

        Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID IN (" + AllSchemeIds + ")", null);

        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = cursor.getString(0);
                        ////// System.out.println("Abhi121 FreeProductID:" + CompleteResult[i].toString());
                        cursor.moveToNext();
                    }

                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String fnGetSchemeswithnewlogic(String AllFreeProductgainstSchemeID) {

        Cursor cursor = db.rawQuery("SELECT DISTINCT SchemeID FROM tblSchemeDetails where FreeProductID IN (" + AllFreeProductgainstSchemeID + ")", null);

        try {
            String CompleteResult = "";
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (CompleteResult.equals("")) {
                            CompleteResult = "'" + cursor.getString(0) + "'";
                        } else {
                            CompleteResult = CompleteResult + ",'" + cursor.getString(0) + "'";
                        }


                        cursor.moveToNext();
                    }
                    ////// System.out.println("All SchemeIDs Against FreeProducts:" + CompleteResult);
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String fnGetFreeProductIDetailswithnewlogic(String SchemeID) {

        Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID='" + SchemeID + "'", null);

        try {
            String CompleteResult = "";
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (CompleteResult.equals("")) {
                            CompleteResult = "'" + cursor.getString(0) + "'";
                        } else {
                            CompleteResult = CompleteResult + ",'" + cursor.getString(0) + "'";
                        }


                        cursor.moveToNext();
                    }
                    ////// System.out.println("All FreeProductID Against Scheme:" + CompleteResult);
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public boolean countStockExists(String sID) {
        // int entryCount;
        Cursor cursorE2 = db.rawQuery(
                "SELECT SUM(Stock) FROM tblTransac WHERE StoreID ='" + sID
                        + "'", null);
        boolean chkI = false;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    ////// System.out.println("Stock prev.. entered!");

                    chkI = true;
                } else {
                    chkI = false;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String[] FetchStoreTransacFreeSampleQty(String sID2Fetch) {

        // id = getAllEntries();

        int SnamecolumnIndex1 = 0;

        // int Stock,int OrderQty, Double OrderVal, int FreeQty, Double DisVal

        Cursor cursor = db.rawQuery(
                "SELECT SampleQuantity  FROM tblTransac WHERE StoreID ='"
                        + sID2Fetch + "'", null);
        try {

            String StoreName[] = new String[cursor.getCount()];
            ;

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1)
                            .toString();

                    cursor.moveToNext();
                    // cursor.close();

                }

            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public String[] FetchStoreInvoiceData(String sID2Fetch) {

        // id = getAllEntries();

        int SnamecolumnIndex1 = 0;
        int SnamecolumnIndex2 = 1;
        int SnamecolumnIndex3 = 2;
        int SnamecolumnIndex4 = 3;
        int SnamecolumnIndex5 = 4;
        int SnamecolumnIndex6 = 5;
        int SnamecolumnIndex7 = 6;
        int SnamecolumnIndex8 = 7;
        int SnamecolumnIndex9 = 8;
        int SnamecolumnIndex10 = 9;
        int SnamecolumnIndex11 = 10;
        int SnamecolumnIndex12 = 11;


        /*werewr
         * int SnamecolumnIndex11 = 10; int SnamecolumnIndex12 = 11; int
         * SnamecolumnIndex13 = 12;
         */

        // TotalBeforeTaxDis real not null, TaxAmt real not null, TotalDis real
        // not null, InvoiceVal real not null, FreeTotal integer not null);";

        // Cursor cursor =
        // db.rawQuery("SELECT TotalBeforeTaxDis, TaxAmt, TotalDis, InvoiceVal, FreeTotal, InvAfterDis, AddDis, AmtPrevDue, AmtColl, AmtOut, CreditAmt, InvoiceAfterCreditAmt, InvoiceOrginal FROM tblTmpInvoiceHeader WHERE StoreID ='"
        // + sID2Fetch + "'", null);
        Cursor cursor = db
                .rawQuery(
                        "SELECT TotalBeforeTaxDis, TaxAmt, TotalDis, InvoiceVal, FreeTotal, InvAfterDis, AddDis, AmtPrevDue, AmtColl, AmtOut, NoCoupon,TotalCoupunAmount FROM tblTmpInvoiceHeader WHERE StoreID ='" + sID2Fetch + "'", null);
        ////// System.out.println("FetchStoreInvoiceData store ............... called");
        try {

            String StoreName[] = new String[cursor.getCount()];


            if (cursor.moveToFirst()) {
                ////// System.out.println("FetchStoreInvoiceData store ............... cursor.getCount()" + cursor.getCount());
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex2)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex3)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex4)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex5)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex6)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex7)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex8)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex9)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex10)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex11)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex12)
                            .toString();// + "_" + (String)
                    // cursor.getString(SnamecolumnIndex11).toString()
                    // + "_" + (String)
                    // cursor.getString(SnamecolumnIndex12).toString()
                    // + "_" + (String)
                    // cursor.getString(SnamecolumnIndex13).toString();
                    ////// System.out.println("FetchStoreInvoiceData store ..............." + StoreName[i]);
                    cursor.moveToNext();
                    // cursor.close();

                }

            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public String[] FetchStoreTransacData(String sID2Fetch) {

        // id = getAllEntries();

        int SnamecolumnIndex1 = 0;
        int SnamecolumnIndex2 = 1;
        int SnamecolumnIndex3 = 2;
        int SnamecolumnIndex4 = 3;
        int SnamecolumnIndex5 = 4;
        int SnamecolumnIndex6 = 5;

        // int Stock,int OrderQty, Double OrderVal, int FreeQty, Double DisVal

        Cursor cursor = db
                .rawQuery(
                        "SELECT Stock, OrderQty, OrderVal, FreeQty, DisVal, SampleQuantity  FROM tblTransac WHERE StoreID ='"
                                + sID2Fetch + "'", null);
        try {

            String StoreName[] = new String[cursor.getCount()];
            ;

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex2)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex3)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex4)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex5)
                            .toString()
                            + "_"
                            + (String) cursor.getString(SnamecolumnIndex6)
                            .toString();

                    cursor.moveToNext();
                    // cursor.close();

                }

            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public String fnGetSchemeIdOnStoreTypeBasis(String strStoreType) {
        int LoncolumnIndex = 0;
        String strSchemeID = "";
        Cursor cursor2 = db.rawQuery(
                "SELECT SchemeID FROM tblschemeStoreTypeMap where StoreTypeID="
                        + Integer.parseInt(strStoreType), null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strSchemeID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeID;
        } finally {
            cursor2.close();
        }

        /*
         * Double myLons[] = new Double[cursor2.getCount()];; if
         * (cursor2.moveToFirst()) { for (int i = 0; i < cursor2.getCount();
         * i++) { myLons[i] = cursor2.getDouble(LoncolumnIndex);
         * cursor2.moveToNext(); //cursor2.close(); //third try } // second
         * tried here: cursor2.close(); } cursor2.close(); // Original location
         * for cursor2.close() //db.close();
         *
         * return myLons;
         */
    }

    public String fnGetStoreTypeOnStoreIdBasis(String strStoreID) {

        Cursor cursorE2 = db.rawQuery("SELECT StoreType FROM tblStoreList WHERE StoreID ='" + strStoreID + "'", null);
        String StoreType = "";
        int ScodecolumnIndex = 0;
        try {

            if (cursorE2.moveToFirst()) {

                for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                    StoreType = (String) cursorE2.getString(ScodecolumnIndex)
                            .toString();
                    cursorE2.moveToNext();
                }
            }
            return StoreType;
        } finally {
            cursorE2.close();
        }

    }

    //public static String[] FetchLODqty(String ssStoreID,String CatID)
    public HashMap<String, String> FetchLODqty(String ssStoreID) {

        int ScodecolumnIndex = 0;
        int SnamecolumnIndex = 1;

        //hmapCtgryPrdctDetail= key=prdctId,val=CategoryID
        HashMap<String, String> hmapCtgryPrdctDetail = new HashMap<String, String>();


        //open();
        //tblPDAGetLODQty(StoreID text null,Date text null,SKUID text  null,Qty integer null,SKUName text null);";

		/*Cursor cursor = db.rawQuery("SELECT LastTransDate, Quantity FROM tblLastTransactionDetails where StoreID= '"
								+ ssStoreID + "' and CategoryID='"+CatID+"'", null);*/
		/*Cursor cursor = db.rawQuery("SELECT LastTransDate, Quantity FROM tblLastTransactionDetails where StoreID= '"
				+ ssStoreID + "'", null);*/
        Cursor cursor = db.rawQuery("SELECT Date,Qty,SKUID FROM tblPDAGetLODQty where StoreID= '"
                + ssStoreID + "'", null);

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {

                        if (cursor.getString(ScodecolumnIndex).toString().equals("NA")) {
                            hmapCtgryPrdctDetail.put((String) cursor.getString(2).toString(), "NA" + "-" + (String) cursor.getString(SnamecolumnIndex).toString());

                        } else {
                            String fullDate;
                            String convertedTXTdate;
                            String exDay;
                            String exMonth;
                            //// System.out.println("Sunil Total else part: ");

                            SimpleDateFormat format1 = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH);
                            //SimpleDateFormat format2 = new SimpleDateFormat("dd-MMM-yyyy",Locale.ENGLISH);

                            Date date;
                            fullDate = (String) cursor.getString(ScodecolumnIndex).toString();
                            fullDate = tViewDate(fullDate);

                            StringTokenizer tokens = new StringTokenizer(String.valueOf(fullDate), "-");

                            exDay = tokens.nextToken().trim();
                            exMonth = tokens.nextToken().trim();
                            hmapCtgryPrdctDetail.put((String) cursor.getString(2).toString(), exDay + "-" + exMonth + "/" + (String) cursor.getString(SnamecolumnIndex).toString());
                            //StoreName[i] = exDay+"/"+exMonth+ "-"+(String)cursor.getString(SnamecolumnIndex).toString();

                        }
                        cursor.moveToNext();
                    }
                }
            }

		/*try {
			String StoreName[] = new String[cursor.getCount()];
			//// System.out.println("Sunil Total cursor.getCount() :"+cursor.getCount());

			if(cursor.getCount()>0)
			{
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {




					//// System.out.println("Sunil Total cursor :"+cursor.getString(ScodecolumnIndex).toString());

					try {
						} catch (Exception e) {
					}
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					cursor.moveToNext();
				}
			}
		}*/
            return hmapCtgryPrdctDetail;
        } finally {
            cursor.close();
            //close();
        }

    }

    public String tViewDate(String PrevDate) {

        //// System.out.println("PrevDate :"+PrevDate);
        StringTokenizer tokennewPdate = new StringTokenizer(PrevDate, "-");
        String md1e = tokennewPdate.nextToken().trim();
        String md2e = tokennewPdate.nextToken().trim();
       /* if(md2e.toLowerCase().equals("Jan".toLowerCase()))
        {
            md2e="01";
        }
        if(md2e.toLowerCase().equals("Feb".toLowerCase()))
        {
            md2e="02";
        }
        if(md2e.toLowerCase().equals("Mar".toLowerCase()))
        {
            md2e="03";
        }
        if(md2e.toLowerCase().equals("Apr".toLowerCase()))
        {
            md2e="04";
        }
        if(md2e.toLowerCase().equals("May".toLowerCase()))
        {
            md2e="05";
        }
        if(md2e.toLowerCase().equals("Jun".toLowerCase()))
        {
            md2e="06";
        }
        if(md2e.toLowerCase().equals("Jul".toLowerCase()))
        {
            md2e="07";
        }
        if(md2e.toLowerCase().equals("Aug".toLowerCase()))
        {
            md2e="08";
        }
        if(md2e.toLowerCase().equals("Sep".toLowerCase()))
        {
            md2e="09";
        }
        if(md2e.toLowerCase().equals("Oct".toLowerCase()))
        {
            md2e="10";
        }
        if(md2e.toLowerCase().equals("Nov".toLowerCase()))
        {
            md2e="11";
        }
        if(md2e.toLowerCase().equals("Dec".toLowerCase()))
        {
            md2e="12";
        }*/
        String md3e = tokennewPdate.nextToken().trim();
        PrevDate = md1e + "-" + md2e + "-" + md3e;

        return PrevDate;
    }

    /*public static String[] FetchRate() {

		// id = getAllEntries();

		int ScodecolumnIndex = 0;


		Cursor cursor = db.rawQuery("SELECT ProductRLP FROM tblProductListMaster",null);
		try {
			String StoreName[] = new String[cursor.getCount()];
			;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex)
							.toString();
					////// System.out.println("DB-ADAP: PROD RLP: "+ (String) cursor.getString(ScodecolumnIndex).toString());
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}*/
    public Double fnGetLastCreditAmountFromLastInvoiceTable(String strStoreID) {

        int ScodecolumnIndex = 0;
        Double strLastBalanceAmt = 0.00;
        Cursor cursor = db.rawQuery(
                "SELECT CreditPreviousDue FROM tblPDALastInvoiceDet where StoreID='"
                        + strStoreID + "'", null);
        try {
            ////// System.out.println("Raja babu Abhivan Raj strLastBalanceAmt 1a :"+strLastBalanceAmt);
            if (cursor.getCount() > 0) {
                ////// System.out.println("Raja babu Abhivan Raj strLastBalanceAmt 2a :"+strLastBalanceAmt);
                if (cursor.moveToFirst()) {
                    if (!cursor.getString(ScodecolumnIndex).toString().equals("")) {
                        for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                            if (!cursor.isNull(ScodecolumnIndex)) {
                                strLastBalanceAmt = Double.parseDouble(cursor
                                        .getString(ScodecolumnIndex).toString());
                                ////// System.out.println("Raja babu Abhivan Raj strLastBalanceAmt 3a :"+strLastBalanceAmt);
                                cursor.moveToNext();
                            }

                        }
                    }


                }
            }
            ////// System.out.println("Raja babu Abhivan Raj strLastBalanceAmt 4a :"+strLastBalanceAmt);
            return strLastBalanceAmt;
        } finally {
            cursor.close();
        }
    }

    public Double fnGetActualValueTotalReturnValue(String ReturnStoreId) {

        int LoncolumnIndex = 0;
        Double strActualValueTotalReturnValue = 0.00;

        Cursor cursor2 = db.rawQuery(
                "SELECT TotalReturnValue FROM  tblPDAProductReturnMstr where StoreID='"
                        + ReturnStoreId + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (!cursor2.isNull(LoncolumnIndex)) {
                        strActualValueTotalReturnValue = Double
                                .parseDouble(cursor2.getString(LoncolumnIndex));
                    }

                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strActualValueTotalReturnValue;
        } finally {
            cursor2.close();
        }

    }

    public Double fnGetActualValueAdjAmt(String ReturnStoreId) {

        int LoncolumnIndex = 0;
        Double strActualValueTotalAdjAmt = 0.00;
        Cursor cursor2 = db.rawQuery(
                "SELECT TotalAdjustValue FROM  tblPDAProductReturnMstr where StoreID='"
                        + ReturnStoreId + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (!cursor2.isNull(LoncolumnIndex)) {
                        strActualValueTotalAdjAmt = Double.parseDouble(cursor2
                                .getString(LoncolumnIndex));
                    }

                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strActualValueTotalAdjAmt;
        } finally {
            cursor2.close();
        }

    }

    public int fnCkhTotalReturnValue(String ReturnStoreId) {

        int LoncolumnIndex = 0;
        int strReturnIdMstr = 0;

        Cursor cursor2 = db.rawQuery(
                "SELECT TotalReturnValue FROM  tblPDAProductReturnMstr where StoreID='"
                        + ReturnStoreId + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnIdMstr = 1;
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strReturnIdMstr;
        } finally {
            cursor2.close();
        }

    }

    public Double fnGetAdjAmtProdReturns(String StoreID) {
        Double TotalAdjAmt = 0.00;
        int chkValue = fnCkhTotalReturnValue(StoreID);
        if (chkValue == 1) {
            TotalAdjAmt = fnGetActualValueAdjAmt(StoreID);

        }

        return TotalAdjAmt;
    }

    public Double fnGetTotalReturnValueOnOrderPage(String StoreID) {
        Double TotalReturnValue = 0.00;
        int chkValue = fnCkhTotalReturnValue(StoreID);
        if (chkValue == 1) {
            TotalReturnValue = fnGetActualValueTotalReturnValue(StoreID);

        }

        return TotalReturnValue;
    }

	/*public static Double[] FetchProdTaxAmt() {

		// id = getAllEntries();

		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery(
				"SELECT ProductTaxAmount FROM tblProductListMaster", null);
		try {
			Double StoreName[] = new Double[cursor.getCount()];
			;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = (Double) cursor.getDouble(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}*/

    public int fnCheckflgToShowStrachRowOrNot() {


        Cursor cursorE2 = db.rawQuery(
                "SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme", null);

        ////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {
                for (int i = 0; i < cursorE2.getCount(); i++) {
                    if (!cursorE2.isNull(0)) {
                        chkI = Integer.parseInt(cursorE2.getString(0));
                    } else {
                        chkI = 0;
                    }
                    cursorE2.moveToNext();
                }

            }

        } finally {
            cursorE2.close();
        }
        ////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;

    }

    public int checkStoreIdForNewStore(String ssStoreID) {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery(
                "SELECT *  FROM tblNewStoreListEntries where StoreID= '"
                        + ssStoreID + "'", null);
        try {
            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = 1;
                    cursor.moveToNext();
                    // cursor.close();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return ScodecolumnIndex;
        } finally {
            cursor.close();
        }

    }

    public String fnGetPDALastInvoiceDetDueAmt(String strStoreID) {

        Cursor cursorE2 = db.rawQuery(
                "SELECT BalanceAmount FROM tblPDALastInvoiceDet WHERE StoreID ='"
                        + strStoreID + "'", null);
        String StoreType = "0.0";
        int ScodecolumnIndex = 0;
        try {
            if (cursorE2.getCount() > 0) {

                if (cursorE2.moveToFirst()) {
                    if (!cursorE2.getString(ScodecolumnIndex).toString().equals("")) {
                        for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                            StoreType = (String) cursorE2.getString(ScodecolumnIndex)
                                    .toString();
                            cursorE2.moveToNext();
                        }
                    }
                }
            }
            return StoreType;
        } finally {
            cursorE2.close();
        }

    }

    public int fnGetStrachIDMinSlabQtyForCalculation(int strSchemeID) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;

        int strProductSabCardStrachIDQty = 0;


        Cursor cursor2 = db.rawQuery("SELECT Min(Slab) FROM tblStrachOnSchemeDetails where SchID = " + strSchemeID, null);
        try {
            if (cursor2.moveToFirst()) {
                if (!cursor2.isNull(LoncolumnIndex)) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (strProductSabCardStrachIDQty == 0) {
                            strProductSabCardStrachIDQty = Integer.parseInt(cursor2
                                    .getString(LoncolumnIndex));
                        }

                        cursor2.moveToNext();
                        // cursor.close();
                    }
                }


            }

        } finally {
            cursor2.close();
        }
        return strProductSabCardStrachIDQty;
    }

    public String fnGetStrachIDSlabQtyForCalculation(int Slab, int strSchemeID) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;

        String strProductSabCardStrachIDQty = "";


        Cursor cursor2 = db.rawQuery("SELECT Slab,cardStrachID,Qty FROM tblStrachOnSchemeDetails where Slab=" + Slab + " and SchID = " + strSchemeID, null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (strProductSabCardStrachIDQty == "") {
                        strProductSabCardStrachIDQty = cursor2
                                .getString(LoncolumnIndex) + "_" + cursor2
                                .getString(LoncolumnIndex1) + "_" + cursor2
                                .getString(LoncolumnIndex2);
                    }

                    cursor2.moveToNext();
                    // cursor.close();
                }


            }

        } finally {
            cursor2.close();
        }
        return strProductSabCardStrachIDQty;
    }

    public int fnGetStrachIDMaxSlabQtyForCalculation(int strSchemeID, int strOrderValue) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;

        int strProductSabCardStrachIDQty = 0;


        Cursor cursor2 = db.rawQuery("SELECT Max(Slab) FROM tblStrachOnSchemeDetails where Slab<=" + strOrderValue + " and SchID = " + strSchemeID, null);
        try {
            if (cursor2.moveToFirst()) {
                if (!cursor2.isNull(LoncolumnIndex)) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (strProductSabCardStrachIDQty == 0) {
                            strProductSabCardStrachIDQty = Integer.parseInt(cursor2
                                    .getString(LoncolumnIndex));
                        }

                        cursor2.moveToNext();
                        // cursor.close();
                    }
                }


            }

        } finally {
            cursor2.close();
        }
        return strProductSabCardStrachIDQty;
    }

    public String[] fnGetOtherProductIdForStrachCoupons(int strSchemID) {


        int ScodecolumnIndex = 0;
        Cursor cursor = db.rawQuery(
                "SELECT ProductId FROM tblSchemeProductMap where SchemeID='"
                        + strSchemID + "'", null);
        try {
            String ProductComboIds[] = new String[cursor.getCount()];
            ;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    ProductComboIds[i] = (String) cursor.getString(
                            ScodecolumnIndex).toString();
                    cursor.moveToNext();
                    //// System.out.println("fnGetOtherProductIdOfCombo : Product  Id  that Returns"+ ProductComboIds[i].trim());
                }
            }
            return ProductComboIds;
        } finally {
            cursor.close();
        }
    }

    public int fnCheckIsStrachCardApplicableonSlabOrValue(int SchemeID) {

        int LoncolumnIndex = 0;
        Cursor cursorE2 = db.rawQuery("SELECT ProductValueOrSlabBased FROM tblStrachOnSchemeDetails where SchID=" + SchemeID, null);

        ////// System.out.println("fnCheckIsStrachCardApplicableonSlabOrValue : " +"SELECT ProductValueOrSlabBased FROM tblStrachOnSchemeDetails where SchID="+ SchemeID);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {


                chkI = Integer.parseInt(cursorE2.getString(LoncolumnIndex).toString());

                cursorE2.moveToNext();


            }

        } finally {
            cursorE2.close();
        }
        ////// System.out.println("fnCheckIsStrachCardApplicableonSlabOrValue : " +chkI);
        return chkI;

    }

    public int fnCheckIsStrachCardApplicableonSchemeID(int SchemeID) {


        Cursor cursorE2 = db.rawQuery(
                "SELECT flgIsStrachApplicable FROM tblStrachApplicableOnScheme where SchID=" + SchemeID, null);

        ////// System.out.println("fnCheckIsStrachCardApplicableonSchemeID : " +"SELECT flgIsStrachApplicable FROM tblStrachApplicableOnScheme where SchID="+ SchemeID);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {
                for (int i = 0; i < cursorE2.getCount(); i++) {
                    if (!cursorE2.isNull(0)) {
                        chkI = 1;
                    } else {
                        chkI = 0;
                    }
                    cursorE2.moveToNext();
                }

            }

        } finally {
            cursorE2.close();
        }
        ////// System.out.println("fnCheckIsStrachCardApplicableonSchemeID : " +chkI);
        return chkI;

    }

    public String[] fnGetUniqueSchemeId() {
        int LoncolumnIndex = 0;


        Cursor cursor2 = db.rawQuery("SELECT DISTINCT SchID FROM tblStrachOnSchemeDetails", null);
        try {
            String UniqueSchemeId[] = new String[cursor2.getCount()];
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        UniqueSchemeId[i] = cursor2.getString(LoncolumnIndex).toString();
                        ////// System.out.println("abccc  :"+UniqueSchemeId[i]);
                        cursor2.moveToNext();
                    }

                }

            }
            return UniqueSchemeId;
        } finally {
            cursor2.close();
        }
    }

    public String fnGetFreeProductNameOnProcutIdBasisCombo(String strProductId) {

        int ScodecolumnIndex = 0;


        Cursor cursor = db.rawQuery(
                "SELECT ProductShortName FROM tblProductListMaster where ProductID='"
                        + strProductId + "'", null);
        try {
            String ProductComboId = "";
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    ProductComboId = (String) cursor
                            .getString(ScodecolumnIndex).toString();

                    cursor.moveToNext();
                }
            }
            return ProductComboId;
        } finally {
            cursor.close();
        }
    }

    public HashMap<String, String> checkForStoreIdSstat() {
        Cursor cursor = db.rawQuery("Select StoreID,Sstat from tblStoreList", null);// where Sstat in(1,3,4,5)
        HashMap<String, String> hmapStoreIDSstat = new HashMap<String, String>();
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int index = 0; index < cursor.getCount(); index++) {
                    hmapStoreIDSstat.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapStoreIDSstat;
    }

    public HashMap<String, String> checkForStoreIdIsNewStore() {
        Cursor cursor = db.rawQuery("Select StoreID,ISNewStore from tblStoreList", null);// where Sstat in(1,3,4,5)
        HashMap<String, String> hmapStoreIdNewStore = new HashMap<String, String>();
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int index = 0; index < cursor.getCount(); index++) {
                    hmapStoreIdNewStore.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapStoreIdNewStore;
    }

    public HashMap<String, String> checkForPreAddedStoreIdSstat() {
        Cursor cursor = db.rawQuery("Select StoreID,Sstat from tblStoreList", null);// where Sstat in(1,3,4,5)
        HashMap<String, String> hmapStoreIDSstat = new HashMap<String, String>();
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int index = 0; index < cursor.getCount(); index++) {
                    hmapStoreIDSstat.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapStoreIDSstat;
    }

    public HashMap<String, String> checkForStoreflgOrderType() {
        Cursor cursor = db.rawQuery("Select StoreID,flgOrderType from tblStoreList", null);// where Sstat in(1,3,4,5)
        HashMap<String, String> hmapflgOrderType = new HashMap<String, String>();
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int index = 0; index < cursor.getCount(); index++) {
                    hmapflgOrderType.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapflgOrderType;
    }

    public String fnValueFreeQtyOrDiscountForCaculation(String strSchemType,
                                                        String strSchemeID, int MaxValue) {
        int LoncolumnIndex = 0;

        String strProductSabFreeOrDiscount = "";

        if (Integer.parseInt(strSchemType) == 1
                || Integer.parseInt(strSchemType) == 2) {
            Cursor cursor2 = db
                    .rawQuery(
                            "SELECT FreeQuantity FROM tblSchemeDetails where SlabFrom ="
                                    + MaxValue + " and SchemeID ='"
                                    + strSchemeID + "'", null);
            try {
                if (cursor2.moveToFirst()) {

                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (strProductSabFreeOrDiscount == "") {
                            strProductSabFreeOrDiscount = cursor2
                                    .getString(LoncolumnIndex);
                        }
                        ////// System.out.println("SabFree - called = "+ strProductSabFreeOrDiscount);
                        cursor2.moveToNext();
                        // cursor.close();

                    }

                    // strProductSabFreeOrDiscount =
                    // strProductSabFreeOrDiscount;

                }

            } finally {
                cursor2.close();
            }
        }
        if (Integer.parseInt(strSchemType) == 3) {
            Cursor cursor2 = db
                    .rawQuery(
                            "SELECT Discount FROM tblSchemeDetails where SlabFrom ="
                                    + MaxValue + " and SchemeID ='"
                                    + strSchemeID + "'", null);
            try {
                if (cursor2.moveToFirst()) {

                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (strProductSabFreeOrDiscount == "") {
                            strProductSabFreeOrDiscount = cursor2
                                    .getString(LoncolumnIndex);
                        }

                        ////// System.out.println("DiscountFree - called = "+ strProductSabFreeOrDiscount);
                        cursor2.moveToNext();
                        // cursor.close();

                    }

                    // strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
                    // + "_" + strSchemType;

                }

            } finally {
                cursor2.close();
            }
        }
        return strProductSabFreeOrDiscount;
    }

    public String fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisNew(
            String strSchemType, String strSchemeID, String strFreeProductID,
            String strCombTypeID, String strSchemeName) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex2 = 1;
        int LoncolumnIndex3 = 2;
        String strProductSabFreeOrDiscount = "";

        if (Integer.parseInt(strSchemType) == 1
                || Integer.parseInt(strSchemType) == 2) {
            ////// System.out.println("STR SCH TYPE: "+ Integer.parseInt(strSchemType)); //

            Cursor cursor2 = db.rawQuery(
                    "SELECT SlabFrom, SlabTo, FreeQuantity FROM tblSchemeDetails WHERE SchemeID ='"
                            + strSchemeID + "'", null);

            //// System.out.println("SELECT SlabFrom, SlabTo, FreeQuantity FROM tblSchemeDetails WHERE SchemeID ='"+ strSchemeID + "'");

            try {
                if (cursor2.moveToFirst()) {

                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (strProductSabFreeOrDiscount == "") {
                            if (Integer.parseInt(strCombTypeID) == 2) {
                                strProductSabFreeOrDiscount = "Combo :"
                                        + strSchemeName + "("
                                        + cursor2.getString(LoncolumnIndex)
                                        + "+"
                                        + cursor2.getString(LoncolumnIndex3);
                            } else {
                                strProductSabFreeOrDiscount = strSchemeName
                                        + "("
                                        + cursor2.getString(LoncolumnIndex)
                                        + "+"
                                        + cursor2.getString(LoncolumnIndex3);
                            }
                            //// System.out.println("strProductSabFreeOrDiscount4ab :"+ strProductSabFreeOrDiscount );


                        } else {
                            if (Integer.parseInt(strCombTypeID) == 2) {
                                strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
                                        + ", "
                                        + cursor2.getString(LoncolumnIndex)
                                        + "+"
                                        + cursor2.getString(LoncolumnIndex3);
                            } else {
                                strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
                                        + ", "
                                        + cursor2.getString(LoncolumnIndex)
                                        + "+"
                                        + cursor2.getString(LoncolumnIndex3);
                            }
                            //// System.out.println("strProductSabFreeOrDiscount5ab :"+ strProductSabFreeOrDiscount );


                        }

                        cursor2.moveToNext();
                        // cursor.close();
                    }
                    //// System.out.println("strProductSabFreeOrDiscount1ab :"+ strProductSabFreeOrDiscount );

                    if (strProductSabFreeOrDiscount == "") {
                        strProductSabFreeOrDiscount = "No Free Quantity Schemes Available_"
                                + strSchemType;
                    } else {
                        strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
                                + ")_" + strSchemType;
                    }
                    //// System.out.println("strProductSabFreeOrDiscount2ab :"+ strProductSabFreeOrDiscount);

                }

            } finally {
                cursor2.close();
            }
        }
        if (Integer.parseInt(strSchemType) == 3) {
            ////// System.out.println("STR SCH TYPE: "+ Integer.parseInt(strSchemType)); //
            int flgDiscountType = 0;
            flgDiscountType = fnGetDisType(strSchemeID, strSchemType);
            Cursor cursor2 = db.rawQuery(
                    "SELECT SlabFrom, SlabTo, Discount FROM tblSchemeDetails WHERE SchemeID ='"
                            + strSchemeID + "'", null);

            //// System.out.println("SELECT SlabFrom, SlabTo, Discount FROM tblSchemeDetails WHERE SchemeID ='"+ strSchemeID + "'");

            try {
                if (cursor2.moveToFirst()) {
                    ////// System.out.println("CURSOR2 COUNT SCH DIS: "+ cursor2.getCount());

                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (flgDiscountType == 1) {
                            if (strProductSabFreeOrDiscount == "") {
                                strProductSabFreeOrDiscount = strSchemeName
                                        + "("
                                        + cursor2.getString(LoncolumnIndex)
                                        + "+ Rs/-"
                                        + cursor2.getString(LoncolumnIndex3) + ")";
                            } else {
                                strProductSabFreeOrDiscount = strSchemeName
                                        + "("
                                        + cursor2.getString(LoncolumnIndex)
                                        + "+ Rs/-"
                                        + cursor2.getString(LoncolumnIndex3) + ")";
                            }
                        } else if (flgDiscountType == 2) {
                            if (strProductSabFreeOrDiscount == "") {
                                strProductSabFreeOrDiscount = strSchemeName
                                        + "("
                                        + cursor2.getString(LoncolumnIndex)
                                        + "+ "
                                        + cursor2.getString(LoncolumnIndex3) + "%)";
                            } else {
                                strProductSabFreeOrDiscount = strSchemeName
                                        + "("
                                        + cursor2.getString(LoncolumnIndex)
                                        + "+ "
                                        + cursor2.getString(LoncolumnIndex3) + "%)";
                            }
                        }

                        ////// System.out.println("strProductSabFreeOrDiscount: "+ strProductSabFreeOrDiscount);

                        cursor2.moveToNext();
                        // cursor.close();
                    }
                    if (strProductSabFreeOrDiscount == "") {
                        strProductSabFreeOrDiscount = "No Discounts Available_"
                                + strSchemType;
                    } else {
                        strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
                                + "_" + strSchemType;
                    }

                }

            } finally {
                cursor2.close();
            }
        }
        return strProductSabFreeOrDiscount;
    }

    public String fnGetSchemeIDOnProductIDIdBasisNew(String strProductId) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        String strSchemeIDFreeProductId = "";
        Cursor cursor2 = db.rawQuery(
                "SELECT SchemeID FROM tblschemeProductMap where ProductID='"
                        + strProductId + "' and SchemeType<=3", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    strSchemeIDFreeProductId = cursor2
                            .getString(LoncolumnIndex);
                    //+ "_"
                    //+ cursor2.getString(LoncolumnIndex1);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeIDFreeProductId;
        } finally {
            cursor2.close();
        }
    }

    public String fnGetAllSchemeDetailsOnProductNewClick(String strProductId) {

        String strSchemeIDFreePRoductId = "";
        String strSchemeID = fnGetSchemeIDOnProductIDIdBasisNew(strProductId);
        String strFreeProductID = "";
        String strSchemeTypeCombTypeIDSchemeName = "";
        strSchemeTypeCombTypeIDSchemeName = fnGetSchemTypeOnSchemIDIdBasis(strSchemeID);

        StringTokenizer tokensSchemeTypeCombTypeID = new StringTokenizer(
                String.valueOf(strSchemeTypeCombTypeIDSchemeName), "_");
        String strSchemeType = "";
        String strCombTypeID = "";
        String strSchemeName = "";
        strSchemeType = tokensSchemeTypeCombTypeID.nextToken().trim();
        strCombTypeID = tokensSchemeTypeCombTypeID.nextToken().trim();
        strSchemeName = tokensSchemeTypeCombTypeID.nextToken().trim();

        String strForAllScehmesAgainstProduct = "";
        strForAllScehmesAgainstProduct = fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisNew(
                strSchemeType, strSchemeID, strFreeProductID, strCombTypeID,
                strSchemeName);


        return strForAllScehmesAgainstProduct;
    }

	/*public static String[] fnGetOtherProductIdOfCombo(String strSchemID) {

		// id = getAllEntries();

		int ScodecolumnIndex = 0;


		Cursor cursor = db.rawQuery(
				"SELECT ProductId FROM tblSchemeProductMap where SchemeID='"
						+ strSchemID + "'", null);
		try {
			String ProductComboIds[] = new String[cursor.getCount()];
			;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					ProductComboIds[i] = (String) cursor.getString(
							ScodecolumnIndex).toString();
					cursor.moveToNext();
					//// System.out.println("fnGetOtherProductIdOfCombo : Product  Id  that Returns"+ ProductComboIds[i].trim());
				}
			}
			return ProductComboIds;
		} finally {
			cursor.close();
		}
	}*/

    public String fnFreeQuantity(String strProductId, int MaxValue) {
        String strSchemeIDFreePRoductId = "";

        strSchemeIDFreePRoductId = fnGetSchemeIDOnProductIDIdBasis(strProductId);
        //StringTokenizer tokensSchemeIDFreePRoductId = new StringTokenizer(
        //	String.valueOf(strSchemeIDFreePRoductId), "_");
        String strSchemeID = "";
        String strFreeProductID = "";
        strSchemeID = strSchemeIDFreePRoductId;// tokensSchemeIDFreePRoductId.nextToken().trim();
        //strFreeProductID = tokensSchemeIDFreePRoductId.nextToken().trim();

        String strSchemeTypeCombTypeIDSchemeName = "";
        strSchemeTypeCombTypeIDSchemeName = fnGetSchemTypeOnSchemIDIdBasis(strSchemeID);

        StringTokenizer tokensSchemeTypeCombTypeID = new StringTokenizer(
                String.valueOf(strSchemeTypeCombTypeIDSchemeName), "_");
        String strSchemeType = "";
        String strCombTypeID = "";
        String strSchemeName = "";
        strSchemeType = tokensSchemeTypeCombTypeID.nextToken().trim();
        strCombTypeID = tokensSchemeTypeCombTypeID.nextToken().trim();
        strSchemeName = tokensSchemeTypeCombTypeID.nextToken().trim();

        String strValueFreeQtyOrDiscount = "";
        strValueFreeQtyOrDiscount = fnValueFreeQtyOrDiscountForCaculation(strSchemeType, strSchemeID, MaxValue);
        return strValueFreeQtyOrDiscount;
    }

    public String fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisForCaculation(
            String strSchemType, String strSchemeID, int strOrderValue) {
        int LoncolumnIndex = 0;
        //////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
        String strProductSabFreeOrDiscount = "";

        if (Integer.parseInt(strSchemType) == 1
                || Integer.parseInt(strSchemType) == 2) {
            Cursor cursor2 = db.rawQuery(
                    "SELECT Max(SlabFrom) FROM tblSchemeDetails where SlabFrom<="
                            + strOrderValue + " and SchemeID = '" + strSchemeID
                            + "'", null);
            try {
                if (cursor2.moveToFirst()) {

                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (strProductSabFreeOrDiscount == "") {
                            strProductSabFreeOrDiscount = cursor2
                                    .getString(LoncolumnIndex);
                        }

                        cursor2.moveToNext();
                        // cursor.close();
                    }

                    strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
                            + "_" + strSchemType;

                }

            } finally {
                cursor2.close();
            }
        }
        if (Integer.parseInt(strSchemType) == 3) {
            Cursor cursor2 = db.rawQuery(
                    "SELECT Max(SlabFrom) FROM tblSchemeDetails where SlabFrom<="
                            + strOrderValue + " and SchemeID = '" + strSchemeID
                            + "'", null);
            try {
                if (cursor2.moveToFirst()) {

                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (strProductSabFreeOrDiscount == "") {
                            strProductSabFreeOrDiscount = cursor2
                                    .getString(LoncolumnIndex);
                        }

                        ////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
                        cursor2.moveToNext();
                        // cursor.close();
                    }

                    strProductSabFreeOrDiscount = strProductSabFreeOrDiscount
                            + "_" + strSchemType;

                }

            } finally {
                cursor2.close();
            }
        }
        return strProductSabFreeOrDiscount;
    }

    public String fnCallSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisForCaculationOverAll(
            String strSchemeType, String strSchemeID, int strOrderValue) {
        String strForCalculation = "";
        strForCalculation = fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisForCaculation(
                strSchemeType, strSchemeID, strOrderValue);
        return strForCalculation;
    }

    public String fnGetSchemTypeOnSchemIDIdBasis(String strSchemID) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        String strSchemeTypeCombTypeIDSchemeName = "";
        Cursor cursor2 = db.rawQuery(
                "SELECT SchemeType, CombTypeID,SchemeName FROM tblSchemeList where SchemeID='"
                        + strSchemID + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strSchemeTypeCombTypeIDSchemeName = cursor2
                            .getString(LoncolumnIndex)
                            + "_"
                            + cursor2.getString(LoncolumnIndex1)
                            + "_"
                            + cursor2.getString(LoncolumnIndex2);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeTypeCombTypeIDSchemeName;
        } finally {
            cursor2.close();
        }
    }

    public String fnGetProductSchemeIDandComboTypeIdDetails(String strProductId) {
        String strSchemeIDFreePRoductId = "";

        strSchemeIDFreePRoductId = fnGetSchemeIDOnProductIDIdBasis(strProductId);
        String strSchemeID = "";
        strSchemeID = strSchemeIDFreePRoductId;

        String strSchemeTypeCombTypeIDSchemeName = "";
        strSchemeTypeCombTypeIDSchemeName = fnGetSchemTypeOnSchemIDIdBasis(strSchemeID);

        StringTokenizer tokensSchemeTypeCombTypeID = new StringTokenizer(
                String.valueOf(strSchemeTypeCombTypeIDSchemeName), "_");
        String strSchemeType = "";
        String strCombTypeID = "";
        String strSchemeName = "";
        strSchemeType = tokensSchemeTypeCombTypeID.nextToken().trim();
        strCombTypeID = tokensSchemeTypeCombTypeID.nextToken().trim();
        strSchemeName = tokensSchemeTypeCombTypeID.nextToken().trim();

        String strProductIdSchemeIDFreeProductIDSchemeTypeCombTypeID = strProductId
                + "_"
                + strSchemeID
                + "_"
                + strSchemeType + "_" + strCombTypeID;

        // String strForCalculation="";
        // strForCalculation=fnGetSchemeDetailsOfProductOnSchemeTypeSchemeIDBasisForCaculation(strSchemeType,strSchemeID,strOrderValue);
        return strProductIdSchemeIDFreeProductIDSchemeTypeCombTypeID;
    }

    public String[] fnGetFreeProductIDetails(String SchemeID) {

        Cursor cursor = db.rawQuery("SELECT DISTINCT FreeProductID FROM tblSchemeDetails where SchemeID='" + SchemeID + "'", null);

        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = cursor.getString(0);
                        ////// System.out.println("Abhi121 FreeProductID:" + CompleteResult[i].toString());
                        cursor.moveToNext();
                    }

                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String fnGetFreeProIdDefault(String strSchemeID, int strOrderValue) {
        int LoncolumnIndex = 0;
        //////// System.out.println("strFPIDSlb strMaxSlb :" + strMaxSlb);
        String strProductSabFreeOrDiscount = "";

        Cursor cursor2 = db.rawQuery(
                "SELECT FreeProductID FROM tblSchemeDetails where SchemeID = '" + strSchemeID
                        + "' LIMIT 1", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    if (strProductSabFreeOrDiscount == "") {
                        strProductSabFreeOrDiscount = cursor2
                                .getString(LoncolumnIndex);
                    }

                    ////// System.out.println("Discount Abhinav = "+ strProductSabFreeOrDiscount);
                    cursor2.moveToNext();
                    // cursor.close();
                }

                strProductSabFreeOrDiscount = strProductSabFreeOrDiscount;

            }

        } finally {
            cursor2.close();
        }

        return strProductSabFreeOrDiscount;
    }
    //tblTransac (IMEIno text not null, TransDate string not null, StoreID text not null, ProdID text not null,
    //Stock integer not null, OrderQty integer not null, OrderVal real not null, FreeQty integer not null,
    //DisVal real not null, SchemeID text null, AppliedSlab text null, AppliedAbsVal text null, Sstat integer not null,
    //SampleQuantity int null, ProductShortName text null, ProductPrice real null);";//, DisplayUnit text null

    public String fnGetSchemeIDOnProductIDIdBasis(String strProductId) {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        String strSchemeIDFreeProductId = "";
        Cursor cursor2 = db.rawQuery(
                "SELECT SchemeID FROM tblschemeProductMap where ProductID='"
                        + strProductId + "' and SchemeType<=3", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    strSchemeIDFreeProductId = cursor2
                            .getString(LoncolumnIndex);
                    //+ "_"
                    //+ cursor2.getString(LoncolumnIndex1);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeIDFreeProductId;
        } finally {
            cursor2.close();
        }
    }

    // table tblTmpInvoiceHeader (IMEIno text not null, StoreID text not null, InvoiceDate string not null, TotalBeforeTaxDis real not null, TaxAmt real not null,
    //TotalDis real not null, InvoiceVal real not null, FreeTotal integer not null, Sstat integer not null, InvAfterDis real not null, AddDis real not null,
    //AmtPrevDue real null, AmtColl real null, AmtOut real null, NoCoupon int null, TotalCoupunAmount real null);";

    public String fnCheckIfSchemeApplicableOnProduct(String strProductId) {
        int LoncolumnIndex = 0;
        String strSchemeID = "";
        Cursor cursor2 = db.rawQuery(
                "SELECT SchemeID FROM tblschemeProductMap where ProductID= '"
                        + strProductId + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strSchemeID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeID;
        } finally {
            cursor2.close();
        }
    }

    public String[] fnGetOtherSchemeIdBasedOnFreeProductId(
            String strFreeProductID) {

        // id = getAllEntries();

        int ScodecolumnIndex = 0;


        Cursor cursor = db
                .rawQuery(
                        "SELECT DISTINCT  SchemeID AS SchemeID FROM tblSchemeDetails  where FreeProductID='"
                                + strFreeProductID + "'", null);
        try {
            String ProductComboSchemeIds[] = new String[cursor.getCount()];
            ;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    ProductComboSchemeIds[i] = (String) cursor.getString(
                            ScodecolumnIndex).toString();
                    cursor.moveToNext();
                    //// System.out.println("fnGetOtherSchemeIdBasedOnFreeProductId : Scheme ID  that Returns"+ ProductComboSchemeIds[i].trim());
                }
            }
            return ProductComboSchemeIds;
        } finally {
            cursor.close();
        }
    }

    public long saveStoreTransac(String IMEIno, String TransDate,
                                 String StoreID, String ProdID, int Stock, int OrderQty,
                                 Double OrderVal, int FreeQty, Double DisVal,
                                 String AppliedSchemeID, String AppliedSlab, String AppliedAbsVal,
                                 int selProdIDForSampleQty, String ProductShortName, Double ProductRate, String CatID) {//String DisplayUnit

        String activeRid;
        activeRid = GetActiveRouteID(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);


        ContentValues initialValues = new ContentValues();

        initialValues.put("IMEIno", IMEIno.trim());
        initialValues.put("TransDate", TransDate.trim());
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("ProdID", ProdID.trim());
        initialValues.put("Stock", Stock);
        initialValues.put("OrderQty", OrderQty);
        initialValues.put("OrderVal", OrderVal);
        initialValues.put("FreeQty", FreeQty);
        initialValues.put("DisVal", DisVal);

        initialValues.put("Sstat", 0);
        initialValues.put("SchemeID", AppliedSchemeID);
        initialValues.put("AppliedSlab", AppliedSlab);
        initialValues.put("AppliedAbsVal", AppliedAbsVal);
        initialValues.put("SampleQuantity", selProdIDForSampleQty);

        initialValues.put("ProductShortName", ProductShortName);

        initialValues.put("ProductPrice", ProductRate);
        initialValues.put("RouteID", Integer.parseInt(activeRid));
        initialValues.put("CatID", CatID.trim());

        //initialValues.put(Key_DisplayUnit, DisplayUnit);

        ////// System.out.println("inserting saveStoreTransac records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN31, null, initialValues);
    }

    //tblStrachOnSchemeDetails (SchID int null, cardStrachID int null, Slab int Null, Qty int null, ProductValueOrSlabBased int null);";

    public long saveStoreInvoice(String IMEIno, String StoreID, String InvoiceDate, Double TotalBeforeTaxDis, Double TaxAmt,
                                 Double TotalDis, Double InvoiceVal, int FreeTotal,
                                 Double InvAfterDis, Double AddDis, Double AmtPrevDue,
                                 Double AmtColl, Double AmtOut, int NoOfCouponValue, Double TotalCoupunAmount, int Outstat, String OrderIDPDA, String TmpInvoiceCodePDA, String strFinalAllotedInvoiceIds)// , Double CreditAmt, Double
    // InvoiceAfterCreditAmt, Double
    // valInvoiceOrginal)
    {

        String activeRid;
        activeRid = GetActiveRouteID(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);


        ContentValues initialValues = new ContentValues();

        initialValues.put("IMEIno", IMEIno.trim());
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("InvoiceDate", InvoiceDate.trim());
        initialValues.put("TotalBeforeTaxDis", TotalBeforeTaxDis);
        initialValues.put("TaxAmt", TaxAmt);
        initialValues.put("TotalDis", TotalDis);
        initialValues.put("InvoiceVal", InvoiceVal);
        initialValues.put("FreeTotal", FreeTotal);
        initialValues.put("InvAfterDis", InvAfterDis);
        initialValues.put("AddDis", AddDis);
        initialValues.put("Sstat", Outstat);

        initialValues.put("AmtPrevDue", AmtPrevDue);
        initialValues.put("AmtColl", AmtColl);
        initialValues.put("AmtOut", AmtOut);

        initialValues.put("NoCoupon", NoOfCouponValue);
        initialValues.put("TotalCoupunAmount", TotalCoupunAmount);
        initialValues.put("RouteID", Integer.parseInt(activeRid));
        initialValues.put("OrderIDPDA", OrderIDPDA);
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        initialValues.put("FinalAllotedInvoiceIds", strFinalAllotedInvoiceIds);
        /*
         * initialValues.put(KEY_OrderCreditAmt, 0.00);
         * initialValues.put(KEY_OrderInvoiceAfterCreditAmt, 0.00);
         * initialValues.put(KEY_OrderInvoiceOriginal, 0.00);
         */

        ////// System.out.println("inserting saveStoreInvoice records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN32, null, initialValues);
    }

    // tblStrachApplicableOnScheme (SchID int null, flgIsStrachApplicable int null);";

    public void deleteOldStoreTransac(String sID2del) {
        // int entryCount;
        db.execSQL("DELETE FROM tblTransac WHERE StoreID ='" + sID2del + "'");


    }


    //tblSyncSummuryForProductDetails (SkuName text null,OrderQty text null, FreeQty text null, SampleQty text null, TotalOrderKgs text null,
    //TotalFreeKgs text null, TotalSampleKgs text null, TotalSales text null);";

    public void deleteOldStoreInvoice(String sID2del, String OrderIDPDA, String TmpInvoiceCodePDA) {
        // int entryCount;
        //open();
        db.execSQL("DELETE FROM tblTmpInvoiceHeader WHERE StoreID ='" + sID2del + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");//and OrderIDPDA='"+OrderIDPDA+"'
        //close();
        // Cursor cursorE2 =


    }

    // tblSyncSummuryDetails (ActualCalls int null,ProductiveCalls int null, TotSalesValue text null, TotKGSales text null, TotFreeQtyKGSales text null,
    //TotSampleKGSales text null, TotLTSales text null, TotFreeQtyLTSales text null, TotSampleLTSales text null, TotDiscountKGSales text null, TotDiscountLTales text null);";

    public long fninsertSchemeCouponSlab(int SchemeID, int CardSlabID, int Slab, int Qtny, int ProductValueOrSlabBased) {

        ContentValues initialValues = new ContentValues();


        initialValues.put("SchID", SchemeID);
        initialValues.put("cardStrachID", CardSlabID);
        initialValues.put("Slab", Slab);
        initialValues.put("Qty", Qtny);
        initialValues.put("ProductValueOrSlabBased", ProductValueOrSlabBased);
        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN82, null, initialValues);
    }

    //tblPDAIsSchemeApplicable (IsSchemeApplicable int null);";

    public long fninsertSchemeCoupon(int SchemeID, int IsCouponApplicable) {

        ContentValues initialValues = new ContentValues();


        initialValues.put("SchID", SchemeID);
        initialValues.put("IsCouponApplicable", IsCouponApplicable);
        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN81, null, initialValues);
    }

    //private static final String DATABASE_CREATE_TABLE_63 = "create table tblStorTypeMstr(ID string null, Descr string null);";

    public long SavetblSyncSummuryForProductDetails(String SkuName, String OrderQty, String FreeQty, String SampleQty,
                                                    String TotalOrderKgs, String TotalFreeKgs, String TotalSampleKgs, String TotalSales, int Lines) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("SkuName", SkuName.trim());
        initialValues.put("OrderQty", OrderQty.trim());
        initialValues.put("FreeQty", FreeQty.trim());
        initialValues.put("SampleQty", SampleQty.trim());
        initialValues.put("TotalOrderKgs", TotalOrderKgs.trim());
        initialValues.put("TotalFreeKgs", TotalFreeKgs.trim());
        initialValues.put("TotalSampleKgs", TotalSampleKgs.trim());
        initialValues.put("TotalSales", TotalSales.trim());
        initialValues.put("Lines", Lines);


        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN72, null, initialValues);
    }

    //tblspForPDASchemeApplicableList(SchemeID string null, StoreType string null, SchemeDesc string null);";

    public long SavetblSyncSummuryDetails(String ActualCalls, String ProductiveCalls, String TotSalesValue, String TotKGSales,
                                          String TotFreeQtyKGSales, String TotSampleKGSales, String TotLTSales,
                                          String TotFreeQtyLTSales, String TotSampleLTSales, String TotDiscountKGSales, String TotDiscountLTales, int Lines) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("ActualCalls", ActualCalls.trim());
        initialValues.put("ProductiveCalls", ProductiveCalls.trim());
        initialValues.put("TotSalesValue", TotSalesValue.trim());
        initialValues.put("TotKGSales", TotKGSales.trim());
        initialValues.put("TotFreeQtyKGSales", TotFreeQtyKGSales.trim());
        initialValues.put("TotSampleKGSales", TotSampleKGSales.trim());
        initialValues.put("TotLTSales", TotLTSales.trim());
        initialValues.put("TotFreeQtyLTSales", TotFreeQtyLTSales.trim());
        initialValues.put("TotSampleLTSales", TotSampleLTSales.trim());
        initialValues.put("TotDiscountKGSales", TotDiscountKGSales.trim());
        initialValues.put("TotDiscountLTales", TotDiscountLTales.trim());
        initialValues.put("Lines", Lines);


        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN71, null, initialValues);
    }


    //tblPDALastTranDateForSecondPage(StoreID text null, LastTransDate string null, RetailerName string null, SKUName string null, Stock string null, OrderQty string null, FreeQty string null);";

    public long SavePDAIsSchemeApplicable(int IsSchemeApplicable) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("IsSchemeApplicable", IsSchemeApplicable);


        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN56, null, initialValues);
    }


    //tblschemeProductMap (SchemeID text not null, ProductID text not null, SchemeType int null);";

    public long saveStoreTypeDetails(String SidType, String SidDesc) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("ID", SidType.trim());
        initialValues.put("Descr", SidDesc.trim());

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN63, null, initialValues);
    }


    //tblschemeStoreTypeMap (SchemeID text not null, StoreTypeID integer not null);";

    public long saveSOAPdataPdaSchAppListForSecondPage(String SchemeID,
                                                       String StoreType, String SchemeDesc, int flgSpecialScheme) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("SchemeID", SchemeID.trim());
        initialValues.put("StoreType", StoreType.trim());
        initialValues.put("SchemeDesc", SchemeDesc.trim());
        initialValues.put("flgSpecialScheme", flgSpecialScheme);

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN55, null, initialValues);
    }


    //tblLastTransactionDetails (StoreID text not null, ProductID text not null, LastTransDate string not null, Quantity integer not null, SampleQuantity int null);";

    public long saveSOAPdataPdaLastTranDateForSecondPage(String StoreID,
                                                         String LastTransDate, String RetailerName, String SKUName,
                                                         String Stock, String OrderQty, String FreeQty) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("LastTransDate", LastTransDate.trim());
        initialValues.put("RetailerName", RetailerName.trim());
        initialValues.put("SKUName", SKUName.trim());
        initialValues.put("Stock", Stock.trim());
        initialValues.put("OrderQty", OrderQty.trim());
        initialValues.put("FreeQty", FreeQty.trim());
        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN62, null, initialValues);
    }


//tblSchemeDetails (SchemeDetID text not null, SchemeID text not null, SlabFrom integer not null, SlabTo integer not null, FreeQuantity integer not null,
    //Discount real not null, FreeProductID text null);";

    public long saveSOAPdataschemeProductMap(String InSchemeID,
                                             String InProductID, int strSchemeType) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("SchemeID", InSchemeID.toString().trim());
        initialValues.put("ProductID", InProductID.toString().trim());
        initialValues.put("SchemeType", strSchemeType);


        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN54, null, initialValues);
    }

    // tblSchemeList (SchemeID text not null, SchemeName string not null, SchemeType string not null, StoreType string null, CombTypeID integer null);";

    public long saveSOAPdataSchemeSchemeStoreTypeMap(String InSchemeID,
                                                     int InStoreTypeID) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("SchemeID", InSchemeID.toString().trim());
        initialValues.put("StoreTypeID", InStoreTypeID);

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN53, null, initialValues);
    }

    //(StoreID text  null,ProductID text  null, ProductMRP real  null, ProductRLP real  null, ProductTaxAmount real  null, DistributorPrice real null);";

    public long saveSOAPdataLastTransactionDetails(String ltdetSCode,
                                                   String ltdetProdCode, String ltdetLTdate, int ltdetQTY,
                                                   int pSampleQty, int CategoryID) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreID", ltdetSCode.trim());
        initialValues.put("ProductID", ltdetProdCode.trim());
        initialValues.put("LastTransDate", ltdetLTdate.trim());
        initialValues.put("Quantity", ltdetQTY);
        initialValues.put("SampleQuantity", pSampleQty);
        initialValues.put("CategoryID", CategoryID);

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN61, null, initialValues);
    }

// tblPDATargetQtyForSecondPage (StoreID text null, ProductID text null, SKUShortName text not null, TargetQty text null);";

    public long saveSOAPdataSchemeDetails(String schdetDetCode,
                                          String schdetCode, int schdetSF, int schdetST, int schdetFQ,
                                          Double schdetDIS, String NewFreePrdID) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("SchemeDetID", schdetDetCode.trim());
        initialValues.put("SchemeID", schdetCode.trim());
        initialValues.put("SlabFrom", schdetSF);
        initialValues.put("SlabTo", schdetST);
        initialValues.put("FreeQuantity", schdetFQ);
        initialValues.put("Discount", schdetDIS);
        initialValues.put("FreeProductID", NewFreePrdID.toString().trim());

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN52, null, initialValues);
    }

// tblPDALastInvoiceDet (StoreID text null, InvoiceID text null, LastTransDate text not null,
    //BalanceAmount text null,CreditPreviousDue real null);";

    //tblPDALastInvoiceDet (StoreID text null, InvoiceID text null, LastTransDate text not null,
    //BalanceAmount text null,CreditPreviousDue real null);";

    public long saveSOAPdataSchemeList(String schCode, String schName,
                                       String schType, String SchListStoreType, int inCombTypeID, int flgDiscountType) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("SchemeID", schCode.trim());
        initialValues.put("SchemeName", schName.trim());
        initialValues.put("SchemeType", schType.trim());
        initialValues.put("StoreType", SchListStoreType.trim());
        initialValues.put("CombTypeID", inCombTypeID);
        initialValues.put("flgDiscountType", flgDiscountType);

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN51, null, initialValues);
    }

    public long saveSOAPdataStoreProductMap(String StoreID, String ProductID,
                                            Double ProductMRP, Double ProductRLP, Double ProductTaxAmount, Double DistributorPrice, int CategoryID) {
        ContentValues initialValues = new ContentValues();


		/*StoreID text  null,ProductID text  null, ProductMRP real  null, ProductRLP real  null,
		ProductTaxAmount real  null, KGLiter text null);";
*/

        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("ProductID", ProductID.trim());
        //initialValues.put(KEY_ProductShortName, ProductShortName.trim());
        initialValues.put("ProductMRP", ProductMRP);
        initialValues.put("ProductRLP", ProductRLP);
        initialValues.put("ProductTaxAmount", ProductTaxAmount);
        initialValues.put("DistributorPrice", DistributorPrice);
        initialValues.put("DistributorPrice", DistributorPrice);
        initialValues.put("CategoryID", CategoryID);


        ////// System.out.println("inserting records in ProductList..");

        return db.insert(DBHelper.DATABASE_TABLE_MAINStoreProductMap, null, initialValues);

    }

    public long SavePDATargetQtyForSecondPage(
            String PDATargetQtyForSecondPageStoreID,
            String PDATargetQtyForSecondPageProductID,
            String PDATargetQtyForSecondPageSKUShortName,
            String PDATargetQtyForSecondPageTargetQty) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID",
                PDATargetQtyForSecondPageStoreID.trim());
        initialValues.put("ProductID",
                PDATargetQtyForSecondPageProductID.trim());
        initialValues.put("SKUShortName",
                PDATargetQtyForSecondPageSKUShortName.trim());
        initialValues.put("TargetQty",
                PDATargetQtyForSecondPageTargetQty.trim());

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN18, null, initialValues);
    }

    public long SavePDALastInvoiceDet(String SID, String invID, String LTDate,
                                      String BalAmt, Double CreditPreviousDue) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", SID.trim());
        initialValues.put("InvoiceID", invID.trim());
        initialValues.put("LastTransDate", LTDate.trim());
        initialValues.put("BalanceAmount", BalAmt.trim());
        initialValues.put("CreditPreviousDue", CreditPreviousDue);

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN17, null, initialValues);
    }

    // start Table 10
    public long saveVisibilityDetails(String storeID, String VisibilityID, String VisibilityStock, int Sstat) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("storeID", storeID.trim());
        initialValues.put("VisibilityID", VisibilityID.trim());
        initialValues.put("VisibilityStock", VisibilityStock.trim());
        initialValues.put("Sstat", Sstat);

        ////// System.out.println("inserting records in table 10..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN10, null, initialValues);
    }


    // end Table 10

    public void deleteVisibilityDetails(String StoreID) {
        // int entryCount;
        db.execSQL("DELETE FROM tblVisibilityDetails WHERE StoreID ='" + StoreID + "'");

    }

    public int FetchVisibilityDetailsAvailable(String StoreID) {
        int columnIndex = 0;
        int columnIndex1 = 1;
        int check = 0;

        Cursor cursor = db.rawQuery("SELECT VisibilityID,VisibilityStock FROM tblVisibilityDetails WHERE StoreID ='" + StoreID + "'", null);
        try {

            String OrderDetails[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                check = 1;
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    OrderDetails[i] = (String) cursor.getString(columnIndex).toString() + "_" + (String) cursor.getString(columnIndex1).toString();
                    cursor.moveToNext();

                }

            }
            return check;
        } finally {
            cursor.close();
        }

    }

    public String[] FetchVisibilityDetails(String StoreID) {
        int columnIndex = 0;
        int columnIndex1 = 1;

        Cursor cursor = db.rawQuery("SELECT VisibilityID,VisibilityStock FROM tblVisibilityDetails WHERE StoreID ='" + StoreID + "'", null);
        try {

            String OrderDetails[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    OrderDetails[i] = (String) cursor.getString(columnIndex).toString() + "_" + (String) cursor.getString(columnIndex1).toString();
                    cursor.moveToNext();

                }

            }
            return OrderDetails;
        } finally {
            cursor.close();
        }

    }

    // start Table 9
    public long saveVisibility(String VisibilityID, String VisibilityDescr) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("VisibilityID", VisibilityID.trim());
        initialValues.put("VisibilityDescr", VisibilityDescr.trim());

        ////// System.out.println("inserting records in table 9..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN9, null, initialValues);
    }

    public String[] FetchVisibilityDescr() {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT VisibilityDescr FROM tblVisibilityMstr", null);
        try {
            String VisibilityDescr[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                ////// System.out.println("CompetitionName Sunil Available");
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    VisibilityDescr[i] = (String) cursor.getString(ScodecolumnIndex);
                    cursor.moveToNext();
                }
            }
            ////// System.out.println("CompetitionName Sunil: not");
            return VisibilityDescr;
        } finally {
            cursor.close();
        }
    }
    //public static String[] FetchRate(String CatID)
	/*public static String[] FetchRate()
	{

		// id = getAllEntries();

		int ScodecolumnIndex = 0;
		//////// System.out.println("Fetching StoreID :" + ssStoreID);
		//Cursor cursor = db.rawQuery("SELECT ProductRLP FROM tblProductListMaster where CategoryID='"+CatID+"'", null);
		Cursor cursor = db.rawQuery("SELECT ProductRLP FROM tblProductListMaster where CategoryID='"+CatID+"'", null);
		try {
			////// System.out.println("Fetching cursor.getCount() :" + cursor.getCount());
			String StoreName[] = new String[cursor.getCount()];
			;
			if (cursor.moveToFirst()) {

				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					StoreName[i] = ""+(Double) cursor.getDouble(ScodecolumnIndex);
					//////// System.out.println("DB-ADAP: PROD RLP: "
					//		+ (String) cursor.getString(ScodecolumnIndex)
					//				.toString());
					////// System.out.println("Fetching Rate :" + StoreName[i]);
					cursor.moveToNext();
				}
			}
			return StoreName;
		} finally {
			cursor.close();
		}
	}*/


	/*public static Double[] FetchProductTax(String SID)
	{
		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT ProductTaxAmount FROM tblProductListMaster where StoreID='"+SID+"'",null);
		try
		{
			Double TaxRate[] = new Double[cursor.getCount()];

			if (cursor.moveToFirst())
			{
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					TaxRate[i] = (Double) cursor.getDouble(ScodecolumnIndex);
					//////// System.out.println("Tax Rate Sunil: "+ String.valueOf(cursor.getString(ScodecolumnIndex).toString()));
                    cursor.moveToNext();
				}
			}
			////// System.out.println("Tax Rate Sunil: not");
		return TaxRate;
		}
		finally
		{
			cursor.close();
		}
	}*/

    public String FetchRouteType(String ID) {
        int ScodecolumnIndex = 0;
        String RouteType = "0";

        Cursor cursor = null;
        try {
            cursor = db.rawQuery("SELECT RouteNodeType FROM tblRoutelist  WHERE RouteNodeID='" + ID + "' Limit 1", null);


            if (cursor.moveToFirst()) {
                for (int i = 0; i < cursor.getCount(); i++) {
                    RouteType = (String) cursor.getString(ScodecolumnIndex);
                    cursor.moveToNext();
                }
            }

            return RouteType;
        } finally {
            if(cursor!=null)
            cursor.close();


        }
    }

    public String[] FetchVisibilityID() {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT VisibilityID FROM tblVisibilityMstr", null);
        try {
            String VisibilityID[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                ////// System.out.println("CompetitionID Sunil Available");
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    VisibilityID[i] = (String) cursor.getString(ScodecolumnIndex);
                    cursor.moveToNext();
                }
            }
            ////// System.out.println("CompetitionID Sunil: not");
            return VisibilityID;
        } finally {
            cursor.close();
        }
    }

	/*public static String FetchProductName(String ProductID)
	{

        int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT ProductShortName FROM tblProductListMaster WHERE ProductID ='"+ ProductID + "'", null);
		try
		{

			String StoreName="NA";

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					StoreName = (String) cursor.getString(ScodecolumnIndex).toString();


					////// System.out.println("fetch Product Name "+StoreName);
					cursor.moveToNext();

				}

			}
			////// System.out.println("fetch Product Name Not "+StoreName);
			return StoreName;
		}
		finally
		{
			cursor.close();
		}



	}*/

    public String FetchStoreName(String storeID) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT StoreName FROM tblStoreList WHERE StoreID ='" + storeID + "'", null);
        try {

            String StoreName = "NA";

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName = (String) cursor.getString(ScodecolumnIndex).toString();
                    cursor.moveToNext();

                }

            }
            return StoreName;
        } finally {
            cursor.close();
        }


    }

    public int fnGetDisType(String schID, String schType) {
        // int entryCount;
        Cursor cursorE2 = db.rawQuery(
                "SELECT flgDiscountType FROM tblSchemeList WHERE SchemeID ='" + schID + "' and SchemeType='" + schType + "'", null);
        int flgDiscountType = 0;
        try {
            if (cursorE2.moveToFirst()) {

                flgDiscountType = Integer.parseInt(cursorE2.getString(0).toString());
            }

        } finally {
            cursorE2.close();
        }
        return flgDiscountType;
    }

    public int countIfStoreTransacExists(String sID2del) {
        // int entryCount;
        Cursor cursorE2 = db.rawQuery(
                "SELECT COUNT(*) FROM tblTransac WHERE StoreID ='" + sID2del
                        + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String[] FetchOrderTransactionDetails(String IMEIno, String StoreID) {
        int columnIndex = 0;
        int columnIndex1 = 1;
        int columnIndex2 = 2;


        Cursor cursor = db.rawQuery("SELECT ProdID,OrderQty, OrderVal FROM tblTransac WHERE StoreID ='" + StoreID + "' and IMEIno ='" + IMEIno + "'", null);
        try {

            String OrderDetails[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    ////// System.out.println("CURSOR_FETCH: " + i);

                    OrderDetails[i] = (String) cursor.getString(columnIndex).toString() + "_" + (String) cursor.getString(columnIndex1).toString() + "_" + (String) cursor.getString(columnIndex2).toString();
                    ////// System.out.println("Product Id: "+ String.valueOf(cursor.getString(columnIndex).toString())+"Total OrdQty: "+ String.valueOf(cursor.getString(columnIndex1).toString())+ " Total OrdVal: "+ String.valueOf(cursor.getString(columnIndex2).toString()));

                    cursor.moveToNext();
                    // cursor.close();

                }

            }
            return OrderDetails;
        } finally {
            cursor.close();
        }

    }

    public String[] FetchOrderInvoiceDetails(String IMEIno, String StoreID) {
        int columnIndex = 0;
        int columnIndex1 = 1;
        int columnIndex2 = 2;
        int columnIndex3 = 3;
        int columnIndex4 = 4;
        //int columnIndex5 = 5;

        Cursor cursor = db.rawQuery("SELECT InvoiceVal,TaxAmt,GrossVal, AmtColl,AmtOut FROM tblTmpInvoiceHeader WHERE StoreID ='" + StoreID + "' and IMEIno ='" + IMEIno + "'", null);
        try {

            String InvoiceDetails[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    ////// System.out.println("CURSOR_FETCH: " + i);

                    InvoiceDetails[i] = (String) cursor.getString(columnIndex).toString() + "_" + (String) cursor.getString(columnIndex1).toString() + "_" + (String) cursor.getString(columnIndex2).toString() + "_" + (String) cursor.getString(columnIndex3).toString() + "_" + (String) cursor.getString(columnIndex4).toString();
                    ////// System.out.println("Invoice Value: "+ String.valueOf(cursor.getString(columnIndex).toString())+"TaxAmount: "+ String.valueOf(cursor.getString(columnIndex1).toString())+ " Gross Invoce Value: "+ String.valueOf(cursor.getString(columnIndex2).toString())+"Amount Collected: "+ String.valueOf(cursor.getString(columnIndex3).toString())+"Amount OutStanding:  "+ String.valueOf(cursor.getString(columnIndex4).toString()));

                    cursor.moveToNext();
                    // cursor.close();

                }

            }
            return InvoiceDetails;
        } finally {
            cursor.close();
        }

    }

    public void deleteOrderTransactionDetails(String storeID) {
        // int entryCount;
        db.execSQL("DELETE FROM tblTransac WHERE StoreID='" + storeID + "'");

    }

	/*public static long saveCategoryProductINformation(String CompetitionID,String ProductID,String Stock,int Sstat,String storeID )
	{

		ContentValues initialValues = new ContentValues();
		initialValues.put("CategoryID", CompetitionID.trim());
		//initialValues.put("CategoryID", CategoryID.trim());
		initialValues.put("Sstat", Sstat);
		initialValues.put("ProductID", ProductID.trim());
		initialValues.put("Stock", Stock.trim());
		initialValues.put("storeID", storeID.trim());



		////// System.out.println("inserting records in table 38..");

		return db.insert(DATABASE_TABLE_MAIN5, null, initialValues);
	}*/

	/*public static String[] FetchCategoryProductID(String CategoryID)
	{
        int columnIndex = 0;
        //int columnIndex1 = 1;

        Cursor cursor = db.rawQuery("SELECT ProductID FROM tblProductListMaster WHERE CategoryID ='"+ CategoryID  + "'", null);
		try
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					OrderDetails[i] = (String) cursor.getString(columnIndex).toString();
					cursor.moveToNext();
					// cursor.close();

				}

			}
			return OrderDetails;
		}
		finally
		{
			cursor.close();
		}

	}
	*/
	/*public static String[] FetchCatergoryProductDescription(String CompetitionID)
	{
        int columnIndex = 0;
        //int columnIndex1 = 1;

        Cursor cursor = db.rawQuery("SELECT ProductShortName FROM tblProductListMaster WHERE CategoryID ='"+ CompetitionID  + "'", null);
		try
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					OrderDetails[i] = (String) cursor.getString(columnIndex).toString();
					cursor.moveToNext();
					// cursor.close();

				}

			}
			return OrderDetails;
		}
		finally
		{
			cursor.close();
		}

	}*/

	/*public static String[] FetchCategoeyProductINformation(String CategoryID, String storeID)
	{
        int columnIndex = 0;
        int columnIndex1 = 1;

        Cursor cursor = db.rawQuery("SELECT ProductID,Stock FROM tblCategoryQuestionInformation WHERE CategoryID ='"+ CategoryID  + "' and StoreID='"+ storeID +"'", null);
		try
		{

			String OrderDetails[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					OrderDetails[i] = (String) cursor.getString(columnIndex).toString()+ "_"+ (String) cursor.getString(columnIndex1).toString();
					cursor.moveToNext();

				}

			}
			return OrderDetails;
		}
		finally
		{
			cursor.close();
		}

	}*/

    public void deleteOrderInvoiceDetails(String storeID) {
        // int entryCount;
        db.execSQL("DELETE FROM tblTmpInvoiceHeader WHERE StoreID='" + storeID + "'");

    }

    //tblProductListMaster (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null,
    //CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null,
    //KGLiter string nulll);";

	/*public static String[] FetchCategoryIDfromProduct()
	{
		int ScodecolumnIndex = 0;

		Cursor cursor = db.rawQuery("SELECT CategoryID FROM tblProductListMaster",null);
		try
		{
			String TaxRate[] = new String[cursor.getCount()];

			if (cursor.moveToFirst())
			{
				////// System.out.println("CategoryID Sunil Available");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					TaxRate[i] = (String) cursor.getString(ScodecolumnIndex);
					cursor.moveToNext();
				}
			}
			////// System.out.println("CategoryID Sunil: not");
		return TaxRate;
		}
		finally
		{
			cursor.close();
		}
	}*/

    public long saveOrderTransactionDetails(String IMEIno, String TransDate, String StoreID, String ProdID,
                                            int OrderQty, Double OrderVal, Double ProductMRP, Double TaxRate) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("IMEIno", IMEIno.trim());
        initialValues.put("TransDate", TransDate.trim());
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("ProdID", ProdID.trim());
        initialValues.put("OrderQty", OrderQty);
        initialValues.put("OrderVal", OrderVal);
        initialValues.put("Sstat", 0);
        initialValues.put("ProductMRP", ProductMRP);
        initialValues.put("TaxRate", TaxRate);

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN31, null, initialValues);
    }


    //public static String[] FetchPid(String CATID)
	/*public static String[] FetchPid()
	{
		int ScodecolumnIndex = 0;
		////// System.out.println("a");

		//Cursor cursor = db.rawQuery("SELECT ProductID FROM tblProductListMaster where CategoryID='"+CATID+"'",null);
		Cursor cursor = db.rawQuery("SELECT ProductID FROM tblProductListMaster",null);
		////// System.out.println("b");
		try
		{
			String StoreName[] = new String[cursor.getCount()];

			////// System.out.println("length of cursor count in DBAdapter1"+ cursor.getCount());
			////// System.out.println("c");
			if (cursor.moveToFirst())
			{
				////// System.out.println("d");
				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					////// System.out.println("e");
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex).toString();

					////// System.out.println("Sunil ProductID FROM tblProductListMaster: "+ StoreName[i]);
					cursor.moveToNext();
				}
			}
		 ////// System.out.println("f");
		 return StoreName;
		}
		finally
		{
			cursor.close();
		}
	}
	*/

    //public static String[] FetchPName(String CATID)
	/*public static String[] FetchPName()
	{

		int ScodecolumnIndex = 0;

		//Cursor cursor = db.rawQuery("SELECT ProductShortName FROM tblProductListMaster where CategoryID='"+CATID+"'", null);
		Cursor cursor = db.rawQuery("SELECT ProductShortName FROM tblProductListMaster", null);
		try
		{
			String StoreName[] = new String[cursor.getCount()];
			if (cursor.moveToFirst())
			{

				for (int i = 0; i <= (cursor.getCount() - 1); i++)
				{
					StoreName[i] = (String) cursor.getString(ScodecolumnIndex)
							.toString();
					////// System.out.println("product short name :"+StoreName[i]);
					cursor.moveToNext();
				}
			}
		  return StoreName;
		}
		finally
		{
			cursor.close();
		}
	}
	*/

    public long saveOrderInvoiceDetails(String IMEIno, String StoreID, String InvoiceDate, Double TaxAmt,
                                        Double InvoiceVal, int Sstat, Double AmtColl, Double AmtOut, Double GrossVal, String TmpInvoiceCodePDA) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("IMEIno", IMEIno.trim());
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("InvoiceDate", InvoiceDate.trim());
        initialValues.put("TaxAmt", TaxAmt);
        initialValues.put("InvoiceVal", InvoiceVal);
        initialValues.put("GrossVal", GrossVal);
        initialValues.put("Sstat", Sstat);
        initialValues.put("AmtColl", AmtColl);
        initialValues.put("AmtOut", AmtOut);
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);

        ////// System.out.println("inserting records in table 32..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN32, null, initialValues);
    }

    public String[] FetchCategoryDesc() {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT CategoryDescr FROM tblCategoryMaster", null);
        try {
            String TaxRate[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                ////// System.out.println("Category Sunil Available");
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    TaxRate[i] = (String) cursor.getString(ScodecolumnIndex);
                    cursor.moveToNext();
                }
            }
            ////// System.out.println("Category Sunil: not");
            return TaxRate;
        } finally {
            cursor.close();
        }
    }

    public String[] FetchCategoryID() {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT CategoryID FROM tblCategoryMaster", null);
        try {
            String TaxRate[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                ////// System.out.println("CategoryID Sunil Available");
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    TaxRate[i] = (String) cursor.getString(ScodecolumnIndex);
                    cursor.moveToNext();
                }
            }
            ////// System.out.println("CategoryID Sunil: not");
            return TaxRate;
        } finally {
            cursor.close();
        }
    }

    public boolean GetPrevDateChk() {

        Cursor cursorDateE = db.rawQuery("SELECT ForDate FROM tblStoreList", null);
        boolean ifApplicableToPassIntent = GetIfApplicableToForward();

        try {
            if (cursorDateE.getCount() > 0) {

                if (ifApplicableToPassIntent) {
                    return true;
                } else {
                    return false;
                }

            } else {
                return false;
            }

        } finally {
            cursorDateE.close();
        }

    }

    /*public boolean GetIfApplicableToForward() {

	  Cursor cursorDateE = db.rawQuery("SELECT IsSchemeApplicable FROM tblPDAIsSchemeApplicable",null);


	  try {
	   if (cursorDateE.getCount() > 0) {
	    // String date2Send = cursorDateE.getString(0);

	    ////// System.out.println("GetPrevDateChk - Records Count: "+ cursorDateE.getCount());
	    // ////// System.out.println("GetPrevDateChk - forDate: " +date2Send);
	    ////// System.out.println("returning GetPrevDateChk - true");
	    return true;
	   } else {
	    return false;
	   }

	  } finally {
	   cursorDateE.close();
	  }

	 }*/
    public boolean GetIfApplicableToForward() {

        Cursor cursorDateE = db.rawQuery("SELECT IsSchemeApplicable FROM tblPDAIsSchemeApplicable", null);


        try {
            if (cursorDateE.getCount() > 0) {
                // String date2Send = cursorDateE.getString(0);

                ////// System.out.println("GetPrevDateChk - Records Count: "+ cursorDateE.getCount());
                // ////// System.out.println("GetPrevDateChk - forDate: " +date2Send);
                ////// System.out.println("returning GetPrevDateChk - true");
                return true;
            } else {
                //return false;
                return true;
            }

        } finally {
            cursorDateE.close();
        }

    }

    public int CheckProductListPresentOrNot() {
        Cursor cursorE2 = null;
        int chkI = 0;

        try {
            //open();
            cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblProductListMaster", null);

            if (cursorE2.moveToFirst()) {
                if (Integer.parseInt(cursorE2.getString(0)) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }
        return chkI;
    }

    public boolean PrevLocChk(String passedStoreID, String StoreVisitCode) {
        boolean abc = false;

        Cursor cursorLocE = db.rawQuery("SELECT ActualLatitude FROM tblStoreVisitMstr WHERE StoreID ='" + passedStoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);

        ////// System.out.println("PrevLocChk - Checking for StoreID: "+ passedStoreID);
        try {
            if (cursorLocE.moveToFirst()) {
                ////// System.out.println("cursorLocE count: " + cursorLocE.getCount());

                if ((cursorLocE.getString(0) == null) || (cursorLocE.getString(0).equals("0.0")) || (cursorLocE.getString(0).equals("0"))) {
                    ////// System.out.println(" A 1 " + abc);
                    ////// System.out.println("PrevLocChk - Records Count: "+ cursorLocE.getCount());
                    ////// System.out.println("returning PrevLocChk - False");
                    abc = false;
                    ////// System.out.println(" A 2 " + abc);
                } else {
                    ////// System.out.println("returning PrevLocChk - True");
                    abc = true;
                    ////// System.out.println(" A 3 " + abc);
                }
            }

        } finally {
            cursorLocE.close();
        }
        return abc;
    }

    public void UpdateStoreStartVisit(String StoreID, String strVisitStartTS) {


    }

    /*public void UpdateStoreStoreClose(String StoreID, int StoreClose, String StoreVisitCode) {


        final ContentValues values = new ContentValues();
        values.put("StoreClose", StoreClose);

        int affected = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?", new String[]{StoreID, StoreVisitCode});
        //   int affected1 = db.update("tblStoreList", values, "StoreID=?",new String[] { StoreID });
        // int affected21 = db.update("tblOutletQuestAnsMstr", values,"OutletID=?", new String[] { StoreID });

        //  int affected261 = db.update("tblNewAddedStoreLocationDetails", values,"StoreID=?", new String[] { StoreID });

    }*/
    public void UpdateStoreStoreClose(String StoreID, int StoreClose)
    {


        final ContentValues values = new ContentValues();
        values.put("StoreClose", StoreClose);

        int affected = db.update("tblStoreVisitMstr", values, "StoreID=?",new String[] { StoreID });
        //   int affected1 = db.update("tblStoreList", values, "StoreID=?",new String[] { StoreID });
        // int affected21 = db.update("tblOutletQuestAnsMstr", values,"OutletID=?", new String[] { StoreID });

        //  int affected261 = db.update("tblNewAddedStoreLocationDetails", values,"StoreID=?", new String[] { StoreID });

    }
    public void UpdateStoreStoreClose(String StoreID, int StoreClose,String StoreVisitCode)
    {


        final ContentValues values = new ContentValues();
        values.put("StoreClose", StoreClose);

        int affected = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?",new String[] { StoreID,StoreVisitCode });
        //   int affected1 = db.update("tblStoreList", values, "StoreID=?",new String[] { StoreID });
        // int affected21 = db.update("tblOutletQuestAnsMstr", values,"OutletID=?", new String[] { StoreID });

        //  int affected261 = db.update("tblNewAddedStoreLocationDetails", values,"StoreID=?", new String[] { StoreID });

    }
    public void UpdateStoreSstat(String StoreID, int Sstat, String StoreVisitCode) {


        final ContentValues values = new ContentValues();
        values.put("Sstat", Sstat);

        int affected = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?", new String[]{StoreID, StoreVisitCode});
        int affected22 = db.update("tblStoreOrderVisitDayActivity", values, "StoreID=? AND StoreVisitCode=?", new String[]{StoreID, StoreVisitCode});
        int affected1 = db.update("tblStoreList", values, "StoreID=?", new String[]{StoreID});
        int affected21 = db.update("tblOutletQuestAnsMstr", values, "OutletID=?", new String[]{StoreID});

        int affected261 = db.update("tblNewAddedStoreLocationDetails", values, "StoreID=?", new String[]{StoreID});

    }

    public void deleteStoreTblsRecordsInCaseCancelOrderInOrderBooking(String StoreID, int flag, String pdaOrderID, String TmpInvoiceCodePDA) {
        db.execSQL("DELETE FROM tblTmpInvoiceDetails WHERE StoreID='" + StoreID + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        db.execSQL("DELETE FROM tblTmpInvoiceHeader WHERE StoreID='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        db.execSQL("DELETE FROM tblStoreReturnDetail WHERE StoreID='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        if (flag == 1) {
            db.execSQL("DELETE FROM tblStoreProductPhotoDetail WHERE StoreID='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        }


    }

/*	public static void UpdateStoreCloseNextDay(String StoreID, int outStat) {

		final ContentValues values = new ContentValues();
		values.put("Sstat", outStat);

		int affected = db.update("tblStoreList", values,"StoreID=? and (StoreClose=1 or  StoreNextDay=1) and Sstat=0",
				new String[] { StoreID });
		Log.w(TAG, "affected records: " + affected);

		Log.w(TAG, "UpdateStoreEndVisit Updated..");
	}*/

    public void UpdateStoreStoreReturnDetail(String StoreID, String Sstat, String pdaOrderID, String TmpInvoiceCodePDA) {
        final ContentValues values = new ContentValues();
        values.put("Sstat", Sstat);
        int affected = db.update("tblStoreReturnDetail", values, "StoreID=?  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' and Sstat is not null", new String[]{StoreID});
    }

    //Cursor cursorLocE = db.rawQuery("SELECT ActualLatitude FROM tblStoreList WHERE StoreID ='"+ passedStoreID + "'", null);

    public void UpdateStoreProductAppliedSchemesBenifitsRecords(String StoreID, String Sstat, String pdaOrderID, String TmpInvoiceCodePDA) {
        final ContentValues values = new ContentValues();
        values.put("Sstat", Sstat);
        int affected = db.update("tblStoreProductAppliedSchemesBenifitsRecords", values, "StoreID=? AND TmpInvoiceCodePDA=? and Sstat is not null",
                new String[]{StoreID, TmpInvoiceCodePDA});
    }

    public void UpdateStoreEndVisit(String StoreID, String strVisitEndTS) {
      /*  final ContentValues values = new ContentValues();
        values.put("VisitEndTS", strVisitEndTS);
        int affected = db.update("tblStoreList", values,"StoreID=? and VisitStartTS is not null",new String[] { StoreID });*/
    }

    public String[] FetchStoreStatus(String rID) {

        int ScodecolumnIndex = 0;

        //Cursor cursor = db.rawQuery("SELECT Sstat,ISNewStore FROM tblStoreList ORDER BY DistanceNear", null);
        Cursor cursor = db.rawQuery("SELECT Sstat, ISNewStore FROM tblStoreList where StoreRouteID='"+rID+"'    ORDER BY StoreName ASC", null);

        try {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = cursor.getString(ScodecolumnIndex).toString() + "~" + cursor.getString(1).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public String[] FetchStoreList(String rID)
    {
        int ScodecolumnIndex = 0;
        int SnamecolumnIndex = 1;

        //Cursor cursor = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList   ORDER BY DistanceNear", null); //where StoreRouteID='"+ rID +"'
        Cursor cursor = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList where StoreRouteID='"+ rID +"' ORDER BY StoreName ASC", null); //where StoreRouteID='"+ rID +"'

        try
        {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst())
            {
                for (int i = 0; i <= (cursor.getCount() - 1); i++)
                {
                    int closedStatus = getStoreClosedStatus(cursor.getString(ScodecolumnIndex));
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex).toString()+ "_"+ (String) cursor.getString(SnamecolumnIndex).toString()+"_"+closedStatus;
                    cursor.moveToNext();
                }

            }
            return StoreName;
        }
        finally
        {
            cursor.close();
        }
    }
    public int getStoreClosedStatus(String storeID){
        Cursor cursor = db.rawQuery("Select StoreClose from tblStoreVisitMstr where StoreID = '"+storeID+"'",null);
        int status = 0;
        try {

            if (cursor.getCount() != 0) {
                while (cursor.moveToNext()) {
                    status=cursor.getInt(0);         //return cursor.getInt(0);
                }
                //return 0;
            }
        }finally{
            cursor.close();
            return status;
        }
    }
    public String[] ProcessStoreReq() {
        int LoncolumnIndex = 0;
        int LoncolumnIndex2 = 1;

        //Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList WHERE (Sstat = 1  OR StoreNextDay = 1) and Sstat<>4  and Sstat<>5 and Sstat<>6",null);//OR StoreClose = 1
        Cursor cursor2 = db.rawQuery("SELECT DISTINCT tblStoreVisitMstr.StoreID, tblStoreList.StoreName FROM tblStoreVisitMstr inner join tblStoreList On tblStoreVisitMstr.StoreID=tblStoreList.StoreID WHERE (tblStoreVisitMstr.VisitTypeStatus ='2' OR tblStoreVisitMstr.VisitTypeStatus='4'  OR tblStoreVisitMstr.StoreNextDay = 1 ) and tblStoreList.Sstat<>4  and tblStoreList.Sstat<>5 and tblStoreList.Sstat<>6", null);//OR StoreClose = 1
        try {
            String strAreaIdsDetais[] = new String[cursor2.getCount()];
            ////// System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());
            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    strAreaIdsDetais[i] = (String) cursor2.getString(LoncolumnIndex) + "%" + (String) cursor2.getString(LoncolumnIndex2);
                    ////// System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
                    cursor2.moveToNext();
                }
            }
            return strAreaIdsDetais;
        } finally {
            cursor2.close();
        }

    }

    public boolean GetLeftStoresChk() {

        Cursor cursorDateE = db.rawQuery("SELECT DISTINCT tblStoreVisitMstr.StoreID, tblStoreList.StoreName FROM tblStoreVisitMstr inner join tblStoreList On tblStoreVisitMstr.StoreID=tblStoreList.StoreID WHERE (tblStoreList.Sstat = 3  OR tblStoreVisitMstr.StoreClose = 1 OR tblStoreVisitMstr.StoreNextDay = 1) AND tblStoreList.Sstat<>4 AND tblStoreList.Sstat<>5 AND tblStoreList.Sstat<>6", null);

        try {
            if (cursorDateE.getCount() > 0) {
                ////// System.out.println("GetLeftStoresChk - Records Count: "+ cursorDateE.getCount());
                ////// System.out.println("returning GetLeftStoresChk - true");
                return true;
            } else {
                return false;
            }

        } finally {
            cursorDateE.close();
        }

    }

    public long insertTblSelectedStoreIDinChangeRouteCase(String StorID) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreID", StorID);

        return db.insert(DBHelper.DATABASE_TABLE_MAIN92, null, initialValues);
    }

    public String[] getStoreIDTblSelectedStoreIDinChangeRouteCase() {

        int SnamecolumnIndex1 = 0;

        //Cursor cursor = db.rawQuery("SELECT OutId FROM tblOutletPicMstr WHERE OutId IN (SELECT StoreId FROM tblStoreList WHERE Sstat IN (1, 3))", null);

        Cursor cursor = db.rawQuery("SELECT StoreID FROM tblSelectedStoreIDinChangeRouteCase", null);
        try {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1)
                            .toString();
                    ////// System.out.println("STORE ID 4 Pic: "+cursor.getString(SnamecolumnIndex1).toString());

                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }



    public void UpdateStoreFlagAtDayEndOrChangeRoute(String sID, int flag2set) {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);

            int affected24 = db.update("tblStoreOrderBillAddressDetails", values, "StoreID=?", new String[]{sID});
            int affected25 = db.update("tblStoreSalesOrderPaymentDetails", values, "StoreId=?", new String[]{sID});
            int affected26 = db.update("tblRateDistribution", values, "StoreId=?", new String[]{sID});
            // int affected27 = db.update("tableImage", values,"StoreID=?", new String[] { sID });

            //tblNewStoreSalesQuotePaymentDetails (StoreId text null,PymtStageId text null,Sstat text null);";
            int affected23 = db.update("tblNewStoreSalesQuotePaymentDetails", values, "StoreId=?", new String[]{sID});

            //tblOutletQuestAnsMstr
            ////// System.out.println("Updating Status for Store ID: " + sID);
            int affected = db.update("tblStoreList", values, "StoreID=?", new String[]{sID});
            //int affected2 = db.update("tblTransac", values, "StoreID=?",new String[] { sID });

            int affected4 = db.update("tblNewStoreListEntries", values, "StoreID=?", new String[]{sID});

            //int affected4 = db.update("tblDistributionStoreProductWiseDetails", values, "StoreID=?",new String[] { sID });
            //int affected5 = db.update("tblDistributionStoreProductMstr", values, "StoreID=?",new String[] { sID });

            int affected9 = db.update("tblNewStoreEntries", values, "StoreID=?", new String[]{sID});
            int affected10 = db.update("tblTemp", values, "StoreID=?", new String[]{sID});

            // int affected3 = db.update("tblTmpInvoiceHeader", values, "StoreID=? ",new String[] { sID });

            //int affected4 = db.update("tblDistributionStoreProductWiseDetails", values, "StoreID=?",new String[] { sID });
            //int affected5 = db.update("tblDistributionStoreProductMstr", values, "StoreID=?",new String[] { sID });
            int affected5 = db.update("tblPDAProductReturnMstr", values,
                    "StoreID=? ", new String[]{sID});

            //   int affected7 = db.update("tblTmpInvoiceDetails", values,"StoreID=?  ", new String[] { sID });
            int affected8 = db.update("tblStoreProductAppliedSchemesBenifitsRecords", values, "StoreID=? ", new String[]{sID});


            int affected11 = db.update("tblStoreReturnDetail", values, "StoreID=? ", new String[]{sID});

            //int affected12 = db.update("tblStoreReturnDetail", values,"StoreID=?", new String[] { sID });
            int affected13 = db.update("tblProductMappedWithSchemeSlabApplied", values, "StoreId=? ", new String[]{sID});
            //StoreId text null,ProductID text null,schSlabId text null,schmIdMapped text null,Sstat int null);";
            int affected14 = db.update("tblStoreProductPhotoDetail", values, "StoreID=? ", new String[]{sID});

            int affected21 = db.update("tblOutletQuestAnsMstr", values, "OutletID=?", new String[]{sID});

            int affected261 = db.update("tblNewAddedStoreLocationDetails", values, "StoreID=?", new String[]{sID});
            int affected17 = db.update("tblSalesQuotePersonMeetMstr", values, "StoreId=?", new String[]{sID});

            // int affected171 = db.update("tblAllCollectionData", values,"StoreID=?", new String[] { sID });

            // int affected19 = db.update("tblDsrRegDetails", values, "StoreID=?",new String[] { sID });

            db.execSQL("UPDATE tblDsrRegDetails SET Sstat=" + flag2set);

            LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr = fngetDistinctSalesQuotePersonMeetMstrForSstatUpdate(sID);


            Iterator it11new = hmapDistinctSalesQuotePersonMeetMstr.entrySet().iterator();

            while (it11new.hasNext()) {
                Entry pair = (Entry) it11new.next();
                if (hmapDistinctSalesQuotePersonMeetMstr.containsKey(pair.getKey().toString())) {
                    //crntPID	=pair.getKey().toString();
                    int affected18 = db.update("tblSalesQuoteProductsMstr", values, "SalesQuoteId=?", new String[]{pair.getKey().toString()});
                }

            }


            int chkValue = fnChkStoreIdExistsInReturnMstrDayEndChangeRoute(sID);

            if (chkValue == 1) {
                int productreturnmstrid = fnGetAutoIdStoreOnReturnPAge(sID);

                int chkValueReturnDetails = fnChkAutoIdMstrForReturnDetailsChangeRouteDayEnd(productreturnmstrid);
                if (chkValueReturnDetails == 1) {
                    int affected6 = db.update("tblPDAProductReturnDetails",
                            values, "ReturnIdMstr=? ", new String[]{""
                                    + productreturnmstrid});
                }
            }

            Log.w(TAG, "affected records: " + affected);

            Log.w(TAG, "Record(s) Updated..");

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void UpdatetblStoreClosedPhotoDetail(String sID, int flag2set) {

        try {
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);

            int affected28 = db.update("tblStoreClosedPhotoDetail", values, "Sstat=?", new String[]{"3"});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void UpdateStoreImage(String sID, int flag2set) {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);

            int affected27 = db.update("tableImage", values, "Sstat=?", new String[]{"3"});
            int affected28 = db.update("tblStoreClosedPhotoDetail", values, "Sstat=?", new String[]{"3"});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public int fnChkAutoIdMstrForReturnDetailsChangeRouteDayEnd(int ReturnIdMstr) {

        int LoncolumnIndex = 0;
        int strReturnIdDetails = 0;

        Cursor cursor2 = db
                .rawQuery(
                        "SELECT AutoReturnDetailsId FROM  tblPDAProductReturnDetails where ReturnIdMstr='" + ReturnIdMstr + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnIdDetails = 1;
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strReturnIdDetails;
        } finally {
            cursor2.close();
        }

    }

    public int fnChkStoreIdExistsInReturnMstrDayEndChangeRoute(String ReturnStoreId) {

        int LoncolumnIndex = 0;
        int strReturnIdMstr = 0;

        Cursor cursor2 = db.rawQuery(
                "SELECT AutoReturnIdMstr FROM  tblPDAProductReturnMstr where StoreID='"
                        + ReturnStoreId + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnIdMstr = 1;
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strReturnIdMstr;
        } finally {
            cursor2.close();
        }

    }

    public void UpdateStoreFlag(String sID, int flag2set) {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);

            if (flag2set == 3) {
                int affected4 = db.update("tblsameLocationForStoreRestartDone", values, "CrntStoreID=?", new String[]{sID});
            }

            int affected3 = db.update("tblLatLongDetails", values, "StoreID=?", new String[]{sID});
            // int affected41 = db.update("tableImage", values,"StoreID=?", new String[] { sID });

            // int affected42 = db.update("tblAllCollectionData", values,"StoreID=?", new String[] { sID });

            int affected211 = db.update("tblActualVisitStock", values, "StoreID=?", new String[]{sID});


            int affected68 = db.update("tblPreAddedStores", values, "StoreID=?", new String[]{sID});
            int affected = db.update("tblStoreList", values, "StoreID=?", new String[]{sID});
            int affected62 = db.update("tblStoreCheckInPic", values, "StoreID=?", new String[]{sID});
            //  int affected1 = db.update("tblLatLongDetails", values, "StoreID=?",new String[] { sID });

            int affected26 = db.update("tblRateDistribution", values, "StoreId=?", new String[]{sID});


            int affected4 = db.update("tblNewStoreListEntries", values, "StoreID=?", new String[]{sID});
            int affected9 = db.update("tblNewStoreEntries", values, "StoreID=?", new String[]{sID});
            int affected10 = db.update("tblTemp", values, "StoreID=?", new String[]{sID});

            int affected15 = db.update("tblStoreMaterialDetail", values, "StoreID=?", new String[]{sID});
            int affected16 = db.update("tblStoreMaterialPhotoDetail", values, "StoreID=?", new String[]{sID});
            int affected17 = db.update("tblSalesQuotePersonMeetMstr", values, "StoreId=?", new String[]{sID});
            int affected21 = db.update("tblOutletQuestAnsMstr", values, "OutletID=?", new String[]{sID});

            int affected261 = db.update("tblNewAddedStoreLocationDetails", values, "StoreID=?", new String[]{sID});

            int affected23 = db.update("tblNewStoreSalesQuotePaymentDetails", values, "StoreId=?", new String[]{sID});

            int affected24 = db.update("tblStoreOrderBillAddressDetails", values, "StoreID=?", new String[]{sID});
            int affected25 = db.update("tblStoreSalesOrderPaymentDetails", values, "StoreId=?", new String[]{sID});


            LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr = fngetDistinctSalesQuotePersonMeetMstrForSstatUpdate(sID);
            Iterator it11new = hmapDistinctSalesQuotePersonMeetMstr.entrySet().iterator();
            while (it11new.hasNext()) {
                Entry pair = (Entry) it11new.next();
                if (hmapDistinctSalesQuotePersonMeetMstr.containsKey(pair.getKey().toString())) {
                    int affected18 = db.update("tblSalesQuoteProductsMstr", values, "SalesQuoteId=?", new String[]{pair.getKey().toString()});
                }

            }


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

   /*public void UpdateStoreActualLatLongi(String StoreID,
                                          String ActualLatitude, String ActualLongitude, String Accuracy,
                                          String LocProvider, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgRestart, int flgStoreOrder)
    {
        //open();
        final ContentValues values = new ContentValues();
        values.put("ActualLatitude", ActualLatitude);
        values.put("ActualLongitude", ActualLongitude);
        values.put("Accuracy", Accuracy);
        values.put("LocProvider", LocProvider);


        values.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
        values.put("flgGPSOnOff", flgGPSOnOff);
        values.put("flgNetworkOnOff", flgNetworkOnOff);
        values.put("flgFusedOnOff", flgFusedOnOff);
        values.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
        values.put("flgRestart", flgRestart);


        int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { StoreID });
        close();
        Log.w(TAG, "affected records: " + affected);


    }*/


    // ---insert sample data into the database---
    //

    public void UpdateStoreOtherMainTablesFlag(String sID, int flag2set, String pdaOrderID, String TmpInvoiceCodePDA) {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);


            //   int affected3 = db.update("tblTmpInvoiceHeader", values, "StoreID=? AND TmpInvoiceCodePDA=?",new String[] { sID,TmpInvoiceCodePDA });

            //int affected4 = db.update("tblDistributionStoreProductWiseDetails", values, "StoreID=?",new String[] { sID });
            //int affected5 = db.update("tblDistributionStoreProductMstr", values, "StoreID=?",new String[] { sID });
            int affected5 = db.update("tblPDAProductReturnMstr", values,
                    "StoreID=? AND TmpInvoiceCodePDA=?", new String[]{sID, TmpInvoiceCodePDA});

            //   int affected7 = db.update("tblTmpInvoiceDetails", values,"StoreID=? AND TmpInvoiceCodePDA=?", new String[] { sID,TmpInvoiceCodePDA });
            int affected8 = db.update("tblStoreProductAppliedSchemesBenifitsRecords", values, "StoreID=? AND TmpInvoiceCodePDA=?", new String[]{sID, TmpInvoiceCodePDA});


            int affected11 = db.update("tblStoreReturnDetail", values, "StoreID=? AND TmpInvoiceCodePDA=?", new String[]{sID, TmpInvoiceCodePDA});

            //int affected12 = db.update("tblStoreReturnDetail", values,"StoreID=?", new String[] { sID });
            int affected13 = db.update("tblProductMappedWithSchemeSlabApplied", values, "StoreId=? AND TmpInvoiceCodePDA=?", new String[]{sID, TmpInvoiceCodePDA});
            //StoreId text null,ProductID text null,schSlabId text null,schmIdMapped text null,Sstat int null);";
            int affected14 = db.update("tblStoreProductPhotoDetail", values, "StoreID=? AND TmpInvoiceCodePDA=?", new String[]{sID, TmpInvoiceCodePDA});

            int affected290 = db.update("tblStoreSalesOrderPaymentDetails", values, "StoreId=? AND TmpInvoiceCodePDA=?", new String[]{sID, TmpInvoiceCodePDA});
            //int affected291 = db.update("tblAllCollectionData", values,"StoreID=? AND TmpInvoiceCodePDA=?", new String[] { sID,TmpInvoiceCodePDA });


            int chkValue = fnChkStoreIdExistsInReturnMstr(sID, pdaOrderID, TmpInvoiceCodePDA);

            if (chkValue == 1) {
                int productreturnmstrid = fnGetAutoIdStoreOnReturnPAge(sID);

                int chkValueReturnDetails = fnChkAutoIdMstrForReturnDetails(productreturnmstrid, pdaOrderID, TmpInvoiceCodePDA);
                if (chkValueReturnDetails == 1) {
                    int affected6 = db.update("tblPDAProductReturnDetails",
                            values, "ReturnIdMstr=? AND TmpInvoiceCodePDA=?", new String[]{""
                                    + productreturnmstrid, TmpInvoiceCodePDA});
                }
            }
            //

            //Log.w(TAG, "affected records: " + affected);

            Log.w(TAG, "Record(s) Updated..");

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }




    public void UpdateStoreVisitBatt(String StoreID, String vBatt) {

      /*  final ContentValues values = new ContentValues();
        values.put("BateryLeftStatus", vBatt);
        int affected = db.update("tblStoreVisitMstr", values, "StoreID=?",
                new String[] { StoreID });
        Log.w(TAG, "affected records: " + affected);*/

    }

    public void UpdateStoreVisitBattVisitWise(String StoreID, String vBatt, String StoreVisitCode) {
//open();
        final ContentValues values = new ContentValues();
        values.put("BateryLeftStatus", vBatt);
        int affected = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?",
                new String[]{StoreID, StoreVisitCode});
        //close();
        Log.w(TAG, "affected records: " + affected);

    }

    // ---insert XML data into the database---
    public void createRouteTBL() {
        try {

            db.execSQL(DBHelper.TABLE_tblRouteListMaster_Definition);
            //db.execSQL(DATABASE_CREATE_TABLE_2);
        } catch (Exception e) {
            Log.e(TAG, "Error: onUpgrade db");
        }

    }

    public void fnSetAllRouteActiveStatus() {

        try {


            db.execSQL("UPDATE tblRoutelist SET flgTodayRoute= 0");
            /* */


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void updateActiveRoute(String sID, int flag2set) {

        try {


            final ContentValues values = new ContentValues();
            values.put("flgTodayRoute", flag2set);

            int affected = db.update("tblRoutelist", values, "RouteNodeID=?",
                    new String[]{sID});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    //StoreID ='"+ StoreID + "'"

    public String GetRouteNameBasedOnRouteID(String ID) {

        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT Route FROM tblRoutelist WHERE RouteNodeID='" + ID + "' Limit 1", null);
        try {
            //String strLocationIDDetais[] = new String[cursor2.getCount()];
            String activeRouteID = "NA";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    ////// System.out.println("active Route Id : "+ cursor2.getString(LoncolumnIndex).toString().trim());
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return activeRouteID;
        } finally {
            cursor2.close();
        }

    }










    /*public String GetActiveRouteID(int CoverageAreaNodeID,int CoverageAreaNodeType) {
        int LoncolumnIndex = 0;
        String activeRouteID = "0";
        Cursor cursor2 = null;
        cursor2 = db.rawQuery("SELECT RouteNodeID FROM tblRoutelist WHERE flgTodayRoute = 1 AND CoverageAreaNodeID='"+CoverageAreaNodeID+"' AND CoverageAreaNodeType='"+CoverageAreaNodeType+"'  Limit 1", null);

        try {

            if (cursor2!=null && cursor2.getCount()>0) {
                cursor2.moveToFirst();
                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }
            }
            if (activeRouteID.equals("0")) {
                activeRouteID = fnGetRouteIDWhilePurshase(CoverageAreaNodeID,CoverageAreaNodeType);
            }
            if (!CommonInfo.ActiveRouteSM.equals("0")) {
                activeRouteID = CommonInfo.ActiveRouteSM;
            }

        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
            return activeRouteID;
        }
    }*/

    public String GetActiveRouteID(int CoverageAreaNodeID,int CoverageAreaNodeType) {
        int LoncolumnIndex = 0;
        String activeRouteID = "0";
        Cursor cursor2 = null;
        cursor2 = db.rawQuery("SELECT RouteNodeID FROM tblRoutelist WHERE flgTodayRoute = 1 AND CoverageAreaNodeID='"+CoverageAreaNodeID+"' AND CoverageAreaNodeType='"+CoverageAreaNodeType+"'  Limit 1", null);

        try {

            if (cursor2!=null && cursor2.getCount()>0) {
                cursor2.moveToFirst();
                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }
            }
            if (activeRouteID.equals("0")) {
                activeRouteID = fnGetRouteIDWhilePurshase(CoverageAreaNodeID,CoverageAreaNodeType);
            }
            if (!CommonInfo.ActiveRouteSM.equals("0")) {
                activeRouteID = CommonInfo.ActiveRouteSM;
            }

        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
            return activeRouteID;
        }
    }

    public String GetNotActiveRouteID() {
        int LoncolumnIndex = 0;
        String activeRouteID = "0";
        Cursor cursor2 = db.rawQuery("SELECT RouteNodeID FROM tblRoutelist Limit 1", null);
        try {

            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }

        } finally {
            cursor2.close();
            return activeRouteID;
        }

    }

    public String GetActiveRouteIDSunil() {
        String activerid= GetActiveRouteID(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);
        return  activerid;
    }



    public int GetActiveRouteIDForRadioButton() {
        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT Active FROM tblRoutelist WHERE flgTodayRoute = 1 AND CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' AND CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' Limit 1", null);
        try {
            int activeRouteID = 0;
            if (cursor2.moveToFirst()) {


                activeRouteID = Integer.parseInt(cursor2.getString(LoncolumnIndex));


            }
            return activeRouteID;
        } finally {
            cursor2.close();
        }

    }

    public long savetblPOSMaterialMstr(String POSMaterialID, String POSMaterialDescr) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("POSMaterialID", POSMaterialID.trim());
        initialValues.put("POSMaterialDescr", POSMaterialDescr.trim());


        return db.insert(DBHelper.DATABASE_TABLE_MAIN161, null, initialValues);

    }

    public long savetblStoreIDAndMaterialIDMap(String StoreID, String VisitID, String MaterialID, String CurrentStockQty) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("VisitID", VisitID.trim());
        initialValues.put("MaterialID", MaterialID.trim());
        initialValues.put("CurrentStockQty", CurrentStockQty.trim());


        return db.insert(DBHelper.DATABASE_TABLE_MAIN162, null, initialValues);
    }

    public long savetblSchemeStoreMapping(String StoreID, String SchemeID) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("SchemeID", SchemeID.trim());

        // System.out.println("Ajay Data Save in table 201");


        return db.insert(DBHelper.DATABASE_TABLE_MAIN201, null, initialValues);

    }


    //tblSchemeSlabBucketProductMapping (RowID text null,ProductID text null);";

    public long savetblSchemeMstr(String SchemeID, String SchemeName, String SchemeApplicationID, String SchemeAppliedRule) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("SchemeID", SchemeID.trim());
        initialValues.put("SchemeName", SchemeName.trim());
        initialValues.put("SchemeApplicationID", SchemeApplicationID.trim());
        initialValues.put("SchemeAppliedRule", SchemeAppliedRule.trim());


        // System.out.println("Ajay Data Save in table 202");


        return db.insert(DBHelper.DATABASE_TABLE_MAIN202, null, initialValues);
    }

	/* dbengine.savetblSchemeSlabBenefitsBucketDetails(RowID,SchemeID,SchemeSlabID,BucketID,
     		SubBucketID,BenSubBucketType,BenDiscApplied,CouponCode,BenSubBucketValue);
     */

    public long savetblSchemeSlabDetail(String SchemeID, String SchemeSlabID, String SchemeSlabDesc, String BenifitDescr) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("SchemeID", SchemeID.trim());
        initialValues.put("SchemeSlabID", SchemeSlabID.trim());
        initialValues.put("SchemeSlabDesc", SchemeSlabDesc.trim());
        initialValues.put("BenifitDescr", BenifitDescr.trim());

        // System.out.println("Ajay Data Save in table 203");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN203, null, initialValues);
    }

    public long savetblSchemeSlabBucketDetails(String RowID, String SchemeID, String SchemeSlabID,
                                               String BucketID, String SubBucketID, String SlabSubBucketType, String SlabSubBucketValue, String SubBucketValType) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("RowID", RowID.trim());
        initialValues.put("SchemeID", SchemeID.trim());
        initialValues.put("SchemeSlabID", SchemeSlabID.trim());
        initialValues.put("BucketID", BucketID.trim());

        initialValues.put("SubBucketID", SubBucketID.trim());
        initialValues.put("SlabSubBucketType", SlabSubBucketType.trim());
        initialValues.put("SlabSubBucketValue", SlabSubBucketValue.trim());
        initialValues.put("SubBucketValType", SubBucketValType.trim());

        // System.out.println("Ajay Data Save in table 204");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN204, null, initialValues);
    }

    //tblSchemeSlabBenefitsValueDetail (RowID text null,BenValue text null,Remarks text null,Type text null);";

    public long savetblSchemeSlabBucketProductMapping(String RowID, String ProductID) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("RowID", RowID.trim());
        initialValues.put("ProductID", ProductID.trim());

        // System.out.println("Ajay Data Save in table 205");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN205, null, initialValues);
    }

    //tblProductRelatedScheme (ProductID text null,PrdString text null);";

    public long savetblSchemeSlabBenefitsBucketDetails(String RowID, String SchemeID, String SchemeSlabID,
                                                       String BucketID, String SubBucketID, String BenSubBucketType, String BenDiscApplied, String CouponCode
            , String BenSubBucketValue, String per, String UOM, int ProRata) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("RowID", RowID.trim());
        initialValues.put("SchemeID", SchemeID.trim());
        initialValues.put("SchemeSlabID", SchemeSlabID.trim());
        initialValues.put("BucketID", BucketID.trim());
        initialValues.put("SubBucketID", SubBucketID.trim());
        initialValues.put("BenSubBucketType", BenSubBucketType.trim());
        initialValues.put("BenDiscApplied", BenDiscApplied.trim());
        initialValues.put("CouponCode", CouponCode.trim());
        initialValues.put("BenSubBucketValue", BenSubBucketValue.trim());
        initialValues.put("Per", Double.parseDouble(per));
        if (Double.parseDouble(per) == 1000.00) {
            // System.out.println("NDTV"+Double.parseDouble(per));
        }
        initialValues.put("UOM", Double.parseDouble(UOM));
        initialValues.put("ProRata", ProRata);


        // System.out.println("Ajay Data Save in table 206");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN206, null, initialValues);
    }

    public long savetblSchemeSlabBenefitsProductMappingDetail(String RowID, String ProductID) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("RowID", RowID.trim());
        initialValues.put("ProductID", ProductID.trim());

        // System.out.println("Ajay Data Save in table 207");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN207, null, initialValues);
    }

    //(StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null,
    //StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null, Sstat integer not null,
    //ForDate string not null, ActualLatitude text null, ActualLongitude text null, VisitStartTS text null, VisitEndTS text null,
    //AutoIdStore int null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreClose integer null,
    //StoreNextDay integer null,chainID integer null);";


	/*private static final String DATABASE_CREATE_TABLE_13 = "create table tblStoreList " +
	(StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null,
   StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null,
   Sstat integer not null, ForDate string not null, ActualLatitude text null, ActualLongitude text null,
   VisitStartTS text null, VisitEndTS text null, ISNewStore int null, AutoIdStore int null, LocProvider text null,
   Accuracy text null, BateryLeftStatus text null,StoreRouteID text null);";
*/

    public long savetblSchemeSlabBenefitsValueDetail(String RowID, String BenValue, String Remarks, String Type) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("RowID", RowID.trim());
        initialValues.put("BenValue", BenValue.trim());
        initialValues.put("Remarks", Remarks.trim());
        initialValues.put("Type", Type.trim());

        // System.out.println("Ajay Data Save in table 208");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN208, null, initialValues);
    }

    public long savetblProductRelatedScheme(String ProductID, String PrdString) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("ProductID", ProductID.trim());
        initialValues.put("PrdString", PrdString.trim());

        // System.out.println("Ajay Data Save in table 209");
        return db.insert(DBHelper.DATABASE_TABLE_MAIN209, null, initialValues);
    }

    public long saveRoutesInfo(String ID, String RouteType, String Descr, int ActiveFlg, int flgTodayRoute, String RouteDate) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("ID", ID.trim());
        initialValues.put("RouteType", RouteType.trim());
        initialValues.put("Descr", Descr.trim());
        initialValues.put("Active", ActiveFlg);
        initialValues.put("flgTodayRoute", flgTodayRoute);
        initialValues.put("RouteDate", RouteDate);


        return db.insert(DBHelper.TABLE_tblRouteListMaster_Define, null, initialValues);
    }

    public int fncheckStoreIsNewOrOld(String StoreID) {
        //open();
        Cursor cursor = db.rawQuery("SELECT ISNewStore FROM tblStoreList WHERE StoreID='" + StoreID + "'", null);
        try {
            int ISNewStore = 0;
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    ISNewStore = Integer.parseInt(cursor.getString(0).toString());

                }
            }
            return ISNewStore;

        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }

    }

    public int fncheckStoreIsNewStoreDataCompleteSaved(String StoreID) {
        //open();
        Cursor cursor = db.rawQuery("SELECT IsNewStoreDataCompleteSaved FROM tblStoreList WHERE StoreID='" + StoreID + "'", null);
        try {
            int IsNewStoreDataCompleteSaved = 0;
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    IsNewStoreDataCompleteSaved = Integer.parseInt(cursor.getString(0).toString());

                }
            }
            return IsNewStoreDataCompleteSaved;

        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }

    }

    public int getFwdPgIdonNextBtnClick(String StoreID, String PgId, String ChainId) {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT fwdSeq FROM tblStorePgSeqFlow WHERE storeID=" + StoreID + " and pgId=" + PgId + " and chainID=" + ChainId, null);
        try {
            int strFwdPgIdonNextBtnClick = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strFwdPgIdonNextBtnClick = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        ////// System.out.println("Store Page PgId = "+ PgId +" and strFwdPgIdonNextBtnClick :"+strFwdPgIdonNextBtnClick);
                        cursor.moveToNext();
                    }

                }
            }
            return strFwdPgIdonNextBtnClick;
        } finally {
            cursor.close();
        }
    }

    public int getFwdPgIdonBackBtnClick(String StoreID, String PgId, String ChainId) {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT bckSeq FROM tblStorePgSeqFlow WHERE storeID=" + StoreID + " and pgId=" + PgId + " and chainID=" + ChainId, null);
        try {
            int strFwdPgIdonBackBtnClick = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strFwdPgIdonBackBtnClick = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        ////// System.out.println("Store Page PgId = "+ PgId +" and strFwdPgIdonBackBtnClick :"+strFwdPgIdonBackBtnClick);
                        cursor.moveToNext();
                    }

                }
            }
            return strFwdPgIdonBackBtnClick;
        } finally {
            cursor.close();
        }
    }

    public String getCustomPGid(int pgID) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT pgName FROM tblStorePgSeqFlow WHERE pgId = " + pgID, null);
        try {
            String strProdStockQty = "";
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = cursor.getString(ScodecolumnIndex).toString();    //Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public String[] checkStoreCloseOrNextMethod(String StoreID) {

        int columnIndex1 = 0;
        int columnIndex2 = 1;
        Cursor cursor2 = db.rawQuery("SELECT StoreClose FROM tblStoreVisitMstr WHERE StoreID ='" + StoreID + "'", null);
        //Cursor cursorLocE = db.rawQuery("SELECT ActualLatitude FROM tblStoreList WHERE StoreID ='"+ passedStoreID + "'", null);

        try {
            String checkStoreCloseOrNextDetials[] = new String[cursor2.getCount()];

            ////// System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());

            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    checkStoreCloseOrNextDetials[i] = (String) cursor2.getString(columnIndex1);//+ "_"+ (String) cursor2.getString(columnIndex2);

                    //////// System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
                    cursor2.moveToNext();
                }

            }
            return checkStoreCloseOrNextDetials;
        } finally {
            cursor2.close();
        }

    }

    public int getChainIDBasedOnStoreID(String StoreID) {
        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT chainID FROM tblStorePgSeqFlow WHERE storeID=" + StoreID, null);
        try {
            int strChainID = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strChainID = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        ////// System.out.println("Store StoreID = '"+ StoreID +"' and strChainID :"+strChainID);
                        cursor.moveToNext();
                    }

                }
            }
            return strChainID;
        } finally {
            cursor.close();
        }
    }

    public String[] FetchStoreStoreNextDayStatus() {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT StoreNextDay FROM tblStoreList ORDER BY DistanceNear", null);
        try {
            String StoreName[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

	/*public static void deleteCategroyProductINformation(String CategoryId, String storeID) {
		// int entryCount;
		db.execSQL("DELETE FROM tblCategoryQuestionInformation WHERE CategoryID ='" + CategoryId + "' and StoreID='"+ storeID +"'");

	}*/

    public void updateCloseflg(String sID, int StoreClose) {
        try {
            ContentValues values = new ContentValues();
            values.put("StoreClose", StoreClose);
            int affected = db.update("tblStoreVisitMstr", values, "StoreID= ?", new String[]{sID});
            Log.w(TAG, "affected records: " + affected);
            Log.w(TAG, "Record(s) Updated..");

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void updateNextDayflg(String sID, int StoreNextDay) {
        try {
            ContentValues values = new ContentValues();
            values.put("StoreNextDay", StoreNextDay);
            ////// System.out.println("nextday: "+StoreNextDay);
            int affected = db.update("tblStoreVisitMstr", values, "StoreID= ?", new String[]{sID});

            Log.w(TAG, "affected records: " + affected);

            Log.w(TAG, "Record(s) Updated..");

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public String[] FetchStoreStoreCloseStatus(String rID) {
        int ScodecolumnIndex = 0;

        //Cursor cursor = db.rawQuery("SELECT StoreClose FROM tblStoreList ORDER BY DistanceNear", null);
        Cursor cursor = db.rawQuery("SELECT StoreClose FROM tblStoreList where StoreRouteID='" + rID + "'   ORDER BY DistanceNear", null);

        try {
            String StoreName[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }



    public String[] fnarrUniqueProductsSaleSummry() {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;

        //ProductID text not null, ProductShortName

        //Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName, KGLiter, DisplayUnit FROM tblProductListMaster", null);
        Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName, KGLiter, DisplayUnit FROM tblProductListMaster", null);
        try {
            String UniqueProductShortName[] = new String[cursor2.getCount()];
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        UniqueProductShortName[i] = cursor2.getString(LoncolumnIndex).toString() + "^" + cursor2.getString(LoncolumnIndex1).toString() + "^" + cursor2.getString(LoncolumnIndex2).toString();
                        //// System.out.println("Anuj ProductShortName sunil: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"KGLiter sunil: "+(String) cursor2.getString(LoncolumnIndex1));

                        cursor2.moveToNext();
                    }

                }

            }
            return UniqueProductShortName;
        } finally {
            cursor2.close();
        }
    }

    public String fnCalculateLinesSkuWise(String PSName) {
        String LineValue = "0";
        int LoncolumnIndex = 0;


        //ProductID text not null, ProductShortName

        Cursor cursor2 = db.rawQuery("SELECT Count(DISTINCT StoreID) FROM tblTmpInvoiceDetails WHERE OrderQty>0 and ProductShortName ='" + PSName + "'", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {

                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (!cursor2.isNull(LoncolumnIndex)) {
                            LineValue = cursor2.getString(LoncolumnIndex).toString();
                            cursor2.moveToNext();
                        }

                    }

                }
            }

        } finally {
            cursor2.close();
        }

        return LineValue;
    }

    public String[] fnCalculateProductsSaleSummry() {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        String[] UniqueProductsSaleSummry;
        UniqueProductsSaleSummry = fnarrUniqueProductsSaleSummry();
        String val = "";
        String SummryPName = "";
        String SDisplayName = "";
        String SDisplayUnit = "";


        String SumOQty[] = new String[UniqueProductsSaleSummry.length];
        String SumFQty[] = new String[UniqueProductsSaleSummry.length];
        String SumSQty[] = new String[UniqueProductsSaleSummry.length];
        //String DisplaySQty[]=new String[UniqueProductsSaleSummry.length];

        String SumOQtyKG[] = new String[UniqueProductsSaleSummry.length];
        String SumFQtyKG[] = new String[UniqueProductsSaleSummry.length];
        String SumSQtyKG[] = new String[UniqueProductsSaleSummry.length];
        //String DisplaySKG[]=new String[UniqueProductsSaleSummry.length];

        String SummryProductName[] = new String[UniqueProductsSaleSummry.length];
        String SummryDisplayUnit[] = new String[UniqueProductsSaleSummry.length];

        String FinalReturnValue[] = new String[UniqueProductsSaleSummry.length];

        String LineSkuWise[] = new String[UniqueProductsSaleSummry.length];


        for (int kk = 0; kk < UniqueProductsSaleSummry.length; kk++) {
            val = "";
            SummryPName = "";
            SDisplayUnit = "";
            String getVal = "";
            getVal = UniqueProductsSaleSummry[kk].toString().trim();

            StringTokenizer tokens = new StringTokenizer(String.valueOf(getVal), "^");
            SummryPName = tokens.nextToken().trim();
            val = tokens.nextToken().trim();
            SDisplayUnit = tokens.nextToken().trim();
            //SDisplayName=tokens.nextToken().trim();
            //////////// System.out.println("SummryPName"+SummryPName);
            //////////// System.out.println("SDisplayUnit"+SDisplayUnit);

            SummryProductName[kk] = SummryPName;
            SummryDisplayUnit[kk] = SDisplayUnit;
            ////////////// System.out.println("SummryProductName[kk]"+SummryProductName[kk]);
            //////////// System.out.println("SummryProductName val"+val);


            LineSkuWise[kk] = fnCalculateLinesSkuWise(SummryPName);

            //if(val.contains("0g"))
            if (SDisplayUnit.contains("Kg")) {

                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity) FROM  tblTmpInvoiceDetails where ProductShortName ='" + SummryPName + "'", null);
                try {
                    //val=val.replace("g", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {

                                if (!cursor2.isNull(LoncolumnIndex)) {
                                    SumOQty[kk] = "" + Integer.parseInt(cursor2.getString(LoncolumnIndex));
                                    //////////// System.out.println("SummryPName SumOQty[kk]"+SumOQty[kk]);
                                    String OrderKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    //////////// System.out.println("SummryPName OrderKG"+OrderKG);
                                    SumOQtyKG[kk] = ConvertGramToKilo(OrderKG);
                                    //	cursor2.moveToNext();
                                } else {
                                    SumOQty[kk] = "" + "0";
                                    SumOQtyKG[kk] = "" + "0.0";
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    SumFQty[kk] = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)));
                                    String FreeKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));

                                    SumFQtyKG[kk] = ConvertGramToKilo(FreeKG);

                                    //	cursor2.moveToNext();
                                } else {
                                    SumFQty[kk] = "" + "0";
                                    SumFQtyKG[kk] = "0.0";
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    SumSQty[kk] = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)));
                                    String SampleKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
                                    SumSQtyKG[kk] = ConvertGramToKilo(SampleKG);

                                } else {
                                    SumSQty[kk] = "0";
                                    SumSQtyKG[kk] = "0.0";
                                }
                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }

            }
            //if(val.contains("0ml"))
            if (SDisplayUnit.contains("Lt")) {

                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity) FROM  tblTmpInvoiceDetails where ProductShortName ='" + SummryPName + "'", null);
                try {
                    //val=val.replace("ml", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {

                                if (!cursor2.isNull(LoncolumnIndex)) {
                                    SumOQty[kk] = "" + Integer.parseInt(cursor2.getString(LoncolumnIndex));
                                    String OrderKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    SumOQtyKG[kk] = ConvertMLToLiters(OrderKG);

                                } else {
                                    SumOQty[kk] = "" + "0";
                                    SumOQtyKG[kk] = "" + "0.0";
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    SumFQty[kk] = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)));
                                    String FreeKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
                                    SumFQtyKG[kk] = ConvertMLToLiters(FreeKG);

                                } else {
                                    SumFQty[kk] = "" + "0";
                                    SumFQtyKG[kk] = "0.0";
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    SumSQty[kk] = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)));
                                    String SampleKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
                                    SumSQtyKG[kk] = ConvertMLToLiters(SampleKG);

                                } else {
                                    SumSQty[kk] = "0";
                                    SumSQtyKG[kk] = "0.0";
                                }
                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }

            }
        }


        String strGettblSyncSummuryDetailsKGLitersDetails[];//="";
        strGettblSyncSummuryDetailsKGLitersDetails = fnGettblSyncProductWiseDetailsKGLitersDetails();

        //////////// System.out.println("strGettblSyncSummuryDetailsKGLitersDetails :"+ strGettblSyncSummuryDetailsKGLitersDetails.length);


        for (int kk = 0; kk < UniqueProductsSaleSummry.length; kk++) {

            //////////// System.out.println("Sunil Check Line UniqueProductsSaleSummry :"+UniqueProductsSaleSummry[kk]);

            if (strGettblSyncSummuryDetailsKGLitersDetails.length > 0) {
                for (int in = 0; in < strGettblSyncSummuryDetailsKGLitersDetails.length; in++) {
//////////// System.out.println("Sunil Check LinestrGettblSyncSummuryDetailsKGLitersDetails :"+strGettblSyncSummuryDetailsKGLitersDetails[in]);

                    String SumOQtyofTable = "";
                    String SumFQtyofTable = "";
                    String SumSQtyofTable = "";

                    String SumOQtyKGofTable = "";
                    String SumFQtyKGofTable = "";
                    String SumSQtyKGofTable = "";
                    String SummryPNameofTable = "";
                    String LineCountSKUWiseFromServer = "";

                    StringTokenizer tokensofTable = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsKGLitersDetails[in]), "^");
                    SummryPNameofTable = tokensofTable.nextToken().trim();
                    SumOQtyofTable = tokensofTable.nextToken().trim();
                    SumFQtyofTable = tokensofTable.nextToken().trim();
                    SumSQtyofTable = tokensofTable.nextToken().trim();
                    SumOQtyKGofTable = tokensofTable.nextToken().trim();
                    SumFQtyKGofTable = tokensofTable.nextToken().trim();
                    SumSQtyKGofTable = tokensofTable.nextToken().trim();
                    tokensofTable.nextToken().trim();

                    LineCountSKUWiseFromServer = tokensofTable.nextToken().trim();//For Line Count SKU Wise

                    // System.out.println("Sunil Check Line Server Parsing :"+Integer.parseInt(LineCountSKUWiseFromServer));


                    //SumOQtyKGofTable=Double.parseDouble(new DecimalFormat("##.##").format(SumOQtyKGofTable));
                    //SumFQtyKGofTable=Double.parseDouble(new DecimalFormat("##.##").format(SumFQtyKGofTable));
                    //	SumSQtyKGofTable=Double.parseDouble(new DecimalFormat("##.##").format(SumSQtyKGofTable));


                    //////////// System.out.println("SummryProductName[kk].toString().trim() :" +SummryProductName[kk].toString().trim());
                    //////////// System.out.println("SummryPNameofTable.trim() :"+ SummryPNameofTable.trim());
                    if (SummryProductName[kk].toString().trim().equals(SummryPNameofTable.trim())) {
                        //////////// System.out.println("Condition matched");
                        SumOQty[kk] = "" + (Integer.parseInt(SumOQty[kk]) + Integer.parseInt(SumOQtyofTable));
                        SumFQty[kk] = "" + (Integer.parseInt(SumFQty[kk]) + Integer.parseInt(SumFQtyofTable));
                        SumSQty[kk] = "" + (Integer.parseInt(SumSQty[kk]) + Integer.parseInt(SumSQtyofTable));
                        // System.out.println("Sunil Check Line PDA :"+Integer.parseInt(LineSkuWise[kk]));
                        // System.out.println("Sunil Check Line Server :"+Integer.parseInt(LineCountSKUWiseFromServer));

                        LineSkuWise[kk] = "" + (Integer.parseInt(LineSkuWise[kk]) + Integer.parseInt(LineCountSKUWiseFromServer));//For Line Count SKU Wise

                        if (SummryDisplayUnit[kk].toString().contains("Kg")) {
                            Double SumOQtyKGofTable11 = Double.parseDouble(SumOQtyKG[kk]) + Double.parseDouble(SumOQtyKGofTable);
                            String a1 = "" + Double.parseDouble(new DecimalFormat("##.##").format(SumOQtyKGofTable11));

                            Double SumFQtyKGofTable11 = Double.parseDouble(SumFQtyKG[kk]) + Double.parseDouble(SumFQtyKGofTable);
                            String a2 = "" + Double.parseDouble(new DecimalFormat("##.##").format(SumFQtyKGofTable11));

                            Double SumSQtyKGofTable11 = Double.parseDouble(SumSQtyKG[kk]) + Double.parseDouble(SumSQtyKGofTable);
                            String a3 = "" + Double.parseDouble(new DecimalFormat("##.##").format(SumSQtyKGofTable11));
                            SumOQtyKG[kk] = "" + a1 + " Kg";
                            SumFQtyKG[kk] = "" + a2 + " Kg";
                            SumSQtyKG[kk] = "" + a3 + " Kg";
                        }

                        if (SummryDisplayUnit[kk].toString().contains("Lt")) {

                            Double SumOQtyKGofTable11 = Double.parseDouble(SumOQtyKG[kk]) + Double.parseDouble(SumOQtyKGofTable);
                            String a1 = "" + Double.parseDouble(new DecimalFormat("##.##").format(SumOQtyKGofTable11));

                            Double SumFQtyKGofTable11 = Double.parseDouble(SumFQtyKG[kk]) + Double.parseDouble(SumFQtyKGofTable);
                            String a2 = "" + Double.parseDouble(new DecimalFormat("##.##").format(SumFQtyKGofTable11));

                            Double SumSQtyKGofTable11 = Double.parseDouble(SumSQtyKG[kk]) + Double.parseDouble(SumSQtyKGofTable);
                            String a3 = "" + Double.parseDouble(new DecimalFormat("##.##").format(SumSQtyKGofTable11));
                            SumOQtyKG[kk] = "" + a1 + " Lt";
                            SumFQtyKG[kk] = "" + a2 + " Lt";
                            SumSQtyKG[kk] = "" + a3 + " Lt";
                        }

                        FinalReturnValue[kk] = SummryProductName[kk] + "^" + SumOQty[kk] + "^" + SumFQty[kk] + "^" + SumSQty[kk] + "^" + SumOQtyKG[kk] + "^" + SumFQtyKG[kk] + "^" + SumSQtyKG[kk] + "^" + LineSkuWise[kk];
                        // System.out.println("Sunil Check Line return FinalReturnValue[kk] :" + FinalReturnValue[kk]);
                        break;

                    }
                }
            } else {
                FinalReturnValue[kk] = SummryProductName[kk] + "^" + SumOQty[kk] + "^" + SumFQty[kk] + "^" + SumSQty[kk] + "^" + SumOQtyKG[kk] + "^" + SumFQtyKG[kk] + "^" + SumSQtyKG[kk] + "^" + LineSkuWise[kk];
                //////////// System.out.println("FinalReturnValue[kk] :" + FinalReturnValue[kk]);
            }

        }


        return FinalReturnValue;

    }

    public String[] fnGettblSyncProductWiseDetailsKGLitersDetails() {

        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        int LoncolumnIndex3 = 3;
        int LoncolumnIndex4 = 4;
        int LoncolumnIndex5 = 5;
        int LoncolumnIndex6 = 6;
        int LoncolumnIndex7 = 7;
        int LoncolumnIndex8 = 8;


        Cursor cursor = db.rawQuery("SELECT * from tblSyncSummuryForProductDetails", null);

        try {
            String CompleteResult[] = new String[cursor.getCount()];// "0.0_0.0_0.0_0.0_0.0_0.0";

            ////// System.out.println("cursor.getCount() :"+cursor.getCount());
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {


                    for (int i = 0; i < cursor.getCount(); i++) {

                        if (!cursor.isNull(LoncolumnIndex)) {
                            CompleteResult[i] = cursor.getString(LoncolumnIndex).toString() + "^" + cursor.getString(LoncolumnIndex1).toString() + "^" + cursor.getString(LoncolumnIndex2).toString() + "^" + cursor.getString(LoncolumnIndex3).toString() + "^" + cursor.getString(LoncolumnIndex4).toString() + "^" + cursor.getString(LoncolumnIndex5).toString() + "^" + cursor.getString(LoncolumnIndex6).toString() + "^" + cursor.getString(LoncolumnIndex7).toString() + "^" + cursor.getString(LoncolumnIndex8).toString(); // the 8th one is for Line;
                            ////// System.out.println("ProductDetails sunil: "+(String) cursor.getString(LoncolumnIndex) + "  "+"Product sunil: "+(String) cursor.getString(LoncolumnIndex1));

                            cursor.moveToNext();
                        }

                    }


                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String ConvertGramToKilo(String strGrams) {
        //1 gram = 0.001 kilogram;
        String kilogram = "";

        Double gram = Double.parseDouble(strGrams);
        kilogram = "" + (gram * 0.001);
        return kilogram;
    }

    public String ConvertMLToLiters(String strML) {
        //1 gram = 0.001 kilogram;
        String Lt = "";

        Double ML = Double.parseDouble(strML);
        Lt = "" + (ML * 0.001);
        return Lt;
    }

    public String fnGetFullSummryDetailsForSale() {

        String FullSummryDetailsForSale;
        FullSummryDetailsForSale = "";

        int TotActualCall = 0;
        TotActualCall = fnGetActualCall();

        ////// System.out.println("TotActualCall: "	+ TotActualCall);

        int TotProductiveCall = 0;
        TotProductiveCall = fnGetProductiveCall();

        ////// System.out.println("TotProductiveCall: "	+ TotProductiveCall);

        String TotSalesValue = "0.00";
        TotSalesValue = fnGetTotalSales();//fnGetTotalDiscount


        String TotDiscountValue = "0.00";
        TotDiscountValue = fnGetTotalDiscount();


        ////// System.out.println("TotSalesValue: "	+ TotSalesValue);
        ////// System.out.println("fnGetTotalDiscount: "	+ TotDiscountValue);
        String strGettblSyncSummuryDetailsCallDetails = "";
        strGettblSyncSummuryDetailsCallDetails = fnGettblSyncSummuryDetailsCallDetails();
        ////// System.out.println("strGettblSyncSummuryDetailsCallDetails: "	+ strGettblSyncSummuryDetailsCallDetails);
        StringTokenizer tokensGettblSyncSummuryDetailsCallDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsCallDetails), "_");

        TotActualCall = TotActualCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
        TotProductiveCall = TotProductiveCall + Integer.parseInt(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim());
        TotSalesValue = "" + (Double.parseDouble(TotSalesValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
        TotDiscountValue = "" + (Double.parseDouble(TotDiscountValue) + Double.parseDouble(tokensGettblSyncSummuryDetailsCallDetails.nextToken().trim()));
        FullSummryDetailsForSale = TotActualCall + "_" + TotProductiveCall + "_" + TotSalesValue + "_" + TotDiscountValue;


        ////// System.out.println("FullSummryDetailsForSale: "	+ FullSummryDetailsForSale);

        return FullSummryDetailsForSale;
    }

    public int fnGetActualCall() {

        int LoncolumnIndex = 0;
        int TotActualCall = 0;
        Cursor cursor2 = db.rawQuery("SELECT Count (StoreID) FROM tblTmpInvoiceHeader", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        TotActualCall = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                        cursor2.moveToNext();
                    }

                }

            }
            return TotActualCall;
        } finally {
            cursor2.close();
        }
    }

    public int fnGetProductiveCall() {
        int LoncolumnIndex = 0;
        int TotProductiveCall = 0;

        Double TotInvoiceValCall = 0.00;
        Cursor cursor2 = db.rawQuery("SELECT Count (StoreID) FROM tblTmpInvoiceHeader where InvoiceVal >" + TotInvoiceValCall, null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        TotProductiveCall = Integer.parseInt(cursor2.getString(LoncolumnIndex).toString());
                        cursor2.moveToNext();
                    }

                }

            }
            return TotProductiveCall;
        } finally {
            cursor2.close();
        }
    }

    public String fnGetTotalSales() {
        int LoncolumnIndex = 0;
        String TotSalesValue = "0.0";


        Cursor cursor2 = db.rawQuery("SELECT SUM(InvoiceVal) FROM tblTmpInvoiceHeader", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        TotSalesValue = "" + Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
                        ////// System.out.println("Abhinav Raj Summary New TotSalesValue from function: "+TotSalesValue);
                        cursor2.moveToNext();
                    }

                }

            }
            return TotSalesValue.replace(",", "");//(TotSalesValue, ",");
        } finally {
            cursor2.close();
        }
    }

    public String fnGetTotalDiscount() {
        int LoncolumnIndex = 0;
        String TotDiscountValue = "0.0";


        Cursor cursor2 = db.rawQuery("SELECT SUM(TotalDis) FROM tblTmpInvoiceHeader", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        TotDiscountValue = "" + Double.parseDouble(cursor2.getString(LoncolumnIndex).toString());
                        cursor2.moveToNext();
                    }

                }

            }
            return TotDiscountValue;
        } finally {
            cursor2.close();
        }
    }

    public String fnGettblSyncSummuryDetailsCallDetails() {

        Cursor cursor = db.rawQuery("SELECT ActualCalls, ProductiveCalls, TotSalesValue, TotDiscountKGSales from tblSyncSummuryDetails", null);

        try {
            String CompleteResult = "0_0_0.0_0.0";
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    CompleteResult = (String) cursor.getString(0).toString()
                            + "_"
                            + (String) cursor.getString(1).toString()
                            + "_"
                            + (String) cursor.getString(2).toString()
                            + "_"
                            + (String) cursor.getString(3).toString();

                    cursor.moveToNext();

                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public String fnCalculateKGLiters() {
        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        int LoncolumnIndex2 = 2;
        String[] UniqueKgLiters;
        UniqueKgLiters = fnarrUniqueKgLiters();//fnarrUniqueKgLitersDisplayUnit();
        String val = "";
        String totalKGSales = "0.0";
        String totalSampleSalesKG = "0.0";
        String totalFreeQtySalesKG = "0.0";
        String totalLitersSales = "0.0";
        String totalSampleSalesLT = "0.0";
        String totalFreeQtySalesLT = "0.0";
        String totalDiscountLT = "0.0";
        String totalDiscountKG = "0.0";


        String totalOverallKGSales = "0.0";
        String totalOverallSampleSalesKG = "0.0";
        String totalOverallFreeQtySalesKG = "0.0";
        String totalOverallLitersSales = "0.0";
        String totalOverallSampleSalesLT = "0.0";
        String totalOverallFreeQtySalesLT = "0.0";
        String totalOverallDiscountLT = "0.0";
        String totalOverallDiscountKG = "0.0";

        String FinalReturnValue = "";
        String ppName = "";
        String pDisplayUnit = "";
        for (int kk = 0; kk < UniqueKgLiters.length; kk++) {
            StringTokenizer tokensUniqueKgLiters = new StringTokenizer(String.valueOf(UniqueKgLiters[kk]), "^");

            ppName = tokensUniqueKgLiters.nextToken().trim();

            val = "";
            val = tokensUniqueKgLiters.nextToken().trim();//UniqueKgLiters[kk].toString().trim();

            // change by sunil
            //val="0";
            //// System.out.println("Abhi UniqueKgLiters[kk] :"+UniqueKgLiters[kk]);

            pDisplayUnit = tokensUniqueKgLiters.nextToken().trim();
            //// System.out.println("Abhi pDisplayUnit:" +pDisplayUnit);
            //if(val.contains("0g"))
            if (pDisplayUnit.contains("Kg")) {
                //// System.out.println("Abhi getting Kg");
                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblTmpInvoiceDetails where ProductShortName='" + ppName + "'", null);
                try {
                    //val=val.replace("g", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {
                                totalKGSales = "0.0";
                                totalFreeQtySalesKG = "0.0";
                                totalSampleSalesKG = "0.0";
                                if (!cursor2.isNull(LoncolumnIndex)) {
                                    totalKGSales = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    //	cursor2.moveToNext();

                                    ////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalKGSales-:"+ totalKGSales);
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    totalFreeQtySalesKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
                                    //	cursor2.moveToNext();
                                    ////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalFreeQtySalesKG-:"+ totalFreeQtySalesKG);
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    totalSampleSalesKG = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));

                                    ////// System.out.println("AbhiSunil  Product Short Name:" +val +":-totalSampleSalesKG-:"+ totalSampleSalesKG);
                                    //
                                }


                                //Write Here

                                totalOverallKGSales = "" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(totalKGSales));
                                //////// System.out.println("AbhiSunil  totalOverallKGSales-:"+ totalOverallKGSales);
                                totalOverallFreeQtySalesKG = "" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(totalFreeQtySalesKG));
                                //////// System.out.println("AbhiSunil  totalOverallFreeQtySalesKG-:"+ totalOverallFreeQtySalesKG);
                                totalOverallSampleSalesKG = "" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(totalSampleSalesKG));
                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }

            }
            //if(val.contains("0ml"))
            if (pDisplayUnit.contains("Lt")) {
                //// System.out.println("Abhi getting Liter");

                Cursor cursor2 = db.rawQuery("SELECT Sum(OrderQty),Sum(FreeQty),Sum(SampleQuantity),Sum(DisVal) FROM  tblTmpInvoiceDetails where ProductShortName ='" + ppName + "'", null);
                try {
                    //// System.out.println("Abhi  cursor2.getCount() :"+cursor2.getCount());
                    //val=val.replace("ml", "");
                    if (cursor2.getCount() > 0) {


                        if (cursor2.moveToFirst()) {

                            for (int i = 0; i < cursor2.getCount(); i++) {
                                totalLitersSales = "0.0";
                                totalSampleSalesLT = "0.0";
                                totalFreeQtySalesLT = "0.0";

                                if (!cursor2.isNull(LoncolumnIndex)) {

                                    totalLitersSales = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex)) * Integer.parseInt(val));
                                    //	////// System.out.println("totalLitersSales :"+totalLitersSales);
                                    totalOverallLitersSales = "" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(totalLitersSales));

                                    //// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
                                    //cursor2.moveToNext();
                                }

                                if (!cursor2.isNull(LoncolumnIndex1)) {
                                    totalFreeQtySalesLT = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex1)) * Integer.parseInt(val));
                                    //////// System.out.println("totalFreeQtySalesLT :"+totalFreeQtySalesLT);
                                    totalOverallFreeQtySalesLT = "" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(totalFreeQtySalesLT));

                                    //// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
                                    //cursor2.moveToNext();
                                }
                                if (!cursor2.isNull(LoncolumnIndex2)) {
                                    totalSampleSalesLT = "" + (Integer.parseInt(cursor2.getString(LoncolumnIndex2)) * Integer.parseInt(val));
                                    totalOverallSampleSalesLT = "" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(totalSampleSalesLT));

                                    //// System.out.println("Abhi  totalOverallLitersSales :"+totalOverallLitersSales +" index :"+LoncolumnIndex);
                                    //	////// System.out.println("totalSampleSalesLT :"+totalSampleSalesLT);
                                }


                                cursor2.moveToNext();
                            }

                        }
                    }

                } finally {
                    cursor2.close();
                }


            }
        }

        //// System.out.println("Abhi Sunil  totalOverallKGSales Before:" +totalOverallKGSales);
        //// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG Before:" +totalOverallFreeQtySalesKG);
        //// System.out.println("Abhi Sunil  totalOverallSampleSalesKG Before:" +totalOverallSampleSalesKG);

        totalOverallKGSales = ConvertGramToKilo(totalOverallKGSales);

        totalOverallFreeQtySalesKG = ConvertGramToKilo(totalOverallFreeQtySalesKG);

        totalOverallSampleSalesKG = ConvertGramToKilo(totalOverallSampleSalesKG);

        //// System.out.println("Abhi Sunil  totalOverallKGSales After:" +totalOverallKGSales);
        //// System.out.println("Abhi Sunil  totalOverallFreeQtySalesKG After:" +totalOverallFreeQtySalesKG);
        //// System.out.println("Abhi Sunil  totalOverallSampleSalesKG After:" +totalOverallSampleSalesKG);
        totalOverallLitersSales = ConvertMLToLiters(totalOverallLitersSales);

        totalOverallFreeQtySalesLT = ConvertMLToLiters(totalOverallFreeQtySalesLT);
        //// System.out.println("Abhi Sunil totalOverallFreeQtySalesLT : "+totalOverallFreeQtySalesLT);
        totalOverallSampleSalesLT = ConvertMLToLiters(totalOverallSampleSalesLT);

        String strGettblSyncSummuryDetailsKGLitersDetails = "";
        strGettblSyncSummuryDetailsKGLitersDetails = fnGettblSyncSummuryDetailsKGLitersDetails();

        StringTokenizer tokensGettblSyncSummuryDetailsKGLitersDetails = new StringTokenizer(String.valueOf(strGettblSyncSummuryDetailsKGLitersDetails), "_");

        totalOverallKGSales = "" + (Double.parseDouble(totalOverallKGSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallFreeQtySalesKG = "" + (Double.parseDouble(totalOverallFreeQtySalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallSampleSalesKG = "" + (Double.parseDouble(totalOverallSampleSalesKG) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallLitersSales = "" + (Double.parseDouble(totalOverallLitersSales) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallFreeQtySalesLT = "" + (Double.parseDouble(totalOverallFreeQtySalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));
        totalOverallSampleSalesLT = "" + (Double.parseDouble(totalOverallSampleSalesLT) + Double.parseDouble(tokensGettblSyncSummuryDetailsKGLitersDetails.nextToken().trim()));


        Double DtotalOverallKGSales = Double.parseDouble(totalOverallKGSales);
        DtotalOverallKGSales = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));

        Double DtotalOverallFreeQtySalesKG = Double.parseDouble(totalOverallFreeQtySalesKG);
        DtotalOverallFreeQtySalesKG = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));

        Double DtotalOverallSampleSalesKG = Double.parseDouble(totalOverallSampleSalesKG);
        DtotalOverallSampleSalesKG = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));

        Double DtotalOverallLitersSales = Double.parseDouble(totalOverallLitersSales);
        DtotalOverallLitersSales = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));

        Double DtotalOverallFreeQtySalesLT = Double.parseDouble(totalOverallFreeQtySalesLT);
        DtotalOverallFreeQtySalesLT = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));

        Double DtotalOverallSampleSalesLT = Double.parseDouble(totalOverallSampleSalesLT);
        DtotalOverallSampleSalesLT = Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));


        //DtotalOverallKGSales = Double.parseDouble(decimalFormat.format(DtotalOverallKGSales));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallKGSales));
        FinalReturnValue = FinalReturnValue + DtotalOverallKGSales + " Units";

        // DtotalOverallFreeQtySalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesKG));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesKG));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallFreeQtySalesKG + " Units";

        // DtotalOverallSampleSalesKG =Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesKG));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesKG));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallSampleSalesKG + " Units";

        // DtotalOverallLitersSales = Double.parseDouble(decimalFormat.format(DtotalOverallLitersSales));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallLitersSales));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallLitersSales + " LT";

        // DtotalOverallFreeQtySalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallFreeQtySalesLT));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallFreeQtySalesLT));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallFreeQtySalesLT + " LT";

        //DtotalOverallSampleSalesLT = Double.parseDouble(decimalFormat.format(DtotalOverallSampleSalesLT));
        //Double.parseDouble(new DecimalFormat("##.##").format(DtotalOverallSampleSalesLT));
        FinalReturnValue = FinalReturnValue + "^" + DtotalOverallSampleSalesLT + " LT";


        //FinalReturnValue= "" + DtotalOverallKGSales + " KG" + "^" + DtotalOverallFreeQtySalesKG + " KG" + "^" + DtotalOverallSampleSalesKG + " KG" + "^" + DtotalOverallLitersSales + " LT" + "^" + DtotalOverallFreeQtySalesLT + " LT" + "^" + DtotalOverallSampleSalesLT + " LT";
        //// System.out.println("Abhi  FinalReturnValue :"+FinalReturnValue);
        return FinalReturnValue;

    }

    public String[] fnarrUniqueKgLiters() {
        int LoncolumnIndex = 0;


        Cursor cursor2 = db.rawQuery("SELECT DISTINCT ProductShortName,KGLiter,DisplayUnit FROM tblProductListMaster", null);
        try {
            String UniqueKgLiters[] = new String[cursor2.getCount()];
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    if (!cursor2.isNull(LoncolumnIndex)) {
                        UniqueKgLiters[i] = cursor2.getString(LoncolumnIndex).toString() + "^" + cursor2.getString(1).toString() + "^" + cursor2.getString(2).toString();
                        cursor2.moveToNext();
                    }

                }

            }
            return UniqueKgLiters;
        } finally {
            cursor2.close();
        }
    }

    public String fnGettblSyncSummuryDetailsKGLitersDetails() {


        Cursor cursor = db.rawQuery("SELECT TotKGSales,TotFreeQtyKGSales,TotSampleKGSales,TotLTSales,TotFreeQtyLTSales,TotSampleLTSales,TotDiscountKGSales,TotDiscountLTales from tblSyncSummuryDetails", null);

        try {
            String CompleteResult = "0.0_0.0_0.0_0.0_0.0_0.0_0.0_0.0";
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    CompleteResult = (String) cursor.getString(0).toString()
                            + "_"
                            + (String) cursor.getString(1).toString()
                            + "_"
                            + (String) cursor.getString(2).toString()
                            + "_"
                            + (String) cursor.getString(3).toString()
                            + "_"
                            + (String) cursor.getString(4).toString()
                            + "_"
                            + (String) cursor.getString(5).toString()
                            + "_"
                            + (String) cursor.getString(6).toString()
                            + "_"
                            + (String) cursor.getString(7).toString();

                    cursor.moveToNext();

                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
        }

    }

    public void deleteAllSubmitDataToServer(int Sstat) {
        //open();
        db.execSQL("DELETE FROM tblTransac WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tblTmpInvoiceHeader WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tblStoreList WHERE Sstat =" + Sstat);

        db.execSQL("DELETE FROM tblNewStoreListEntries WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tblTmpInvoiceDetails WHERE Sstat =" + Sstat);


        db.execSQL("DELETE FROM tblNewStoreEntries WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE Sstat =" + Sstat);


        db.execSQL("DELETE FROM tblStoreMaterialDetail WHERE Sstat =" + Sstat);

        db.execSQL("DELETE FROM tblStoreMaterialPhotoDetail WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tblStoreReturnDetail WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tblStoreProductPhotoDetail WHERE Sstat =" + Sstat);


        // close();
    }

    public void updateRecordsSyncStoreProductReturn() {
        try {
            final ContentValues values = new ContentValues();
            values.put("Sstat", "4");
            int affected = db.update("tblStoreReturnDetail", values, "Sstat=?",
                    new String[]{"3"});
            int affected1 = db.update("tblStoreProductPhotoDetail", values, "Sstat=?",
                    new String[]{"3"});

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    public void updateRecordsSyncd(int Sstat) {

        try {
            // ////// System.out.println("No. of non-synced records: " +
            // countNonSynced());

            // if (countNonSynced() > 0) {

            Log.w(TAG, "Updating Synced Records..");

            final ContentValues values = new ContentValues();
            values.put("Sstat", Sstat);

            if (Sstat == 4) {
                int affected71 = db.update("tblStoreCloseLocationDetails", values, "Sstat=?",
                        new String[]{"3"});
                int affected72 = db.update("tblStoreClosedPhotoDetail", values, "Sstat=?",
                        new String[]{"3"});
                int affected73 = db.update("tblStoreCloseReasonSaving", values, "Sstat=?",
                        new String[]{"3"});

            }


            int affected = db.update("tblTransac", values, "Sstat=?",
                    new String[]{"5"});
            //  int affected2 = db.update("tblTmpInvoiceHeader", values, "Sstat=?",
            //          new String[] { "5" });
            int affected3 = db.update("tblStoreList", values, "Sstat=?",
                    new String[]{"5"});
            int affected4 = db.update("tblNewStoreListEntries", values,
                    "Sstat=?", new String[]{"5"});


            int affected7 = db.update("tblStoreProductAppliedSchemesBenifitsRecords", values,
                    "Sstat=?", new String[]{"5"});
            //    int affected8 = db.update("tblTmpInvoiceDetails", values,
            //           "Sstat=?", new String[] { "5" });


            int affected9 = db.update("tblNewStoreEntries", values,
                    "Sstat=?", new String[]{"5"});


            int affected10 = db.update("tblTemp", values,
                    "Sstat=?", new String[]{"5"});

            int affected11 = db.update("tblProductMappedWithSchemeSlabApplied", values,
                    "Sstat=?", new String[]{"5"});

            int affected12 = db.update("tblOutletQuestAnsMstr", values, "Sstat=?", new String[]{"3"});
            int affected121 = db.update("tblNewAddedStoreLocationDetails", values, "Sstat=?", new String[]{"3"});
            int affected13 = db.update("tblStoreMaterialDetail", values, "Sstat=?", new String[]{"5"});

            int affected14 = db.update("tblStoreMaterialPhotoDetail", values, "Sstat=?", new String[]{"5"});


            int affected15 = db.update("tblNoVisitStoreDetails", values, "Sstat=?", new String[]{"5"});

            int affected16 = db.update("tblPDANotificationMaster", values,
                    "Sstat=?", new String[]{"5"});

            int affected17 = db.update("tblAllCollectionData", values,
                    "Sstat=?", new String[]{"5"});


            Log.w(TAG, "affected records: " + affected + " in 1st Table, "
                    + " in 2nd table, " + affected3
                    //+ " in 3rd table(tblStoreList)" + affected4
						/*+ " in 4th table(tblNewStoreListEntries)" + affected5
						+ " in 5th table(tblPDAProductReturnMstr)" + affected6*/
                    + " in 6th table(tblPDAProductReturnDetails)");

            Log.w(TAG, "Synced Records Updated..");
            // } else {
            // Log.w(TAG, "Non-Synced Records not Found..");
            // }

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void AddNewStore(String strNewAddedStoreIDFlg, String RetailerName,
                            String OwnerName, String Address, String StoreType, String fDate, String phoneSendValue, String ActualLatitude, String ActualLongitude, String Accuracy,
                            String LocProvider, String BateryLevel) {/*
			if (Integer.parseInt(strNewAddedStoreIDFlg) == 0)
			{
				int MaxAutoStore = 0;
				int cntTotStore=0;
				cntTotStore=fnGetCountForNewStore();
				String strGetMaxIDForNewStore="0";
				String activeRid;
				activeRid = GetActiveRouteID();
				if(cntTotStore>0)
				{
				MaxAutoStore = fnGetMaxAutoStoreIncrementForNewStore();
				MaxAutoStore = MaxAutoStore + 1;
				strGetMaxIDForNewStore = fnGetMaxIdWithIncrementForNewStore(MaxAutoStore);
				}
				else
				{
					MaxAutoStore=0;
					MaxAutoStore = MaxAutoStore + 1;

					strGetMaxIDForNewStore = "-000^" + (1) + "$"
							+ MaxAutoStore;

				}
				////// System.out.println("MaxAutoStore.. " + MaxAutoStore);


				////// System.out.println("MaxAutoStore. After Increment . "+ MaxAutoStore);


				////// System.out.println("New Added Store Name . "+ strGetMaxIDForNewStore);

				if (!strGetMaxIDForNewStore.equals("")
						|| !strGetMaxIDForNewStore.equals(null)) {

					////// System.out.println("fDate vlaue by sunil"+fDate);
					////// System.out.println("strGetMaxIDForNewStore.trim() vlaue by sunil"+strGetMaxIDForNewStore.trim());
					////// System.out.println("StoreType vlaue by sunil"+StoreType.trim());

					////// System.out.println("RetailerName vlaue by sunil"+RetailerName.trim());

					////// System.out.println("MaxAutoStore vlaue by sunil"+MaxAutoStore);


					saveSOAPdataStoreListNewStore(strGetMaxIDForNewStore.trim(), StoreType.trim(), RetailerName.trim(), Double.parseDouble(ActualLatitude), Double.parseDouble(ActualLongitude), "", "", fDate, MaxAutoStore,1,Accuracy,LocProvider,activeRid,BateryLevel); // in last parameter Fdate

					fnUpdateFlgForNewSoreInMainStoreTable(strGetMaxIDForNewStore);
					//fnInsertStoreIfNotExistIntblDaySummary(strGetMaxIDForNewStore);//On Store Selection VisitStart Activity
					////// System.out.println("strGetMaxIDForNewStore"+strGetMaxIDForNewStore.trim());
					////// System.out.println("RetailerName"+RetailerName.toString().trim());

					////// System.out.println("OwnerName"+OwnerName.toString().trim());

					////// System.out.println("Address"+Address.toString().trim());

					////// System.out.println("PinCode"+PinCode.toString().trim());

					////// System.out.println("StoreType"+StoreType.toString().trim());

					////// System.out.println("Location"+Location.toString().trim());

					////// System.out.println("Area"+Area.toString().trim());

					saveSOAPdataStoreListDetailsInNewTable(strGetMaxIDForNewStore.trim(), RetailerName.toString().trim(), OwnerName.toString().trim(), Address.toString().trim(),phoneSendValue,ActualLatitude,ActualLongitude,Accuracy,LocProvider,activeRid);

				}
			}
		*/
    }


//	saveSOAPdataStoreList

    public int fnGetMaxAutoStoreIncrementForNewStore() {

        int LoncolumnIndex = 0;
        int strAutoIdStore = 0;

        Cursor cursor2 = db.rawQuery(
                "SELECT Max(AutoIdStore) FROM tblStoreList", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strAutoIdStore = Integer.parseInt(cursor2
                            .getString(LoncolumnIndex));
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strAutoIdStore;
        } finally {
            cursor2.close();
        }

    }

    public int fnGetCountForNewStore() {

        int LoncolumnIndex = 0;
        int strStore = 0;

        Cursor cursor2 = db.rawQuery(
                "SELECT Count(*) FROM tblStoreList", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStore = Integer.parseInt(cursor2
                            .getString(LoncolumnIndex));
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strStore;
        } finally {
            cursor2.close();
        }

    }

    public String fnGetMaxIdWithIncrementForNewStore(int MaxAutoStore) {

        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        String strLastMaxStoreId = "0";
        String nn = "";
        // String strLastMaxAutoStoreId="0";

        Cursor cursor2 = db
                .rawQuery(
                        "SELECT StoreID FROM tblStoreList order by AutoIdStore Desc Limit 1",
                        null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strLastMaxStoreId = cursor2.getString(LoncolumnIndex);
                    // strLastMaxAutoStoreId=
                    // cursor2.getString(LoncolumnIndex1);
                    cursor2.moveToNext();
                    // cursor.close();
                }
                strLastMaxStoreId = strLastMaxStoreId.replace("-", "");

                if (strLastMaxStoreId.contains("^")) {
                    StringTokenizer tokensSchstrLastMaxStoreIdNew = new StringTokenizer(
                            String.valueOf(strLastMaxStoreId), "^");
                    nn = tokensSchstrLastMaxStoreIdNew.nextToken().trim();
                    strLastMaxStoreId = tokensSchstrLastMaxStoreIdNew
                            .nextToken().trim();
                }
                if (strLastMaxStoreId.contains("$")) {
                    StringTokenizer tokensSchstrLastMaxStoreId = new StringTokenizer(
                            String.valueOf(strLastMaxStoreId), "$");

                    strLastMaxStoreId = tokensSchstrLastMaxStoreId.nextToken()
                            .trim();
                }

                strLastMaxStoreId = "-000^" + (strLastMaxStoreId) + "$"
                        + MaxAutoStore;
            }
            return strLastMaxStoreId;
        } finally {
            cursor2.close();
        }

    }

    public long saveSOAPdataStoreListNewStore(String sCode, String sType, String sName,
                                              Double sLat, Double sLon, String LVdate, String LTdate,
                                              String sForDate, int AutoIdStore, int newStat, String Accuracy, String LocProvider,
                                              String activeRid, String BateryLevel, int IsNewStoreDataCompleteSaved, String fetchAddress,
                                              String PaymentStage, int flgHasQuote, int flgAllowQuotation, int flgSubmitFromQuotation
            , String flgGSTCapture, String flgGSTCompliance, String GSTNumber, int flgGSTRecordFromServer, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgRestart, int flgStoreOrder, String StoreCity, String StorePinCode, String StoreState, String DBR, String OwnerName, String StoreContactNo, String StoreCatType, int flgRuleTaxVal, int flgTransType, String SalesPersonName, String SalesPersonContactNo, int IsComposite, int StoreStateID, int StoreCityID,int slctdBeatNodeType) {


        int flgIfStoreHasRecords = 0;
        try {
            flgIfStoreHasRecords = CheckTotalStoreCount();
        } catch (Exception ex) {

        }

        ContentValues initialValues = new ContentValues();
        ////// System.out.println("Saved code:" + sCode + "Saved name:" + "" + sName);
        long syncTIMESTAMP = System.currentTimeMillis();
        Date dateobj = new Date(syncTIMESTAMP);
        SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss", Locale.ENGLISH);
        String startTS = TimeUtils.getNetworkDateTime(mContext, TimeUtils.DATE_TIME_FORMAT);

     /*   activeRid = GetActiveRouteID(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);
        String RouteNodeType = FetchRouteType(activeRid);
*/
        initialValues.put("IMEINumber", CommonInfo.imei);
        initialValues.put("StoreID", sCode.trim());

        initialValues.put("OwnerName", OwnerName);
        initialValues.put("StoreContactNo", StoreContactNo);
        initialValues.put("StoreCatType", StoreCatType);

        initialValues.put("OutStanding", "0.00");
        initialValues.put("OverDue", "0.00");
        initialValues.put("flgRuleTaxVal", flgRuleTaxVal);

        initialValues.put("SalesPersonName", SalesPersonName);
        initialValues.put("SalesPersonContact", SalesPersonContactNo);


        initialValues.put("chainID", 1);


        initialValues.put("StoreType", sType);
        initialValues.put("StoreName", sName.trim());
        // initialValues.put("ActualLatitude", ""+sLat);
        // initialValues.put("ActualLongitude",""+ sLon);
        initialValues.put("StoreLatitude", sLat);
        initialValues.put("StoreLongitude", sLon);
        initialValues.put("LastVisitDate", "NA");
        initialValues.put("LastTransactionDate", "NA");
        initialValues.put("Sstat", newStat);
        initialValues.put("ISNewStore", 1);
        initialValues.put("StoreClose", 0);
        //initialValues.put("StoreNextDay", 0);
        // System.out.println("DateTimeNitish fnDBkenya saveSOAPdataStoreListNewStore = "+startTS);
        //  initialValues.put("VisitStartTS", startTS);
        // initialValues.put("VisitEndTS", startTS);
        //initialValues.put("LocProvider", LocProvider);
        //initialValues.put("Accuracy", Accuracy);
        //initialValues.put("BateryLeftStatus", BateryLevel);
        // initialValues.put(KEY_snxtday, 0);
        // initialValues.put(KEY_sDone, 0);
        // initialValues.put("ForDate", sForDate.trim());
        //initialValues.put("AutoIdStore", AutoIdStore);
        initialValues.put("StoreRouteID", activeRid);
        initialValues.put("RouteNodeType", slctdBeatNodeType);
        initialValues.put("StoreCatNodeId", 0);
        initialValues.put("IsNewStoreDataCompleteSaved", IsNewStoreDataCompleteSaved);
        // initialValues.put("flgFromWhereSubmitStatus", 0);
        initialValues.put("StoreAddress", fetchAddress);
        initialValues.put("PaymentStage", PaymentStage);
        initialValues.put("flgHasQuote", flgHasQuote);
        initialValues.put("flgAllowQuotation", flgAllowQuotation);
        // initialValues.put("flgSubmitFromQuotation", flgSubmitFromQuotation);

        initialValues.put("flgGSTCapture", flgGSTCapture);
        initialValues.put("flgGSTCompliance", flgGSTCompliance);
        initialValues.put("GSTNumber", GSTNumber);
        initialValues.put("flgGSTRecordFromServer", flgGSTRecordFromServer);
        initialValues.put("DistanceNear", 1000);



      /*  initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
        initialValues.put("flgGPSOnOff", flgGPSOnOff);
        initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
        initialValues.put("flgFusedOnOff", flgFusedOnOff);
        initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
        initialValues.put("flgRestart", flgRestart);*/

        initialValues.put("flgStoreOrder", (flgIfStoreHasRecords + 1));

        initialValues.put("StoreCity", StoreCity.trim());
        initialValues.put("StorePinCode", StorePinCode.trim());
        initialValues.put("StoreState", StoreState.trim());

        // initialValues.put("flgRetailerCreditBalnce", 1);
        initialValues.put("DBR", DBR);
        initialValues.put("IsComposite", IsComposite);
        initialValues.put("StoreStateID", StoreStateID);
        initialValues.put("StoreCityID", StoreCityID);
        initialValues.put("flgOrderType", 0);
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


        checkNumberOfStore++;

        ////// System.out.println("inserting records..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN13, null, initialValues);
    }

    public int CheckTotalStoreCount() {

        int chkI = 0;
        Cursor cursorE2 = null;
        ////open();
        try {
            cursorE2 = db.rawQuery("SELECT flgStoreOrder from tblStoreList order by flgStoreOrder limit 1", null);
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    if (cursorE2.getInt(0) > 0) {
                        chkI = cursorE2.getInt(0);
                    } else {
                        chkI = 0;
                    }
                }
            }

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }
        return chkI;
    }

    public void fnUpdateFlgForNewSoreInMainStoreTable(
            String strGetMaxIDForNewStore) {
        final ContentValues values = new ContentValues();
        values.put("ISNewStore", "1");

        int affected = db.update("tblStoreList", values, "StoreID=?",
                new String[]{strGetMaxIDForNewStore});
        Log.w(TAG, "affected records: " + affected);

        Log.w(TAG, "fnUpdateFlgForNewSoreInMainStoreTable Updated..");

    }

    public long saveSOAPdataStoreListDetailsInNewTable(String StoreID, String StoreCity,
                                                       String StorePinCode, String StoreState, int Sstat) {

        ContentValues initialValues = new ContentValues();
        String activeRid = GetActiveRouteID(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);

        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("StoreCity", StoreCity.trim());
        initialValues.put("StorePinCode", StorePinCode.trim());
        initialValues.put("StoreState", StoreState.trim());
        initialValues.put("ActiveRouteID", activeRid.trim());
        initialValues.put("Sstat", Sstat);

        return db.insert(DBHelper.DATABASE_TABLE_MAIN16, null, initialValues);
    }

    public String fnGetOptionDescrFromtblGetPDAQuestOptionMstr(String QuestID, String AnsValue) {

        Cursor cursor = null;
        String DDlStringCity = "";
        try {
            //open();
            cursor = db.rawQuery("SELECT OptionDescr FROM tblGetPDAQuestOptionMstr WHERE  QuestID ='" + QuestID.trim() + "' and OptID='" + AnsValue.trim() + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        DDlStringCity = cursor.getString(0).toString().trim();

                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            //cursor.close();
            //close();

        }
        return DDlStringCity;
    }
	/*	public static long saveSOAPdataStoreListNewStore(String sCode, String sType, String sName,
				Double sLat, Double sLon, String LVdate, String LTdate,
				String sForDate, int AutoIdStore, int newStat, String Accuracy, String LocProvider,String activeRid) {
			ContentValues initialValues = new ContentValues();

			////// System.out.println("Saved code:" + sCode + "Saved name:" + "" + sName);
			long syncTIMESTAMP = System.currentTimeMillis();
			Date dateobj = new Date(syncTIMESTAMP);
			SimpleDateFormat df = new SimpleDateFormat(
					"dd-MM-yyyy HH:mm:ss");
			String startTS = df.format(dateobj);


			initialValues.put("StoreID", sCode.trim());
			initialValues.put("StoreType", "0");
			initialValues.put("StoreName", sName.trim());
			initialValues.put("ActualLatitude", ""+sLat);
			initialValues.put("ActualLongitude",""+ sLon);
			initialValues.put("StoreLatitude", sLat);
			initialValues.put("StoreLongitude", sLon);
			initialValues.put("LastVisitDate", LVdate.trim());
			initialValues.put("LastTransactionDate", LTdate.trim());
			initialValues.put("Sstat", newStat);
			initialValues.put("ISNewStore", 1);
			initialValues.put("StoreClose", 0);
			initialValues.put("StoreNextDay", 0);
			initialValues.put("VisitStartTS", startTS);
			initialValues.put("VisitEndTS", startTS);
			initialValues.put("LocProvider", LocProvider);
			initialValues.put("Accuracy", Accuracy);
			initialValues.put("BateryLeftStatus", "0");

			// initialValues.put(KEY_snxtday, 0);
			// initialValues.put(KEY_sDone, 0);
			initialValues.put("ForDate", sForDate.trim());
			initialValues.put("AutoIdStore", AutoIdStore);
			initialValues.put("StoreRouteID", activeRid);
			checkNumberOfStore++;

			////// System.out.println("inserting records..");

			return db.insert(DATABASE_TABLE_MAIN2, null, initialValues);
		}*/

   /* public LinkedHashMap isMstrQuestToHide() {
        LinkedHashMap<String, String> hmapMstrQstOptId = new LinkedHashMap<String, String>();
        //open();

        String channelOptId = getChannelGroupIdOptId();
        String channelkey = getChannelGroupIdKey();
        if (!channelOptId.equals("0-0-0")) {
            hmapMstrQstOptId.put(channelkey, channelOptId);
        } else {
            hmapMstrQstOptId.put(channelkey, "0");
        }
        //close();
        return hmapMstrQstOptId;
    }*/
   public LinkedHashMap isMstrQuestToHide(String prmchannelOptId)
   {
       LinkedHashMap<String,String> hmapMstrQstOptId= new LinkedHashMap<>();

       String channelOptId=prmchannelOptId;//getChannelGroupIdOptId();
       String channelkey =getChannelGroupIdKey();
       if(!channelOptId.equals("0-0-0"))
       {
           hmapMstrQstOptId.put(channelkey,channelOptId);
       }
       else
       {
           hmapMstrQstOptId.put(channelkey,"0");
       }
       return hmapMstrQstOptId;
   }
    public String GetPrevDate() {

        Cursor cursorDateE = db.rawQuery("SELECT DISTINCT ForDate FROM tblStoreList", null);
        String returnDate = "";
        String date2Send = "";

        try {
            if (cursorDateE.getCount() > 0) {
                ////// System.out.println("GetPrevDate - Records Count: "+ cursorDateE.getCount());

                if (cursorDateE.moveToFirst()) {
                    date2Send = cursorDateE.getString(0);
                    // chk here
                    ////// System.out.println("GetPrevDate - forDate: " + date2Send);

                } else {
                    ////// System.out.println("moveToFirst <- GetPrevDate - FALSE!");
                }
                // ////// System.out.println("returning GetPrevDate - true");
                returnDate = date2Send;
            }

        } finally {
            cursorDateE.close();
        }
        return returnDate;
    }

    public void AddNewStore(String strNewAddedStoreIDFlg, String RetailerName,
                            String OwnerName, String Address, String StoreType, String fDate, String phoneSendValue, String ActualLatitude, String ActualLongitude, String Accuracy,
                            String LocProvider) {/*
			if (Integer.parseInt(strNewAddedStoreIDFlg) == 0)
			{
				int MaxAutoStore = 0;
				int cntTotStore=0;
				cntTotStore=fnGetCountForNewStore();
				String strGetMaxIDForNewStore="0";
				String activeRid;
				activeRid = GetActiveRouteID();
				if(cntTotStore>0)
				{
				MaxAutoStore = fnGetMaxAutoStoreIncrementForNewStore();
				MaxAutoStore = MaxAutoStore + 1;
				strGetMaxIDForNewStore = fnGetMaxIdWithIncrementForNewStore(MaxAutoStore);
				}
				else
				{
					MaxAutoStore=0;
					MaxAutoStore = MaxAutoStore + 1;

					strGetMaxIDForNewStore = "-000^" + (1) + "$"
							+ MaxAutoStore;

				}
				////// System.out.println("MaxAutoStore.. " + MaxAutoStore);


				////// System.out.println("MaxAutoStore. After Increment . "+ MaxAutoStore);


				////// System.out.println("New Added Store Name . "+ strGetMaxIDForNewStore);

				if (!strGetMaxIDForNewStore.equals("")
						|| !strGetMaxIDForNewStore.equals(null)) {



					saveSOAPdataStoreListNewStore(strGetMaxIDForNewStore.trim(), StoreType.trim(), RetailerName.trim(), Double.parseDouble(ActualLatitude), Double.parseDouble(ActualLongitude), "", "", fDate, MaxAutoStore,1,Accuracy,LocProvider,activeRid,IsNewStoreDataCompleteSaved); // in last parameter Fdate

					fnUpdateFlgForNewSoreInMainStoreTable(strGetMaxIDForNewStore);
					////// System.out.println("strGetMaxIDForNewStore"+strGetMaxIDForNewStore.trim());
					////// System.out.println("RetailerName"+RetailerName.toString().trim());

					////// System.out.println("OwnerName"+OwnerName.toString().trim());

					////// System.out.println("Address"+Address.toString().trim());

					////// System.out.println("PinCode"+PinCode.toString().trim());

					////// System.out.println("StoreType"+StoreType.toString().trim());

					////// System.out.println("Location"+Location.toString().trim());

					////// System.out.println("Area"+Area.toString().trim());

					saveSOAPdataStoreListDetailsInNewTable(strGetMaxIDForNewStore.trim(), RetailerName.toString().trim(), OwnerName.toString().trim(), Address.toString().trim(),phoneSendValue,ActualLatitude,ActualLongitude,Accuracy,LocProvider,activeRid,IsNewStoreDataCompleteSaved);

				}
			}
		*/
    }

    public String[] FetcDistinctProductWhichHaveAnySchemesOrderEntry() {
        int ScodecolumnIndex = 0;
        int ScodecolumnIndex1 = 1;

        Cursor cursor = db.rawQuery("SELECT Distinct ProductId FROM tblschemeProductMap", null);
        try {
            String DistinctProductIdStock[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    DistinctProductIdStock[i] = (String) cursor.getString(ScodecolumnIndex).toString();
                    ////// System.out.println("product short name :"+StoreProductIdStock[i]);
                    cursor.moveToNext();
                }
            }
            return DistinctProductIdStock;
        } finally {
            cursor.close();
        }
    }

    public String[] fnSchemeIDFreePRodQtyDetails() {

        Cursor cursor = db.rawQuery("SELECT tblSchemeList.SchemeID,tblSchemeList.SchemeType, " +
                " tblSchemeList.CombTypeID,tblSchemeList.flgDiscountType,tblSchemeDetails.FreeProductID from tblSchemeList Inner JOIN tblSchemeDetails" +
                "  ON tblSchemeList.SchemeID=tblSchemeDetails.SchemeID", null);
        try {
            String[] SchemeIDFreePRodQtyDetails = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    SchemeIDFreePRodQtyDetails[i] = (String) cursor.getString(0).toString() + "^" + (String) cursor.getString(1).toString() + "^" + (String) cursor.getString(2).toString() + "^" + (String) cursor.getString(3).toString() + "^" + (String) cursor.getString(4).toString();
                    // System.out.println("product short name Abhinav Raj :"+SchemeIDFreePRodQtyDetails[i]);
                    cursor.moveToNext();
                }
            }
            return SchemeIDFreePRodQtyDetails;
        } finally {
            cursor.close();
        }
    }

    public int fnCheckIfStoreExistInStoreSchemeFreeProQtyOtherDetails(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStoreSchemeFreeProQtyOtherDetails WHERE StoreID ='" + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public void fnChkandInsertIfNotPresentInStoreSchemeFreeProQtyOtherDetails(String StoreID) {
        int chkI = fnCheckIfStoreExistInStoreSchemeFreeProQtyOtherDetails(StoreID);
        int GetStoreType = fnGetStoreTypeOnStoreID(StoreID);
        if (chkI == 0) {
            String[] SchemeIDFreePRodQtyDetails = fnSchemeIDFreePRodQtyDetails();
            fnInsertStoreRecordsInStoreSchemeFreeProQtyOtherDetailsIfNotPresent(SchemeIDFreePRodQtyDetails, StoreID, "" + GetStoreType);

        }

    }

    public void fnInsertStoreRecordsInStoreSchemeFreeProQtyOtherDetailsIfNotPresent(String SchemeIDFreePRodQtyDetails[], String StoreID, String StoreType) {

        for (int cnt = 0; cnt < SchemeIDFreePRodQtyDetails.length; cnt++) {
            StringTokenizer token = new StringTokenizer(String.valueOf(SchemeIDFreePRodQtyDetails[cnt]), "^");
            //// System.out.println("product short name Abhinav Raj In Loop :"+SchemeIDFreePRodQtyDetails[cnt]);
            ContentValues initialValues = new ContentValues();
            initialValues.put("StoreID", StoreID.trim());
            initialValues.put("StoreType", StoreType.trim());
            initialValues.put("SchemeID", token.nextToken().trim());
            initialValues.put("SchemeType", token.nextToken().trim());
            initialValues.put("CombTypeID", token.nextToken().trim());
            initialValues.put("flgDiscountType", token.nextToken().trim());
            initialValues.put("FreeProductID", token.nextToken().trim());
            initialValues.put("FreeProductQty", "0");
            initialValues.put("Discount", "0.00");

            db.insert("tblStoreSchemeFreeProQtyOtherDetails", null, initialValues);
        }

    }

    public void deleteStoreRecordFromtblStoreSchemeFreeProQtyOtherDetailsOnceSubmitted(String storeID) {
        db.execSQL("DELETE FROM tblStoreSchemeFreeProQtyOtherDetails WHERE StoreID='" + storeID + "'");
    }
	/*	public static ArrayList<HashMap<String, String>> fetch_catgry_prdctsData(String storeID,int BusinessSegmentId) {

			//open();
			ArrayList<HashMap<String, String>> totalProductDetail=new ArrayList<HashMap<String, String>>();
			//hmapCtgryPrdctDetail= key=prdctId,val=CategoryID
			LinkedHashMap<String, String> hmapCtgryPrdctDetail=new LinkedHashMap<String, String>();
			//hmapCtgryPrdctDetail= key=prdctId,val=Volume^Rate^TaxAmount
			HashMap<String, String> hmapPrdctVolRatTax=new HashMap<String, String>();
			//hmapCtgryPrdctDetail= key=prdctId,val=OrderQty
			HashMap<String, String> hmapPrdctOdrQty=new HashMap<String, String>();
			//hmapCtgryPrdctDetail= key=prdctId,val=ProductSample
			HashMap<String, String> hmapPrdctSmpl=new HashMap<String, String>();
			//hmapCtgryPrdctDetail= key=prdctId,val=ProductFreeQty
			HashMap<String, String> hmapPrdctFreeQty=new HashMap<String, String>();
			//hmapCtgryPrdctDetail= key=prdctId,val=ProductName
			HashMap<String, String> hmapPrdctIdPrdctName=new HashMap<String, String>();
			//hmapCtgryPrdctDetail= key=prdctId,val=ProductDiscount
			HashMap<String, String> hmapPrdctIdPrdctDscnt=new HashMap<String, String>();

			 //hmapProductRetailerMarginPercentage= key =ProductID         value=RetailerMarginPercentage
			   HashMap<String, String> hmapProductRetailerMarginPercentage=new HashMap<String, String>();

			 //hmapProductVatTaxPerventage= key =ProductID         value=VatTaxPercentage
			   HashMap<String, String> hmapProductVatTaxPerventage=new HashMap<String, String>();

			 //hmapProductVatTaxPerventage= key =ProductID         value=ProductMRP
			   HashMap<String, String> hmapProductMRP=new HashMap<String, String>();

			 //hmapProductVatTaxPerventage= key =ProductID         value=DiscountPercentageGivenOnProduct
			   HashMap<String, String> hmapProductDiscountPercentageGive=new HashMap<String, String>();

			 //hmapProductVolumePer= key =ProductID         value=Per
			   HashMap<String, String> hmapProductVolumePer=new HashMap<String, String>();

			 //hmapProductVolumePer= key =ProductID         value=TaxValue
			   HashMap<String, String> hmapProductTaxValue=new HashMap<String, String>();

			 //hmapProductVolumePer= key =ProductID         value=LODQty
			   HashMap<String, String> hmapProductLODQty=new HashMap<String, String>();

			 //hmapProductVolumePer= key =ProductID         value=LODQty
			   HashMap<String, String> hmapProductIdOrdrVal=new HashMap<String, String>();

			   //hmapProductStandardRate= key =ProductID         value=StandardRate
			   HashMap<String, String> hmapProductStandardRate=new HashMap<String, String>();

			   //hmapProductStandardRateBeforeTax= key =ProductID         value=StandardRateBeforeTax
			   HashMap<String, String> hmapProductStandardRateBeforeTax=new HashMap<String, String>();

			   //hmapProductStandardTax= key =ProductID         value=StandardTax
			   HashMap<String, String> hmapProductStandardTax=new HashMap<String, String>();

			   //hmapProductStock= key =ProductID         value=Stock
			   HashMap<String, String> hmapProductStock=new HashMap<String, String>();

			//hmapProductStock= key =ProductID         value=flgPriceAva
			HashMap<String, String> hmapProductflgPriceAva=new HashMap<String, String>();


			 //Cursor cursor = db.rawQuery("SELECT ProductID,CategoryID,ProductShortName,KGLiter ||'^'||ProductRLP||'^'||ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,RetMarginPer,VatTax,ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,StandardRate,StandardRateBeforeTax,StandardTax,0 As Stock  FROM tblProductListMaster order by CategoryID,ProductID",null);
			   Cursor cursor = db.rawQuery("SELECT tblProductListMaster.ProductID,tblProductListMaster.CategoryID,tblProductListMaster.ProductShortName,tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,tblProductSegementMap.RetMarginPer,tblProductSegementMap.VatTax,tblProductSegementMap.ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,tblProductSegementMap.StandardTax,0 As Stock,tblProductSegementMap.flgPriceAva  FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID  order by tblProductListMaster.CategoryID,tblProductListMaster.PrdOrdr",null);//Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"

			   //tblProductListMaster.ProductID------------->0
			   //tblProductListMaster.CategoryID------------>1
			   //tblProductListMaster.ProductShortName------>2
			   //tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax
			   //'NA/0' As LODQty---------------------->4
			   //0 AS SampleQty------------------------>5
			   //0 AS ProductFreeQty------------------->6
			   //0 AS ProductOrderQty------------------>7
			   //0.00 As PrdctDiscount----------------->8
			   //tblProductSegementMap.RetMarginPer---->9
			   //tblProductSegementMap.VatTax---------->10
			   //tblProductSegementMap.ProductMRP-------->11
			   //0.00 AS DiscountPercentageGivenOnProduct----->12
			   //0 AS Per------------------------------->13
			   //0.00 AS TaxValue----------------------->14
			   //0.00 AS OrderValue--------------------->15
			   //tblProductSegementMap.StandardRate----->16
			   //tblProductSegementMap.StandardRateBeforeTax----->17
			   //tblProductSegementMap.StandardTax------->18
			   //0 As Stock------------------------------>19
			   //FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"  order by tblProductListMaster.CategoryID,tblProductListMaster.ProductID",null);
			   try
			{
				if(cursor.getCount()>0)
				{
					if (cursor.moveToFirst()) {

						for (int i = 0; i < cursor.getCount(); i++)
						{
							hmapCtgryPrdctDetail.put(cursor.getString(0), cursor.getString(1));
							hmapPrdctVolRatTax.put(cursor.getString(0), cursor.getString(3));
							hmapPrdctOdrQty.put(cursor.getString(0), cursor.getString(7));
							hmapPrdctSmpl.put(cursor.getString(0), cursor.getString(5));
							hmapPrdctFreeQty.put(cursor.getString(0), cursor.getString(6));
							hmapPrdctIdPrdctName.put(cursor.getString(0), cursor.getString(2));
							hmapPrdctIdPrdctDscnt.put(cursor.getString(0), cursor.getString(8));
							hmapProductRetailerMarginPercentage.put(cursor.getString(0), cursor.getString(9));
							hmapProductVatTaxPerventage.put(cursor.getString(0), cursor.getString(10));
							hmapProductMRP.put(cursor.getString(0), cursor.getString(11));
							hmapProductDiscountPercentageGive.put(cursor.getString(0), cursor.getString(12));
							hmapProductVolumePer.put(cursor.getString(0), cursor.getString(13));
							hmapProductTaxValue.put(cursor.getString(0), cursor.getString(14));
							hmapProductLODQty.put(cursor.getString(0), cursor.getString(4));
							hmapProductIdOrdrVal.put(cursor.getString(0), cursor.getString(15));

							hmapProductStandardRate.put(cursor.getString(0), cursor.getString(16));

							hmapProductStandardRateBeforeTax.put(cursor.getString(0), cursor.getString(17));

							hmapProductStandardTax.put(cursor.getString(0), cursor.getString(18));
							hmapProductStock.put(cursor.getString(0), cursor.getString(19));
							hmapProductflgPriceAva.put(cursor.getString(0), cursor.getString(20));
							cursor.moveToNext();
							// cursor.close();
						}
						totalProductDetail.add(hmapCtgryPrdctDetail);
						totalProductDetail.add(hmapPrdctVolRatTax);
						totalProductDetail.add(hmapPrdctOdrQty);
						totalProductDetail.add(hmapPrdctSmpl);
						totalProductDetail.add(hmapPrdctFreeQty);
						totalProductDetail.add(hmapPrdctIdPrdctName);
						totalProductDetail.add(hmapPrdctIdPrdctDscnt);
						totalProductDetail.add(hmapProductRetailerMarginPercentage);
						totalProductDetail.add(hmapProductVatTaxPerventage);
						totalProductDetail.add(hmapProductMRP);
						totalProductDetail.add(hmapProductDiscountPercentageGive);
						totalProductDetail.add(hmapProductVolumePer);
						totalProductDetail.add(hmapProductTaxValue);
						totalProductDetail.add(hmapProductLODQty);
						totalProductDetail.add(hmapProductIdOrdrVal);
						totalProductDetail.add(hmapProductStandardRate);
						totalProductDetail.add(hmapProductStandardRateBeforeTax);
						totalProductDetail.add(hmapProductStandardTax);
						totalProductDetail.add(hmapProductStock);
						totalProductDetail.add(hmapProductflgPriceAva);
					}
				}


				return totalProductDetail;
			} finally {
				cursor.close();

				//close();
			}


		}
	*/

    public String fnGetFreeQtyFromStoreSchemeFreeProQtyOtherDetails(String storeID, String SchID, String SchemeType, String CombTypeID, String FreeProductID) {

        int LoncolumnIndex = 0;
        int LoncolumnIndex1 = 1;
        String strSchemeIDFreeProductId = "";
        String Statement = "";
        if (SchemeType.equals("1") || SchemeType.equals("2")) {
            Statement = "SELECT FreeProductQty FROM tblStoreSchemeFreeProQtyOtherDetails where SchemeID='"
                    + SchID + "' and StoreID='" + storeID + "' and SchemeType='" + SchemeType + "' and CombTypeID='" + CombTypeID + "' and FreeProductID='" + FreeProductID + "'";

        } else {
            Statement = "SELECT Discount FROM tblStoreSchemeFreeProQtyOtherDetails where SchemeID='"
                    + SchID + "' and StoreID='" + storeID + "' and SchemeType='" + SchemeType + "' and CombTypeID='" + CombTypeID + "' and FreeProductID='" + FreeProductID + "'";
        }
        Cursor cursor2 = db.rawQuery("SELECT FreeProductQty FROM tblStoreSchemeFreeProQtyOtherDetails where SchemeID='"
                + SchID + "' and StoreID='" + storeID + "' and SchemeType='" + SchemeType + "' and CombTypeID='" + CombTypeID + "' and FreeProductID='" + FreeProductID + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {

                    strSchemeIDFreeProductId = cursor2
                            .getString(LoncolumnIndex);
                    //+ "_"
                    //+ cursor2.getString(LoncolumnIndex1);
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strSchemeIDFreeProductId;
        } finally {
            cursor2.close();
        }
    }

    public void UpdateInvoiceButtonStoreFlag(String storeID, String SchID, String SchemeType, String CombTypeID, String FreeProductID, String FreeProductQty, String Discount) {
        if (SchemeType.equals("1") || SchemeType.equals("2")) {
            try {
                final ContentValues values = new ContentValues();
                values.put("Discount", FreeProductQty);
                int affected = db.update("tblStoreSchemeFreeProQtyOtherDetails", values, "StoreID=? AND SchemeID=? AND SchemeType=? AND CombTypeID=? AND FreeProductID=?", new String[]{storeID, SchID, SchemeType, CombTypeID, FreeProductID});
            } catch (Exception ex) {
                Log.e(TAG, ex.toString());
            }
        } else if (SchemeType.equals("3")) {
            try {
                final ContentValues values = new ContentValues();
                values.put("FreeProductQty", FreeProductQty);
                int affected = db.update("tblStoreSchemeFreeProQtyOtherDetails", values, "StoreID=? AND SchemeID=? AND SchemeType=? AND CombTypeID=? AND FreeProductID=?", new String[]{storeID, SchID, SchemeType, CombTypeID, FreeProductID});
            } catch (Exception ex) {
                Log.e(TAG, ex.toString());
            }
        }
    }

    public int fnGetStoreTypeOnStoreID(String StoreID) {

        int LoncolumnIndex = 0;
        int strStoreType = 0;

        Cursor cursor2 = db.rawQuery(
                "SELECT StoreType FROM tblStoreList Where StoreID='" + StoreID + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStoreType = Integer.parseInt(cursor2
                            .getString(LoncolumnIndex));
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }
            return strStoreType;
        } finally {
            cursor2.close();
        }

    }
    public ArrayList<HashMap<String, String>> fetch_catgry_prdctsData(String storeID,int BusinessSegmentId) {

        //open();
        ArrayList<HashMap<String, String>> totalProductDetail=new ArrayList<HashMap<String, String>>();
        //hmapCtgryPrdctDetail= key=prdctId,val=CategoryID
        LinkedHashMap<String, String> hmapCtgryPrdctDetail=new LinkedHashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=Volume^Rate^TaxAmount
        HashMap<String, String> hmapPrdctVolRatTax=new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=OrderQty
        HashMap<String, String> hmapPrdctOdrQty=new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=ProductSample
        HashMap<String, String> hmapPrdctSmpl=new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=ProductFreeQty
        HashMap<String, String> hmapPrdctFreeQty=new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=ProductName
        HashMap<String, String> hmapPrdctIdPrdctName=new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=ProductDiscount
        HashMap<String, String> hmapPrdctIdPrdctDscnt=new HashMap<String, String>();

        //hmapProductRetailerMarginPercentage= key =ProductID         value=RetailerMarginPercentage
        HashMap<String, String> hmapProductRetailerMarginPercentage=new HashMap<String, String>();

        //hmapProductVatTaxPerventage= key =ProductID         value=VatTaxPercentage
        HashMap<String, String> hmapProductVatTaxPerventage=new HashMap<String, String>();

        //hmapProductVatTaxPerventage= key =ProductID         value=ProductMRP
        HashMap<String, String> hmapProductMRP=new HashMap<String, String>();

        //hmapProductVatTaxPerventage= key =ProductID         value=DiscountPercentageGivenOnProduct
        HashMap<String, String> hmapProductDiscountPercentageGive=new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=Per
        HashMap<String, String> hmapProductVolumePer=new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=TaxValue
        HashMap<String, String> hmapProductTaxValue=new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=LODQty
        HashMap<String, String> hmapProductLODQty=new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=LODQty
        HashMap<String, String> hmapProductIdOrdrVal=new HashMap<String, String>();

        //hmapProductStandardRate= key =ProductID         value=StandardRate
        HashMap<String, String> hmapProductStandardRate=new HashMap<String, String>();

        //hmapProductStandardRateBeforeTax= key =ProductID         value=StandardRateBeforeTax
        HashMap<String, String> hmapProductStandardRateBeforeTax=new HashMap<String, String>();

        //hmapProductStandardTax= key =ProductID         value=StandardTax
        HashMap<String, String> hmapProductStandardTax=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=Stock
        HashMap<String, String> hmapProductStock=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapProductflgPriceAva=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapflgWholeSellApplicable=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapPriceRangeWholeSellApplicable=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapStandardRateWholeSale=new HashMap<String, String>();
//hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapStandardRateBeforeTaxWholeSell=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapStandardTaxWholeSale=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=ProductSelectedUOMId
        HashMap<String, String> hmapProductSelectedUOMId=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=LineValBfrTxAftrDscnt
        HashMap<String, String> hmapLineValBfrTxAftrDscnt=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=LineValAftrTxAftrDscnt
        HashMap<String, String> hmapLineValAftrTxAftrDscnt=new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=LineValAftrTxAftrDscnt

        HashMap<String, String> hmapProductExtraOrder=new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=NHILTax
        HashMap<String, String> hmapProductNHILTaxPercent = new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=GetFundTax
        HashMap<String, String> hmapProductGetFundTaxPercent = new HashMap<String, String>();

      /*  Cursor cursor=null;
        if(CommonInfo.hmapAppMasterFlags.get("flgControlStock")==1) {
            cursor = db.rawQuery("SELECT tblProductListMaster.ProductID,tblProductListMaster.CategoryID,tblProductListMaster.ProductShortName,tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,tblProductSegementMap.RetMarginPer,tblProductSegementMap.VatTax,tblProductSegementMap.ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,tblProductSegementMap.StandardTax,0 As Stock,tblProductSegementMap.flgPriceAva,tblProductSegementMap.flgWholeSellApplicable,tblProductSegementMap.PriceRangeWholeSellApplicable,tblProductSegementMap.StandardRateWholeSale,tblProductSegementMap.StandardRateBeforeTaxWholeSell,tblProductSegementMap.StandardTaxWholeSale,'0' AS UOMID,'0.00' AS LineValBfrTxAftrDscnt,'0.00' AS LineValAftrTxAftrDscnt,0 AS ProductExtraOrder  FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID inner join tblVanProductStock on tblProductListMaster.ProductID=tblVanProductStock.PrdctId  order by tblProductListMaster.CategoryID,tblProductListMaster.PrdOrdr", null);//Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"
        }
        else
        {
            cursor = db.rawQuery("SELECT tblProductListMaster.ProductID,tblProductListMaster.CategoryID,tblProductListMaster.ProductShortName,tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,tblProductSegementMap.RetMarginPer,tblProductSegementMap.VatTax,tblProductSegementMap.ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,tblProductSegementMap.StandardTax,0 As Stock,tblProductSegementMap.flgPriceAva,tblProductSegementMap.flgWholeSellApplicable,tblProductSegementMap.PriceRangeWholeSellApplicable,tblProductSegementMap.StandardRateWholeSale,tblProductSegementMap.StandardRateBeforeTaxWholeSell,tblProductSegementMap.StandardTaxWholeSale,'0' AS UOMID,'0.00' AS LineValBfrTxAftrDscnt,'0.00' AS LineValAftrTxAftrDscnt,0 AS ProductExtraOrder  FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID order by tblProductListMaster.CategoryID,tblProductListMaster.PrdOrdr", null);//Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"
        }*/
        Cursor cursor = db.rawQuery("SELECT tblProductListMaster.ProductID,tblProductListMaster.CategoryID,tblProductListMaster.ProductShortName,tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,tblProductSegementMap.RetMarginPer,tblProductSegementMap.VatTax,tblProductSegementMap.ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,tblProductSegementMap.StandardTax,0 As Stock,tblProductSegementMap.flgPriceAva,tblProductSegementMap.flgWholeSellApplicable,tblProductSegementMap.PriceRangeWholeSellApplicable,tblProductSegementMap.StandardRateWholeSale,tblProductSegementMap.StandardRateBeforeTaxWholeSell,tblProductSegementMap.StandardTaxWholeSale,'0' AS UOMID,'0.00' AS LineValBfrTxAftrDscnt,'0.00' AS LineValAftrTxAftrDscnt,ifnull(tblProductSegementMap.NHILTax,0.0) AS NHILTax,ifnull(tblProductSegementMap.GetFundTax,0.0) AS GetFundTax,0 AS ProductExtraOrder  FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID  order by tblProductListMaster.CategoryID,tblProductListMaster.PrdOrdr",null);//Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"

        //tblProductListMaster.ProductID------------->0
        //tblProductListMaster.CategoryID------------>1
        //tblProductListMaster.ProductShortName------>2
        //tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax
        //'NA/0' As LODQty---------------------->4
        //0 AS SampleQty------------------------>5
        //0 AS ProductFreeQty------------------->6
        //0 AS ProductOrderQty------------------>7
        //0.00 As PrdctDiscount----------------->8
        //tblProductSegementMap.RetMarginPer---->9
        //tblProductSegementMap.VatTax---------->10
        //tblProductSegementMap.ProductMRP-------->11
        //0.00 AS DiscountPercentageGivenOnProduct----->12
        //0 AS Per------------------------------->13
        //0.00 AS TaxValue----------------------->14
        //0.00 AS OrderValue--------------------->15
        //tblProductSegementMap.StandardRate----->16
        //tblProductSegementMap.StandardRateBeforeTax----->17
        //tblProductSegementMap.StandardTax------->18
        //0 As Stock------------------------------>19
        //FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"  order by tblProductListMaster.CategoryID,tblProductListMaster.ProductID",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++)
                    {
                        hmapCtgryPrdctDetail.put(cursor.getString(0), cursor.getString(1));
                        hmapPrdctVolRatTax.put(cursor.getString(0), cursor.getString(3));
                        hmapPrdctOdrQty.put(cursor.getString(0), cursor.getString(7));
                        hmapPrdctSmpl.put(cursor.getString(0), cursor.getString(5));
                        hmapPrdctFreeQty.put(cursor.getString(0), cursor.getString(6));
                        hmapPrdctIdPrdctName.put(cursor.getString(0), cursor.getString(2));
                        hmapPrdctIdPrdctDscnt.put(cursor.getString(0), cursor.getString(8));
                        hmapProductRetailerMarginPercentage.put(cursor.getString(0), cursor.getString(9));
                        hmapProductVatTaxPerventage.put(cursor.getString(0), cursor.getString(10));
                        hmapProductMRP.put(cursor.getString(0), cursor.getString(11));
                        hmapProductDiscountPercentageGive.put(cursor.getString(0), cursor.getString(12));
                        hmapProductVolumePer.put(cursor.getString(0), cursor.getString(13));
                        hmapProductTaxValue.put(cursor.getString(0), cursor.getString(14));
                        hmapProductLODQty.put(cursor.getString(0), cursor.getString(4));
                        hmapProductIdOrdrVal.put(cursor.getString(0), cursor.getString(15));

                        hmapProductStandardRate.put(cursor.getString(0), cursor.getString(16));

                        hmapProductStandardRateBeforeTax.put(cursor.getString(0), cursor.getString(17));

                        hmapProductStandardTax.put(cursor.getString(0), cursor.getString(18));
                        hmapProductStock.put(cursor.getString(0), cursor.getString(19));
                        hmapProductflgPriceAva.put(cursor.getString(0), cursor.getString(20));
                        hmapflgWholeSellApplicable.put(cursor.getString(0), cursor.getString(21));
                        hmapPriceRangeWholeSellApplicable.put(cursor.getString(0), cursor.getString(22));
                        hmapStandardRateWholeSale.put(cursor.getString(0), cursor.getString(23));
                        hmapStandardRateBeforeTaxWholeSell.put(cursor.getString(0), cursor.getString(24));
                        hmapStandardTaxWholeSale.put(cursor.getString(0), cursor.getString(25));

                        hmapProductSelectedUOMId.put(cursor.getString(0), cursor.getString(26));
                        hmapLineValBfrTxAftrDscnt.put(cursor.getString(0), cursor.getString(27));
                        hmapLineValAftrTxAftrDscnt.put(cursor.getString(0), cursor.getString(28));

                        hmapProductNHILTaxPercent.put(cursor.getString(0), cursor.getString(29));

                        hmapProductGetFundTaxPercent.put(cursor.getString(0), cursor.getString(30));
                        hmapProductExtraOrder.put(cursor.getString(0), cursor.getString(31));
                        cursor.moveToNext();
                        // cursor.close();
                    }
                    totalProductDetail.add(hmapCtgryPrdctDetail);
                    totalProductDetail.add(hmapPrdctVolRatTax);
                    totalProductDetail.add(hmapPrdctOdrQty);
                    totalProductDetail.add(hmapPrdctSmpl);
                    totalProductDetail.add(hmapPrdctFreeQty);
                    totalProductDetail.add(hmapPrdctIdPrdctName);
                    totalProductDetail.add(hmapPrdctIdPrdctDscnt);
                    totalProductDetail.add(hmapProductRetailerMarginPercentage);
                    totalProductDetail.add(hmapProductVatTaxPerventage);
                    totalProductDetail.add(hmapProductMRP);
                    totalProductDetail.add(hmapProductDiscountPercentageGive);
                    totalProductDetail.add(hmapProductVolumePer);
                    totalProductDetail.add(hmapProductTaxValue);
                    totalProductDetail.add(hmapProductLODQty);
                    totalProductDetail.add(hmapProductIdOrdrVal);
                    totalProductDetail.add(hmapProductStandardRate);
                    totalProductDetail.add(hmapProductStandardRateBeforeTax);
                    totalProductDetail.add(hmapProductStandardTax);
                    totalProductDetail.add(hmapProductStock);
                    totalProductDetail.add(hmapProductflgPriceAva);
                    totalProductDetail.add(hmapflgWholeSellApplicable);
                    totalProductDetail.add(hmapPriceRangeWholeSellApplicable);
                    totalProductDetail.add(hmapStandardRateWholeSale);
                    totalProductDetail.add(hmapStandardRateBeforeTaxWholeSell);
                    totalProductDetail.add(hmapStandardTaxWholeSale);

                    totalProductDetail.add(hmapProductSelectedUOMId);
                    totalProductDetail.add(hmapLineValBfrTxAftrDscnt);
                    totalProductDetail.add(hmapLineValAftrTxAftrDscnt);
                    totalProductDetail.add(hmapProductNHILTaxPercent);
                    totalProductDetail.add(hmapProductGetFundTaxPercent);
                    totalProductDetail.add(hmapProductExtraOrder);

                    //

                }
            }


            return totalProductDetail;
        } finally {
            cursor.close();

            // close();
        }


    }

   /* public ArrayList<HashMap<String, String>> fetch_catgry_prdctsData(String storeID, int BusinessSegmentId) {

        //open();
        ArrayList<HashMap<String, String>> totalProductDetail = new ArrayList<HashMap<String, String>>();
        //hmapCtgryPrdctDetail= key=prdctId,val=CategoryID
        LinkedHashMap<String, String> hmapCtgryPrdctDetail = new LinkedHashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=Volume^Rate^TaxAmount
        HashMap<String, String> hmapPrdctVolRatTax = new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=OrderQty
        HashMap<String, String> hmapPrdctOdrQty = new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=ProductSample
        HashMap<String, String> hmapPrdctSmpl = new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=ProductFreeQty
        HashMap<String, String> hmapPrdctFreeQty = new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=ProductName
        HashMap<String, String> hmapPrdctIdPrdctName = new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=ProductDiscount
        HashMap<String, String> hmapPrdctIdPrdctDscnt = new HashMap<String, String>();

        //hmapProductRetailerMarginPercentage= key =ProductID         value=RetailerMarginPercentage
        HashMap<String, String> hmapProductRetailerMarginPercentage = new HashMap<String, String>();

        //hmapProductVatTaxPerventage= key =ProductID         value=VatTaxPercentage
        HashMap<String, String> hmapProductVatTaxPerventage = new HashMap<String, String>();

        //hmapProductVatTaxPerventage= key =ProductID         value=ProductMRP
        HashMap<String, String> hmapProductMRP = new HashMap<String, String>();

        //hmapProductVatTaxPerventage= key =ProductID         value=DiscountPercentageGivenOnProduct
        HashMap<String, String> hmapProductDiscountPercentageGive = new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=Per
        HashMap<String, String> hmapProductVolumePer = new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=TaxValue
        HashMap<String, String> hmapProductTaxValue = new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=LODQty
        HashMap<String, String> hmapProductLODQty = new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=LODQty
        HashMap<String, String> hmapProductIdOrdrVal = new HashMap<String, String>();

        //hmapProductStandardRate= key =ProductID         value=StandardRate
        HashMap<String, String> hmapProductStandardRate = new HashMap<String, String>();

        //hmapProductStandardRateBeforeTax= key =ProductID         value=StandardRateBeforeTax
        HashMap<String, String> hmapProductStandardRateBeforeTax = new HashMap<String, String>();

        //hmapProductStandardTax= key =ProductID         value=StandardTax
        HashMap<String, String> hmapProductStandardTax = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=Stock
        HashMap<String, String> hmapProductStock = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapProductflgPriceAva = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapflgWholeSellApplicable = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapPriceRangeWholeSellApplicable = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapStandardRateWholeSale = new HashMap<String, String>();
//hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapStandardRateBeforeTaxWholeSell = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=flgPriceAva
        HashMap<String, String> hmapStandardTaxWholeSale = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=ProductSelectedUOMId
        HashMap<String, String> hmapProductSelectedUOMId = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=LineValBfrTxAftrDscnt
        HashMap<String, String> hmapLineValBfrTxAftrDscnt = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=LineValAftrTxAftrDscnt
        HashMap<String, String> hmapLineValAftrTxAftrDscnt = new HashMap<String, String>();

        //hmapProductStock= key =ProductID         value=LineValAftrTxAftrDscnt

        HashMap<String, String> hmapProductExtraOrder = new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=NHILTax
        HashMap<String, String> hmapProductNHILTaxPercent = new HashMap<String, String>();

        //hmapProductVolumePer= key =ProductID         value=GetFundTax
        HashMap<String, String> hmapProductGetFundTaxPercent = new HashMap<String, String>();

      *//*  Cursor cursor=null;
        if(CommonInfo.hmapAppMasterFlags.get("flgControlStock")==1) {
            cursor = db.rawQuery("SELECT tblProductListMaster.ProductID,tblProductListMaster.CategoryID,tblProductListMaster.ProductShortName,tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,tblProductSegementMap.RetMarginPer,tblProductSegementMap.VatTax,tblProductSegementMap.ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,tblProductSegementMap.StandardTax,0 As Stock,tblProductSegementMap.flgPriceAva,tblProductSegementMap.flgWholeSellApplicable,tblProductSegementMap.PriceRangeWholeSellApplicable,tblProductSegementMap.StandardRateWholeSale,tblProductSegementMap.StandardRateBeforeTaxWholeSell,tblProductSegementMap.StandardTaxWholeSale,'0' AS UOMID,'0.00' AS LineValBfrTxAftrDscnt,'0.00' AS LineValAftrTxAftrDscnt,0 AS ProductExtraOrder  FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID inner join tblVanProductStock on tblProductListMaster.ProductID=tblVanProductStock.PrdctId  order by tblProductListMaster.CategoryID,tblProductListMaster.PrdOrdr", null);//Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"
        }
        else
        {
            cursor = db.rawQuery("SELECT tblProductListMaster.ProductID,tblProductListMaster.CategoryID,tblProductListMaster.ProductShortName,tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,tblProductSegementMap.RetMarginPer,tblProductSegementMap.VatTax,tblProductSegementMap.ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,tblProductSegementMap.StandardTax,0 As Stock,tblProductSegementMap.flgPriceAva,tblProductSegementMap.flgWholeSellApplicable,tblProductSegementMap.PriceRangeWholeSellApplicable,tblProductSegementMap.StandardRateWholeSale,tblProductSegementMap.StandardRateBeforeTaxWholeSell,tblProductSegementMap.StandardTaxWholeSale,'0' AS UOMID,'0.00' AS LineValBfrTxAftrDscnt,'0.00' AS LineValAftrTxAftrDscnt,0 AS ProductExtraOrder  FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID order by tblProductListMaster.CategoryID,tblProductListMaster.PrdOrdr", null);//Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"
        }*//*
        Cursor cursor = db.rawQuery("SELECT tblProductListMaster.ProductID,tblProductListMaster.CategoryID,tblProductListMaster.ProductShortName,tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax,'NA/0' As LODQty,0 AS SampleQty,0 AS ProductFreeQty,0 AS ProductOrderQty,0.00 As PrdctDiscount,tblProductSegementMap.RetMarginPer,tblProductSegementMap.VatTax,tblProductSegementMap.ProductMRP,0.00 AS DiscountPercentageGivenOnProduct,0 AS Per,0.00 AS TaxValue,0.00 AS OrderValue,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,tblProductSegementMap.StandardTax,0 As Stock,tblProductSegementMap.flgPriceAva,tblProductSegementMap.flgWholeSellApplicable,tblProductSegementMap.PriceRangeWholeSellApplicable,tblProductSegementMap.StandardRateWholeSale,tblProductSegementMap.StandardRateBeforeTaxWholeSell,tblProductSegementMap.StandardTaxWholeSale,'0' AS UOMID,'0.00' AS LineValBfrTxAftrDscnt,'0.00' AS LineValAftrTxAftrDscnt,ifnull(tblProductSegementMap.NHILTax,0.0) AS NHILTax,ifnull(tblProductSegementMap.GetFundTax,0.0) AS GetFundTax,0 AS ProductExtraOrder  FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID  order by tblProductListMaster.CategoryID,tblProductListMaster.PrdOrdr", null);//Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"

        //tblProductListMaster.ProductID------------->0
        //tblProductListMaster.CategoryID------------>1
        //tblProductListMaster.ProductShortName------>2
        //tblProductListMaster.KGLiter ||'^'||tblProductSegementMap.ProductRLP||'^'||tblProductSegementMap.ProductTaxAmount AS ProductVolumeRateTax
        //'NA/0' As LODQty---------------------->4
        //0 AS SampleQty------------------------>5
        //0 AS ProductFreeQty------------------->6
        //0 AS ProductOrderQty------------------>7
        //0.00 As PrdctDiscount----------------->8
        //tblProductSegementMap.RetMarginPer---->9
        //tblProductSegementMap.VatTax---------->10
        //tblProductSegementMap.ProductMRP-------->11
        //0.00 AS DiscountPercentageGivenOnProduct----->12
        //0 AS Per------------------------------->13
        //0.00 AS TaxValue----------------------->14
        //0.00 AS OrderValue--------------------->15
        //tblProductSegementMap.StandardRate----->16
        //tblProductSegementMap.StandardRateBeforeTax----->17
        //tblProductSegementMap.StandardTax------->18
        //0 As Stock------------------------------>19
        //FROM tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID Where tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"  order by tblProductListMaster.CategoryID,tblProductListMaster.ProductID",null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {
                        hmapCtgryPrdctDetail.put(cursor.getString(0), cursor.getString(1));
                        hmapPrdctVolRatTax.put(cursor.getString(0), cursor.getString(3));
                        hmapPrdctOdrQty.put(cursor.getString(0), cursor.getString(7));
                        hmapPrdctSmpl.put(cursor.getString(0), cursor.getString(5));
                        hmapPrdctFreeQty.put(cursor.getString(0), cursor.getString(6));
                        hmapPrdctIdPrdctName.put(cursor.getString(0), cursor.getString(2));
                        hmapPrdctIdPrdctDscnt.put(cursor.getString(0), cursor.getString(8));
                        hmapProductRetailerMarginPercentage.put(cursor.getString(0), cursor.getString(9));
                        hmapProductVatTaxPerventage.put(cursor.getString(0), cursor.getString(10));
                        hmapProductMRP.put(cursor.getString(0), cursor.getString(11));
                        hmapProductDiscountPercentageGive.put(cursor.getString(0), cursor.getString(12));
                        hmapProductVolumePer.put(cursor.getString(0), cursor.getString(13));
                        hmapProductTaxValue.put(cursor.getString(0), cursor.getString(14));
                        hmapProductLODQty.put(cursor.getString(0), cursor.getString(4));
                        hmapProductIdOrdrVal.put(cursor.getString(0), cursor.getString(15));

                        hmapProductStandardRate.put(cursor.getString(0), cursor.getString(16));

                        hmapProductStandardRateBeforeTax.put(cursor.getString(0), cursor.getString(17));

                        hmapProductStandardTax.put(cursor.getString(0), cursor.getString(18));
                        hmapProductStock.put(cursor.getString(0), cursor.getString(19));
                        hmapProductflgPriceAva.put(cursor.getString(0), cursor.getString(20));
                        hmapflgWholeSellApplicable.put(cursor.getString(0), cursor.getString(21));
                        hmapPriceRangeWholeSellApplicable.put(cursor.getString(0), cursor.getString(22));
                        hmapStandardRateWholeSale.put(cursor.getString(0), cursor.getString(23));
                        hmapStandardRateBeforeTaxWholeSell.put(cursor.getString(0), cursor.getString(24));
                        hmapStandardTaxWholeSale.put(cursor.getString(0), cursor.getString(25));

                        hmapProductSelectedUOMId.put(cursor.getString(0), cursor.getString(26));
                        hmapLineValBfrTxAftrDscnt.put(cursor.getString(0), cursor.getString(27));
                        hmapLineValAftrTxAftrDscnt.put(cursor.getString(0), cursor.getString(28));

                        hmapProductNHILTaxPercent.put(cursor.getString(0), cursor.getString(29));

                        hmapProductGetFundTaxPercent.put(cursor.getString(0), cursor.getString(30));
                        hmapProductExtraOrder.put(cursor.getString(0), cursor.getString(31));
                        cursor.moveToNext();
                        // cursor.close();
                    }
                    totalProductDetail.add(hmapCtgryPrdctDetail);
                    totalProductDetail.add(hmapPrdctVolRatTax);
                    totalProductDetail.add(hmapPrdctOdrQty);
                    totalProductDetail.add(hmapPrdctSmpl);
                    totalProductDetail.add(hmapPrdctFreeQty);
                    totalProductDetail.add(hmapPrdctIdPrdctName);
                    totalProductDetail.add(hmapPrdctIdPrdctDscnt);
                    totalProductDetail.add(hmapProductRetailerMarginPercentage);
                    totalProductDetail.add(hmapProductVatTaxPerventage);
                    totalProductDetail.add(hmapProductMRP);
                    totalProductDetail.add(hmapProductDiscountPercentageGive);
                    totalProductDetail.add(hmapProductVolumePer);
                    totalProductDetail.add(hmapProductTaxValue);
                    totalProductDetail.add(hmapProductLODQty);
                    totalProductDetail.add(hmapProductIdOrdrVal);
                    totalProductDetail.add(hmapProductStandardRate);
                    totalProductDetail.add(hmapProductStandardRateBeforeTax);
                    totalProductDetail.add(hmapProductStandardTax);
                    totalProductDetail.add(hmapProductStock);
                    totalProductDetail.add(hmapProductflgPriceAva);
                    totalProductDetail.add(hmapflgWholeSellApplicable);
                    totalProductDetail.add(hmapPriceRangeWholeSellApplicable);
                    totalProductDetail.add(hmapStandardRateWholeSale);
                    totalProductDetail.add(hmapStandardRateBeforeTaxWholeSell);
                    totalProductDetail.add(hmapStandardTaxWholeSale);

                    totalProductDetail.add(hmapProductSelectedUOMId);
                    totalProductDetail.add(hmapLineValBfrTxAftrDscnt);
                    totalProductDetail.add(hmapLineValAftrTxAftrDscnt);
                    totalProductDetail.add(hmapProductNHILTaxPercent);
                    totalProductDetail.add(hmapProductGetFundTaxPercent);
                    totalProductDetail.add(hmapProductExtraOrder);

                    //

                }
            }


            return totalProductDetail;
        } finally {
            cursor.close();

            // close();
        }


    }*/

    public long savetblPriceApplyType(int DiscountLevelType, double cutoffvalue) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("DiscountLevelType", DiscountLevelType);
        initialValues.put("cutoffvalue", cutoffvalue);
        return db.insert(DBHelper.DATABASE_TABLE_tblPriceApplyType, null, initialValues);
    }

    public int fnGettblPriceApplyDiscountLevelType(String storeID) {
        //open();
        int PriceApplyDiscountLevelType = 0;
        Cursor cursor = db.rawQuery("Select DiscountLevelType from tblPriceApplyType", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                PriceApplyDiscountLevelType = Integer.parseInt(cursor.getString(0));
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        // close();
        return PriceApplyDiscountLevelType;
    }

    public LinkedHashMap<String, String> fetch_Category_List_Return(String StoreID) {
        //open();
        // System.out.println("Abhinav Raj is 1");
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT tblCategoryMaster.CategoryID,tblCategoryMaster.CategoryDescr FROM tblCategoryMaster inner join tblProductListMaster ON tblCategoryMaster.CategoryID=tblProductListMaster.CategoryID inner join tblActualVisitStock on tblProductListMaster.ProductID=tblActualVisitStock.ProductID Where tblActualVisitStock.Stock>0 and tblActualVisitStock.storeID='" + StoreID + "'", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (i == 0) {
                            hmapCatgry.put("All", "0");
                        }
                        hmapCatgry.put(cursor.getString(1).toString(), cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Category", "0");
            }
            // System.out.println("Abhinav Raj is 3");
            return hmapCatgry;
        } finally {
            cursor.close();
            //close();
        }
    }

    public LinkedHashMap<String, String> fetch_Category_List() {
        //open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT CategoryID,CategoryDescr FROM tblCategoryMaster Order by CatOrdr", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapCatgry.put(cursor.getString(1).toString(), cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Category", "0");
            }
            return hmapCatgry;
        } finally {
            cursor.close();
            //close();
        }
    }

    public LinkedHashMap<String, String> fetch_MaterialMstr_List(String storeID) {
        //open();
        LinkedHashMap<String, String> hmapMaterial = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT POSMaterialID,POSMaterialDescr FROM tblPOSMaterialMstr Order by POSMaterialID", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        //hmapMaterial.put(cursor.getString(1).toString(),cursor.getString(0).toString());
                        hmapMaterial.put(cursor.getString(0).toString(), cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                hmapMaterial.put("No Category", "0");
            }
            return hmapMaterial;
        } finally {
            cursor.close();
            //close();
        }
    }

    //tblSchemeSlabBucketProductMapping
    public HashMap<String, HashMap<String, HashMap<String, String>>> fnProductWiseAppliedScehmeSlabDetails(String StorID) {
        String StorIDnew = "1";//StorID;
        //open();
        String[] uniqueProdSchemeList = fnUniqueProdSchemeList();

        String productId;
        String schemeId = null;
        int countProductId = 0;
        int countSchemeId = 0;

						/*Cursor cursor2 = db.rawQuery("SELECT tblSchemeSlabBucketProductMapping.ProductID FROM tblSchemeSlabBucketProductMapping inner join tblSchemeSlabBucketDetails on tblSchemeSlabBucketProductMapping.RowID=tblSchemeSlabBucketDetails.RowID", null);
			if(cursor2.getCount()>0)
			{

			}*/
        // Key=productId,Value=hmapSchemeIdSlab
        HashMap<String, String> hmapSlabIdSlabDscrptnBnftDscrptn = null;
        HashMap<String, HashMap<String, String>> hmapSchemeIdSlab = null;
        HashMap<String, HashMap<String, HashMap<String, String>>> hmapPrdctIdScheme = new HashMap<String, HashMap<String, HashMap<String, String>>>();
        //			0						1						2							3							4
        Cursor cursor = db.rawQuery("SELECT tblSchemeSlabBucketProductMapping.ProductID,tblSchemeMstr.SchemeID,tblSchemeMstr.SchemeName,tblSchemeSlabDetail.SchemeSlabId,tblSchemeSlabDetail.SchemeSlabDesc,tblSchemeSlabDetail.BenifitDescr FROM tblSchemeSlabBucketProductMapping inner join tblSchemeSlabBucketDetails on tblSchemeSlabBucketProductMapping.RowID=tblSchemeSlabBucketDetails.RowID inner join tblSchemeSlabDetail on tblSchemeSlabBucketDetails.SchemeID=tblSchemeSlabDetail.SchemeID inner Join tblSchemeMstr on tblSchemeSlabDetail.SchemeID=tblSchemeMstr.SchemeID inner join tblSchemeStoreMapping on tblSchemeMstr.SchemeID=tblSchemeStoreMapping.SchemeID Where tblSchemeStoreMapping.StoreID='" + StorIDnew + "' Order by tblSchemeSlabBucketProductMapping.ProductID", null);
        if (cursor.moveToFirst()) ;
        {
            for (int index = 0; index < cursor.getCount(); index++) {

                int length = uniqueProdSchemeList.length;
                if (uniqueProdSchemeList[countProductId].toString().equals(cursor.getString(0))) {
                    if (index == 0) {
                        hmapSchemeIdSlab = new HashMap<String, HashMap<String, String>>();
                        hmapSlabIdSlabDscrptnBnftDscrptn = new HashMap<String, String>();
                        schemeId = cursor.getString(1).toString();
                    }
                    if (schemeId.equals(cursor.getString(1))) {
                        hmapSlabIdSlabDscrptnBnftDscrptn.put(cursor.getString(3), cursor.getString(4) + "^" + cursor.getString(5));
                        // System.out.println("Astix SlabId="+cursor.getString(3));
                    } else {


                        hmapSchemeIdSlab.put(schemeId, hmapSlabIdSlabDscrptnBnftDscrptn);
                        hmapSlabIdSlabDscrptnBnftDscrptn = new HashMap<String, String>();
                        // System.out.println("Astix SchemeId="+cursor.getString(1));
                        schemeId = cursor.getString(1).toString();
                        hmapSlabIdSlabDscrptnBnftDscrptn.put(cursor.getString(3), cursor.getString(4) + "^" + cursor.getString(5));
                        // System.out.println("Astix NewScheme SlabId="+cursor.getString(3));

                    }


                } else {
                    hmapPrdctIdScheme.put(uniqueProdSchemeList[countProductId], hmapSchemeIdSlab);
                    hmapSchemeIdSlab = new HashMap<String, HashMap<String, String>>();
                    // System.out.println("Betu HashMapProduct = "+hmapPrdctIdScheme);
                    // System.out.println("Astix ProductID="+uniqueProdSchemeList[countProductId]);


                    hmapSlabIdSlabDscrptnBnftDscrptn.put(cursor.getString(3), cursor.getString(4) + "^" + cursor.getString(5));
                    // System.out.println("Astix NewProduct SlabId="+cursor.getString(3));
                    schemeId = cursor.getString(1).toString();

                    countProductId++;

                }

                cursor.moveToNext();
            }

            //// System.out.println("Betu HashMapProduct = "+hmapPrdctIdScheme);
        }

        //close();
        return hmapPrdctIdScheme;
    }

    public String[] fnUniqueProdSchemeList() {

        Cursor cursor = db.rawQuery("SELECT Distinct ProductID from tblSchemeSlabBucketProductMapping Order by ProductID", null);
        try {
            String[] SchemeIDFreePRodQtyDetails = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    SchemeIDFreePRodQtyDetails[i] = (String) cursor.getString(0).toString();
                    //// System.out.println("Astix short name Abhinav Raj :"+SchemeIDFreePRodQtyDetails[i]);
                    cursor.moveToNext();
                }
            }
            return SchemeIDFreePRodQtyDetails;
        } finally {
            cursor.close();
        }
    }

    public HashMap<String, String> fnGetSchemeIdSchemeDescptn(String schemeId) {
        //open();

        Cursor cursor = db.rawQuery("Select SchemeID , SchemeName from tblSchemeMstr where SchemeID'" + schemeId + "'", null);
        try {
            HashMap<String, String> hmapSchemeIDSchemeDes = new HashMap<String, String>();
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    hmapSchemeIDSchemeDes.put((cursor.getString(0).toString()), (cursor.getString(1).toString()));

                    cursor.moveToNext();
                }
            }
            return hmapSchemeIDSchemeDes;
        } finally {
            cursor.close();
            //close();
        }
    }

    public String[] fectProductIDMappedInSchSlbSubBukRowId(int schSlbSubRowID) {
        ////open();
        Cursor cursor = db.rawQuery("SELECT ProductID FROM tblSchemeSlabBucketProductMapping WHERE RowID =" + schSlbSubRowID, null);
        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0).toString();
                        cursor.moveToNext();
                    }
                }
            }
            return CompleteResult;

        } finally {
            cursor.close();
            // close();
        }

    }

    public HashMap<String, String> fnProductRelatedSchemesList() {
        //open();
        Cursor cursor = db.rawQuery("SELECT Distinct ProductID,PrdString from tblProductRelatedScheme", null);
        try {
            HashMap<String, String> SchemeIDFreePRodQtyDetails = new HashMap<String, String>();
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        SchemeIDFreePRodQtyDetails.put(cursor.getString(0).toString(), cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return SchemeIDFreePRodQtyDetails;
        } finally {
            cursor.close();
            //close();
        }
    }

    public String[] fectProductIDBenifitsListOnPurchase(int schId, int schSlabId, int schSlbBuckId) {
        //open();
        Cursor cursor = db.rawQuery("SELECT RowID AS BenifitRowID,BenSubBucketType,BenDiscApplied,CouponCode,BenSubBucketValue,Per, UOM,ProRata FROM tblSchemeSlabBenefitsBucketDetails WHERE SchemeID =" + schId + " and SchemeSlabID=" + schSlabId + " and BucketID=" + schSlbBuckId, null);
        try {
            String PerBen;
            String UOMBen;

            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (cursor.getString(5) == null) {
                            PerBen = "0.0";
                            UOMBen = "0.0";
                        } else {
                            PerBen = cursor.getString(5);
                            UOMBen = cursor.getString(6);
                        }
                        {
                            CompleteResult[i] = cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2) + "^" + cursor.getString(3) + "^" + cursor.getString(4) + "^" + PerBen + "^" + UOMBen + "^" + cursor.getString(7);
                            cursor.moveToNext();
                        }
                    }
                }


            }
            return CompleteResult;
        } finally {
            cursor.close();
            //close();
        }

    }

    public HashMap<String, String> fectProductIDMappedInSchSlbSubBukBenifits(int BenifitRowID) {     //open();
        Cursor cursor = db.rawQuery("SELECT tblSchemeSlabBenefitsProductMappingDetail.ProductID,tblProductListMaster.ProductShortName FROM tblSchemeSlabBenefitsProductMappingDetail inner join tblProductListMaster on tblSchemeSlabBenefitsProductMappingDetail.ProductID=tblProductListMaster.ProductID  WHERE RowID =" + BenifitRowID, null);
        try {
            HashMap<String, String> CompleteResult = new HashMap<String, String>();
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult.put(cursor.getString(1).toString(), cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return CompleteResult;

        } finally {
            cursor.close();
            // close();
        }
    }

    public String[] fectStatusIfBeniftRowIdExistsInSchemeSlabBenefitsValueDetail(int BenifitRowID, int toMultiply, Double defaultValue, int BenSubBucketType) {

        //open();
        Cursor cursor2 = db.rawQuery("SELECT BenValue FROM tblSchemeSlabBenefitsValueDetail where RowID=" + BenifitRowID, null);
        if (BenSubBucketType == 2 || BenSubBucketType == 6 || BenSubBucketType == 8) {
            toMultiply = 1;
        }
        //////////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
        String[] chkI;
        try {
            if (cursor2.getCount() > 0) {
                chkI = new String[cursor2.getCount() + 1];
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (i == 0) {
                            chkI[i] = String.valueOf(defaultValue * toMultiply);

                        }

                        chkI[i + 1] = String.valueOf((Integer.parseInt(cursor2.getString(0)) * toMultiply));

                        cursor2.moveToNext();
                    }

                }
            } else {
                chkI = new String[1];
                chkI[0] = String.valueOf(defaultValue * toMultiply);
            }

        } finally {
            cursor2.close();
            //close();
        }
        //////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;
    }

    public String[] fnGetEarlierFreeProductIDandQtyonSchemeSlabBuckIDTypeBasis(String StoreID, int productID, int schId, int schSlabId, int schSlbBuckId, int BenifitRowID) {
        Cursor cursor = db.rawQuery("SELECT FreeProductID,BenifitAssignedValue From tblFreeProductIDandQtyonSchemeSlabBuckIDTypeBasis where StoreID='" + StoreID + "' and ProductID=" + productID + " and schId=" + schId + " and schSlabId=" + schSlabId + " and schSlbBuckId=" + schSlbBuckId + " and BenifitRowID=" + BenifitRowID, null);
        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0).toString();
                        cursor.moveToNext();
                    }
                }
            }
            return CompleteResult;

        } finally {
            cursor.close();
        }
    }

    public String fectStatusIfBeniftRowIdExistsInSchemeSlabBenefitsPercentageDetail(int BenifitRowID) {

        Cursor cursor2 = db.rawQuery("SELECT RowID,BenValue,Type FROM tblSchemeSlabBenefitsValueDetail where RowID=" + BenifitRowID, null);

        //////////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
        String chkI = "";
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (!cursor2.isNull(0)) {
                            chkI = cursor2.getString(0).toString() + "_" + cursor2.getString(1).toString() + "_" + cursor2.getString(2).toString();
                        }
                        cursor2.moveToNext();
                    }
                }
            }

        } finally {
            cursor2.close();
        }
        //////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;
    }

    public String fectStatusIfBeniftRowIdExistsInSchemeSlabBenefitsFlatAmtDetail(int BenifitRowID) {

        Cursor cursor2 = db.rawQuery("SELECT RowID,BenValue,Type FROM tblSchemeSlabBenefitsValueDetail where RowID=" + BenifitRowID, null);

        //////////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
        String chkI = "";
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (!cursor2.isNull(0)) {
                            chkI = cursor2.getString(0).toString() + "_" + cursor2.getString(1).toString() + "_" + cursor2.getString(2).toString();
                        }
                        cursor2.moveToNext();
                    }

                }
            }

        } finally {
            cursor2.close();
        }
        //////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;
    }

    public HashMap<String, String> fnSchemeIDandDescr() {
        //open();
        Cursor cursor = db.rawQuery("SELECT SchemeID,SchemeName from tblSchemeMstr", null);
        try {
            HashMap<String, String> SchemeIDSchemeName = new HashMap<String, String>();
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        SchemeIDSchemeName.put(cursor.getString(0).toString(), cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return SchemeIDSchemeName;
        } finally {
            cursor.close();
            //close();
        }
    }

    public String fngetOrderIDAganistStore(String StoreID, String TmpInvoiceCodePDA) {
        // System.out.println("Abhinav Nitish Ankit New While Fetching Records Store Id:"+StoreID);
        //open();
        // Cursor cursorE2 = db.rawQuery("SELECT Distinct OrderIDPDA FROM tblTmpInvoiceHeader WHERE StoreID ='" + StoreID + "' and (Sstat=1 or Sstat=2)", null);
        Cursor cursorE2 = db.rawQuery("SELECT Distinct TmpInvoiceCodePDA FROM tblTmpInvoiceHeader WHERE StoreID ='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' and (Sstat=1 or Sstat=2)", null);
        String chkI = "0";
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {


                    chkI = (String) cursorE2.getString(0).toString();

                }
            }
        } finally {
            cursorE2.close();
            //close();
        }
        return chkI;
    }

    public int fnCheckIfStoreExistInStoreProdcutInvoiceDetails(String StoreID, String TmpInvoiceCodePDA) {
        //open();
        // Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblTmpInvoiceHeader WHERE StoreID ='" + StoreID + "' and (Sstat=1 or Sstat=2)", null);
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblTmpInvoiceHeader WHERE StoreID ='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    if (cursorE2.getInt(0) > 0) {
                        chkI = 1;
                    } else {
                        chkI = 0;
                    }
                }
            }
        } finally {
            cursorE2.close();
            //close();
        }
        return chkI;
    }

    public String[] fnGetOnProductQtyChangeApplyApplicableDiscounts(String StoreID, String ProductIdOnClicked) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT BenSubBucketType,BenifitAssignedValue,BenifitDiscountApplied FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='" + StoreID + "' and ProductID=" + Integer.parseInt(ProductIdOnClicked) + " and BenSubBucketType in(6,7)", null);
        String[] chkI = new String[cursorE2.getCount()];
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        chkI[i] = (String) cursor.getString(0).toString() + "^" + (String) cursor.getString(1).toString() + "^" + (String) cursor.getString(2).toString();
                    }
                }
            }

        } finally {
            cursorE2.close();
            // close();
        }
        return chkI;
    }

    public int fnCheckIfPrdRelatedDataExisitIntblStoreProductAppliedSchemesBenifitsRecords(String StoreID, String ProductIdOnClicked) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='" + StoreID + "' and ProductID=" + Integer.parseInt(ProductIdOnClicked), null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
            //close();
        }
        return chkI;
    }

		/*public long fnsaveStoreProdcutPurchaseDetails(String IMEIno,String StoreID,String CatID,String ProdID, String TransDate,
			      int Stock, int OrderQty,
			    Double OrderVal, int FreeQty, Double DisVal,
			    int selProdIDForSampleQty, String ProductShortName, Double ProductRate,int Outstat,Double TaxRate,Double TaxValue, int StoreCatNodeId,String OrderIDPDA,int flgIsQuoteRateApplied,String distibutorID) {//String DisplayUnit

			   String activeRid;
			   activeRid = GetActiveRouteID();


			   ContentValues initialValues = new ContentValues();

			   initialValues.put("IMEIno", IMEIno.trim());
			   initialValues.put("TransDate", TransDate.trim());
			   initialValues.put("StoreID", StoreID.trim());
			   initialValues.put("ProdID", ProdID.trim());
			   initialValues.put("Stock", Stock);
			   initialValues.put("OrderQty", OrderQty);
			   initialValues.put("OrderVal", OrderVal);
			   initialValues.put("FreeQty", FreeQty);
			   initialValues.put("DisVal", DisVal);

			   initialValues.put("Sstat", Outstat);

			   initialValues.put("SampleQuantity", selProdIDForSampleQty);

			   initialValues.put("ProductShortName", ProductShortName);

			   initialValues.put("ProductPrice", ProductRate);
			   initialValues.put("RouteID", Integer.parseInt(activeRid));
			   initialValues.put("CatID", CatID.trim());
			   initialValues.put("TaxRate", TaxRate);
			   initialValues.put("TaxValue", TaxValue);
			   initialValues.put("StoreCatNodeId", StoreCatNodeId);
			   initialValues.put("OrderIDPDA", OrderIDPDA);
			   initialValues.put("flgIsQuoteRateApplied", flgIsQuoteRateApplied);
			 initialValues.put("distibutorID", distibutorID);

			   //initialValues.put(Key_DisplayUnit, DisplayUnit);

			   ////// System.out.println("inserting saveStoreTransac records..");
				// System.out.println("Abhinav Nitish Ankit New Printing Insert Store Id :"+StoreID);
				// System.out.println("Abhinav Nitish Ankit New Printing Insert ProdID Id :"+ProdID);
				// System.out.println("Abhinav Nitish Ankit New Printing Insert OrderQty :"+OrderQty);*//*
			   return db.insert(DATABASE_TABLE_MAIN210, null, initialValues);
			  }*/

    /*public static String[] fnGetDistinctSchIdsAgainstStoreProduct(String StoreID,String ProductIdOnClicked,int schId)
		   {
		    //open();
		    Cursor cursor = db.rawQuery("SELECT BenSubBucketType,FreeProductID,BenifitAssignedValue,BenifitDiscountApplied,IFNULL(BenifitCouponCode,0),schId,schSlbRowId,SchTypeId,ProductID FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='"+ StoreID + "' and  schId="+schId+" and BenSubBucketType in(1,5,2,6,3,7,10)", null);
		    String[] chkI = new String[cursor.getCount()];
		    try {
		     if(cursor.getCount()>0)
		     {

		      if (cursor.moveToFirst()) {

		        for (int i = 0; i <= (cursor.getCount() - 1); i++)
		        {
		         if(cursor.getString(0)!=null && cursor.getString(1)!=null && cursor.getString(2)!=null && cursor.getString(3)!=null)
		          {
		          chkI[i] = cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2)+"^"+cursor.getString(3)+"^"+cursor.getString(4)+"^"+ cursor.getString(5)+"^"+ cursor.getString(6)+"^"+ cursor.getString(7)+"^"+ cursor.getString(8);
		         }
		         cursor.moveToNext();
		        }
		      }
		     }

		    } finally {
		     cursor.close();
		     close();
		    }
		    return chkI;*/
    public String fnGetDistinctSchIdsAgainstStoreProduct(String StoreID, String ProductIdOnClicked, int schId) {
        //open();
        Cursor cursor = db.rawQuery("SELECT schSlbRowId,SchTypeId FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='" + StoreID + "' and  schId=" + schId + " and BenSubBucketType in(1,5,2,6,3,7,10) and ProductID=" + Integer.parseInt(ProductIdOnClicked), null);
        String chkI = "";
        try {
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (cursor.getString(0) != null && cursor.getString(1) != null) {
                            chkI = cursor.getString(0) + "^" + cursor.getString(1);
                        }
                        cursor.moveToNext();
                    }
                }
            }

        } finally {
            cursor.close();
            //close();
        }
        return chkI;
    }

    public void fnDeleteRecordsAllRecordsForClickedProdoductId(String StoreID, String ProductIdOnClicked, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='" + StoreID + "'  and ProductID=" + Integer.parseInt(ProductIdOnClicked) + " AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        //close();
    }

    public void fnDeleteProductDetailsFromReturnTables(String StoreID, String ProductIdOnClicked, String pdaOrderID, String TmpInvoiceCodePDA) {

        //open();
        try {
            db.execSQL("DELETE FROM tblStoreProductPhotoDetail WHERE StoreID ='" + StoreID + "'  and ProductID=" + Integer.parseInt(ProductIdOnClicked) + " and TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
            db.execSQL("DELETE FROM tblTmpInvoiceDetails WHERE StoreID ='" + StoreID + "'  and ProdID='" + ProductIdOnClicked + "' and TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
            db.execSQL("DELETE FROM tblStoreReturnDetail WHERE StoreID ='" + StoreID + "' and  ReturnProductID=" + Integer.parseInt(ProductIdOnClicked) + " and TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        } catch (Exception e) {

        } finally {
            //  close();
        }

    }

    public long fnsaveStoreProdcutPurchaseDetails(String IMEIno, String StoreID, String CatID, String ProdID, String TransDate,
                                                  int Stock, int OrderQty,
                                                  Double OrderVal, int FreeQty, Double DisVal,
                                                  int selProdIDForSampleQty, String ProductShortName, Double ProductRate, int Outstat, Double TaxRate, Double TaxValue, int StoreCatNodeId, String OrderIDPDA, int flgIsQuoteRateApplied, String distibutorID, int flgWholeSellApplicable, String TmpInvoiceCodePDA, String strFinalAllotedInvoiceIds) {//String DisplayUnit

        String activeRid;
        activeRid = GetActiveRouteID(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);


        ContentValues initialValues = new ContentValues();

        initialValues.put("IMEIno", IMEIno.trim());
        initialValues.put("TransDate", TransDate.trim());
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("ProdID", ProdID.trim());
        initialValues.put("Stock", Stock);
        initialValues.put("OrderQty", OrderQty);
        initialValues.put("OrderVal", OrderVal);
        initialValues.put("FreeQty", FreeQty);
        initialValues.put("DisVal", DisVal);

        initialValues.put("Sstat", Outstat);

        initialValues.put("SampleQuantity", selProdIDForSampleQty);

        initialValues.put("ProductShortName", ProductShortName);

        initialValues.put("ProductPrice", ProductRate);
        initialValues.put("RouteID", Integer.parseInt(activeRid));
        initialValues.put("CatID", CatID.trim());
        initialValues.put("TaxRate", TaxRate);
        initialValues.put("TaxValue", TaxValue);
        initialValues.put("StoreCatNodeId", StoreCatNodeId);
        initialValues.put("OrderIDPDA", OrderIDPDA);
        initialValues.put("flgIsQuoteRateApplied", flgIsQuoteRateApplied);
        initialValues.put("distibutorID", distibutorID);
        initialValues.put("flgWholeSellApplicable", flgWholeSellApplicable);
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        initialValues.put("FinalAllotedInvoiceIds", strFinalAllotedInvoiceIds);
//TmpInvoiceCodePDA
        //initialValues.put(Key_DisplayUnit, DisplayUnit);

        ////// System.out.println("inserting saveStoreTransac records..");
    /*// System.out.println("Abhinav Nitish Ankit New Printing Insert Store Id :"+StoreID);
    // System.out.println("Abhinav Nitish Ankit New Printing Insert ProdID Id :"+ProdID);
    // System.out.println("Abhinav Nitish Ankit New Printing Insert OrderQty :"+OrderQty);*/
        return db.insert(DBHelper.DATABASE_TABLE_MAIN210, null, initialValues);
    }

    public void deleteStoreRecordFromtblStorePurchaseDetailsFromProductTrsaction(String storeID, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        db.execSQL("DELETE FROM tblTmpInvoiceDetails WHERE StoreID='" + storeID + "'  and TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        // close();
    }

    public void deleteStoreRecordFromtblStorePurchaseDetailsFromProductTrsactionSingleProduct(String storeID, String pdaOrderID, String getPIdToremove, String TmpInvoiceCodePDA) {
        //open();
        db.execSQL("DELETE FROM tblTmpInvoiceDetails WHERE StoreID='" + storeID + "'  and ProdID='" + getPIdToremove + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        // close();
    }

    public long fnsavetblStoreProductAppliedSchemesBenifitsRecords(String StoreID, int ProdID, int schId, int schSlabId, int schSlbBuckId, double schSlabSubBucketValue, int schSubBucketValType,
                                                                   int schSlabSubBucketType, int BenifitRowID, int BenSubBucketType,
                                                                   int FreeProductID, double BenifitSubBucketValue, double BenifitMaxValue, double BenifitAssignedValue, double BenifitAssignedValueType, int BenifitDiscountApplied, String BenifitCouponCode, double per, double UOM, int WhatFinallyApplied, int schSlbRowId, int SchTypeId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //StoreID text not null,ProductID int not null,schId int not null,schSlabId integer not null,schSlbBuckId integer not null,schSlabSubBucketValue real not null,
        //schSubBucketValType integer not null,schSlabSubBucketType int not null,BenifitRowID integer not null,BenSubBucketType int null,FreeProductID int null,
        //BenifitSubBucketValue real null,BenifitMaxValue real null,BenifitAssignedValue real null,BenifitAssignedValueType int null,BenifitDiscountApplied int null,
        //BenifitCouponCode text null
        String activeRid;
        // activeRid = GetActiveRouteID();


        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("ProductID", ProdID);
        initialValues.put("schId", schId);
        initialValues.put("schSlabId", schSlabId);
        initialValues.put("schSlbBuckId", schSlbBuckId);
        initialValues.put("schSlabSubBucketValue", schSlabSubBucketValue);
        initialValues.put("schSubBucketValType", schSubBucketValType);
        initialValues.put("schSlabSubBucketType", schSlabSubBucketType);
        initialValues.put("BenifitRowID", BenifitRowID);

        initialValues.put("BenSubBucketType", BenSubBucketType);

        initialValues.put("FreeProductID", FreeProductID);

        initialValues.put("BenifitSubBucketValue", BenifitSubBucketValue);

        initialValues.put("BenifitMaxValue", BenifitMaxValue);
        initialValues.put("BenifitAssignedValue", BenifitAssignedValue);
        initialValues.put("BenifitAssignedValueType", BenifitAssignedValueType);

        initialValues.put("BenifitDiscountApplied", BenifitDiscountApplied);
        initialValues.put("BenifitCouponCode", BenifitCouponCode);

        initialValues.put("PER", per);
        initialValues.put("UOM", UOM);
        initialValues.put("Sstat", 0);
        initialValues.put("schSlbRowId", schSlbRowId);
        initialValues.put("SchTypeId", SchTypeId);
        initialValues.put("WhatFinallyApplied", WhatFinallyApplied);
        initialValues.put("OrderIDPDA", pdaOrderID);
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);

        // System.out.println("Save Data Save in Table 211");
        //open();
        long xyx = db.insert(DBHelper.DATABASE_TABLE_Main211, null, initialValues);
        //close();
        return xyx;
    }

    public String fnctnGetMaxAssignedBen8DscntApld1(String storeId, String pdaOrderID, String TmpInvoiceCodePDA) {
        String discountValOnBen8apld1 = "";
        //open();
        try {
            Cursor cursor = db.rawQuery("Select Max(BenifitAssignedValue),BenifitRowID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + storeId + "' and  BenSubBucketType='" + 8 + "' and BenifitDiscountApplied ='" + 1 + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' Limit 1", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getString(0) == null) {
                        discountValOnBen8apld1 = "";
                    } else {
                        discountValOnBen8apld1 = cursor.getString(0) + "^" + cursor.getString(1);
                    }

                }
            }

            //close();
        } catch (Exception e) {
            //close();
        }
        return discountValOnBen8apld1;
    }

    public String fnctnGetMaxAssignedBen8DscntApld2(String storeId, String pdaOrderID, String TmpInvoiceCodePDA) {
        String discountValOnBen8apld1 = "";
        try {
            //open();

            Cursor cursor = db.rawQuery("Select Max(BenifitAssignedValue),BenifitRowID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + storeId + "'  and BenSubBucketType='" + 8 + "' and BenifitDiscountApplied='" + 2 + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' Limit 1", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    //discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);
                    if (cursor.getString(0) == null) {
                        discountValOnBen8apld1 = "";
                    } else {
                        discountValOnBen8apld1 = cursor.getString(0) + "^" + cursor.getString(1);
                    }

                }
            }

            // close();
        } catch (Exception e) {
            // close();
        }
        return discountValOnBen8apld1;
    }

    public String fnctnGetMaxAssignedBen9DscntApld1(String storeId, String pdaOrderID, String TmpInvoiceCodePDA) {
        String discountValOnBen8apld1 = "";
        //open();
        try {
            Cursor cursor = db.rawQuery("Select Max(BenifitAssignedValue),BenifitRowID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + storeId + "'  and BenSubBucketType='" + 9 + "' and BenifitDiscountApplied ='" + 1 + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' Limit 1", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    //discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);
                    if (cursor.getString(0) == null) {
                        discountValOnBen8apld1 = "";
                    } else {
                        discountValOnBen8apld1 = cursor.getString(0) + "^" + cursor.getString(1);
                    }
                }
            }

            // close();
        } catch (Exception e) {
            // close();
        }
        return discountValOnBen8apld1;
    }

    public String fnctnGetMaxAssignedBen9DscntApld2(String storeId, String pdaOrderID, String TmpInvoiceCodePDA) {
        String discountValOnBen8apld1 = "";
        try {
            //open();

            Cursor cursor = db.rawQuery("Select Max(BenifitAssignedValue),BenifitRowID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + storeId + "'  and BenSubBucketType='" + 9 + "' and BenifitDiscountApplied ='" + 2 + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' Limit 1", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    // discountValOnBen8apld1=cursor.getString(0)+"^"+cursor.getString(1);
                    if (cursor.getString(0) == null) {
                        discountValOnBen8apld1 = "";
                    } else {
                        discountValOnBen8apld1 = cursor.getString(0) + "^" + cursor.getString(1);
                    }
                }
            }


            //close();
        } catch (Exception e) {
            //close();
        }
        return discountValOnBen8apld1;
    }

    public String fnctnGetHighestDiscount(String freeProductId, String storeId, String benSubBucketType) {
        String highestDiscount = "";
        try {
            //open();

            Cursor cursor = db.rawQuery("Select Distinct FreeProductID,Max(BenifitAssignedValue),BenSubBucketType from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + storeId + "' and FreeProductID='" + freeProductId + "' and BenSubBucketType ='" + benSubBucketType + "' Limit 1", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    highestDiscount = cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2);
                }
            }

            //close();
        } catch (Exception e) {
            // close();
        }
        return highestDiscount;
    }

    public HashMap<String, String> fnctnSchemeStoreID(String storeID) {
        //open();
        //hmapSchemeStoreID= key = SchemeId  value=StoreId
        HashMap<String, String> hmapSchemeStoreID = new HashMap<String, String>();
        //tblSchemeStoreMapping=StoreID text null,SchemeID text null
        Cursor cursor = db.rawQuery("Select StoreID,SchemeID from tblSchemeStoreMapping where  StoreID ='" + storeID + "'", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int index = 0; index < cursor.getCount(); index++) {
                    hmapSchemeStoreID.put(cursor.getString(1), cursor.getString(0));

                    cursor.moveToNext();
                }
            }
        }
        // close();
        return hmapSchemeStoreID;
    }

    public LinkedHashMap<Integer, ArrayList<Integer>> fngetSlabIDArrRowID(String storeID) {
        LinkedHashMap<Integer, ArrayList<Integer>> hmapSlabIDArrRowID = new LinkedHashMap<Integer, ArrayList<Integer>>();
        Cursor cursor = db.rawQuery("SELECT tblSchemeSlabDetail.SchemeSlabID,tblSchemeSlabBucketDetails.RowID from tblSchemeSlabDetail inner join tblSchemeSlabBucketDetails on tblSchemeSlabDetail.SchemeSlabID=tblSchemeSlabBucketDetails.SchemeSlabID inner join tblSchemeStoreMapping on tblSchemeStoreMapping.SchemeID=tblSchemeSlabBucketDetails.SchemeID Where tblSchemeStoreMapping.StoreID='" + storeID + "'", null);
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                ArrayList<Integer> listRowIDs = new ArrayList<Integer>();
                Integer slabId = 0, prvsslabId = 0;
                for (int i = 0; i < cursor.getCount(); i++) {
                    slabId = cursor.getInt(0);
                    if (i == 0) {
                        prvsslabId = slabId;
                        listRowIDs.add(cursor.getInt(1));
                    } else {
                        if (prvsslabId.equals(slabId)) {
                            listRowIDs.add(cursor.getInt(1));
                        } else {
                            hmapSlabIDArrRowID.put(prvsslabId, listRowIDs);
                            listRowIDs = new ArrayList<Integer>();
                            prvsslabId = slabId;
                            listRowIDs.add(cursor.getInt(1));
                        }
                    }
                    if (i == (cursor.getCount() - 1)) {
                        hmapSlabIDArrRowID.put(prvsslabId, listRowIDs);
                    }
                    cursor.moveToNext();
                }
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        return hmapSlabIDArrRowID;
    }

    public LinkedHashMap<Integer, ArrayList<Integer>> fngetRowIDProductIds(String storeID) {
        LinkedHashMap<Integer, ArrayList<Integer>> hmapRowIdProductIDs = new LinkedHashMap<Integer, ArrayList<Integer>>();
        Cursor cursor = db.rawQuery("SELECT tblSchemeSlabBucketProductMapping.RowID,tblSchemeSlabBucketProductMapping.ProductID from tblSchemeSlabBucketProductMapping inner tblSchemeSlabBucketDetails ON tblSchemeSlabBucketProductMapping.RowID=tblSchemeSlabBucketDetails.RowID inner join tblSchemeMstr on tblSchemeSlabBucketDetails.SchemeID=tblSchemeMstr.SchemeID inner join tblSchemeStoreMapping on tblSchemeMstr.SchemeID=tblSchemeStoreMapping.SchemeID Where tblSchemeStoreMapping.StoreID='" + storeID + "'", null);
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                ArrayList<Integer> listProductIDs = new ArrayList<Integer>();
                Integer rowId = 0, prvsrowId = 0;
                for (int i = 0; i < cursor.getCount(); i++) {
                    rowId = cursor.getInt(0);
                    if (i == 0) {
                        prvsrowId = rowId;
                        listProductIDs.add(cursor.getInt(1));
                    } else {
                        if (prvsrowId.equals(rowId)) {
                            listProductIDs.add(cursor.getInt(1));
                        } else {
                            hmapRowIdProductIDs.put(prvsrowId, listProductIDs);
                            listProductIDs = new ArrayList<Integer>();
                            prvsrowId = rowId;
                            listProductIDs.add(cursor.getInt(1));
                        }
                    }
                    if (i == (cursor.getCount() - 1)) {
                        hmapRowIdProductIDs.put(prvsrowId, listProductIDs);
                    }
                    cursor.moveToNext();
                }
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        return hmapRowIdProductIDs;
    }

    public LinkedHashMap<Integer, String> fngetSchemeSlabIDBucketTypeBucketValueForSchemeType1And3(String storeID) {
        LinkedHashMap<Integer, String> hmapSchemeSlabIDBucketTypeBucketValue = new LinkedHashMap<Integer, String>();
        Cursor cursor = db.rawQuery("SELECT tblSchemeSlabBucketDetails.SchemeSlabID,tblSchemeSlabBucketDetails.SlabSubBucketType,tblSchemeSlabBucketDetails.SlabSubBucketValue,tblSchemeSlabBucketDetails.SubBucketValType from tblSchemeSlabBucketDetails inner join tblSchemeMstr on tblSchemeSlabBucketDetails.SchemeID=tblSchemeMstr.SchemeID inner join tblSchemeStoreMapping on tblSchemeMstr.SchemeID=tblSchemeStoreMapping.SchemeID Where tblSchemeStoreMapping.StoreID='" + storeID + "'", null);
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int i = 0; i < cursor.getCount(); i++) {
                    hmapSchemeSlabIDBucketTypeBucketValue.put(cursor.getInt(0), cursor.getString(1) + "^" + cursor.getString(2) + "^" + cursor.getString(3));
                    cursor.moveToNext();

                }
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        return hmapSchemeSlabIDBucketTypeBucketValue;
    }

    public String fnctnGetHighestDiscountPercentge(String freeProductId, String storeId, String TmpInvoiceCodePDA) {
        //open();
        String highestDiscount = "";
        Cursor cursor = db.rawQuery("Select  Max(BenifitAssignedValue),BenifitRowID from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + storeId + "' and FreeProductID='" + freeProductId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' and BenSubBucketType in (2,6) Limit 1", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    //highestDiscount=cursor.getString(0)+"^"+cursor.getString(1);
                    if (cursor.getString(0) == null) {
                        highestDiscount = "";
                    } else {
                        highestDiscount = cursor.getString(0) + "^" + cursor.getString(1);
                    }
                }
            }
            // close();
        } catch (Exception ex) {
            //close();
            Log.e(TAG, ex.toString());
        }


        return highestDiscount;
    }

    public String[] fnGetAllSchSlabbasedOnSchemeID(String SchemeID) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT DISTINCT SchemeSlabID FROM tblSchemeSlabDetail WHERE SchemeID ='"
                + SchemeID + "'", null);
        String AllSchemeSlabID[] = new String[cursorE2.getCount()];

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllSchemeSlabID[i] = (String) cursorE2.getString(0).toString();
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllSchemeSlabID;
        } finally {
            cursorE2.close();
            //close();
        }

    }

    public String fnctnGetHighestDiscountAmount(String freeProductId, String storeId, String TmpInvoiceCodePDA) {
        //open();
        String highestDiscount = "";
        Cursor cursor = db.rawQuery("Select  Max(BenifitAssignedValue),BenifitRowID from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + storeId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' and ProductID='" + freeProductId + "' and BenSubBucketType in (3,7,10) Limit 1", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    //highestDiscount=cursor.getString(0)+"^"+cursor.getString(1);
                    if (cursor.getString(0).equals(null)) {
                        highestDiscount = "";
                    } else {
                        highestDiscount = cursor.getString(0) + "^" + cursor.getString(1);
                    }
                }
            }
            // close();
        } catch (Exception ex) {
            //close();
            Log.e(TAG, ex.toString());
        }


        return highestDiscount;
    }

    public void updatewhatAppliedFlag(int flag, String storeId, int benifitrRowId, String pdaOrderID, String TmpInvoiceCodePDA) {

        try {
            //open();


            final ContentValues values = new ContentValues();
            values.put("WhatFinallyApplied", flag);
            int affected = db.update(DBHelper.DATABASE_TABLE_Main211, values, "StoreID=? AND BenifitRowID=? AND  TmpInvoiceCodePDA=? ", new String[]{storeId, "" + benifitrRowId, TmpInvoiceCodePDA});

            //close();


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public String fnctnGetfreePerUnitVol(String freeProductId, String storeId, String TmpInvoiceCodePDA) {
        //open();
        String perUnit = "";
        Cursor cursor = db.rawQuery("Select  Per,UOM from tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + storeId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' and ProductID='" + freeProductId + "' and BenSubBucketType = '" + 10 + "' ", null);
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                //highestDiscount=cursor.getString(0)+"^"+cursor.getString(1);
                if (cursor.getString(0) == null) {
                    perUnit = "";
                } else {
                    perUnit = cursor.getString(0) + "^" + cursor.getString(1);
                }
            }
        }

        //close();
        return perUnit;
    }

    public String[] fnGetProductsAgainstBenifitTable(String StoreID, String ProdId) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT FreeProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + StoreID + "' and ProductID='" + ProdId + "'", null);
        String AllSchemeSlabID[] = new String[cursorE2.getCount()];

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllSchemeSlabID[i] = (String) cursorE2.getString(0).toString();
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllSchemeSlabID;
        } finally {
            cursorE2.close();
            // close();
        }

    }

    public int fnGetSlabIdBasedOnPrdIDSchmId(String StoreID, String ProdId, int SchID) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT schSlabId FROM  tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + StoreID + "' and ProductID='" + ProdId + "' and schId=" + SchID, null);
        int AllSchemeSlabID = 0;

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {


                    AllSchemeSlabID = (Integer.parseInt(cursorE2.getString(0).toString()));


                }
            }
            return AllSchemeSlabID;
        } finally {
            cursorE2.close();
            //close();
        }

    }

    public int fnGetStoreCatNodeId(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT StoreType FROM  tblStoreList where StoreID='" + StoreID + "'", null);
        int StoreCatNodeId = 0;
        ////open();
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {


                    StoreCatNodeId = (Integer.parseInt(cursorE2.getString(0).toString()));


                }
            }
            return StoreCatNodeId;
        } finally {
            cursorE2.close();
            //  close();

        }

    }

    public int fnGetRowIDBasedOnSchIDAndSlabID(int SchID, int slabSchmId) {
        //tblSchemeSlabBenefitsBucketDetails
        // [11:23:51 PM] Abhinav Raj: RowID
        //[11:23:58 PM] Abhinav Raj: SchemeID text null,SchemeSlabID
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT BenifitRowID FROM  tblSchemeSlabBenefitsBucketDetails where  SchemeID='" + SchID + "' and SchemeSlabID=" + slabSchmId, null);
        int AllSchemeSlabID = 0;

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {


                    AllSchemeSlabID = (Integer.parseInt(cursorE2.getString(0).toString()));


                }
            }
            return AllSchemeSlabID;
        } finally {
            cursorE2.close();
            // close();
        }

    }

    public String[] fnGetProductsSchIdSlabRow(String StoreID, int RowID, String pdaOrderID, String TmpInvoiceCodePDA) {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
        //open();//schId
        // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
        Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId=" + RowID + " AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'  and StoreID='" + StoreID + "'", null);
        String AllProductInSlab[] = new String[cursorE2.getCount()];

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllProductInSlab[i] = (String) cursorE2.getString(0).toString();
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllProductInSlab;
        } finally {
            cursorE2.close();
            //close();
        }

    }

    public String[] fnGetProductsSchIds(String StoreID, int schID, String pdaOrderID, String TmpInvoiceCodePDA) {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
        //open();//schIdsd
        //  ssd
        // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
        Cursor cursorE2 = db.rawQuery("SELECT ProductID,schSlbRowId,BenifitAssignedValue,FreeProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schId=" + schID + " AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'  and StoreID='" + StoreID + "' ", null);
        String AllProductInSlab[] = new String[cursorE2.getCount()];

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllProductInSlab[i] = (String) cursorE2.getString(0).toString() + "^" + (String) cursorE2.getString(1).toString() + "^" + (String) cursorE2.getString(2).toString() + "^" + (String) cursorE2.getString(3).toString();
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllProductInSlab;
        } finally {
            cursorE2.close();
            //close();
        }

    }

    public void fnDeleteOldSchemeRowIdRecords(String StoreID, int RowID, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords where  StoreID='" + StoreID + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' and schSlbRowId=" + RowID);
        // close();
    }

    public void fnDeleteOldStoreProductAppliedSchemesBenifitsRecordsWhileSubmit(String StoreID, String pdaOrderID) {
        //open();
        db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords where OrderIDPDA='" + pdaOrderID + "'  and StoreID='" + StoreID + "'");
        // close();
    }

    public String[] fnGetRowsIDsAgainstProdIs(String StoreID, int schId) {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
        //open();//schId
        // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
        Cursor cursorE2 = db.rawQuery("SELECT BenifitRowID,BenSubBucketType,schSlbRowId,BenifitAssignedValue,FreeProductID,SchTypeId,ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where  StoreID='" + StoreID + "' and schId=" + schId, null);
        String AllProductInSlab[] = new String[cursorE2.getCount()];

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllProductInSlab[i] = (String) cursorE2.getString(0).toString() + "^" + (String) cursorE2.getString(1).toString() + "^" + (String) cursorE2.getString(2).toString() + "^" + (String) cursorE2.getString(3).toString() + "^" + (String) cursorE2.getString(4).toString() + "^" + (String) cursorE2.getString(5).toString() + "^" + (String) cursorE2.getString(6).toString();
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllProductInSlab;
        } finally {
            cursorE2.close();
            //close();
        }

    }

    public String dbfunctiongetProdMapedWithBenifitRowID(int benifitRowID, int ClickedProID) {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
        //open();//schId
        //tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
        // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
        Cursor cursorE2 = db.rawQuery("SELECT tblStoreProductAppliedSchemesBenifitsRecords.ProductID,tblStoreProductAppliedSchemesBenifitsRecords.FreeProductID FROM  tblSchemeSlabBenefitsProductMappingDetail inner join tblStoreProductAppliedSchemesBenifitsRecords on tblSchemeSlabBenefitsProductMappingDetail.RowID=tblStoreProductAppliedSchemesBenifitsRecords.BenifitRowID  where  tblSchemeSlabBenefitsProductMappingDetail.RowID='" + benifitRowID + "'", null);
        String AllProductInSlab = "";
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllProductInSlab = (String) cursorE2.getString(0).toString() + "^" + (String) cursorE2.getString(1).toString();
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllProductInSlab;
        } finally {
            cursorE2.close();
            //close();
        }

    }

    public String dbfunctiongetProdMapedWithBenifitRowID2(int benifitRowID, int ClickedProID) {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
        //open();//schId
        //tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
        // Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
        Cursor cursorE2 = db.rawQuery("SELECT ProductID,FreeProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where BenifitRowID='" + benifitRowID + "'", null);
        String AllProductInSlab = "";
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllProductInSlab = (String) cursorE2.getString(0).toString() + "^" + (String) cursorE2.getString(1).toString();
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllProductInSlab;
        } finally {
            cursorE2.close();
            // close();
        }

    }

    public String[] fnGetDistinctProductIdAgainstStoreProduct(String StoreID, String schmIdForProductsavdInRecord, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        Cursor cursor = db.rawQuery("SELECT BenSubBucketType,ProductID,BenifitAssignedValue,BenifitDiscountApplied,IFNULL(BenifitCouponCode,0),schId,schSlbRowId,SchTypeId FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'  and  schId=" + schmIdForProductsavdInRecord + " and BenSubBucketType in(10)", null);
        String[] chkI = new String[cursor.getCount()];
        try {
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (cursor.getString(0) != null && cursor.getString(1) != null && cursor.getString(2) != null && cursor.getString(3) != null) {
                            chkI[i] = cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2) + "^" + cursor.getString(3) + "^" + cursor.getString(4) + "^" + cursor.getString(5) + "^" + cursor.getString(6) + "^" + cursor.getString(7);
                        }
                        cursor.moveToNext();
                    }
                }
            }

        } finally {
            cursor.close();
            //close();
        }
        return chkI;
    }

    public String[] fnctnGetBensubBucket10Column(String schmId, String storeId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        Cursor cursor = db.rawQuery("Select ProductID,FreeProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where StoreID='" + storeId + "' and schId='" + schmId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' and BenSubBucketType in(1,10)", null);
        try {
            String[] productIdBen10 = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int index = 0; index < cursor.getCount(); index++) {
                        productIdBen10[index] = cursor.getString(0) + "^" + cursor.getString(1);
                        //updateBensubBucket10Col(storeId,schmId, ((productIdBen10[index]).split(Pattern.quote("^")))[0],"10");
                        cursor.moveToNext();
                    }
                }


            }

            return productIdBen10;
        } finally {
            cursor.close();
            // close();
        }
    }

    public void updateBensubBucket10Col(String storeId, String schemeId, String productId, String benSubBucketType) {
        final ContentValues values = new ContentValues();
        values.put("BenifitAssignedValue", 0.0);


        int affected = db.update(DBHelper.DATABASE_TABLE_Main211, values, "StoreID=? AND schId=? AND ProductID=? AND BenSubBucketType=?", new String[]{storeId, schemeId, productId, benSubBucketType});
    }

    public void deleteUnRequiredRecordsFromTablesAfterCase() {
        //open();
        db.execSQL("DELETE FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE Sstat =" + 4);

        // close();
    }

    public int fectRowIdBasedOnSchIDSlabID(int SchID, int SchemeSlabID) {
        //open();
        Cursor cursor = db.rawQuery("SELECT RowID FROM tblSchemeSlabBucketDetails WHERE SchemeID=" + SchID + " and SchemeSlabID =" + SchemeSlabID + " and SlabSubBucketType=5", null);
        try {
            int CompleteResult = 0;
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult = Integer.parseInt(cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return CompleteResult;

        } finally {
            cursor.close();
            //  close();
        }

    }

    public String[] fectProdIDBasedOnRowIDOfProductsPurchased(int sclSlabRowID) {
        //open();
        Cursor cursor = db.rawQuery("SELECT ProductID FROM tblSchemeSlabBucketProductMapping WHERE RowID=" + sclSlabRowID, null);
        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0).toString();
                        cursor.moveToNext();
                    }
                }
            }
            return CompleteResult;

        } finally {
            cursor.close();
            //close();
        }

    }

    public int fnGetStatValueagainstStore(String StoreID) {
        //open();
        Cursor cursor = db.rawQuery("SELECT Sstat FROM tblStoreList WHERE StoreID='" + StoreID + "'", null);
        try {
            int Sstat = 0;
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    Sstat = Integer.parseInt(cursor.getString(0).toString());

                }
            }
            return Sstat;

        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }

    }

    public void updateReturnData(HashMap<String, String> hmapReturnData, String OrderPDAID, HashMap<String, String> hmapRemark, String TmpInvoiceCodePDA) {
        //open();
        String routeID;
        String storeID;
        String returnProductID;
        String prodReturnQty;
        String prodReturnReason;
        String prodReturnReasonIndex;
        String returnDate;
        // String _outstat;
        int Sstat = 0;


        for (Entry<String, String> entry : hmapReturnData.entrySet()) {

            returnProductID = entry.getKey();
            routeID = (entry.getValue().split(Pattern.quote("~")))[0];
            storeID = (entry.getValue().split(Pattern.quote("~")))[1];
            if ((entry.getValue().split(Pattern.quote("~")))[2].equals("")) {
                prodReturnQty = "0";
            } else {
                prodReturnQty = (entry.getValue().split(Pattern.quote("~")))[2];
            }

            prodReturnReason = hmapRemark.get(returnProductID);
            prodReturnReasonIndex = (entry.getValue().split(Pattern.quote("~")))[4];
            returnDate = (entry.getValue().split(Pattern.quote("~")))[5];
            // _outstat=(entry.getValue().split(Pattern.quote("~")))[6];

            Cursor cursor = db.rawQuery("SELECT RouteID FROM tblStoreReturnDetail where StoreID='" + storeID + "' and ReturnProductID ='" + returnProductID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
            // System.out.println("NitishReturn "+cursor.getCount());
            ContentValues initialValues = new ContentValues();
            // StoreID ,ProductID ,ClickedDateTime ,PhotoName ,PhotoValidation ,PDAPhotoPath ,outstat
            initialValues.put("RouteID", routeID.trim());
            initialValues.put("ReturnProductID", returnProductID.trim());
            initialValues.put("StoreID", storeID.trim());

            initialValues.put("ProdReturnQty", prodReturnQty.trim());

            initialValues.put("ProdReturnReason", prodReturnReason.trim());
            initialValues.put("ProdReturnReasonIndex", prodReturnReasonIndex.trim());
            initialValues.put("ReturnDate", returnDate.trim());
            initialValues.put("Sstat", Sstat);
            initialValues.put("OrderIDPDA", OrderPDAID);
            initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
            if (cursor.getCount() > 0) {

                // System.out.println("Return update is called :"+ routeID+":"+storeID+":"+returnProductID+":"+prodReturnQty+":"+prodReturnReason+":"+ prodReturnReasonIndex+":"+returnDate);
                int affected = db.update(DBHelper.DATABASE_TABLE_Main213, initialValues, "StoreID=? AND ReturnProductID=? AND  TmpInvoiceCodePDA=?", new String[]{storeID, returnProductID, TmpInvoiceCodePDA});


            } else {
                // System.out.println("Return insert is called :"+ routeID+":"+storeID+":"+returnProductID+":"+prodReturnQty+":"+prodReturnReason+":"+ prodReturnReasonIndex+":"+returnDate);
                db.insert(DBHelper.DATABASE_TABLE_Main213, null, initialValues);
            }

        }
        // close();
    }

    public HashMap<String, String> getRtrnOrderQtyReason(String storeID, String OrderPDAID, String TmpInvoiceCodePDA) {
        HashMap<String, String> hmapPrdctIdPrdctRtrnQtyReason = new HashMap<String, String>();
        //ReturnProductID text null, ProdReturnQty text null, ProdReturnReason
        Cursor cursor = db.rawQuery("SELECT ReturnProductID,ProdReturnQty,ProdReturnReasonIndex FROM tblStoreReturnDetail where StoreID='" + storeID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        String rtrnQty = null;
        // System.out.println("Return Cursor storeId"+storeID);
        // System.out.println("Return Cursor"+cursor.getCount());
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {


                        hmapPrdctIdPrdctRtrnQtyReason.put(cursor.getString(0), cursor.getString(1) + "^" + cursor.getString(2));


                        cursor.moveToNext();
                        // cursor.close();
                    }

                }
            } else {
                hmapPrdctIdPrdctRtrnQtyReason.put("No Product", "Thankyou");
            }


            return hmapPrdctIdPrdctRtrnQtyReason;
        } finally {
            cursor.close();


        }
    }

    public HashMap<String, String> getProductStockList(String StoreID, String OrderPDAID, String TmpInvoiceCodePDA) {

        //hmapCtgryPrdctDetail= key=prdctId,val=Stock
        HashMap<String, String> hmapPrdctIdPrdctStock = new HashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT DISTINCT ProductID,ifnull(SUM(Stock),0) From tblActualVisitStock where StoreID='" + StoreID + "'", null);//  AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'" , null);
        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getString(0) != null) {
                        for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                            hmapPrdctIdPrdctStock.put(cursor.getString(0).toString(), cursor.getString(1).toString());
                            cursor.moveToNext();
                        }
                    }
                }
            }
            return hmapPrdctIdPrdctStock;

        } finally {
            cursor.close();

        }
    }

    public ArrayList<HashMap<String, String>> fetch_catgry_prdctReturnData(String storeId, String OrderPDAID, String TmpInvoiceCodePDA) {
        // System.out.println("Abhinav Raj is 2");
        //open();
        ArrayList<HashMap<String, String>> totalProductDetail = new ArrayList<HashMap<String, String>>(4);
        //hmapCtgryPrdctDetail= key=prdctId,val=CategoryID
        HashMap<String, String> hmapCtgryPrdctDetail = new HashMap<String, String>();

        //hmapCtgryPrdctDetail= key=prdctId,val=ProductName
        HashMap<String, String> hmapPrdctIdPrdctName = new HashMap<String, String>();
        //hmapCtgryPrdctDetail= key=prdctId,val=Stock
        HashMap<String, String> hmapPrdctIdPrdctStock = new HashMap<String, String>();

        //hmapCtgryPrdctDetail= key=prdctId,val=ProductRtrnQty,Reason
        HashMap<String, String> hmapPrdctIdPrdctRtrnQtyReason = new HashMap<String, String>();

        hmapPrdctIdPrdctRtrnQtyReason = getRtrnOrderQtyReason(storeId, OrderPDAID, TmpInvoiceCodePDA);
        hmapPrdctIdPrdctStock = getProductStockList(storeId, OrderPDAID, TmpInvoiceCodePDA);

        //Cursor cursor = db.rawQuery("SELECT ProductID,CategoryID,ProductShortName FROM tblProductListMaster",null);
        Cursor cursor = db.rawQuery("SELECT tblActualVisitStock.ProductID,tblProductListMaster.CategoryID,tblProductListMaster.ProductShortName,tblActualVisitStock.Stock FROM tblProductListMaster inner join tblActualVisitStock on tblProductListMaster.ProductID=tblActualVisitStock.ProductID Where tblActualVisitStock.Stock>0 and StoreID='" + storeId + "'order by CategoryID,tblActualVisitStock.ProductID", null);//  AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {
                        hmapCtgryPrdctDetail.put(cursor.getString(0), cursor.getString(1));

                        hmapPrdctIdPrdctName.put(cursor.getString(0), cursor.getString(2));
                        hmapPrdctIdPrdctStock.put(cursor.getString(0), cursor.getString(3));
                        cursor.moveToNext();
                        // cursor.close();
                    }
                    totalProductDetail.add(0, hmapCtgryPrdctDetail);
                    totalProductDetail.add(1, hmapPrdctIdPrdctName);
                    totalProductDetail.add(2, hmapPrdctIdPrdctRtrnQtyReason);
                    totalProductDetail.add(3, hmapPrdctIdPrdctStock);

                }
            }


            return totalProductDetail;
        } finally {
            cursor.close();

            //close();
        }


    }


    // change by Abhnav Sir

    public void UpdateCancelStoreFlag(HashMap<String, String> hmapConfirmCancel, int isCancelConfirm, String reason, String idSelectedRsn) {

        for (Entry<String, String> dataEntry : hmapConfirmCancel.entrySet()) {

            // // System.out.println("Update tblInvoiceButtonTransac Set flgCancel='"+isCancelConfirm+"' and Sstat="+dataEntry.getValue()+" WHERE OrderID='"+dataEntry.getKey()+"'");
            // db.execSQL("Update tblInvoiceButtonTransac Set flgCancel='"+isCancelConfirm+"' and Sstat="+dataEntry.getValue()+" WHERE OrderID='"+dataEntry.getKey()+"'");

            final ContentValues values = new ContentValues();
            if (Integer.parseInt(dataEntry.getValue()) == 10) {
                values.put("Sstat", 9);
            } else {
                values.put("Sstat", dataEntry.getValue());
            }
            values.put("flgCancel", isCancelConfirm);


            ////// System.out.println("Updating Status for Store ID: " + sID);
            //int affected = db.update("tblInvoiceButtonStoreMstr", values, "StoreID=? AND RouteId=? AND DistId=? AND InvoiceForDate=?",new String[] { sID,RouteId,DistId,Invdate });

            int affected = db.update("tblPendingInvoices", values, "OrderID=?", new String[]{dataEntry.getKey()});
            values.put("CancelRemarks", reason);
            values.put("CancelReasonId", idSelectedRsn);
            int affected2 = db.update("tblInvoiceButtonTransac", values, "OrderID=?", new String[]{dataEntry.getKey()});

            //int affected2 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
            //int affected1 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });

        }


    }

    public void UpdateProductCancelStoreFlag(String orderId, int isCancelConfirm) {
        //open();

        {

            // // System.out.println("Update tblInvoiceButtonTransac Set flgCancel='"+isCancelConfirm+"' and Sstat="+dataEntry.getValue()+" WHERE OrderID='"+dataEntry.getKey()+"'");
            // db.execSQL("Update tblInvoiceButtonTransac Set flgCancel='"+isCancelConfirm+"' and Sstat="+dataEntry.getValue()+" WHERE OrderID='"+dataEntry.getKey()+"'");

            final ContentValues values = new ContentValues();
            values.put("Sstat", "9");
            values.put("flgCancel", isCancelConfirm);
            ////// System.out.println("Updating Status for Store ID: " + sID);
            //int affected = db.update("tblPendingInvoices", values, "StoreID=? AND RouteId=? AND DistId=? AND InvoiceForDate=?",new String[] { sID,RouteId,DistId,Invdate });

            int affected = db.update("tblPendingInvoices", values, "OrderID=?", new String[]{orderId});
            int affected2 = db.update("tblInvoiceButtonTransac", values, "OrderID=?", new String[]{orderId});


            //int affected2 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });
            //int affected1 = db.update("tblInvoiceButtonTransac", values, "StoreID=? AND OrderID=?",new String[] { sID,OrderID });


            //  9,1

            //close();

        }


    }

    public int fnCountToDisplayDailySummaryDetailsSKUWise(int DraftorNonSubmitted, int flgReportFromTmpOrPermanent)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        int CountToDisplayDailySummaryDetailsSKUWise = 0;
        //ArrayList<HashMap<String, String>> totalProductDetail=new ArrayList<HashMap<String, String>>(4);

        //Getting Category Details Starts Here
        Cursor cursor = null;
        //open();
        if (flgReportFromTmpOrPermanent == 0) {
            cursor = db.rawQuery("Select Count(tblCategoryMaster.CategoryID) from tblCategoryMaster inner join tblTmpInvoiceDetails on tblCategoryMaster.CategoryID=tblTmpInvoiceDetails.CatID Where (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.Sstat=" + DraftorNonSubmitted, null);
        }
        if (flgReportFromTmpOrPermanent == 1) {
            cursor = db.rawQuery("Select Count(tblCategoryMaster.CategoryID) from tblCategoryMaster inner join tblInvoiceDetails on tblCategoryMaster.CategoryID=tblInvoiceDetails.CatID Where (tblInvoiceDetails.OrderQty>0 or tblInvoiceDetails.FreeQty>0) and tblInvoiceDetails.Sstat=" + DraftorNonSubmitted, null);
        }
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    CountToDisplayDailySummaryDetailsSKUWise = Integer.parseInt(cursor.getString(0).toString());
                }
            }
            return CountToDisplayDailySummaryDetailsSKUWise;
        } finally {
            cursor.close();
            // close();
        }

    }

    @SuppressWarnings("unchecked")
    public LinkedHashMap<String, String> fnGetDailySummaryDetailsSKUWiseCategoryLevel(int DraftorNonSubmitted, int flgReportFromTmpOrPermanent)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        ArrayList<Object> totalCategoryWiseResult = new ArrayList<Object>(11);

        //Getting Category Details Starts Here
        Cursor cursor = null;
        LinkedHashMap<String, String> hmapSKUWiseDailySummaryReport = new LinkedHashMap<String, String>();

        LinkedHashMap<String, String> hmapGrandTotalCategorySKUWiseDailySummaryReport = new LinkedHashMap<String, String>();

        String CompleteResult[] = null;

        String strGrandTotalDiscValue = "";
        String strGrandTotalAmountBeforeTax = "";
        String strGrandTotalTaxValue = "";
        String strGrandTotalOrderValue = "";
        //tblTmpInvoiceDetails (IMEIno text not null,RouteID int null,StoreID text not null,CatID text  null,ProdID text not null,TransDate string not null,Stock integer not null,OrderQty integer not null,OrderVal real not null,FreeQty integer not null,DisVal real not null,Sstat integer not null,SampleQuantity int null,ProductShortName text null,ProductPrice real null, TaxRate real null,TaxValue real null,StoreCatNodeId int null,OrderIDPDA text null,flgIsQuoteRateApplied int null);";
        //open();
        //  Cursor cursor = db.rawQuery("Select tblCategoryMaster.CategoryID,tblCategoryMaster.CategoryDescr,Count(Distinct tblTmpInvoiceDetails.StoreID) As StoreCount,1 AS FlgRowType  from tblCategoryMaster inner join tblTmpInvoiceDetails on tblCategoryMaster.CategoryID=tblTmpInvoiceDetails.CatID Where (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.Sstat="+DraftorNonSubmitted+" Group By tblCategoryMaster.CategoryID,tblCategoryMaster.CategoryDescr" , null);
        //or tblTmpInvoiceDetails.Stock>0
        if (flgReportFromTmpOrPermanent == 1) {
            cursor = db.rawQuery("Select tblCategoryMaster.CategoryID,tblCategoryMaster.CategoryDescr,Count(Distinct tblInvoiceDetails.StoreID) As StoreCount,1 AS FlgRowType  from tblCategoryMaster inner join tblInvoiceDetails on tblCategoryMaster.CategoryID=tblInvoiceDetails.CatID Where (tblInvoiceDetails.OrderQty>0 or tblInvoiceDetails.FreeQty>0) and tblInvoiceDetails.Sstat=" + DraftorNonSubmitted + " Group By tblCategoryMaster.CategoryID,tblCategoryMaster.CategoryDescr Order by tblCategoryMaster.CatOrdr", null);
        }
        if (flgReportFromTmpOrPermanent == 0) {
            cursor = db.rawQuery("Select tblCategoryMaster.CategoryID,tblCategoryMaster.CategoryDescr,Count(Distinct tblTmpInvoiceDetails.StoreID) As StoreCount,1 AS FlgRowType  from tblCategoryMaster inner join tblTmpInvoiceDetails on tblCategoryMaster.CategoryID=tblTmpInvoiceDetails.CatID Where (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.Sstat=" + DraftorNonSubmitted + " Group By tblCategoryMaster.CategoryID,tblCategoryMaster.CategoryDescr Order by tblCategoryMaster.CatOrdr", null);
        }
        try {
            if (cursor.getCount() > 0) {
                //CompleteResult = new String[cursor.getCount()];
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        ArrayList<Object> arrProductDailySummaryKUWiseReportWithCategory = fnGetDailySummaryDetailsSKUWiseProductLevel(Integer.parseInt(cursor.getString(0).toString()), DraftorNonSubmitted, flgReportFromTmpOrPermanent);

                        if (arrProductDailySummaryKUWiseReportWithCategory.size() > 0) {

                            // CompleteResult[i]=(String) cursor.getString(0).toString();


                            String strCatDisplayUnit = (String) arrProductDailySummaryKUWiseReportWithCategory.get(0);
                            String strCatOrderVolume = (String) arrProductDailySummaryKUWiseReportWithCategory.get(1);
                            String strCatFreeVolume = (String) arrProductDailySummaryKUWiseReportWithCategory.get(2);
                            String strCatDiscValue = (String) arrProductDailySummaryKUWiseReportWithCategory.get(3);
                            String strCatAmountBeforeTax = (String) arrProductDailySummaryKUWiseReportWithCategory.get(4);
                            String strCatTaxValue = (String) arrProductDailySummaryKUWiseReportWithCategory.get(5);
                            String strCatOrderValue = (String) arrProductDailySummaryKUWiseReportWithCategory.get(6);

                            if (strGrandTotalDiscValue.equals("")) {
                                strGrandTotalDiscValue = "" + Double.parseDouble(strCatDiscValue);
                            } else {
                                strGrandTotalDiscValue = "" + (Double.parseDouble(strGrandTotalDiscValue) + Double.parseDouble(strCatDiscValue));
                            }
                            if (strGrandTotalAmountBeforeTax.equals("")) {
                                strGrandTotalAmountBeforeTax = "" + Double.parseDouble(strCatAmountBeforeTax);
                            } else {
                                strGrandTotalAmountBeforeTax = "" + (Double.parseDouble(strGrandTotalAmountBeforeTax) + Double.parseDouble(strCatAmountBeforeTax));
                            }
                            if (strGrandTotalTaxValue.equals("")) {
                                strGrandTotalTaxValue = "" + Double.parseDouble(strCatTaxValue);
                            } else {
                                strGrandTotalTaxValue = "" + (Double.parseDouble(strGrandTotalTaxValue) + Double.parseDouble(strCatTaxValue));
                            }
                            if (strGrandTotalOrderValue.equals("")) {
                                strGrandTotalOrderValue = "" + Double.parseDouble(strCatOrderValue);
                            } else {
                                strGrandTotalOrderValue = "" + (Double.parseDouble(strGrandTotalOrderValue) + Double.parseDouble(strCatOrderValue));
                            }
                            LinkedHashMap<String, String> hmapSkuLevelRows = new LinkedHashMap<String, String>();
                            hmapSkuLevelRows = (LinkedHashMap<String, String>) arrProductDailySummaryKUWiseReportWithCategory.get(7);
                            //hmapSKUWiseDailySummaryReport.put((String) cursor.getString(0).toString(), "CATEGORY :"+(String) cursor.getString(1).toString()+"^"+0+"^"+0+"^"+(String) cursor.getString(2).toString()+"^"+strCatOrderVolume+" "+strCatDisplayUnit+"^"+strCatFreeVolume+" "+strCatDisplayUnit+"^"+strCatDiscValue+"^"+strCatAmountBeforeTax+"^"+strCatTaxValue+"^"+strCatOrderValue+"^"+(String) cursor.getString(3).toString());
                            hmapSKUWiseDailySummaryReport.put((String) cursor.getString(0).toString(), "CATEGORY :" + (String) cursor.getString(1).toString() + "^" + 0 + "^" + 0 + "^" + strCatOrderVolume + " " + strCatDisplayUnit + "^" + strCatFreeVolume + " " + strCatDisplayUnit + "^" + strCatDiscValue + "^" + strCatAmountBeforeTax + "^" + strCatTaxValue + "^" + strCatOrderValue + "^" + (String) cursor.getString(2).toString() + "^" + (String) cursor.getString(3).toString());
                            hmapSKUWiseDailySummaryReport.putAll(hmapSkuLevelRows);
                            if (i == cursor.getCount() - 1) {
                                int storeCntGrandTotal = fnGetCountDailySummaryDetailsSKUWiseGrandTotal(DraftorNonSubmitted, flgReportFromTmpOrPermanent);
                                hmapGrandTotalCategorySKUWiseDailySummaryReport.putAll(hmapSKUWiseDailySummaryReport);
                                //hmapGrandTotalCategorySKUWiseDailySummaryReport.put("0", "GRAND TOTAL :"+"^"+" "+"^"+" "+"^"+storeCntGrandTotal+"^"+" "+"^"+" "+"^"+strGrandTotalDiscValue+"^"+strGrandTotalAmountBeforeTax+"^"+strGrandTotalTaxValue+"^"+strGrandTotalOrderValue+"^0");
                                hmapGrandTotalCategorySKUWiseDailySummaryReport.put("0", "GRAND TOTAL :" + "^" + "0" + "^" + "0" + "^" + "0" + "^" + "0" + "^" + strGrandTotalDiscValue + "^" + strGrandTotalAmountBeforeTax + "^" + strGrandTotalTaxValue + "^" + strGrandTotalOrderValue + "^" + storeCntGrandTotal + "^0");

                            }


                            cursor.moveToNext();


                        }
                    }
                }

            }


            return hmapGrandTotalCategorySKUWiseDailySummaryReport;

        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }
        //Getting Category Details Ends Here

    }

    public LinkedHashMap<String, String> fnGetTabelEntry()//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        LinkedHashMap<String, String> hmapPrdRowDetails = new LinkedHashMap<String, String>();
        //ArrayList<Object> totalProductCategoryWiseResult=new ArrayList<Object>(8);
        //open();
        Cursor cursorSKUPrd = db.rawQuery("Select * from tblTmpInvoiceDetails", null);
        try {
            if (cursorSKUPrd.getCount() > 0) {
                cursorSKUPrd.moveToFirst();
                //if (cursorSKUPrd.moveToFirst()) {
                for (int i = 0; i <= (cursorSKUPrd.getCount() - 1); i++) {
                    String rowVales = "";
                    for (int j = 0; j <= (cursorSKUPrd.getColumnCount() - 1); j++) {
                        if (rowVales.equals("")) {
                            rowVales = cursorSKUPrd.getString(j).toString();
                        } else {
                            rowVales += "^" + cursorSKUPrd.getString(j).toString();
                        }
                    }

                    hmapPrdRowDetails.put("" + i, rowVales);
                    cursorSKUPrd.moveToNext();
                }
                //}
            }

            return hmapPrdRowDetails;

        } finally {
            cursorSKUPrd.close();
            //LinkedHashMap<String,String> hmapProductList=fnGetTabelEntryProduct();
            // close();
            // close();
        }

    }

    public LinkedHashMap<String, String> fnGetTabelEntryProduct()//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        LinkedHashMap<String, String> hmapPrdRowDetails = new LinkedHashMap<String, String>();
        //ArrayList<Object> totalProductCategoryWiseResult=new ArrayList<Object>(8);
        ////open();
        Cursor cursorSKUPrd = db.rawQuery("Select * from tblProductListMaster", null);
        try {
            if (cursorSKUPrd.getCount() > 0) {
                cursorSKUPrd.moveToFirst();
                //if (cursorSKUPrd.moveToFirst()) {
                for (int i = 0; i <= (cursorSKUPrd.getCount() - 1); i++) {
                    String rowVales = "";
                    for (int j = 0; j <= (cursorSKUPrd.getColumnCount() - 1); j++) {
                        if (rowVales.equals("")) {
                            rowVales = cursorSKUPrd.getString(j).toString();
                        } else {
                            rowVales += "^" + cursorSKUPrd.getString(j).toString();
                        }
                    }

                    hmapPrdRowDetails.put("" + i, rowVales);
                    cursorSKUPrd.moveToNext();
                }
                //}
            }

            return hmapPrdRowDetails;

        } finally {
            cursorSKUPrd.close();
            //close();
            // close();
        }

    }


    //	 DATABASE_CREATE_TABLE_215 =tblProductMappedWithSchemeSlabApplied (StoreId,ProductID,schSlabId,schmIdMapped
    // changes by nitish

    public ArrayList<Object> fnGetDailySummaryDetailsSKUWiseProductLevel(int CategoryId, int DraftorNonSubmitted, int flgReportFromTmpOrPermanent)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        ArrayList<Object> totalProductCategoryWiseResult = new ArrayList<Object>(8);

        // Cursor cursorSKUPrd = db.rawQuery("Select tblProductListMaster.StoreCatNodeId || tblTmpInvoiceDetails.ProdID AS PID,tblProductListMaster.ProductShortName As ProdShortName,tblProductListMaster.ProductMRP As PMRP,tblTmpInvoiceDetails.ProductPrice As PSRate,Sum(tblTmpInvoiceDetails.OrderQty) as OrderQty,Sum(Cast(tblTmpInvoiceDetails.FreeQty As Real)) AS FreeQty, Sum(Cast(tblTmpInvoiceDetails.OrderQty as Real)) As OrderVolume,Cast(Sum(tblTmpInvoiceDetails.FreeQty) AS Real) As FreeVolume,Sum(Cast(tblTmpInvoiceDetails.DisVal As Real)) As DisVal,Sum(Cast(tblTmpInvoiceDetails.OrderVal As Real))-Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real)) As AmtBeforeTax,Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real)) As TaxValue,Sum(Cast(tblTmpInvoiceDetails.OrderVal As Real)) As OrderVal,tblProductListMaster.DisplayUnit AS PDisplayUnit,Count(Distinct tblTmpInvoiceDetails.StoreID) As StoreCount,2 AS FlgRowType  from tblTmpInvoiceDetails inner join tblProductListMaster on tblTmpInvoiceDetails.ProdID=tblProductListMaster.ProductID and tblProductListMaster.StoreCatNodeId=tblTmpInvoiceDetails.StoreCatNodeId Where tblProductListMaster.StoreCatNodeId=tblTmpInvoiceDetails.StoreCatNodeId and  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.CatID="+CategoryId+" and  tblTmpInvoiceDetails.Sstat="+DraftorNonSubmitted+" Group By tblTmpInvoiceDetails.ProdID,tblProductListMaster.ProductShortName,tblProductListMaster.ProductMRP,tblProductListMaster.StandardRate,tblProductListMaster.DisplayUnit,tblProductListMaster.StoreCatNodeId Order by tblProductListMaster.CatOrdr,tblProductListMaster.PrdOrdr", null);
        //Cursor cursorSKUPrd = db.rawQuery("Select tblTmpInvoiceDetails.CatID || tblTmpInvoiceDetails.ProdID AS PID,tblProductListMaster.ProductShortName As ProdShortName,tblProductSegementMap.ProductMRP As PMRP,tblTmpInvoiceDetails.ProductPrice As PSRate,Sum(tblTmpInvoiceDetails.OrderQty) as OrderQty,Sum(Cast(tblTmpInvoiceDetails.FreeQty As Real)) AS FreeQty, Sum(Cast(tblTmpInvoiceDetails.OrderQty as Real)) As OrderVolume,Cast(Sum(tblTmpInvoiceDetails.FreeQty) AS Real) As FreeVolume,Sum(Cast(tblTmpInvoiceDetails.DisVal As Real)) As DisVal,Sum(Cast(tblTmpInvoiceDetails.OrderVal As Real))-Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real)) As AmtBeforeTax,Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real)) As TaxValue,Sum(Cast(tblTmpInvoiceDetails.OrderVal As Real)) As OrderVal,tblProductListMaster.DisplayUnit AS PDisplayUnit,Count(Distinct tblTmpInvoiceDetails.StoreID) As StoreCount,2 AS FlgRowType  from tblTmpInvoiceDetails inner join tblProductListMaster on tblTmpInvoiceDetails.ProdID=tblProductListMaster.ProductID and tblProductListMaster.StoreCatNodeId=tblTmpInvoiceDetails.StoreCatNodeId inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID  Where tblProductListMaster.StoreCatNodeId=tblTmpInvoiceDetails.StoreCatNodeId and  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.CatID="+CategoryId+" and  tblTmpInvoiceDetails.Sstat="+DraftorNonSubmitted+"  Group By tblTmpInvoiceDetails.ProdID,tblProductListMaster.ProductShortName,tblProductSegementMap.ProductMRP,tblProductSegementMap.StandardRate,tblProductListMaster.DisplayUnit,tblProductListMaster.StoreCatNodeId Order by tblProductListMaster.CatOrdr,tblProductListMaster.PrdOrdr", null);
        // Cursor cursorSKUPrd = db.rawQuery("Select tblProductListMaster.CategoryID || tblTmpInvoiceDetails.ProdID AS PID,tblProductListMaster.ProductShortName As ProdShortName,((Sum(Cast(tblTmpInvoiceDetails.OrderVal As Real)))/Sum(tblTmpInvoiceDetails.OrderQty)) As PMRP,tblTmpInvoiceDetails.ProductPrice As PSRate,Sum(tblTmpInvoiceDetails.OrderQty) as OrderQty,Sum(Cast(tblTmpInvoiceDetails.FreeQty As Real)) AS FreeQty, Sum(Cast(tblTmpInvoiceDetails.OrderQty as Real)) As OrderVolume,Cast(Sum(tblTmpInvoiceDetails.FreeQty) AS Real) As FreeVolume,Sum(Cast(tblTmpInvoiceDetails.DisVal As Real)) As DisVal,Sum(Cast(tblTmpInvoiceDetails.OrderVal As Real))-Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real)) As AmtBeforeTax,Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real)) As TaxValue,Sum(Cast(tblTmpInvoiceDetails.OrderVal As Real)) As OrderVal,tblProductListMaster.DisplayUnit AS PDisplayUnit,Count(Distinct tblTmpInvoiceDetails.StoreID) As StoreCount,2 AS FlgRowType  from tblTmpInvoiceDetails inner join tblProductListMaster on tblTmpInvoiceDetails.ProdID=tblProductListMaster.ProductID   Where tblProductListMaster.CategoryID=tblTmpInvoiceDetails.CatID and  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.CatID="+CategoryId+" and  tblTmpInvoiceDetails.Sstat="+DraftorNonSubmitted+"  Group By tblTmpInvoiceDetails.ProdID,tblProductListMaster.ProductShortName,tblProductListMaster.DisplayUnit Order by tblProductListMaster.CatOrdr,tblProductListMaster.PrdOrdr", null);
        Cursor cursorSKUPrd = null;
        if (flgReportFromTmpOrPermanent == 0) {
            cursorSKUPrd = db.rawQuery("Select tblProductListMaster.CategoryID || tblTmpInvoiceDetails.ProdID AS PID,tblProductListMaster.ProductShortName As ProdShortName,((Sum(Cast(tblTmpInvoiceDetails.LineValAftrTxAftrDscnt As Real)))/Sum(tblTmpInvoiceDetails.OrderQty)) As PMRP,((Sum(Cast(tblTmpInvoiceDetails.LineValAftrTxAftrDscnt As Real)))/Sum(tblTmpInvoiceDetails.OrderQty)) As PSRate,Sum(tblTmpInvoiceDetails.OrderQty) as OrderQty,Sum(Cast(tblTmpInvoiceDetails.FreeQty As Real)) AS FreeQty, Sum(Cast(tblTmpInvoiceDetails.OrderQty as Real)) As OrderVolume,Cast(Sum(tblTmpInvoiceDetails.FreeQty) AS Real) As FreeVolume,Sum(Cast(tblTmpInvoiceDetails.DisVal As Real)) As DisVal,Sum(Cast(tblTmpInvoiceDetails.LineValAftrTxAftrDscnt As Real))-Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real)) As AmtBeforeTax,Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real)) AS TaxValue,Sum(Cast(tblTmpInvoiceDetails.LineValAftrTxAftrDscnt As Real)) As OrderVal,tblProductListMaster.DisplayUnit AS PDisplayUnit,Count(Distinct tblTmpInvoiceDetails.StoreID) As StoreCount,2 AS FlgRowType  from tblTmpInvoiceDetails inner join tblProductListMaster on tblTmpInvoiceDetails.ProdID=tblProductListMaster.ProductID Where tblTmpInvoiceDetails.CatID=" + CategoryId + "  and  tblTmpInvoiceDetails.Sstat=" + DraftorNonSubmitted + "  Group By tblProductListMaster.CategoryID, tblTmpInvoiceDetails.ProdID,tblProductListMaster.ProductShortName,tblProductListMaster.DisplayUnit having Sum(tblTmpInvoiceDetails.OrderQty) >0 or  Sum(Cast(tblTmpInvoiceDetails.FreeQty As Real))>0 Order by tblProductListMaster.CatOrdr,PrdOrdr", null);
        }
        if (flgReportFromTmpOrPermanent == 1) {
            cursorSKUPrd = db.rawQuery("Select tblProductListMaster.CategoryID || tblInvoiceDetails.ProdID AS PID,tblProductListMaster.ProductShortName As ProdShortName,((Sum(Cast(tblInvoiceDetails.LineValAftrTxAftrDscnt As Real)))/Sum(tblInvoiceDetails.OrderQty)) As PMRP,((Sum(Cast(tblInvoiceDetails.LineValAftrTxAftrDscnt As Real)))/Sum(tblInvoiceDetails.OrderQty)) As PSRate,Sum(tblInvoiceDetails.OrderQty) as OrderQty,Sum(Cast(tblInvoiceDetails.FreeQty As Real)) AS FreeQty, Sum(Cast(tblInvoiceDetails.OrderQty as Real)) As OrderVolume,Cast(Sum(tblInvoiceDetails.FreeQty) AS Real) As FreeVolume,Sum(Cast(tblInvoiceDetails.DisVal As Real)) As DisVal,Sum(Cast(tblInvoiceDetails.LineValAftrTxAftrDscnt As Real))-Sum(Cast(tblInvoiceDetails.TaxValue As Real)) As AmtBeforeTax,Sum(Cast(tblInvoiceDetails.TaxValue As Real)) AS TaxValue,Sum(Cast(tblInvoiceDetails.LineValAftrTxAftrDscnt As Real)) As OrderVal,tblProductListMaster.DisplayUnit AS PDisplayUnit,Count(Distinct tblInvoiceDetails.StoreID) As StoreCount,2 AS FlgRowType  from tblInvoiceDetails inner join tblProductListMaster on tblInvoiceDetails.ProdID=tblProductListMaster.ProductID Where tblInvoiceDetails.CatID=" + CategoryId + "  and  tblInvoiceDetails.Sstat=" + DraftorNonSubmitted + "  Group By tblProductListMaster.CategoryID, tblInvoiceDetails.ProdID,tblProductListMaster.ProductShortName,tblProductListMaster.DisplayUnit having Sum(tblInvoiceDetails.OrderQty) >0 or  Sum(Cast(tblInvoiceDetails.FreeQty As Real))>0 Order by tblProductListMaster.CatOrdr,PrdOrdr", null);
        }
        try {
            //hmapCtgryDetails= key=CategoryId,val=CategoryDescr
            LinkedHashMap<String, String> hmapPrdRowDetails = new LinkedHashMap<String, String>();
            String strCatDisplayUnit = "Kg/Liters";
            String strCatOrderVolume = "";
            String strCatFreeVolume = "";
            String strCatDiscValue = "";
            String strCatAmountBeforeTax = "";
            String strCatTaxValue = "";
            String strCatOrderValue = "";
            if (cursorSKUPrd.getCount() > 0) {
                if (cursorSKUPrd.moveToFirst()) {
                    for (int i = 0; i <= (cursorSKUPrd.getCount() - 1); i++) {

                        if (i == 0) {
                            strCatDisplayUnit = (String) cursorSKUPrd.getString(12).toString();
                        }
                        if (strCatOrderVolume.equals("")) {
                            strCatOrderVolume = "" + Double.parseDouble(cursorSKUPrd.getString(6).toString());
                        } else {
                            strCatOrderVolume = "" + (Double.parseDouble(strCatOrderVolume) + Double.parseDouble(cursorSKUPrd.getString(6).toString()));
                        }
                        if (strCatFreeVolume.equals("")) {
                            strCatFreeVolume = "" + Double.parseDouble(cursorSKUPrd.getString(7).toString());

                            Double strCatFreeVolumeVolumeValue = Double.parseDouble(strCatFreeVolume);
                            strCatFreeVolume = "" + Double.parseDouble(new DecimalFormat("##.##").format(strCatFreeVolumeVolumeValue));
                        } else {
                            strCatFreeVolume = "" + (Double.parseDouble(strCatFreeVolume) + Double.parseDouble(cursorSKUPrd.getString(7).toString()));

                            Double strCatFreeVolumeVolumeValue = Double.parseDouble(strCatFreeVolume);
                            strCatFreeVolume = "" + Double.parseDouble(new DecimalFormat("##.##").format(strCatFreeVolumeVolumeValue));
                        }
                        if (strCatDiscValue.equals("")) {
                            strCatDiscValue = "" + Double.parseDouble(cursorSKUPrd.getString(8).toString());
                        } else {
                            strCatDiscValue = "" + (Double.parseDouble(strCatDiscValue) + Double.parseDouble(cursorSKUPrd.getString(8).toString()));


                        }
                        if (strCatAmountBeforeTax.equals("")) {
                            strCatAmountBeforeTax = "" + Double.parseDouble(cursorSKUPrd.getString(9).toString());
                        } else {
                            strCatAmountBeforeTax = "" + (Double.parseDouble(strCatAmountBeforeTax) + Double.parseDouble(cursorSKUPrd.getString(9).toString()));
                        }
                        if (strCatTaxValue.equals("")) {
                            strCatTaxValue = "" + Double.parseDouble(cursorSKUPrd.getString(10).toString());
                        } else {
                            strCatTaxValue = "" + (Double.parseDouble(strCatTaxValue) + Double.parseDouble(cursorSKUPrd.getString(10).toString()));
                        }
                        if (strCatOrderValue.equals("")) {
                            strCatOrderValue = "" + Double.parseDouble(cursorSKUPrd.getString(11).toString());
                        } else {
                            strCatOrderValue = "" + (Double.parseDouble(strCatOrderValue) + Double.parseDouble(cursorSKUPrd.getString(11).toString()));
                        }

                        hmapPrdRowDetails.put(CategoryId + "_" + (String) cursorSKUPrd.getString(0).toString(), (String) cursorSKUPrd.getString(1).toString() + "^" + (String) cursorSKUPrd.getString(2).toString() + "^" + (String) cursorSKUPrd.getString(3).toString() + "^" + (String) cursorSKUPrd.getString(4).toString() + "^" + (String) cursorSKUPrd.getString(5).toString() + "^" + (String) cursorSKUPrd.getString(8).toString() + "^" + (String) cursorSKUPrd.getString(9).toString() + "^" + (String) cursorSKUPrd.getString(10).toString() + "^" + (String) cursorSKUPrd.getString(11).toString() + "^" + (String) cursorSKUPrd.getString(13).toString() + "^" + (String) cursorSKUPrd.getString(14).toString());
                        cursorSKUPrd.moveToNext();
                    }
                }

                if (strCatDisplayUnit.equals("Kg")) {
                    strCatOrderVolume = ConvertGramToKilo(strCatOrderVolume);
                    Double strCatOrderVolumeValue = Double.parseDouble(strCatOrderVolume);
                    strCatOrderVolume = "" + Double.parseDouble(new DecimalFormat("##.##").format(strCatOrderVolumeValue));
                }
                if (strCatDisplayUnit.equals("Lt")) {
                    strCatOrderVolume = ConvertMLToLiters(strCatOrderVolume);
                    Double strCatOrderVolumeValue = Double.parseDouble(strCatOrderVolume);
                    strCatOrderVolume = "" + Double.parseDouble(new DecimalFormat("##.##").format(strCatOrderVolumeValue));
                }


                if (strCatDisplayUnit.equals("Kg")) {
                    strCatFreeVolume = ConvertGramToKilo(strCatFreeVolume);
                    Double strCatFreeVolumeValue = Double.parseDouble(strCatFreeVolume);
                    strCatFreeVolume = "" + Double.parseDouble(new DecimalFormat("##.##").format(strCatFreeVolumeValue));
                }
                if (strCatDisplayUnit.equals("Lt")) {
                    strCatFreeVolume = ConvertMLToLiters(strCatFreeVolume);
                    Double strCatFreeVolumeValue = Double.parseDouble(strCatFreeVolume);
                    strCatFreeVolume = "" + Double.parseDouble(new DecimalFormat("##.##").format(strCatFreeVolumeValue));
                }


                totalProductCategoryWiseResult.add(0, strCatDisplayUnit);
                totalProductCategoryWiseResult.add(1, strCatOrderVolume);
                totalProductCategoryWiseResult.add(2, strCatFreeVolume);
                totalProductCategoryWiseResult.add(3, strCatDiscValue);
                totalProductCategoryWiseResult.add(4, strCatAmountBeforeTax);
                totalProductCategoryWiseResult.add(5, strCatTaxValue);
                totalProductCategoryWiseResult.add(6, strCatOrderValue);
                totalProductCategoryWiseResult.add(7, hmapPrdRowDetails);
            }


            return totalProductCategoryWiseResult;

        } finally {
            cursorSKUPrd.close();
            // close();
        }

    }

    public int fnGetCountDailySummaryDetailsSKUWiseGrandTotal(int DraftorNonSubmitted, int flgReportFromTmpOrPermanent)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        ////open();
        Cursor cursorGTota = null;
        if (flgReportFromTmpOrPermanent == 1) {
            cursorGTota = db.rawQuery("Select Count(*) from tblInvoiceDetails where (OrderQty>0 or FreeQty>0) and Sstat=" + DraftorNonSubmitted + "", null);
        }
        if (flgReportFromTmpOrPermanent == 0) {
            cursorGTota = db.rawQuery("Select Count(*) from tblTmpInvoiceDetails where (OrderQty>0 or FreeQty>0) and Sstat=" + DraftorNonSubmitted + "", null);
        }
        try {
            int CountCompleteResultSkuWiseProductLevel = 0;
            if (cursorGTota.getCount() > 0) {
                if (cursorGTota.moveToFirst()) {
                    for (int i = 0; i <= (cursorGTota.getCount() - 1); i++) {
                        CountCompleteResultSkuWiseProductLevel = Integer.parseInt(cursorGTota.getString(0).toString());
                        cursorGTota.moveToNext();
                    }
                }
            }
            return CountCompleteResultSkuWiseProductLevel;

        } finally {
            cursorGTota.close();
            // close();
        }

    }

    public void insertProductMappedWithSchemApplied(String storeId, String productId, String _schSlabId, String _schmId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();


        ContentValues initialValues = new ContentValues();
        initialValues.put("schmIdMapped", _schmId.trim());
        initialValues.put("schSlabId", _schSlabId.trim());


        initialValues.put("StoreId", storeId.trim());
        initialValues.put("ProductID", productId.trim());
        initialValues.put("Sstat", 0);
        initialValues.put("OrderIDPDA", pdaOrderID);
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        // System.out.println("DATABASE_TABLE_Main215 : StoreId = "+storeId+" ProductID = "+productId+" schSlabId ="+_schSlabId+" schmIdMapped ="+_schmId);

        db.insert(DBHelper.DATABASE_TABLE_Main215, null, initialValues);


        //close();

    }

    public void insertSchemeAlrtVal(String storeId, String productId, String spinnerVal, String product, String SpinnerPosition, String _schSlabId, String _schmAlrtId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        //StoreId text null,ProductID text null,SpinnerVal text null,SpinnerPosition text null,Product text null,schSlabId text null,schmAlrtId text null);";
        Cursor cur = db.rawQuery("Select Product,SpinnerVal from tblAlrtVal where StoreId ='" + storeId + "' and ProductID = '" + productId + "' and schSlabId = '" + _schSlabId + "' and schmAlrtId = '" + _schmAlrtId + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        ContentValues initialValues = new ContentValues();

        initialValues.put("Product", product.trim());
        initialValues.put("SpinnerVal", spinnerVal.trim());
        initialValues.put("SpinnerPosition", SpinnerPosition.trim());


        if (cur.getCount() > 0) {
            db.update(DBHelper.DATABASE_TABLE_Main214, initialValues, "StoreID=? AND ProductID=? AND  TmpInvoiceCodePDA=?", new String[]{storeId, productId, TmpInvoiceCodePDA});
        } else {

            //	 DATABASE_CREATE_TABLE_214,SpinnerPosition
            initialValues.put("schmAlrtId", _schmAlrtId.trim());
            initialValues.put("schSlabId", _schSlabId.trim());
            initialValues.put("StoreId", storeId.trim());
            initialValues.put("ProductID", productId.trim());
            initialValues.put("OrderIDPDA", pdaOrderID);
            initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
            //TmpInvoiceCodePDA

            db.insert(DBHelper.DATABASE_TABLE_Main214, null, initialValues);

        }

        // close();
        cur.close();
    }


    // StoreWise Summary Function given by Abhinav Sir

    public String[] getValOfSchemeAlrt(String storeId, String productId, String _schmSlabID, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        String[] alrtValues = new String[2];
        //open();
        Cursor cur = db.rawQuery("Select Product,SpinnerPosition from tblAlrtVal where StoreId ='" + storeId + "' and ProductID = '" + productId + "' and schSlabId = '" + _schmSlabID + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);

        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                alrtValues[0] = cur.getString(0);
                alrtValues[1] = cur.getString(1);
            }


        } else {
            alrtValues[0] = "No Data";
            alrtValues[1] = "";
        }
        //close();
        cur.close();
        return alrtValues;

    }

    public String getValOfSchemeAlrtSelected(String storeId, String _schmAlrtId, String _schSlabId, String pdaOrderID, String TmpInvoiceCodePDA) {
        //open();
        String alrtValues = null;
        //open();
        Cursor cur = db.rawQuery("Select SpinnerVal from tblAlrtVal where StoreId ='" + storeId + "' and schmAlrtId = '" + _schmAlrtId + "' and schSlabId = '" + _schSlabId + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);

        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                alrtValues = cur.getString(0);

            }


        } else {
            alrtValues = "0";

        }
        //close();
        cur.close();
        return alrtValues;

    }

    public LinkedHashMap<String, String> fnGetDailySummaryDetailsStoreWise(int DraftorNonSubmitted, int flgReportFromTmpOrPermanent)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        ArrayList<Object> totalCategoryWiseResult = new ArrayList<Object>(11);

        //Getting Category Details Starts Here


        //hmapStoreDetails= key=StoreId,val=StoreDetails
        LinkedHashMap<String, String> hmapStoreWiseDailySummaryDetails = new LinkedHashMap<String, String>();

        //hmapStoreDetails= key=StoreId,val=StoreDetails
        LinkedHashMap<String, String> hmapStoreWiseDailySummaryDetailsWithGrandTotal = new LinkedHashMap<String, String>();
        String StoreStockValue = "";
        String StoreDiscountValue = "";
        String StoreOrderValueBeforeTax = "";
        String StoreTaxValue = "";
        String StoreOrderValueAfterTax = "";

        //open();
        //or tblTmpInvoiceDetails.Stock>0
        Cursor cursor = null;
        if (flgReportFromTmpOrPermanent == 0) {
            cursor = db.rawQuery("Select tblTmpInvoiceDetails.StoreID,tblStoreList.StoreName,Count(Distinct tblTmpInvoiceDetails.ProdID) As LinesPerBill,(Cast(tblTmpInvoiceDetails.ProductPrice As Real)*0) As StockValue,Sum(Cast(tblTmpInvoiceDetails.DisVal As Real)) As DiscountValue,(Sum(Cast(tblTmpInvoiceDetails.LineValAftrTxAftrDscnt As Real))-Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real))) As ValueBeforeTax,Sum(Cast(tblTmpInvoiceDetails.TaxValue As Real)) As TaxValue,Sum(Cast(tblTmpInvoiceDetails.LineValAftrTxAftrDscnt As Real)) As ValueAfterTax from tblTmpInvoiceDetails inner join tblStoreList on tblTmpInvoiceDetails.StoreID=tblStoreList.StoreID Where  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.Sstat=" + DraftorNonSubmitted + " Group By tblTmpInvoiceDetails.StoreID,tblStoreList.StoreName", null);
        }
        if (flgReportFromTmpOrPermanent == 1) {
            cursor = db.rawQuery("Select tblInvoiceDetails.StoreID,tblStoreList.StoreName,Count(Distinct tblInvoiceDetails.ProdID) As LinesPerBill,(Cast(tblInvoiceDetails.ProductPrice As Real)*0) As StockValue,Sum(Cast(tblInvoiceDetails.DisVal As Real)) As DiscountValue,(Sum(Cast(tblInvoiceDetails.LineValAftrTxAftrDscnt As Real))-Sum(Cast(tblInvoiceDetails.TaxValue As Real))) As ValueBeforeTax,Sum(Cast(tblInvoiceDetails.TaxValue As Real)) As TaxValue,Sum(Cast(tblInvoiceDetails.LineValAftrTxAftrDscnt As Real)) As ValueAfterTax from tblInvoiceDetails inner join tblStoreList on tblInvoiceDetails.StoreID=tblStoreList.StoreID Where  (tblInvoiceDetails.OrderQty>0 or tblInvoiceDetails.FreeQty>0) and tblInvoiceDetails.Sstat=" + DraftorNonSubmitted + " Group By tblInvoiceDetails.StoreID,tblStoreList.StoreName", null);
        }
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapStoreWiseDailySummaryDetails.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString() + "^" + (String) cursor.getString(2).toString() + "^" + (String) cursor.getString(3).toString() + "^" + (String) cursor.getString(4).toString() + "^" + (String) cursor.getString(5).toString() + "^" + (String) cursor.getString(6).toString() + "^" + (String) cursor.getString(7).toString());

                        if (StoreStockValue.equals("")) {
                            StoreStockValue = (String) cursor.getString(3).toString();
                        } else {
                            StoreStockValue = "" + (Double.parseDouble(StoreStockValue) + Double.parseDouble(cursor.getString(3).toString()));
                        }
                        if (StoreDiscountValue.equals("")) {
                            StoreDiscountValue = (String) cursor.getString(4).toString();
                        } else {
                            StoreDiscountValue = "" + (Double.parseDouble(StoreDiscountValue) + Double.parseDouble(cursor.getString(4).toString()));
                        }
                        if (StoreOrderValueBeforeTax.equals("")) {
                            StoreOrderValueBeforeTax = (String) cursor.getString(5).toString();
                        } else {
                            StoreOrderValueBeforeTax = "" + (Double.parseDouble(StoreOrderValueBeforeTax) + Double.parseDouble(cursor.getString(5).toString()));
                        }
                        if (StoreTaxValue.equals("")) {
                            StoreTaxValue = (String) cursor.getString(6).toString();
                        } else {
                            StoreTaxValue = "" + (Double.parseDouble(StoreTaxValue) + Double.parseDouble(cursor.getString(6).toString()));
                        }
                        if (StoreOrderValueAfterTax.equals("")) {
                            StoreOrderValueAfterTax = (String) cursor.getString(7).toString();
                        } else {
                            StoreOrderValueAfterTax = "" + (Double.parseDouble(StoreOrderValueAfterTax) + Double.parseDouble(cursor.getString(7).toString()));
                        }
                        if (i == cursor.getCount() - 1) {
                            int cntLinesBillTotStoreWiseGrandTotal = fnCountToDisplayDailySummaryDetailsStoreWiseLines(DraftorNonSubmitted, flgReportFromTmpOrPermanent);
                            hmapStoreWiseDailySummaryDetailsWithGrandTotal.put("0", "TOTAL :" + "^" + cntLinesBillTotStoreWiseGrandTotal + "^" + StoreStockValue + "^" + StoreDiscountValue + "^" + StoreOrderValueBeforeTax + "^" + StoreTaxValue + "^" + StoreOrderValueAfterTax);
                            hmapStoreWiseDailySummaryDetailsWithGrandTotal.putAll(hmapStoreWiseDailySummaryDetails);
                        }
                        cursor.moveToNext();
                    }
                }
                //totalCategoryWiseResult.add(1, hmapStoreDetails);


            }
            return hmapStoreWiseDailySummaryDetailsWithGrandTotal;

        } finally {
            cursor.close();
            // close();
        }
        //Getting Category Details Ends Here

    }

    public int fnCountToDisplayDailySummaryDetailsStoreWiseLines(int DraftorNonSubmitted, int flgReportFromTmpOrPermanent)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        int CountToDisplayDailySummaryDetailsSKUWise = 0;
        //ArrayList<HashMap<String, String>> totalProductDetail=new ArrayList<HashMap<String, String>>(4);

        //Getting Category Details Starts Here
        Cursor cursor = null;
        ////open();
        if (flgReportFromTmpOrPermanent == 0) {
            cursor = db.rawQuery("Select Count(tblTmpInvoiceDetails.ProdID) from tblTmpInvoiceDetails Where  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.Sstat=" + DraftorNonSubmitted, null);
        }
        if (flgReportFromTmpOrPermanent == 1) {
            cursor = db.rawQuery("Select Count(tblInvoiceDetails.ProdID) from tblInvoiceDetails Where  (tblInvoiceDetails.OrderQty>0 or tblInvoiceDetails.FreeQty>0) and tblInvoiceDetails.Sstat=" + DraftorNonSubmitted, null);
        }
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    CountToDisplayDailySummaryDetailsSKUWise = Integer.parseInt(cursor.getString(0).toString());
                }
            }
            return CountToDisplayDailySummaryDetailsSKUWise;
        } finally {
            cursor.close();
            //close();
        }

    }

    public int fnCountToDisplayDailySummaryDetailsStoreSKUWise(int DraftorNonSubmitted, int flgReportFromTmpOrPermanent)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        int CountToDisplayDailySummaryDetailsSKUWise = 0;
        //ArrayList<HashMap<String, String>> totalProductDetail=new ArrayList<HashMap<String, String>>(4);

        //Getting Category Details Starts Here
        Cursor cursor = null;
        //open();
        if (flgReportFromTmpOrPermanent == 0) {
            cursor = db.rawQuery("Select Count(tblTmpInvoiceDetails.StoreID) from tblTmpInvoiceDetails Where  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.Sstat=" + DraftorNonSubmitted, null);
        }
        if (flgReportFromTmpOrPermanent == 1) {
            cursor = db.rawQuery("Select Count(tblInvoiceDetails.StoreID) from tblInvoiceDetails Where  (tblInvoiceDetails.OrderQty>0 or tblInvoiceDetails.FreeQty>0) and tblInvoiceDetails.Sstat=" + DraftorNonSubmitted, null);
        }
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    CountToDisplayDailySummaryDetailsSKUWise = Integer.parseInt(cursor.getString(0).toString());
                }
            }
            return CountToDisplayDailySummaryDetailsSKUWise;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }

    }

    @SuppressWarnings("unchecked")

    public LinkedHashMap<String, String> fnGetDailySummaryDetailsStoreSKUWiseLevel(int DraftorNonSubmitted, int flgReportFromTmpOrPermanent)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {

        //Getting Category Details Starts Here

        LinkedHashMap<String, String> hmapSKUWiseDailySummaryReport = new LinkedHashMap<String, String>();

        LinkedHashMap<String, String> hmapGrandTotalCategorySKUWiseDailySummaryReport = new LinkedHashMap<String, String>();

        String CompleteResult[] = null;

        String strGrandTotalDiscValue = "";
        String strGrandTotalAmountBeforeTax = "";
        String strGrandTotalTaxValue = "";
        String strGrandTotalOrderValue = "";
        Cursor cursor = null;
        //open();
        // or tblTmpInvoiceDetails.Stock>0
        if (flgReportFromTmpOrPermanent == 0) {
            cursor = db.rawQuery("Select tblTmpInvoiceDetails.StoreID,tblStoreList.StoreName,1 AS FlgRowType from  tblTmpInvoiceDetails inner join tblStoreList on  tblTmpInvoiceDetails.StoreID=tblStoreList.StoreID Where  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.Sstat=" + DraftorNonSubmitted + " Group By tblTmpInvoiceDetails.StoreID,tblStoreList.StoreName", null);
        }
        if (flgReportFromTmpOrPermanent == 1) {
            cursor = db.rawQuery("Select tblInvoiceDetails.StoreID,tblStoreList.StoreName,1 AS FlgRowType from  tblInvoiceDetails inner join tblStoreList on  tblInvoiceDetails.StoreID=tblStoreList.StoreID inner join tblStoreVisitMstr on tblStoreList.StoreID=tblStoreVisitMstr.StoreID Where  (tblInvoiceDetails.OrderQty>0 or tblInvoiceDetails.FreeQty>0) and tblStoreVisitMstr.Sstat=" + DraftorNonSubmitted + " Group By tblInvoiceDetails.StoreID,tblStoreList.StoreName", null);
        }
        try {
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        int StoreCatNodeId = fnGetStoreCatNodeId(cursor.getString(0).toString());
                        ArrayList<Object> arrProductDailySummaryKUWiseReportWithCategory = fnGetDailySummaryDetailsStoreSKUWiseProductLevel(cursor.getString(0).toString(), DraftorNonSubmitted, StoreCatNodeId, flgReportFromTmpOrPermanent);
                        if (arrProductDailySummaryKUWiseReportWithCategory.size() > 0) {
                            String strStoreSKUDiscValue = (String) arrProductDailySummaryKUWiseReportWithCategory.get(0);
                            String strStoreSKUAmountBeforeTax = (String) arrProductDailySummaryKUWiseReportWithCategory.get(1);
                            String strStoreSKUTaxValue = (String) arrProductDailySummaryKUWiseReportWithCategory.get(2);
                            String strStoreSKUOrderValue = (String) arrProductDailySummaryKUWiseReportWithCategory.get(3);

                            if (strGrandTotalDiscValue.equals("")) {
                                strGrandTotalDiscValue = "" + Double.parseDouble(strStoreSKUDiscValue);
                            } else {
                                strGrandTotalDiscValue = "" + (Double.parseDouble(strGrandTotalDiscValue) + Double.parseDouble(strStoreSKUDiscValue));
                            }
                            if (strGrandTotalAmountBeforeTax.equals("")) {
                                strGrandTotalAmountBeforeTax = "" + Double.parseDouble(strStoreSKUAmountBeforeTax);
                            } else {
                                strGrandTotalAmountBeforeTax = "" + (Double.parseDouble(strGrandTotalAmountBeforeTax) + Double.parseDouble(strStoreSKUAmountBeforeTax));
                            }
                            if (strGrandTotalTaxValue.equals("")) {
                                strGrandTotalTaxValue = "" + Double.parseDouble(strStoreSKUTaxValue);
                            } else {
                                strGrandTotalTaxValue = "" + (Double.parseDouble(strGrandTotalTaxValue) + Double.parseDouble(strStoreSKUTaxValue));
                            }
                            if (strGrandTotalOrderValue.equals("")) {
                                strGrandTotalOrderValue = "" + Double.parseDouble(strStoreSKUOrderValue);
                            } else {
                                strGrandTotalOrderValue = "" + (Double.parseDouble(strGrandTotalOrderValue) + Double.parseDouble(strStoreSKUOrderValue));
                            }
                            LinkedHashMap<String, String> hmapSkuLevelRows = new LinkedHashMap<String, String>();
                            hmapSkuLevelRows = (LinkedHashMap<String, String>) arrProductDailySummaryKUWiseReportWithCategory.get(4);
                            hmapSKUWiseDailySummaryReport.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString() + "^" + "0" + "^" + "0" + "^" + "0" + "^" + "0" + "^" + "0" + "^" + strStoreSKUDiscValue + "^" + strStoreSKUAmountBeforeTax + "^" + strStoreSKUTaxValue + "^" + strStoreSKUOrderValue + "^" + (String) cursor.getString(2).toString());
                            hmapSKUWiseDailySummaryReport.putAll(hmapSkuLevelRows);
                            if (i == cursor.getCount() - 1) {
                                hmapGrandTotalCategorySKUWiseDailySummaryReport.put("0", "GRAND TOTAL :" + "^" + "0" + "^" + "0" + "^" + "0" + "^" + "0" + "^" + "0" + "^" + strGrandTotalDiscValue + "^" + strGrandTotalAmountBeforeTax + "^" + strGrandTotalTaxValue + "^" + strGrandTotalOrderValue + "^0");
                                hmapGrandTotalCategorySKUWiseDailySummaryReport.putAll(hmapSKUWiseDailySummaryReport);


                            }

                        }

                        cursor.moveToNext();
                    }
                }

            }


            return hmapGrandTotalCategorySKUWiseDailySummaryReport;

        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }
        //Getting Category Details Ends Here
    }

    @SuppressWarnings("unchecked")

    public ArrayList<Object> fnGetDailySummaryDetailsStoreSKUWiseProductLevel(String StoreID, int DraftorNonSubmitted, int StoreCatNodeId, int flgReportFromTmpOrPermanent)//DraftorNonSubmitted=3:-Submited But Not Synced,DraftorNonSubmitted=1:-Saved as Draft
    {
        ArrayList<Object> totalProductCategoryWiseResult = new ArrayList<Object>(4);
        Cursor cursorSKUPrd = null;
        //Cursor cursorSKUPrd = db.rawQuery("Select tblTmpInvoiceDetails.ProdID AS PID,tblProductListMaster.ProductShortName As ProdShortName,tblProductListMaster.ProductMRP As PMRP,tblTmpInvoiceDetails.ProductPrice As PSRate,tblTmpInvoiceDetails.Stock as Stock,tblTmpInvoiceDetails.OrderQty as OrderQty,tblTmpInvoiceDetails.FreeQty AS FreeQty,tblTmpInvoiceDetails.DisVal As DisVal,(Cast(tblTmpInvoiceDetails.OrderVal As Real)-Cast(tblTmpInvoiceDetails.TaxValue As Real)) As AmtBeforeTax,tblTmpInvoiceDetails.TaxValue As TaxValue,tblTmpInvoiceDetails.OrderVal As OrderVal,2 AS FlgRowType  from tblTmpInvoiceDetails inner join tblProductListMaster on tblTmpInvoiceDetails.ProdID=tblProductListMaster.ProductID Where  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.StoreID='"+StoreID+"' and  tblTmpInvoiceDetails.Sstat="+DraftorNonSubmitted+" and tblTmpInvoiceDetails.StoreCatNodeId="+StoreCatNodeId+" and tblProductListMaster.StoreCatNodeId="+StoreCatNodeId+"  Group By tblTmpInvoiceDetails.ProdID,tblProductListMaster.ProductShortName,tblProductListMaster.ProductMRP,tblProductListMaster.StandardRate Order by PrdOrdr", null);
        //Cursor cursorSKUPrd = db.rawQuery("Select tblTmpInvoiceDetails.ProdID AS PID,tblProductListMaster.ProductShortName As ProdShortName,tblProductSegementMap.ProductMRP As PMRP,tblTmpInvoiceDetails.ProductPrice As PSRate,tblTmpInvoiceDetails.Stock as Stock,tblTmpInvoiceDetails.OrderQty as OrderQty,tblTmpInvoiceDetails.FreeQty AS FreeQty,tblTmpInvoiceDetails.DisVal As DisVal,(Cast(tblTmpInvoiceDetails.OrderVal As Real)-Cast(tblTmpInvoiceDetails.TaxValue As Real)) As AmtBeforeTax,tblTmpInvoiceDetails.TaxValue As TaxValue,tblTmpInvoiceDetails.OrderVal As OrderVal,2 AS FlgRowType  from tblTmpInvoiceDetails inner join tblProductListMaster on tblTmpInvoiceDetails.ProdID=tblProductListMaster.ProductID inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID Where  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.StoreID='"+StoreID+"' and  tblTmpInvoiceDetails.Sstat="+DraftorNonSubmitted+" and tblTmpInvoiceDetails.StoreCatNodeId="+StoreCatNodeId+" and tblProductListMaster.StoreCatNodeId="+StoreCatNodeId+" Group By tblTmpInvoiceDetails.ProdID,tblProductListMaster.ProductShortName,tblProductSegementMap.ProductMRP,tblProductSegementMap.StandardRate Order by PrdOrdr", null);

        if (flgReportFromTmpOrPermanent == 0) {
            cursorSKUPrd = db.rawQuery("Select tblTmpInvoiceDetails.ProdID AS PID,tblProductListMaster.ProductShortName As ProdShortName,((Sum(Cast(tblTmpInvoiceDetails.LineValAftrTxAftrDscnt As Real)))/Sum(tblTmpInvoiceDetails.OrderQty)) As PMRP,tblTmpInvoiceDetails.ProductPrice As PSRate,0 as Stock,tblTmpInvoiceDetails.OrderQty as OrderQty,tblTmpInvoiceDetails.FreeQty AS FreeQty,tblTmpInvoiceDetails.DisVal As DisVal,(Cast(tblTmpInvoiceDetails.LineValAftrTxAftrDscnt As Real)-Cast(tblTmpInvoiceDetails.TaxValue As Real)) As AmtBeforeTax,tblTmpInvoiceDetails.TaxValue As TaxValue,tblTmpInvoiceDetails.LineValAftrTxAftrDscnt As OrderVal,2 AS FlgRowType  from tblTmpInvoiceDetails inner join tblProductListMaster on tblTmpInvoiceDetails.ProdID=tblProductListMaster.ProductID Where  (tblTmpInvoiceDetails.OrderQty>0 or tblTmpInvoiceDetails.FreeQty>0) and tblTmpInvoiceDetails.StoreID='" + StoreID + "' and  tblTmpInvoiceDetails.Sstat=" + DraftorNonSubmitted + "  Group By tblTmpInvoiceDetails.ProdID,tblProductListMaster.ProductShortName Order by PrdOrdr", null);
        }
        if (flgReportFromTmpOrPermanent == 1) {
            cursorSKUPrd = db.rawQuery("Select tblInvoiceDetails.ProdID AS PID,tblProductListMaster.ProductShortName As ProdShortName,((Sum(Cast(tblInvoiceDetails.LineValAftrTxAftrDscnt As Real)))/Sum(tblInvoiceDetails.OrderQty)) As PMRP,tblInvoiceDetails.ProductPrice As PSRate,0 as Stock,tblInvoiceDetails.OrderQty as OrderQty,tblInvoiceDetails.FreeQty AS FreeQty,tblInvoiceDetails.DisVal As DisVal,(Cast(tblInvoiceDetails.LineValAftrTxAftrDscnt As Real)-Cast(tblInvoiceDetails.TaxValue As Real)) As AmtBeforeTax,tblInvoiceDetails.TaxValue As TaxValue,tblInvoiceDetails.LineValAftrTxAftrDscnt As OrderVal,2 AS FlgRowType  from tblInvoiceDetails inner join tblProductListMaster on tblInvoiceDetails.ProdID=tblProductListMaster.ProductID Where  (tblInvoiceDetails.OrderQty>0 or tblInvoiceDetails.FreeQty>0) and tblInvoiceDetails.StoreID='" + StoreID + "' and  tblInvoiceDetails.Sstat=" + DraftorNonSubmitted + "  Group By tblInvoiceDetails.ProdID,tblProductListMaster.ProductShortName Order by PrdOrdr", null);
        }
        try {
            //hmapCtgryDetails= key=CategoryId,val=CategoryDescr
            LinkedHashMap<String, String> hmapPrdRowDetails = new LinkedHashMap<String, String>();
            String strCatDiscValue = "";
            String strCatAmountBeforeTax = "";
            String strCatTaxValue = "";
            String strCatOrderValue = "";
            if (cursorSKUPrd.getCount() > 0) {
                if (cursorSKUPrd.moveToFirst()) {
                    for (int i = 0; i <= (cursorSKUPrd.getCount() - 1); i++) {


                        if (strCatDiscValue.equals("")) {
                            strCatDiscValue = "" + Double.parseDouble(cursorSKUPrd.getString(7).toString());
                        } else {
                            strCatDiscValue = "" + (Double.parseDouble(strCatDiscValue) + Double.parseDouble(cursorSKUPrd.getString(7).toString()));
                        }
                        if (strCatAmountBeforeTax.equals("")) {
                            strCatAmountBeforeTax = "" + Double.parseDouble(cursorSKUPrd.getString(8).toString());
                        } else {
                            strCatAmountBeforeTax = "" + (Double.parseDouble(strCatAmountBeforeTax) + Double.parseDouble(cursorSKUPrd.getString(8).toString()));
                        }
                        if (strCatTaxValue.equals("")) {
                            strCatTaxValue = "" + Double.parseDouble(cursorSKUPrd.getString(9).toString());
                        } else {
                            strCatTaxValue = "" + (Double.parseDouble(strCatTaxValue) + Double.parseDouble(cursorSKUPrd.getString(9).toString()));
                        }
                        if (strCatOrderValue.equals("")) {
                            strCatOrderValue = "" + Double.parseDouble(cursorSKUPrd.getString(10).toString());
                        } else {
                            strCatOrderValue = "" + (Double.parseDouble(strCatOrderValue) + Double.parseDouble(cursorSKUPrd.getString(10).toString()));
                        }

                        hmapPrdRowDetails.put(StoreID + "_" + (String) cursorSKUPrd.getString(0).toString(), (String) cursorSKUPrd.getString(1).toString() + "^" + (String) cursorSKUPrd.getString(2).toString() + "^" + (String) cursorSKUPrd.getString(3).toString() + "^" + (String) cursorSKUPrd.getString(4).toString() + "^" + (String) cursorSKUPrd.getString(5).toString() + "^" + (String) cursorSKUPrd.getString(6).toString() + "^" + (String) cursorSKUPrd.getString(7).toString() + "^" + (String) cursorSKUPrd.getString(8).toString() + "^" + (String) cursorSKUPrd.getString(9).toString() + "^" + (String) cursorSKUPrd.getString(10).toString() + "^" + (String) cursorSKUPrd.getString(11).toString());
                        cursorSKUPrd.moveToNext();
                    }
                }


                totalProductCategoryWiseResult.add(0, strCatDiscValue);
                totalProductCategoryWiseResult.add(1, strCatAmountBeforeTax);
                totalProductCategoryWiseResult.add(2, strCatTaxValue);
                totalProductCategoryWiseResult.add(3, strCatOrderValue);
                totalProductCategoryWiseResult.add(4, hmapPrdRowDetails);
            }


            return totalProductCategoryWiseResult;

        } finally {
            cursorSKUPrd.close();
            // close();
        }

    }

    public String[] getOrderedproductsOfBenSubBckt10(String storeId) {
        String[] productOrderedVal;
        //open();
        Cursor cursor = db.rawQuery("Select ProductID  from tblStoreProductAppliedSchemesBenifitsRecords where StoreID = '" + storeId + "' and BenSubBucketType =" + 10, null);

        if (cursor.getCount() > 0) {
            productOrderedVal = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {
                for (int i = 0; i < cursor.getCount(); i++) {
                    productOrderedVal[i] = cursor.getString(0);
                    cursor.moveToNext();
                }
            }
        } else {
            productOrderedVal = new String[1];
            productOrderedVal[0] = "No Product";
        }
        // close();

        return productOrderedVal;
    }

    public int CheckUserDoneGetStoreOrNot() {
        Cursor cursorE2 = null;
        int chkI = 0;

        try {
            //open();
            cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStoreList", null);

            if (cursorE2.moveToFirst()) {
                if (Integer.parseInt(cursorE2.getString(0)) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }
        return chkI;
    }

   /*public long savetblUserAuthenticationMstr(String flgUserAuthenticated,String PersonName,
                                              String FlgRegistered,String PersonNodeID,String PersonNodeType,
                                              String flgPersonTodaysAtt)
    {

        ContentValues initialValues = new ContentValues();

        initialValues.put("flgUserAuthenticated", flgUserAuthenticated.trim());
        initialValues.put("PersonName", PersonName.trim());
        initialValues.put("FlgRegistered", FlgRegistered.trim());
        initialValues.put("PersonNodeID", PersonNodeID.trim());
        initialValues.put("PersonNodeType", PersonNodeType.trim());
        initialValues.put("flgPersonTodaysAtt", flgPersonTodaysAtt.trim());



        // System.out.println("Data Insert in Table MAIN1User");

        return db.insert(TABLE_tblUserAuthenticationMstr_Define, null, initialValues);
    }*/

    public void droptblUserAuthenticationMstrTBL() {
        db.execSQL("DROP TABLE IF EXISTS tblUserAuthenticationMstr");


    }

    public void createtblUserAuthenticationMstrTBL() {
        try {
            db.execSQL(DBHelper.TABLE_tblUserAuthenticationMstr_Definition);

        } catch (Exception e) {

        }

    }

   /*public String fnGetPersonNameAndFlgRegistered()
    {
        String PersonNameAndFlgRegistered="0";
        //open();

        try {
            Cursor cursor = db.rawQuery("SELECT  PersonName,  FlgRegistered from tblUserAuthenticationMstr   ", null);// Where PNodeID='"+TSIID+"'
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        PersonNameAndFlgRegistered=(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString();

                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }

                }
            }

        }
        catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= "+e.toString());
        }
        finally
        {

            close();
            return PersonNameAndFlgRegistered;
        }
    }*/

    public long savetblUserAuthenticationMstr(String flgUserAuthenticated, String PersonName,
                                              String FlgRegistered, String flgAppStatus,
                                              String DisplayMessage, String flgValidApplication,
                                              String MessageForInvalid, String flgPersonTodaysAtt,
                                              int PersonNodeID, int PersonNodeType,
                                              String ContactNo, String DOB, String SelfieName,
                                              String SelfieNameURL, String SalesAreaName, int CoverageNodeId, int CoverageNodeType, int FlgToShowAllRoutesData, int flgDrctslsIndrctSls) {

        db.delete(DBHelper.TABLE_tblUserAuthenticationMstr_Define, null, null);

        ContentValues initialValues = new ContentValues();

        initialValues.put("flgUserAuthenticated", flgUserAuthenticated.trim());
        initialValues.put("PersonName", PersonName.trim());
        initialValues.put("FlgRegistered", FlgRegistered.trim());
        //  initialValues.put("flgAppStatus", flgAppStatus.trim());
        //  initialValues.put("DisplayMessage", DisplayMessage.trim());
        //  initialValues.put("flgValidApplication", flgValidApplication.trim());
        // initialValues.put("MessageForInvalid", MessageForInvalid.trim());
        initialValues.put("flgPersonTodaysAtt", flgPersonTodaysAtt.trim());
        initialValues.put("PersonNodeID", PersonNodeID);
        initialValues.put("PersonNodeType", PersonNodeType);
        initialValues.put("flgToShowAllRoutesData", FlgToShowAllRoutesData);
//flgToShowAllRoutesData
        initialValues.put("ContactNo", ContactNo.trim());
        initialValues.put("DOB", DOB.trim());
        initialValues.put("SelfieName", SelfieName.trim());
        initialValues.put("SelfieNameURL", SelfieNameURL);
        initialValues.put("SalesAreaName", SalesAreaName);
        initialValues.put("CoverageNodeId", CoverageNodeId);
        initialValues.put("CoverageNodeType", CoverageNodeType);
        initialValues.put("flgDrctslsIndrctSls", flgDrctslsIndrctSls);
        initialValues.put("WorkingType", flgDrctslsIndrctSls);

        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));
        initialValues.put("emailID","NA");

        return db.insert(DBHelper.TABLE_tblUserAuthenticationMstr_Define, null, initialValues);
    }

    public long savetblBloodGroup(String BloddGroups) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("BloddGroups", BloddGroups.trim());

        // System.out.println("Data Insert in Table MAIN1User");

        return db.insert(DBHelper.TABLE_tblBloodGroup_Define, null, initialValues);
    }

    public LinkedHashMap<String, String> fnGettblBloodGroup() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();

        try {
            Cursor cursor = db.rawQuery("SELECT BloddGroups from tblBloodGroup   ", null);// Where PNodeID='"+TSIID+"'
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(0).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            //close();
            return hmapQuestionMstr;
        }
    }

    public String fnGetPersonNameAndFlgRegistered() {
        String PersonNameAndFlgRegistered = "0";
        // open();

        try {


            Cursor cursor = db.rawQuery("SELECT  PersonName,FlgRegistered,ContactNo,DOB,SelfieName,ifnull(SelfieNameURL,'NA'),SalesAreaName,PersonNodeID,PersonNodeType,emailID from tblUserAuthenticationMstr   ", null);// Where PNodeID='"+TSIID+"'
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        PersonNameAndFlgRegistered = (String) cursor.getString(0).toString() + "^" + (String) cursor.getString(1).toString() + "^" + (String) cursor.getString(2).toString() + "^" + (String) cursor.getString(3).toString() + "^" + (String) cursor.getString(4).toString() + "^" + (String) cursor.getString(5).toString() + "^" + (String) cursor.getString(6).toString() + "^" + (String) cursor.getString(7).toString() + "^" + (String) cursor.getString(8).toString() + "^" + (String) cursor.getString(9).toString();

                        cursor.moveToNext();
                    }

                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            //close();
            return PersonNameAndFlgRegistered;
        }
    }

    public String fnGettblUserRegistarationStatus() {
        String PersonNameAndFlgRegistered = "0";
        //open();

        try {
            Cursor cursor = db.rawQuery("SELECT  Flag,  MsgToDisplay from tblUserRegistarationStatus   ", null);// Where PNodeID='"+TSIID+"'
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        String msg = (String) cursor.getString(1).toString();
                        if (msg.trim().equals("")) {
                            msg = "0";
                        }
                        PersonNameAndFlgRegistered = (String) cursor.getString(0).toString() + "^" + msg;

                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }

                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();
            return PersonNameAndFlgRegistered;
        }
    }

    public long savetblEducationQuali(String Qualification) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("Qualification", Qualification.trim());
        // System.out.println("Data Insert in Table MAIN1User");
        return db.insert(DBHelper.TABLE_tblEducationQuali, null, initialValues);
    }

    public int fngetcounttblDsrRegDetails() {
        int flgCheck = 0;
        //open();

        try {
            Cursor cursor = db.rawQuery("SELECT Count(*) from tblDsrRegDetails  ", null);
            //StoreID,StoreName,LatCode,LongCode,DateAdded
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        flgCheck = 1;
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();
            return flgCheck;
        }
    }

    public LinkedHashMap<String, String> fnGettblDsrRegDetails() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();

        try {                                   //0             1                         2                      3                         4           5             6              7                         8                9                           10                    11                12                   13                 14                 15                        16           17                      18
            Cursor cursor = db.rawQuery("SELECT IFNULL(IMEI,0),IFNULL(ClickedDateTime,0),IFNULL(FirstName,0),IFNULL(LastName,0),IFNULL(ContactNo,0),IFNULL(DOB,0),IFNULL(Sex,0),IFNULL(MaritalStatus,0),IFNULL(MarriedDate,0),IFNULL(Qualification,0),IFNULL(SelfieName,0),IFNULL(SelfiePath,0),IFNULL(EmailID,0),IFNULL(BloodGroup,0),IFNULL(SignName,0),IFNULL(SignPath,0),IFNULL(PhotoName,0),IFNULL(PersonNodeId,0),IFNULL(PersonNodeType,0) from tblDsrRegDetails   ", null);// Where PNodeID='"+TSIID+"'
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put("DSRDETAILS", (String) cursor.getString(0).toString() + "^" + (String) cursor.getString(1).toString() + "^" + (String) cursor.getString(2).toString() + "^" + (String) cursor.getString(3).toString() + "^" + (String) cursor.getString(4).toString() + "^" + (String) cursor.getString(5).toString() + "^" + (String) cursor.getString(6).toString() + "^" + (String) cursor.getString(7).toString() + "^" + (String) cursor.getString(8).toString() + "^" + (String) cursor.getString(9).toString() + "^" + (String) cursor.getString(10).toString() + "^" + (String) cursor.getString(11).toString() + "^" + (String) cursor.getString(12).toString() + "^" + (String) cursor.getString(13).toString() + "^" + (String) cursor.getString(14).toString() + "^" + (String) cursor.getString(15).toString() + "^" + (String) cursor.getString(16).toString() + "^" + (String) cursor.getString(17).toString() + "^" + (String) cursor.getString(18).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();
            return hmapQuestionMstr;
        }
    }

    public LinkedHashMap<String, String> fnGettblEducationQuali() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();

        try {
            Cursor cursor = db.rawQuery("SELECT Qualification from tblEducationQuali   ", null);// Where PNodeID='"+TSIID+"'
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(0).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            //  close();
            return hmapQuestionMstr;
        }
    }

    public int FetchflgUserAuthenticated() {
        int SnamecolumnIndex1 = 0;
        int CatId = 0;

        Cursor cursor = db.rawQuery("SELECT flgUserAuthenticated from tblUserAuthenticationMstr", null);
        try {

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    String abc = (String) cursor.getString(SnamecolumnIndex1).toString();
                    CatId = Integer.parseInt(abc);
                    cursor.moveToNext();
                }

            }
            return CatId;
        } finally {
            cursor.close();
        }

    }

    public boolean isFreeProductIdExist(int freeProductId) {


        //open();
        Cursor cur = db.rawQuery("Select ProductID from tblStoreProductAppliedSchemesBenifitsRecords where freeProductId =" + freeProductId, null);
        try {


            if (cur.getCount() > 0) {
                return true;
            } else {
                return false;
            }
        } finally {
            cur.close();
            // close();

        }


    }

    public String getFreeProductIdAgainstFreeProductId(int freeProductId) {

        String productIdAgainstFreeProductId = null;
        //open();
        Cursor cur = db.rawQuery("Select ProductID from tblStoreProductAppliedSchemesBenifitsRecords where freeProductId =" + freeProductId, null);
        try {


            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    productIdAgainstFreeProductId = cur.getString(0);
                }

            } else {
                productIdAgainstFreeProductId = "";
            }
        } finally {
            cur.close();
            // close();

        }

        return productIdAgainstFreeProductId;

    }

    public String[] fectStatusIfBeniftRowIdExistsInSchemeSlabBenefitsValueDetailWithoutMultiply(int BenifitRowID, int toMultiply, Double defaultValue, int BenSubBucketType) {

        //open();
        Cursor cursor2 = db.rawQuery("SELECT BenValue FROM tblSchemeSlabBenefitsValueDetail where RowID=" + BenifitRowID, null);
        if (BenSubBucketType == 2 || BenSubBucketType == 6 || BenSubBucketType == 8) {
            toMultiply = 1;
        }
        //////////// System.out.println("SELECT Sum(flgIsStrachApplicable) FROM tblStrachApplicableOnScheme");
        String[] chkI;
        try {
            if (cursor2.getCount() > 0) {
                chkI = new String[cursor2.getCount() + 1];
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (i == 0) {
                            chkI[i] = String.valueOf(defaultValue);

                        }

                        chkI[i + 1] = String.valueOf((Integer.parseInt(cursor2.getString(0))));

                        cursor2.moveToNext();
                    }

                }
            } else {
                chkI = new String[1];
                chkI[0] = String.valueOf(defaultValue);
            }

        } finally {
            cursor2.close();
            // close();
        }
        //////////// System.out.println("fnCheckflgToShowStrachRowOrNot : " +chkI);
        return chkI;
    }

    public void deleteAlrtProduct(String storeId, String _productID) {
        //open();
        Cursor cur = db.rawQuery("Select ProductID from tblAlrtVal where StoreId ='" + storeId + "' and ProductID = '" + _productID + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.DATABASE_TABLE_Main214, "StoreID=? AND ProductID=? ", new String[]{storeId, _productID});
        }

        // close();
    }

    public int checkStoreListTableCount() {

        Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblStoreList ", null);

        try {

            int check = 0;

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    check = cursor.getCount();
			                 /* for (int i = 0; i <= (cursor.getCount() - 1); i++)
								{
									check=1;
									cursor.moveToNext();
								}*/
                }

            }
            return check;

        } finally {
            cursor.close();
        }

    }

    public void deletetblStoreTypeMstr() {
        db.execSQL("DELETE FROM tblStoreTypeMstr");
    }

    public void deletetblTradeChannelMstr() {
        db.execSQL("DELETE FROM tblTradeChannelMstr");
    }

    public void deletetblDayStartAttendanceOptions() {
        db.execSQL("DELETE FROM tblDayStartAttendanceOptions");
    }

    public void deletetblStoreProductClassificationTypeListMstr() {
        db.execSQL("DELETE FROM tblStoreProductClassificationTypeListMstr");
    }

    public void updatetblAvailableVersionMstr(String ServerDate) {


        db.execSQL("Update tblAvailableVersion Set  ServerDate='" + ServerDate + "'");

    }

    public int checkRouteIDExistInStoreListTable() {
        int check = 0;
        Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblInvoiceButtonTransac WHERE Sstat=9", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        check = 1;
                    }
                }
            }
            return check;
        } finally {
            cursor.close();
        }

    }

    public long savetblOutletChannelBusinessSegmentMaster(int OutChannelID, String ChannelName, int BusinessSegmentID, String BusinessSegment) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("OutChannelID", OutChannelID);
        initialValues.put("ChannelName", ChannelName);

        initialValues.put("BusinessSegmentID", BusinessSegmentID);
        initialValues.put("BusinessSegment", BusinessSegment);

        return db.insert(DBHelper.TABLE_OutletChannelBusinessSegmentMaster, null, initialValues);
    }

    public StringBuilder fnQuestionIdOnBasisOfDependentQuestionIDdpndntId(String dpndntQuesId, String optionId) {

        String value;
        //open();
        //tblGetPDAQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";
        Cursor cursor = db.rawQuery("SELECT GrpID from tblGetPDAQuestionDependentMstr where GrpDepQuestID = '" + dpndntQuesId + "' And OptionID = '" + optionId + "'", null);// Where PNodeID='"+TSIID+"'
        StringBuilder arrbhi = new StringBuilder();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        // hmapDpndntQuestionMstr.put((String) cursor.getString(3).toString()+"^"+(String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
                        if (i == 0) {
                            arrbhi.append(cursor.getString(0).toString());
                        } else {
                            arrbhi.append("^").append(cursor.getString(0).toString());
                        }

                        cursor.moveToNext();
                    }
                }
            }

            return arrbhi;
        } finally {
            cursor.close();
            // close();
        }
    }


		  	/*public static long savetblGetPDAQuestMstr(String QuestID,String QuestCode,String QuestDesc,String QuestType,String AnsControlType,String AnsControlInputTypeID,String AnsControlInputTypeMaxLength,String AnsMustRequiredFlg,String QuestBundleFlg,String ApplicationTypeID,String Sequence,String AnsControlInputTypeMinLength,int flgQuestIDForOutChannel)
		    {

		         ContentValues initialValues = new ContentValues();

		         initialValues.put("QuestCode", Integer.parseInt(QuestCode));
		         initialValues.put("QuestID", Integer.parseInt(QuestID));

		         initialValues.put("QuestDesc", QuestDesc.trim());
		         initialValues.put("QuestType", Integer.parseInt(QuestType));
		         initialValues.put("AnsControlType", Integer.parseInt(AnsControlType));
		         initialValues.put("AnsControlInputTypeID", Integer.parseInt(AnsControlInputTypeID));
		         initialValues.put("AnsControlInputTypeMaxLength", Integer.parseInt(AnsControlInputTypeMaxLength));
		         initialValues.put("AnsMustRequiredFlg", Integer.parseInt(AnsMustRequiredFlg));
		         initialValues.put("QuestBundleFlg", Integer.parseInt(QuestBundleFlg));
		         initialValues.put("ApplicationTypeID", Integer.parseInt(ApplicationTypeID));
		         initialValues.put("Sequence", Integer.parseInt(Sequence));//AnsControlInputTypeMinLength
		         initialValues.put("flgQuestIDForOutChannel", flgQuestIDForOutChannel);
		        // initialValues.put("AnsControlInputTypeMinLength", Integer.parseInt(AnsControlInputTypeMinLength));


		      return db.insert(TABLE_QuestionMstr, null, initialValues);
		    }*/

    public String[] fnQuestionIdDpndnt() {

        String value;
        //open();

        Cursor cursor = db.rawQuery("SELECT QuestionID from tblGetPDAQuestionDependentMstr", null);// Where PNodeID='"+TSIID+"'
        String[] arrbhi = new String[cursor.getCount()];
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        // hmapDpndntQuestionMstr.put((String) cursor.getString(3).toString()+"^"+(String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
                        arrbhi[i] = (cursor.getString(0).toString());


                        cursor.moveToNext();
                    }
                }
            }

            return arrbhi;
        } finally {
            cursor.close();
            //close();
        }
    }

    public int fnGetAnsValFromOptionID(int optionID) {
        //open();
        int AnsVal = 0;
        Cursor cursor = db.rawQuery("SELECT tblGetPDAQuestOptionMstr.OptionNo from tblGetPDAQuestOptionMstr Where tblGetPDAQuestOptionMstr.OptID='" + optionID + "'", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    AnsVal = Integer.parseInt(cursor.getString(0).toString());
                }
            }
            return AnsVal;
        } finally {
            cursor.close();
            //close();
        }
    }

    public void saveOutletQuestAnsMstr(ArrayList<ArrayList<String>> outletQuestAnsVal) {

        //open();

        String OutletID, QuestID, AnswerType, AnswerValue;
        for (int i = 0; i < outletQuestAnsVal.size(); i++) {
            ArrayList<String> outletsDetailValue = outletQuestAnsVal.get(i);

            OutletID = outletsDetailValue.get(0);
            QuestID = outletsDetailValue.get(1);
            AnswerType = outletsDetailValue.get(2);
            AnswerValue = outletsDetailValue.get(3);

            Cursor cursor = db.rawQuery("SELECT OutletID FROM tblOutletQuestAnsMstr where OutletID='" + OutletID + "' and QuestID ='" + QuestID + "'", null);
            ContentValues initialValues = new ContentValues();
            System.out.println("SavingPartCompleted =" + OutletID + ":" + QuestID + ":" + AnswerType + ":" + AnswerValue);

            initialValues.put("AnswerType", Integer.parseInt(AnswerType));


            initialValues.put("AnswerValue", AnswerValue.trim());
            initialValues.put("Sstat", 1);


            if (cursor.getCount() > 0) {

                int affected = db.update("tblOutletQuestAnsMstr", initialValues, "OutletID=? AND QuestID=?",
                        new String[]{OutletID.toString().trim(), QuestID.toString().trim()});
            } else {

                initialValues.put("QuestID", Integer.parseInt(QuestID));
                initialValues.put("OutletID", OutletID.toString().trim());

                db.insert(DBHelper.TABLE_OutletQuestAnsMstr, null, initialValues);
            }


        }

        // close();

    }

    public void saveViewOutletQuestAnsMstr(ArrayList<ArrayList<String>> outletQuestAnsVal) {

        //open();

        String OutletID, QuestID, AnswerType, AnswerValue;
        for (int i = 0; i < outletQuestAnsVal.size(); i++) {
            ArrayList<String> outletsDetailValue = outletQuestAnsVal.get(i);

            OutletID = outletsDetailValue.get(0);
            QuestID = outletsDetailValue.get(1);
            AnswerType = outletsDetailValue.get(2);
            AnswerValue = outletsDetailValue.get(3);
            Cursor cursor = db.rawQuery("SELECT OutletID FROM tblViewOutletQuestAnsMstr where OutletID='" + OutletID + "' and QuestID ='" + QuestID + "'", null);
            ContentValues initialValues = new ContentValues();
            System.out.println("SavingPartCompleted =" + OutletID + ":" + QuestID + ":" + AnswerType + ":" + AnswerValue);


            initialValues.put("AnswerType", Integer.parseInt(AnswerType));


            initialValues.put("AnswerValue", AnswerValue.trim());

            if (cursor.getCount() > 0) {

                int affected = db.update("tblViewOutletQuestAnsMstr", initialValues, "OutletID=? AND QuestID=?",
                        new String[]{OutletID.toString().trim(), QuestID.toString().trim()});
            } else {
                initialValues.put("QuestID", Integer.parseInt(QuestID));
                initialValues.put("OutletID", OutletID.toString().trim());

                db.insert(DBHelper.TABLE_ViewOutletQuestAnsMstr, null, initialValues);
            }


        }

        // close();

    }

    public void saveViewOutletNameAndId(String outletId, String outletName) {

        //open();


        Cursor cursor = db.rawQuery("SELECT OutletID FROM tblViewOutletNameAndId where OutletID='" + outletId + "'", null);
        ContentValues initialValues = new ContentValues();


        initialValues.put("OutletName", outletName.toString().trim());


        if (cursor.getCount() > 0) {
            int affected = db.update("tblViewOutletNameAndId", initialValues, "OutletID=?",
                    new String[]{outletId.toString().trim()});
        } else {
            initialValues.put("OutletID", outletId.toString().trim());
            db.insert(DBHelper.TABLE_ViewOutletNameAndId, null, initialValues);
        }


        //  close();

    }


    //

    public LinkedHashMap<String, String> getAllNewAddedStoreName() {
        LinkedHashMap<String, String> lnkdHmapAllNewAddedStore = new LinkedHashMap<String, String>();

        //open();

        Cursor cur = db.rawQuery("Select * from tblViewOutletNameAndId", null);
        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                for (int i = 0; i < cur.getCount(); i++) {
                    lnkdHmapAllNewAddedStore.put(cur.getString(0), cur.getString(1));
                    cur.moveToNext();
                }
            }
        }
        // close();
        return lnkdHmapAllNewAddedStore;
    }

    public LinkedHashMap<String, String> getAllQuesSavedForOutlet(String outletId) {
        LinkedHashMap<String, String> lnkdHmapAllQuesSavedForOutlet = new LinkedHashMap<String, String>();

        //open();

        Cursor cur = db.rawQuery("Select * from tblViewOutletQuestAnsMstr where OutletID = '" + outletId + "'", null);
        if (cur.getCount() > 0) {
//OutletID ,QuestID ,AnswerType , AnswerValue );";
            if (cur.moveToFirst()) {
                for (int i = 0; i < cur.getCount(); i++) {
                    lnkdHmapAllQuesSavedForOutlet.put(cur.getString(1) + "^" + cur.getString(2), cur.getString(3));
                    cur.moveToNext();
                }
            }
        }
        //  close();
        return lnkdHmapAllQuesSavedForOutlet;
    }

    public long savedataStoreList(String StoreID, String VisitDateTime, String ActualLatitude, String ActualLongitude, String LocProvider, String Accuracy, String BateryLeftStatus, String StoreName, int ISNewStore,
                                  int Sstat) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("OutletID", StoreID.trim());
        initialValues.put("VisitDateTime", VisitDateTime.trim());

        initialValues.put("ActualLatitude", ActualLatitude);
        initialValues.put("ActualLongitude", ActualLongitude);
        initialValues.put("LocProvider", LocProvider);
        initialValues.put("Accuracy", Accuracy);
        initialValues.put("BateryLeftStatus", BateryLeftStatus);
        initialValues.put("StoreName", StoreName.trim());
        initialValues.put("ISNewStore", ISNewStore);
        initialValues.put("Sstat", Sstat);

        ////System.out.println("inserting records in StoreList table..");

        return db.insert(DBHelper.DATABASE_CREATE_TABLE_tblOutletMstr, null, initialValues);
    }

    public String[] getStoreIDTblSelectedStoreIDinChangeRouteCaseStoreMapping() {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT DISTINCT(OutletID) FROM tblOutletPhotoDetail where Sstat=3", null);
        try {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    System.out.println("STORE ID 4 Pic: " + cursor.getString(SnamecolumnIndex1).toString());

                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }


			/*public void updateRecordsSyncd()
				{
				 try
					{

	                    final ContentValues values = new ContentValues();
						values.put("Sstat", "4");
						int affected = db.update("tblOutletMstr", values, "Sstat=?",
								new String[] { "3" });
						int affected2 = db.update("tblOutletQuestAnsMstr", values, "Sstat=?",
								new String[] { "3" });
						int affected3 = db.update("tblOutletPhotoDetail", values, "Sstat=?",
								new String[] { "3" });

					}
					catch (Exception ex)
					{

					}

				}*/

    public int getExistingPicNosStoreMapping(String OutId) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Count(OutletID) FROM tblOutletPhotoDetail where OutletID='" + OutId + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public String[] getImgsPath(String StoreID) {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT PhotoName FROM tblStoreMaterialPhotoDetail WHERE StoreID ='" + StoreID + "'", null);
        try {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1)
                            .toString();

                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public void updatexmlSyncdData() {
        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", "4");
            int affected = db.update("tblOutletMstr", values, "Sstat=?",
                    new String[]{"3"});
            int affected2 = db.update("tblOutletQuestAnsMstr", values, "Sstat=?",
                    new String[]{"3"});

        } catch (Exception ex) {

        }

    }


    public void fnUpdateContactNumberInAuthenticationMstr(String ContactNumber, String FirstName_string, String EmailID_string, String SelfieName_string, String SelfiePath_string) {
        try {
            final ContentValues values = new ContentValues();
            values.put("ContactNo",ContactNumber);
            values.put("PersonName",FirstName_string);
            values.put("emailID", EmailID_string);
            values.put("SelfieName", SelfieName_string);
            values.put("SelfiePath", SelfiePath_string);


            int affected = db.update(DBHelper.TABLE_tblUserAuthenticationMstr_Define, values, null,
                    null);

            Log.w(TAG, "Record(s) Updated..");

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }


			/* private static final String DATABASE_CREATE_TABLE_tblOutletMstr = "create table tblOutletMstr" +
			 		" (OutletID text not null,VisitDateTime string not null,Sstat integer not null,ActualLatitude text null," +
			 		" ActualLongitude text null, ISNewStore int null, LocProvider text null, Accuracy text null," +
			 		" BateryLeftStatus text null,String StoreName);";
			 */

    public void updatePhotoSyncdData() {
        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", "4");
            int affected3 = db.update("tblOutletPhotoDetail", values, "Sstat=?",
                    new String[]{"3"});

        } catch (Exception ex) {

        }

    }


				/*private static final String DATABASE_CREATE_TABLE_OutletPhotoDetail = "create table tblOutletPhotoDetail" +
						"(OutletID text null,ClickedDateTime text null,PhotoName text null,PhotoComment text null," +
						"PDAPhotoPath text null,Sstat integer null);";*/

    public void deletetblOutletPhotoDetailBasedOutletID(String OutletID) {
        //open();


        db.execSQL("DELETE FROM tblOutletPhotoDetail WHERE OutletID ='" + OutletID + "'");


        // close();
    }

    public long savetblOutletMstr(String OutletID, String VisitDateTime, String ActualLatitude,
                                  String ActualLongitude, String LocProvider, String Accuracy, String BateryLeftStatus, String StoreName,
                                  int ISNewStore, int Sstat) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("OutletID", OutletID);
        initialValues.put("VisitDateTime", VisitDateTime);

        initialValues.put("ActualLatitude", ActualLatitude);
        initialValues.put("ActualLongitude", ActualLongitude);
        initialValues.put("LocProvider", LocProvider);
        initialValues.put("Accuracy", Accuracy);
        initialValues.put("BateryLeftStatus", BateryLeftStatus);
        initialValues.put("StoreName", StoreName);
        initialValues.put("ISNewStore", ISNewStore);
        initialValues.put("Sstat", Sstat);


        return db.insert(DBHelper.TABLE_OutletMstr, null, initialValues);
    }

    public long insertPhotoDetail(String OutletID, String ClickedDateTime, String PhotoName,
                                  String PhotoComment, String PDAPhotoPath, int Sstat) {

        //open();
        ContentValues initialValues = new ContentValues();

        initialValues.put("OutletID", OutletID.trim());
        initialValues.put("ClickedDateTime", ClickedDateTime.trim());
        initialValues.put("PhotoName", PhotoName.trim());
        initialValues.put("PhotoComment", PhotoComment.trim());

        initialValues.put("PDAPhotoPath", PDAPhotoPath.trim());
        initialValues.put("Sstat", Sstat);

        long inserted = db.insert(DBHelper.TABLE_StoreProductPhotoDetail, null, initialValues);
        //   close();
        return inserted;
    }

    public String[] deletFromSDcCardPhotoValidationBasedSstat(String Sstat) {

        String[] imageNameToBeDeleted = null;
        //open();

        Cursor cursor = db.rawQuery("SELECT  PhotoName from tblStoreProductPhotoDetail where Sstat='" + Sstat + "'", null);
        try {
            if (cursor.getCount() > 0) {
                imageNameToBeDeleted = new String[cursor.getCount()];
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        imageNameToBeDeleted[i] = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }
            } else {
                imageNameToBeDeleted = new String[1];
                imageNameToBeDeleted[0] = "No Data";
            }
        } finally {
            cursor.close();
            //  close();
        }


        return imageNameToBeDeleted;
    }


				 /*private static final String DATABASE_CREATE_TABLE_tblOutletMstr = "create table tblOutletMstr " +
				 		"(OutletID text not null,VisitDateTime string not null,Sstat integer not null,ActualLatitude text null, " +
				 		"ActualLongitude text null, ISNewStore int null, LocProvider text null, Accuracy text null," +
				 		" BateryLeftStatus text null,String StoreName);";*/

    public String[] deletFromtableImageBasedSstat(String Sstat) {

        String[] imageNameToBeDeleted = null;
        //open();

        Cursor cursor = db.rawQuery("SELECT  imageName from tableImage where Sstat='" + Sstat + "'", null);
        try {
            if (cursor.getCount() > 0) {
                imageNameToBeDeleted = new String[cursor.getCount()];
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        imageNameToBeDeleted[i] = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }
            } else {
                imageNameToBeDeleted = new String[1];
                imageNameToBeDeleted[0] = "No Data";
            }
        } finally {
            cursor.close();
            // close();
        }


        return imageNameToBeDeleted;
    }

    public String[] deletFromSDcCardPhotoValidationNewStore(String OutletID) {

        String[] imageNameToBeDeleted = null;
        //open();

        Cursor cursor = db.rawQuery("SELECT  PhotoName from tblOutletPhotoDetail where OutletID='" + OutletID + "'", null);
        try {
            if (cursor.getCount() > 0) {
                imageNameToBeDeleted = new String[cursor.getCount()];
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        imageNameToBeDeleted[i] = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }
            } else {
                imageNameToBeDeleted = new String[1];
                imageNameToBeDeleted[0] = "No Data";
            }
        } finally {
            cursor.close();
            // close();
        }


        return imageNameToBeDeleted;
    }


    // static final String DATABASE_CREATE_TABLE_tblOutletMstr = "create table tblOutletMstr (OutletID text not null,VisitDateTime text not null,ActualLatitude text null, ActualLongitude text null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreName text null,imei text null, ISNewStore int null,Sstat integer not null);";

    public long inserttblOutletMstr(String OutletID, String VisitStartTS, String ActualLatitude,
                                    String ActualLongitude, String Accuracy, String LocProvider, String BateryLeftStatus, String StoreName,
                                    String imei, int ISNewStore, int Sstat, int AppVersion) {

        //open();
        ContentValues initialValues = new ContentValues();

        initialValues.put("OutletID", OutletID.trim());
        initialValues.put("VisitStartTS", VisitStartTS.trim());

        initialValues.put("ActualLatitude", ActualLatitude.trim());
        initialValues.put("ActualLongitude", ActualLongitude.trim());


        initialValues.put("Accuracy", Accuracy.trim());
        initialValues.put("LocProvider", LocProvider.trim());
        initialValues.put("BateryLeftStatus", BateryLeftStatus.trim());
        initialValues.put("StoreName", StoreName.trim());
        initialValues.put("imei", imei.trim());

        initialValues.put("ISNewStore", 1);
        initialValues.put("Sstat", Sstat);
        initialValues.put("AppVersion", AppVersion);

        System.out.println("Data insert in OutletMstr");

        long inserted = db.insert(DBHelper.TABLE_OutletMstr, null, initialValues);
        // close();
        return inserted;
    }

    public void UpdateStoreEndVisitNewStore(String OutletID, String VisitEndTS) { //open();
        final ContentValues values = new ContentValues();

        values.put("VisitEndTS", VisitEndTS);

        int affected = db.update("tblOutletMstr", values, "OutletID=? and VisitStartTS is not null",
                new String[]{OutletID});
        // close();

    }

    public int counttblContainNotSyncData(int Sstat) {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblOutletMstr WHERE Sstat =" + Sstat, null);
        int chkI = 0;
        try {

            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public int fetch_Store_invoiceCount() {

        //open();
        int invoiceCount = 0;


        Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblInvoiceHeader", null); //order by AutoIdOutlet Desc

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    invoiceCount = cursor.getCount();


                }
            }

            return invoiceCount;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }
    }




					/*private static final String DATABASE_CREATE_TABLE_253 = "create table tblNoVisitStoreDetails " +
							"(IMEI text null,CurDate text null,ReasonId text null,ReasonDescr text null,flgHasVisit " +
							"integer null,Sstat integer null);";*/

					/* private static final String DATABASE_CREATE_TABLE_253 = "create table tblNoVisitStoreDetails(IMEI text null,CurDate text null," +
					 		"ReasonId text null,ReasonDescr text null,flgHasVisit integer null,Sstat integer null);";*/

    public LinkedHashMap<String, String> fetch_StoreInvoiceWiseData_List() {
        int incoiceCount = fetch_Store_invoiceCount();

        //open();
        LinkedHashMap<String, String> hmapInvoiceCaptionPrefixAndSuffix = fetch_InvoiceCaptionPrefixAndSuffix();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();


        Cursor cursor = db.rawQuery("SELECT tblInvoiceHeader.StoreID, tblStoreList.StoreName,IFNULL(tblInvoiceHeader.InvoiceVal,0),tblInvoiceHeader.InvoiceNumber FROM tblInvoiceHeader inner join tblStoreList on tblInvoiceHeader.StoreID=tblStoreList.StoreID WHERE tblInvoiceHeader.StoreID=tblStoreList.StoreID AND  tblInvoiceHeader.Sstat=3 OR tblInvoiceHeader.Sstat=4 OR tblInvoiceHeader.Sstat=5 OR tblInvoiceHeader.Sstat=6", null); //order by AutoIdOutlet Desc

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapCatgry.put((i + 1) + ")  " + cursor.getString(1).toString() + " [ Invoice Number:->" + hmapInvoiceCaptionPrefixAndSuffix.get("INVPrefix") + "-" + cursor.getString(3).toString() + "/" + hmapInvoiceCaptionPrefixAndSuffix.get("INVSuffix") + " ]" + " [ Invoice Value:->" + cursor.getString(2).toString() + " ]", cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }
            } else {
                hmapCatgry.put("No Submitted Invoices", "0");
            }
            return hmapCatgry;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }
    }

    public long savetblMessageTextFileContainer(String FileName, int FileFlag) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("FileName", FileName);
        initialValues.put("FileFlag", FileFlag);

        System.out.println("inserting records in DATABASE_CREATE_TABLE_2..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN251, null, initialValues);
    }

    public long savetblNoVisitStoreDetails(String IMEI, String CurDate, String ReasonId, String ReasonDescr, int flgHasVisit, int Sstat) {
        //open();

        ContentValues initialValues = new ContentValues();

        initialValues.put("IMEI", IMEI);
        initialValues.put("CurDate", CurDate);
        initialValues.put("ReasonId", ReasonId);
        initialValues.put("ReasonDescr", ReasonDescr);
        initialValues.put("flgHasVisit", flgHasVisit);
        initialValues.put("Sstat", Sstat);

        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        long inserted = db.insert(DBHelper.TABLE_tblNoVisitStoreDetails_Define, null, initialValues);
        //close();
        return inserted;
    }

    public void deletetblNoVisitStoreDetails() {
        db.execSQL("DELETE FROM tblNoVisitStoreDetails");
    }

    public void updateCurDatetblNoVisitStoreDetails(String CurDate) {
        //open();
        try {

            final ContentValues values = new ContentValues();
            values.put("CurDate", CurDate);
            int affected3 = db.update("tblNoVisitStoreDetails", values, "CurDate=?", new String[]{"NA"});

        } catch (Exception ex) {

        } finally {
            // close();
        }

    }

    public void updateReason(String storeId, String productId, String reason) {
        //"create table tblStoreProductPhotoDetail (StoreID text null,ProductID text null,ClickedDateTime text null,PhotoName text null,ReasonForReturn text null,PhotoValidation text null,PDAPhotoPath text null,Sstat integer null,OrderIDPDA text null);";
        Cursor cur = db.rawQuery("Select ReasonForReturn from tblStoreProductPhotoDetail where StoreID='" + storeId + "' AND ProductID='" + productId + "'", null);
        if (cur.getCount() > 0) {
            ContentValues values = new ContentValues();
            values.put("ReasonForReturn", reason);
            db.update(DBHelper.DATABASE_TABLE_Main212, values, "StoreID=? AND ProductID=?", new String[]{storeId, productId});
        }

    }

    public void updateReasonIdAndDescrtblNoVisitStoreDetails(String ReasonId, String ReasonDescr) {
        //open();
        try {

            final ContentValues values = new ContentValues();
            values.put("ReasonId", ReasonId);
            values.put("ReasonDescr", ReasonDescr);
            int affected3 = db.update("tblNoVisitStoreDetails", values, "ReasonId=?",
                    new String[]{"0"});

        } catch (Exception ex) {

        } finally {
            // close();
        }

    }

    public void updateSstattblNoVisitStoreDetails(int Sstat) {
        //open();
        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", Sstat);
            int affected32 = db.update("tblNoVisitStoreDetails", values, "Sstat=?",
                    new String[]{"0"});

        } catch (Exception ex) {

        } finally {
            // close();
        }

    }

    public void updateSstattblNoVisitStoreDetailsAfterSync(int Sstat) {
        //open();
        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", Sstat);
            int affected32 = db.update("tblNoVisitStoreDetails", values, "Sstat=?",
                    new String[]{"3"});

        } catch (Exception ex) {

        } finally {
            // close();
        }

    }

    public int fetchflgHasVisitFromtblNoVisitStoreDetails(String Sstat) {

        int flag = 0;
        //open();

        Cursor cursor = db.rawQuery("SELECT  flgHasVisit from tblNoVisitStoreDetails where Sstat='" + Sstat + "' or Sstat='" + 3 + "'", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        flag = Integer.parseInt(cursor.getString(0));
                        cursor.moveToNext();
                    }
                }
            }

        } finally {
            cursor.close();
            // close();
        }
        return flag;
    }

  /* public long savetblDayStartAttendanceOptions(int AutoIdStore,String ReasonId,String ReasonDescr,int FlgToShowTextBox)
    {

        ContentValues initialValues = new ContentValues();
        initialValues.put("AutoIdStore", AutoIdStore);
        initialValues.put("ReasonId", ReasonId);
        initialValues.put("ReasonDescr", ReasonDescr.trim());
        initialValues.put("FlgToShowTextBox", FlgToShowTextBox);

        //// System.out.println("Arjun data insert properly tblTradeChannelMstr ");
        return db.insert(TABLE_tblDayStartAttendanceOptions_Define, null, initialValues);
    }*/

    public int countDataIntblNoVisitStoreDetails() throws IOException {
        int chkI = 0;
        //open();

        Cursor cursorE2 = db.rawQuery("SELECT Count(*) from tblNoVisitStoreDetails where Sstat=3", null);

        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
            //close();
        }
        return chkI;
    }





					/* private static final String DATABASE_CREATE_TABLE_252 = "create table tblDayStartAttendanceOptions " +
					 		"(ReasonId text null,ReasonDescr text null,FlgToShowTextBox integer null);";*/

    public String[] fnGetALLDataInfo() {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT * FROM  tblNoVisitStoreDetails", null);
        String AllProductInSlab[] = new String[cursorE2.getCount()];

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllProductInSlab[i] = (String) cursorE2.getString(0).toString() + "^" + (String) cursorE2.getString(1).toString() + "^" + (String) cursorE2.getString(2).toString() + "^" + (String) cursorE2.getString(3).toString() + "^" + (String) cursorE2.getString(4).toString() + "^" + (String) cursorE2.getString(5).toString();
                        cursorE2.moveToNext();

                    }
                }
            }
            return AllProductInSlab;
        } finally {
            cursorE2.close();
            // close();
        }

    }

					/* initialValues.put("AutoIdStore", AutoIdStore);
						initialValues.put("ReasonId", ReasonId);
						initialValues.put("ReasonDescr", ReasonDescr.trim());
						initialValues.put("FlgToShowTextBox", FlgToShowTextBox);

						 private static final String DATABASE_CREATE_TABLE_252 = "create table tblDayStartAttendanceOptions (ReasonId text null,ReasonDescr text null,FlgToShowTextBox integer null);";
					*/

    public int countDataIntblDayStartAttendanceOptions() throws IOException {
        int chkI = 0;
        //open();

        Cursor cursorE2 = db.rawQuery("SELECT Count(*) from tblDayStartAttendanceOptions", null);

        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
            //  close();
        }
        return chkI;
    }

    public long savetblDayStartAttendanceOptions(int AutoIdStore, String ReasonId, String ReasonDescr,
                                                 int FlgToShowTextBox, int flgSOApplicable, int flgDSRApplicable,
                                                 int flgNoVisitOption, int SeqNo, int flgDelayedReason, int flgMarketVisit) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("AutoIdStore", AutoIdStore);
        initialValues.put("ReasonId", ReasonId);
        initialValues.put("ReasonDescr", ReasonDescr.trim());
        initialValues.put("FlgToShowTextBox", FlgToShowTextBox);

        initialValues.put("flgSOApplicable", flgSOApplicable);
        initialValues.put("flgDSRApplicable", flgDSRApplicable);
        initialValues.put("flgNoVisitOption", flgNoVisitOption);
        initialValues.put("flgDelayedReason", flgDelayedReason);
        initialValues.put("SeqNo", SeqNo);
        initialValues.put("flgMarketVisit", flgMarketVisit);

        return db.insert(DBHelper.TABLE_tblDayStartAttendanceOptions_Define, null, initialValues);
    }

    public LinkedHashMap<String, String> fetch_Reason_List() {
        //open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT ReasonId,ReasonDescr FROM tblDayStartAttendanceOptions", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    hmapCatgry.put("Select Reason", "0");
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapCatgry.put(cursor.getString(1).toString(), cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Reason", "0");
            }
            return hmapCatgry;
        } finally {
            cursor.close();
            //  close();
        }
    }

    public int fetchFlgToShowTextBox(String ReasonDescr) {

        int FlgToShowTextBox = 0;
        //open();

        Cursor cursor = db.rawQuery("SELECT  FlgToShowTextBox from tblDayStartAttendanceOptions where ReasonDescr='" + ReasonDescr + "'", null);
        try {
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        FlgToShowTextBox = Integer.parseInt(cursor.getString(0));
                        cursor.moveToNext();
                    }
                }
            }

        } finally {
            cursor.close();
            //   close();
        }

        return FlgToShowTextBox;
    }

    public String fetchReasonIdBasedOnReasonDescr(String ReasonDescr) {

        String ReasonId = "0";
        //open();

        Cursor cursor = db.rawQuery("SELECT  ReasonId from tblDayStartAttendanceOptions where ReasonDescr='" + ReasonDescr + "'", null);
        try {
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        ReasonId = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }
            }

        } finally {
            cursor.close();
            //close();
        }

        return ReasonId;
    }

    //  private static final String DATABASE_CREATE_TABLE_165 = "create table
    //tblStorePOSLastVisitDateDetail (StoreID text null,LastVisitDate text null);";

    public String fetchReasonDescr() {

        String ReasonId = "0";
        //open();

        Cursor cursor = db.rawQuery("SELECT  ReasonDescr from tblDayStartAttendanceOptions", null);
        try {
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        ReasonId = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }
            }

        } finally {
            cursor.close();
            // close();
        }

        return ReasonId;
    }


					/* private static final String DATABASE_CREATE_TABLE_166 = "create table " +
					 		"tblStorePOSLastVisitALLMaterialDetails (StoreID text null,POSMaterialID text null," +
					 		"POSMaterialDescr text null,CurrentStockQty text null,NewOrderQty text null," +
					 		"ReturnQty text null,DamageQty text null);";*/

    public String[] fetchDateFromtblStorePOSLastVisitDateDetail(String StoreID) {
        //open();
        Cursor cursor = db
                .rawQuery("SELECT LastVisitDate FROM tblStorePOSLastVisitDateDetail WHERE StoreID ='" + StoreID + "'", null);

        try {

            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult[i] = (String) cursor.getString(0)
                                .toString();

                        cursor.moveToNext();
                    }
                }

            }
            return CompleteResult;

        } finally {
            cursor.close();
            // close();
        }

    }

    public long savetblStorePOSLastVisitDateDetail(String StoreID, String LastVisitDate) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("LastVisitDate", LastVisitDate.trim());


        return db.insert(DBHelper.DATABASE_TABLE_Main165, null, initialValues);

    }

    public long savetblStorePOSLastVisitALLMaterialDetails(String StoreID, String POSMaterialID, String POSMaterialDescr
            , String CurrentStockQty, String NewOrderQty, String ReturnQty, String DamageQty) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("POSMaterialID", POSMaterialID.trim());
        initialValues.put("POSMaterialDescr", POSMaterialDescr.trim());
        initialValues.put("CurrentStockQty", CurrentStockQty.trim());
        initialValues.put("NewOrderQty", NewOrderQty.trim());
        initialValues.put("ReturnQty", ReturnQty.trim());
        initialValues.put("DamageQty", DamageQty.trim());


        return db.insert(DBHelper.DATABASE_TABLE_Main166, null, initialValues);

    }

    public void Delete_tblLastVisitDetailsForPOS() {
        db.execSQL("DELETE FROM tblStorePOSLastVisitDateDetail");

        db.execSQL("DELETE FROM tblStorePOSLastVisitALLMaterialDetails");


    }



					/* private static final String DATABASE_CREATE_TABLE_166 = "create table " +
					 		"tblStorePOSLastVisitALLMaterialDetails (StoreID text null,POSMaterialID text null," +
					 		"POSMaterialDescr text null,CurrentStockQty text null,NewOrderQty text null," +
					 		"ReturnQty text null" +
					 		",DamageQty text null);";*/

    public int counttblStorePOSLastVisitDateDetail(String StoreID) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStorePOSLastVisitDateDetail WHERE StoreID ='" + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
            //close();
        }
        return chkI;
    }


					/*	private static final String DATABASE_CREATE_TABLE_13 = "create table tblStoreList (StoreID text not " +
								"null, StoreType string not null, StoreName string not null, StoreLatitude real not null," +
								" StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not " +
								"null, Sstat integer not null, ForDate string not null, ActualLatitude text null, " +
								"ActualLongitude text null, VisitStartTS text null, VisitEndTS text null,AutoIdStore int null," +
								" LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreClose integer null" +
								",StoreNextDay integer null,chainID integer null,ISNewStore int null,StoreRouteID int null);";
						*/

    public int counttblStorePOSLastVisitALLMaterialDetails(String StoreID) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStorePOSLastVisitALLMaterialDetails WHERE StoreID ='" + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
            // close();
        }
        return chkI;
    }


						/* private static final String DATABASE_CREATE_TABLE_163 = "create table tblStoreMaterialDetail " +
						 		"(RouteID text null,StoreID text null,MaterialID text null,ExistStock integer null," +
						 		"ReturntoDistributor integer null,FreshOrder integer null,DiscardDamage integer null," +
						 		"Sstat integer null);"; */

    public ArrayList<LinkedHashMap<String, String>> fetch_tblStorePOSLastVisitALLMaterialDetails(String StoreID) {
        //open();
        ArrayList<LinkedHashMap<String, String>> totalProductDetail = new ArrayList<LinkedHashMap<String, String>>();

        LinkedHashMap<String, String> hmapStoreIDPOSMaterialID = new LinkedHashMap<String, String>();

        LinkedHashMap<String, String> hmapPOSMaterialIDPOSMaterialDescr = new LinkedHashMap<String, String>();

        LinkedHashMap<String, String> hmapPOSMaterialIDCurrentStockQty = new LinkedHashMap<String, String>();

        LinkedHashMap<String, String> hmapPOSMaterialIDNewOrderQty = new LinkedHashMap<String, String>();

        LinkedHashMap<String, String> hmapPOSMaterialIDReturnQty = new LinkedHashMap<String, String>();

        LinkedHashMap<String, String> hmapPOSMaterialIDDamageQty = new LinkedHashMap<String, String>();

        Cursor cursor = db.rawQuery("SELECT StoreID,POSMaterialID,POSMaterialDescr,CurrentStockQty,NewOrderQty,ReturnQty,DamageQty  FROM tblStorePOSLastVisitALLMaterialDetails WHERE StoreID ='" + StoreID + "'", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {
                        hmapStoreIDPOSMaterialID.put(cursor.getString(1), cursor.getString(0));
                        hmapPOSMaterialIDPOSMaterialDescr.put(cursor.getString(1), cursor.getString(2));
                        hmapPOSMaterialIDCurrentStockQty.put(cursor.getString(1), cursor.getString(3));
                        hmapPOSMaterialIDNewOrderQty.put(cursor.getString(1), cursor.getString(4));
                        hmapPOSMaterialIDReturnQty.put(cursor.getString(1), cursor.getString(5));
                        hmapPOSMaterialIDDamageQty.put(cursor.getString(1), cursor.getString(6));

                        cursor.moveToNext();

                    }
                    totalProductDetail.add(hmapStoreIDPOSMaterialID);
                    totalProductDetail.add(hmapPOSMaterialIDPOSMaterialDescr);
                    totalProductDetail.add(hmapPOSMaterialIDCurrentStockQty);
                    totalProductDetail.add(hmapPOSMaterialIDNewOrderQty);
                    totalProductDetail.add(hmapPOSMaterialIDReturnQty);
                    totalProductDetail.add(hmapPOSMaterialIDDamageQty);

                }
            }


            return totalProductDetail;
        } finally {
            cursor.close();

            //close();
        }


    }


    // New Sync way

    public int checkAnyDataSubmitORNot(int Sstat) {
        //open();
        Cursor cursor = db.rawQuery("SELECT Count(*) FROM tblStoreList WHERE Sstat =" + Sstat, null);

        try {

            int check = 0;

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        check = 1;
                    } else {
                        check = 0;
                    }


                }

            }
            return check;

        } finally {
            cursor.close();
            // close();
        }

    }

    public void deleteOldtblStoreMaterialDetail(String StoreID) {
        //open();
        try {
            db.execSQL("DELETE FROM tblStoreMaterialDetail WHERE StoreID ='" + StoreID + "'");
        } catch (Exception e) {

        } finally {
            //close();
        }

    }

    public String[] getAllStoreIDIntblStoreReturnPhotoDetail() {

        int SnamecolumnIndex1 = 0;


        Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tblStoreProductPhotoDetail where Sstat=5", null);
        //Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
        try {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    cursor.moveToNext();
                }
            }

            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public int getExistingPicNosForReturn(String StoreID) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tblStoreProductPhotoDetail where StoreID='" + StoreID + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public String[] getImgsPathForReturn(String StoreID) {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT PhotoName FROM tblStoreProductPhotoDetail WHERE StoreID ='" + StoreID + "'", null);
        try {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public void updateImageRecordsSyncdForReturn(String PhotoName) {

        try {
            //open();
            System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
            final ContentValues values = new ContentValues();
            values.put("Sstat", 4);

            int affected3 = db.update("tblStoreProductPhotoDetail", values, "PhotoName=?", new String[]{PhotoName});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            // close();
        }


    }

    public void updateImageRecordsSyncd() {

        try {


            final ContentValues values = new ContentValues();
            values.put("Sstat", "4");
									/*int affected = db.update("tblUserLoginMstr", values, "Sstat=?",
											new String[] { "3" });*/
           /* int affected2 = db.update("tblStoreList", values, "Sstat=?",
                    new String[] { "3" });*/
            int affected3 = db.update("tblOutletPhotoDetail", values, "Sstat=?",
                    new String[]{"5"});
            int affected4 = db.update("tblStoreMaterialPhotoDetail", values, "Sstat=?",
                    new String[]{"5"});
            int affected5 = db.update("tableImage", values, "Sstat=?",
                    new String[]{"5"});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void deleteAllXmlDataTable(String Sstat) {

        //open();
        db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tblOutletQuestAnsTempMapping WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tblPDARetailerProductSaving WHERE Sstat =" + Sstat);
        db.execSQL("DELETE FROM tableImage WHERE Sstat =" + Sstat);

        // close();


    }

    public void delDayEnd() {
        db.execSQL("DELETE FROM tblDayStartEndDetails");
    }

    public void savetbl_XMLfiles(String XmlFileName, String Sstat, String filetype) {
        //open();
        ContentValues initialValues = new ContentValues();


        initialValues.put("XmlFileName", XmlFileName.trim());
        initialValues.put("Sstat", Sstat.trim());
        initialValues.put("filetype", filetype.trim());


        db.insert(DBHelper.TABLE_XMLFILES, null, initialValues);
        //close();
    }

    public void UpdateStoreMaterialphotoFlag(String sID, int flag2set) {
        try {
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected1 = db.update("tblStoreMaterialPhotoDetail", values, "StoreID=?", new String[]{sID});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void UpdateStoreCheckinFlg(String sID, int flag2set) {
        try {
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected1 = db.update("tblStoreCheckInPic", values, "StoreID=?", new String[]{sID});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public String[] getAllStoreIDIntblStoreMaterialPhotoDetail() {

        int SnamecolumnIndex1 = 0;


        Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tblStoreMaterialPhotoDetail where Sstat=5", null);
        //Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
        try {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    cursor.moveToNext();
                }
            }

            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public void updateImageRecordsSyncdforPOSMaterial(String PhotoName) {

        try {
            //open();
            System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
            final ContentValues values = new ContentValues();
            values.put("Sstat", 4);

            int affected3 = db.update("tblStoreMaterialPhotoDetail", values, "PhotoName=?", new String[]{PhotoName});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            // close();
        }


    }

    public String fnGetXMLFile(String Sstat) {
        String optionList = "";
        //open();
        // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        Cursor cursor = db.rawQuery("SELECT XmlFileName from tbl_XMLfiles Where Sstat='" + Sstat + "'", null);// Where PNodeID='"+TSIID+"'
        // (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (optionList.equals("")) {
                            optionList = (String) cursor.getString(0).toString();
                        } else {
                            optionList = optionList + "^" + (String) cursor.getString(0).toString();
                        }
                        cursor.moveToNext();
                    }
                }
            }
            return optionList;
        } finally {
            // close();
            cursor.close();

        }
    }

    public void upDateTblXmlFile(String XmlFileName) {
        //open();
        db.execSQL("UPDATE tbl_XMLfiles SET Sstat='4' WHERE XmlFileName='" + XmlFileName + "'");
        //   close();

    }

    public void deleteXmlTable(String Sstat) {
        //open();
        db.execSQL("DELETE FROM tbl_XMLfiles WHERE Sstat =" + Sstat);
        // close();
    }

    public LinkedHashMap<String, String> getFileredProductListMap(String _searchString, int BusinessSegmentId, String ctgryId) {
        //tblProductListMaster (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
        //open();
        String searchString = "";
        LinkedHashMap<String, String> hmapFilterProductList = new LinkedHashMap<String, String>();
        try {
            if (_searchString.indexOf(":") != -1) {
                String[] arrsearchString = _searchString.split(Pattern.quote(","));
                for (int i = 0; i < arrsearchString.length; i++) {
                    if (i == 0) {
                        searchString = " LOWER(SearchField) LIKE '%" + arrsearchString[i].trim().toLowerCase() + "%'";
                    } else {
                        searchString += " AND LOWER(SearchField) LIKE '%" + arrsearchString[i].trim().toLowerCase() + "%'";
                    }
                }
            }

            if (_searchString.indexOf(",") != -1) {
                String[] arrsearchString = _searchString.split(Pattern.quote(","));
                for (int i = 0; i < arrsearchString.length; i++) {
                    if (i == 0) {
                        searchString = " LOWER(SearchField) LIKE '%" + arrsearchString[i].trim().toLowerCase() + "%'";
                    } else {
                        searchString += " AND LOWER(SearchField) LIKE '%" + arrsearchString[i].trim().toLowerCase() + "%'";
                    }
                }
            } else {
                if (ctgryId.equals("0") && TextUtils.isEmpty(_searchString)) {
                    _searchString = "All";
                    searchString = " LOWER(SearchField) LIKE '%" + _searchString.trim().toLowerCase() + "%'";
                } else {
                    searchString = " LOWER(SearchField) LIKE '%" + _searchString.trim().toLowerCase() + "%'";
                }

            }
            Cursor cur = null;
            if (CommonInfo.flgDrctslsIndrctSls == 1) {
                if (!TextUtils.isEmpty(ctgryId) && !ctgryId.equals("0")) {
                    // tblVanProductStock(PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null,OriginalStock text null,SKUName text null);";
                    cur = db.rawQuery("Select tblProductListMaster.ProductID,ProductShortName from tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID inner join tblVanProductStock On tblProductListMaster.ProductID = tblVanProductStock.PrdctId where (" + searchString + ")  AND tblProductListMaster.CategoryID='" + ctgryId + "' order by PrdOrdr Asc", null);//and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"
                } else {

                    cur = db.rawQuery("Select tblProductListMaster.ProductID,ProductShortName from tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID  where (" + searchString + ") order by PrdOrdr Asc", null);//and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"
                }
            } else {
                if (!TextUtils.isEmpty(ctgryId) && !ctgryId.equals("0")) {
                    // tblVanProductStock(PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null,OriginalStock text null,SKUName text null);";
                    cur = db.rawQuery("Select tblProductListMaster.ProductID,ProductShortName from tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID  where (" + searchString + ")  AND tblProductListMaster.CategoryID='" + ctgryId + "' order by PrdOrdr Asc", null);//and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"
                } else {

                    cur = db.rawQuery("Select tblProductListMaster.ProductID,ProductShortName from tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID  where (" + searchString + ") order by PrdOrdr Asc", null);//and tblProductSegementMap.BusinessSegmentId="+BusinessSegmentId+"
                }
            }


            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapFilterProductList.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            // close();
            return hmapFilterProductList;
        }
    }

    public LinkedHashMap<String, String> getUOMMstr() {
        //tblProductListMaster (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
        //open();
        LinkedHashMap<String, String> hmapUOMMstr = new LinkedHashMap<String, String>();
        try {
            Cursor cur = db.rawQuery("Select UOMID,UOM from tblUOMMstr", null);
            hmapUOMMstr.put("0", "Select UOM");
            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapUOMMstr.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            // close();
            return hmapUOMMstr;
        }
    }

    public LinkedHashMap<String, String> getSalesQuotePrcsMstr() {
        //tblProductListMaster (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
        //open();
        LinkedHashMap<String, String> hmapSalesQuoteMstr = new LinkedHashMap<String, String>();
        try {
            Cursor cur = db.rawQuery("Select SalesQuotePrcsId,SalesQuotePrcs from tblSalesQuotePrcsMstr", null);
            //hmapUOMMstr.put("0", "Select SalesQuote");
            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapSalesQuoteMstr.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //  close();
            return hmapSalesQuoteMstr;
        }
    }

    public LinkedHashMap<String, String> fngetDistinctSalesQuotePersonMeetMstr(String StoreId) {
        //tblProductListMaster (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
        //open();
        LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr = new LinkedHashMap<String, String>();
        try {
            Cursor cur = db.rawQuery("Select SalesQuoteId,SalesQuoteCode,SalesQuotePrcsId,SalesQuotePrcs,SalesQuoteDate from tblSalesQuotePersonMeetMstr WHERE StoreId='" + StoreId + "'", null);
            //hmapUOMMstr.put("0", "Select SalesQuote");
            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapDistinctSalesQuotePersonMeetMstr.put(cur.getString(0), cur.getString(1) + "^" + cur.getString(2) + "^" + cur.getString(3) + "^" + cur.getString(4));
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            // close();
            return hmapDistinctSalesQuotePersonMeetMstr;
        }
    }

    public LinkedHashMap<String, String> fngetDistinctSalesQuotePersonMeetMstrForSstatUpdate(String StoreId) {
        //tblProductListMaster (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";
        //	//open();
        LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr = new LinkedHashMap<String, String>();
        try {
            Cursor cur = db.rawQuery("Select SalesQuoteId,SalesQuoteCode,SalesQuotePrcsId,SalesQuotePrcs,SalesQuoteDate from tblSalesQuotePersonMeetMstr WHERE StoreId='" + StoreId + "'", null);
            //hmapUOMMstr.put("0", "Select SalesQuote");
            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapDistinctSalesQuotePersonMeetMstr.put(cur.getString(0), cur.getString(1) + "^" + cur.getString(2) + "^" + cur.getString(3) + "^" + cur.getString(4));
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //close();
            return hmapDistinctSalesQuotePersonMeetMstr;
        }
    }

    public int fncheckIfSalesQuotePersonMeetMstrExistsinTable(String SalesQuoteId) {
        //open();
        int strReturnPDADateExistOrNot = 0;

        Cursor cursor2 = db.rawQuery("SELECT SalesQuoteId FROM  tblSalesQuotePersonMeetMstr where tblSalesQuotePersonMeetMstr.SalesQuoteId='" + SalesQuoteId + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnPDADateExistOrNot = 1;
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strReturnPDADateExistOrNot;
        } finally {
            cursor2.close();
            //  close();
        }
    }

    public String[] fngetQutePersonMeetTabOneData(String SalesQuoteId) {
        //open();
        String qry = "select SalesQuoteType,SalesQuoteValidFrom,SalesQuoteValidTo,SalesQuoteDate from tblSalesQuotePersonMeetMstr where SalesQuoteId='" + SalesQuoteId + "'";
        Cursor cur = db.rawQuery(qry, null);
        String BasicData[] = new String[4];
        try {
            if (cur.moveToFirst()) {
                //for(int i=0;i<cur.getCount();i++)
                for (int i = 0; i < cur.getCount(); i++) {
                    BasicData[0] = (String) cur.getString(0).toString();
                    BasicData[1] = (String) cur.getString(1).toString();
                    BasicData[2] = (String) cur.getString(2).toString();
                    BasicData[3] = (String) cur.getString(3).toString();
                    cur.moveToNext();

                }


            }
            return BasicData;
        } finally {
            //cur.close();
            // close();
        }
    }

    public LinkedHashMap<String, String> getFileredProductListQuotationMap(String _searchString, String SalesQuoteId, int BusinessSegmentId, String ManufacturerID) {
        int chkIfSalesQuotePersonMeetMstrExistsinTable = fncheckIfSalesQuotePersonMeetMstrExistsinTable(SalesQuoteId);
        String SalesQuoteValidFrom = "0";
        String SalesQuoteValidTo = "0";
        String SalesQuoteType = "0";
        if (chkIfSalesQuotePersonMeetMstrExistsinTable == 1) {
            //SalesQuoteType,SalesQuoteValidFrom,SalesQuoteValidTo,SalesQuoteDate
            String[] arrValues = new String[4];
            arrValues = fngetQutePersonMeetTabOneData(SalesQuoteId);
            SalesQuoteType = arrValues[0];
            SalesQuoteValidFrom = arrValues[1];
            SalesQuoteValidTo = arrValues[2];
            SalesQuoteType = arrValues[3];
        }
        //open();
        //int intcheckIfgetFileredProductListQuotationMapExistsinTable=fncheckIfgetFileredProductListQuotationMapExistsinTable(SalesQuoteId);
        String searchString = "";
        LinkedHashMap<String, String> hmapFilterProductQuotationList = new LinkedHashMap<String, String>();
        try {
            if (_searchString.indexOf(",") != -1) {
                String[] arrsearchString = _searchString.split(Pattern.quote(","));
                for (int i = 0; i < arrsearchString.length; i++) {
                    if (i == 0) {
                        searchString = " LOWER(SearchField) LIKE '%" + arrsearchString[i].trim().toLowerCase() + "%'";
                    } else {
                        searchString += " AND LOWER(SearchField) LIKE '%" + arrsearchString[i].trim().toLowerCase() + "%'";
                    }
                }
            } else {
                searchString = " LOWER(SearchField) LIKE '%" + _searchString.trim().toLowerCase() + "%'";
            }
            Cursor cur = null;

            //cur=db.rawQuery("Select ProductID,ProductShortName,StandardRate,StandardRateBeforeTax,0 AS RateOffer,0 AS InclusiveTax,'"+SalesQuoteValidFrom+"' AS ValidFrom,'"+SalesQuoteValidTo+"' As ValidTo,0 AS MinDlvryQty,0 AS UOMID,0 AS Remarks,'0.00' AS LastTranscRate,tblProductListMaster.VatTax from tblProductListMaster where ("+searchString+") order by PrdOrdr Asc", null);
            if (ManufacturerID.equals("0") || ManufacturerID.equals("")) {
                cur = db.rawQuery("Select tblProductListMaster.ProductID,ProductShortName,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,0 AS RateOffer,0 AS InclusiveTax,'" + SalesQuoteValidFrom + "' AS ValidFrom,'" + SalesQuoteValidTo + "' As ValidTo,0 AS MinDlvryQty,0 AS UOMID,0 AS Remarks,'0.00' AS LastTranscRate,tblProductSegementMap.VatTax from tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID where (" + searchString + ") and tblProductSegementMap.BusinessSegmentId=" + BusinessSegmentId + " order by PrdOrdr Asc", null);
            } else {

                cur = db.rawQuery("Select tblProductListMaster.ProductID,ProductShortName,tblProductSegementMap.StandardRate,tblProductSegementMap.StandardRateBeforeTax,0 AS RateOffer,0 AS InclusiveTax,'" + SalesQuoteValidFrom + "' AS ValidFrom,'" + SalesQuoteValidTo + "' As ValidTo,0 AS MinDlvryQty,0 AS UOMID,0 AS Remarks,'0.00' AS LastTranscRate,tblProductSegementMap.VatTax from tblProductListMaster inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID where (" + searchString + ") and tblProductSegementMap.BusinessSegmentId=" + BusinessSegmentId + " and tblProductListMaster.ManufacturerID=" + Integer.parseInt(ManufacturerID) + " order by PrdOrdr Asc", null);
            }
            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapFilterProductQuotationList.put(cur.getString(0), cur.getString(1) + "^" + cur.getString(2) + "^" + cur.getString(3) + "^" + cur.getString(4) + "^" + cur.getString(5) + "^" + cur.getString(6) + "^" + cur.getString(7) + "^" + cur.getString(8) + "^" + cur.getString(9) + "^" + cur.getString(10) + "^" + cur.getString(11) + "^" + cur.getString(12));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("SSS" + e);
            // TODO: handle exception
        } finally {
            // close();
            int intcheckIfgetFileredProductListQuotationMapExistsinTable = fncheckIfgetFileredProductListQuotationMapExistsinTable(SalesQuoteId);
            if (intcheckIfgetFileredProductListQuotationMapExistsinTable == 1) {
                getFileredProductListPreFiledListQuotationMap(hmapFilterProductQuotationList, SalesQuoteId, BusinessSegmentId);
            }
            return hmapFilterProductQuotationList;
        }
    }

    public void getFileredProductListPreFiledListQuotationMap(LinkedHashMap<String, String> hmapFilterProductQuotationList, String SalesQuoteId, int BusinessSegmentId) {
        //open();
        try {
            Cursor cur = null;
            //cur=db.rawQuery("Select ProductID,ProductShortName,tblSalesQuoteProductsMstr.StandardRate ,tblSalesQuoteProductsMstr.StandardRateBeforeTax,tblSalesQuoteProductsMstr.RateOffer,tblSalesQuoteProductsMstr.InclusiveTax,tblSalesQuoteProductsMstr.ValidFrom AS ValidFrom,tblSalesQuoteProductsMstr.ValidTo As ValidTo,tblSalesQuoteProductsMstr.MinDlvryQty,tblSalesQuoteProductsMstr.UOMID,tblSalesQuoteProductsMstr.Remarks,tblSalesQuoteProductsMstr.LastTranscRate,tblProductListMaster.VatTax from tblProductListMaster inner join tblSalesQuoteProductsMstr on tblProductListMaster.ProductID=tblSalesQuoteProductsMstr.PrdId where tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"' order by tblProductListMaster.PrdOrdr Asc", null);
            cur = db.rawQuery("Select tblProductListMaster.ProductID,ProductShortName,tblSalesQuoteProductsMstr.StandardRate,tblSalesQuoteProductsMstr.StandardRateBeforeTax,tblSalesQuoteProductsMstr.RateOffer,tblSalesQuoteProductsMstr.InclusiveTax,tblSalesQuoteProductsMstr.ValidFrom AS ValidFrom,tblSalesQuoteProductsMstr.ValidTo As ValidTo,tblSalesQuoteProductsMstr.MinDlvryQty,tblSalesQuoteProductsMstr.UOMID,tblSalesQuoteProductsMstr.Remarks,tblSalesQuoteProductsMstr.LastTranscRate,tblProductSegementMap.VatTax from tblProductListMaster inner join tblSalesQuoteProductsMstr on tblProductListMaster.ProductID=tblSalesQuoteProductsMstr.PrdId inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID where tblSalesQuoteProductsMstr.SalesQuoteId='" + SalesQuoteId + "' and tblProductSegementMap.BusinessSegmentId=" + BusinessSegmentId + " order by tblProductListMaster.PrdOrdr Asc", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapFilterProductQuotationList.put(cur.getString(0), cur.getString(1) + "^" + cur.getString(2) + "^" + cur.getString(3) + "^" + cur.getString(4) + "^" + cur.getString(5) + "^" + cur.getString(6) + "^" + cur.getString(7) + "^" + cur.getString(8) + "^" + cur.getString(9) + "^" + cur.getString(10) + "^" + cur.getString(11) + "^" + cur.getString(12));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("SSS" + e);
            // TODO: handle exception
        } finally {

            //close();

        }
    }

    public int fncheckIfgetFileredProductListQuotationMapExistsinTable(String SalesQuoteId) {
        //open();
        int strReturnPDADateExistOrNot = 0;
        //tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"'
        Cursor cursor2 = db.rawQuery("SELECT * FROM  tblSalesQuoteProductsMstr where tblSalesQuoteProductsMstr.SalesQuoteId='" + SalesQuoteId + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strReturnPDADateExistOrNot = 1;
                    cursor2.moveToNext();
                    // cursor.close();
                }

            }

            return strReturnPDADateExistOrNot;
        } finally {
            //cursor2.close();
            // close();
        }
    }

    public LinkedHashMap<String, String> getDefaultProductListQuotationMap(String SalesQuoteId, int BusinessSegmentId) {
        String searchString = "";
        LinkedHashMap<String, String> hmapDefaultProductQuotationList = new LinkedHashMap<String, String>();
        try {
            //open();
            //Cursor cur=db.rawQuery("Select ProductID,ProductShortName,IFNULL(tblSalesQuoteProductsMstr.StandardRate,0),IFNULL(tblSalesQuoteProductsMstr.StandardRateBeforeTax,0),IFNULL(tblSalesQuoteProductsMstr.RateOffer,0),IFNULL(tblSalesQuoteProductsMstr.InclusiveTax,0),IFNULL(tblSalesQuoteProductsMstr.ValidFrom,0),IFNULL(tblSalesQuoteProductsMstr.ValidTo,0),IFNULL(tblSalesQuoteProductsMstr.MinDlvryQty,0),IFNULL(tblSalesQuoteProductsMstr.UOMID,0),IFNULL(tblSalesQuoteProductsMstr.Remarks,''),IFNULL(tblSalesQuoteProductsMstr.LastTranscRate,'0.00'),VatTax from tblProductListMaster Inner Join tblSalesQuoteProductsMstr On tblProductListMaster.ProductID=tblSalesQuoteProductsMstr.PrdId Where tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"' order by PrdOrdr Asc", null);
            Cursor cur = db.rawQuery("Select tblProductListMaster.ProductID,ProductShortName,IFNULL(tblSalesQuoteProductsMstr.StandardRate,0),IFNULL(tblSalesQuoteProductsMstr.StandardRateBeforeTax,0),IFNULL(tblSalesQuoteProductsMstr.RateOffer,0),IFNULL(tblSalesQuoteProductsMstr.InclusiveTax,0),IFNULL(tblSalesQuoteProductsMstr.ValidFrom,0),IFNULL(tblSalesQuoteProductsMstr.ValidTo,0),IFNULL(tblSalesQuoteProductsMstr.MinDlvryQty,0),IFNULL(tblSalesQuoteProductsMstr.UOMID,0),IFNULL(tblSalesQuoteProductsMstr.Remarks,''),IFNULL(tblSalesQuoteProductsMstr.LastTranscRate,'0.00'),tblProductSegementMap.VatTax from tblProductListMaster Inner Join tblSalesQuoteProductsMstr On tblProductListMaster.ProductID=tblSalesQuoteProductsMstr.PrdId inner join tblProductSegementMap on tblProductListMaster.ProductID=tblProductSegementMap.ProductID Where tblSalesQuoteProductsMstr.SalesQuoteId='" + SalesQuoteId + "' and tblProductSegementMap.BusinessSegmentId=" + BusinessSegmentId + " order by PrdOrdr Asc", null);
            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();

                if (cur.moveToFirst()) {

                    for (int i = 0; i < cur.getCount(); i++) {

                        hmapDefaultProductQuotationList.put(cur.getString(0), cur.getString(1) + "^" + cur.getString(2) + "^" + cur.getString(3) + "^" + cur.getString(4) + "^" + cur.getString(5) + "^" + cur.getString(6) + "^" + cur.getString(7) + "^" + cur.getString(8) + "^" + cur.getString(9) + "^" + cur.getString(10) + "^" + cur.getString(11) + "^" + cur.getString(12));

                        cur.moveToNext();

                    }

                }


            }


        } catch (Exception e) {

            // TODO: handle exception

        } finally {

            // close();

            return hmapDefaultProductQuotationList;

        }

    }

    public String fnGettPrcIDBasedOnQuotationId(String SalesQuoteId) {
        //open();
        Cursor cursor = db.rawQuery("SELECT SalesQuotePrcsId from tblSalesQuotePersonMeetMstr where SalesQuoteId='" + SalesQuoteId + "'", null);
        String flag = "0";
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    flag = cursor.getString(0).toString();
                }

            }
            return flag;
        } finally {
            cursor.close();
            //close();
        }
    }

    public LinkedHashMap<String, String> getQuotationPersionMeetDetails(String SalesQuoteId) {

        //tblProductListMaster (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";


        String searchString = "";

        LinkedHashMap<String, String> hmapQuotationPersionMeetDetails = new LinkedHashMap<String, String>();

        try {
            //open();


            // Cursor cur=db.rawQuery("Select StoreName As Customer,ContactPerson,ContactPersonPhone,ContactPersonEmail,SalesQuoteType,IFNULL(SalesQuoteValidFrom,0),IFNULL(SalesQuoteValidTo,0),IFNULL(ExpectedBusinessValue,0),IFNULL(PaymentTerms,0),IFNULL(PaymentTermsType,0),SalesQuoteDate from tblProductListMaster Inner Join tblSalesQuoteProductsMstr On tblProductListMaster.ProductID=tblSalesQuoteProductsMstr.PrdId Where tblSalesQuoteProductsMstr.SalesQuoteId='"+SalesQuoteId+"' order by PrdOrdr Asc", null);

            Cursor cur = db.rawQuery("Select StoreName As Customer,ContactPerson,ContactPersonPhone,ContactPersonEmail,SalesQuoteType,IFNULL(SalesQuoteValidFrom,0),IFNULL(SalesQuoteValidTo,0),IFNULL(ExpectedBusinessValue,0),IFNULL(CreditLimit,0),IFNULL(CreditDays,0),SalesQuoteDate,SalesQuotePrcsId ,SalesQuotePrcs,PaymentModeId,IFNULL(PymtStageId,0),IFNULL(ManufacturerID,0),IFNULL(ManufacturerName,0) from tblSalesQuotePersonMeetMstr Where tblSalesQuotePersonMeetMstr.SalesQuoteId='" + SalesQuoteId + "'", null);

            if (cur.getCount() > 0) {

                StringBuilder sBuilder = new StringBuilder();

                if (cur.moveToFirst()) {

                    for (int i = 0; i < cur.getCount(); i++) {

                        hmapQuotationPersionMeetDetails.put(SalesQuoteId, cur.getString(0) + "^" + cur.getString(1) + "^" + cur.getString(2) + "^" + cur.getString(3) + "^" + cur.getString(4) + "^" + cur.getString(5) + "^" + cur.getString(6) + "^" + cur.getString(7) + "^" + cur.getString(8) + "^" + cur.getString(9) + "^" + cur.getString(10) + "^" + cur.getString(11) + "^" + cur.getString(12) + "^" + cur.getString(13) + "^" + cur.getString(14) + "^" + cur.getString(15) + "^" + cur.getString(16));

                        cur.moveToNext();

                    }

                }


            }


        } catch (Exception e) {

            // TODO: handle exception

        } finally {

            // close();

            return hmapQuotationPersionMeetDetails;

        }

    }

    public void UpdateQuotePrcsAgainstQuotationId(String SalesQuoteId, String SalesQuotePrcsId, String SalesQuotePrcs) {

        try {
            final ContentValues values = new ContentValues();
            values.put("SalesQuotePrcsId", SalesQuotePrcsId);
            values.put("SalesQuotePrcs", SalesQuotePrcs);
            int affected = db.update("tblSalesQuotePersonMeetMstr", values, "SalesQuoteId=? ", new String[]{SalesQuoteId});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {

        }
    }

    public LinkedHashMap<String, String> fnGetDistinctSenction() {
        String searchString = "";
        LinkedHashMap<String, String> hmapDistinctDiffrentSection = new LinkedHashMap<String, String>();
        try {
            //open();
            Cursor cur = db.rawQuery("Select Distinct SectionNo from tblGetPDAQuestGrpMapping", null);
            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapDistinctDiffrentSection.put(cur.getString(0), "Section_" + cur.getString(0).toString().trim());
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception

        } finally {
            //  close();
            return hmapDistinctDiffrentSection;
        }
    }

    public LinkedHashMap<String, String> fnGetDistinctGroupsinSection(int SectionNo) {
        String searchString = "";
        LinkedHashMap<String, String> hmapDistinctGroupsinSection = new LinkedHashMap<String, String>();
        try {
            //open();
            Cursor cur = db.rawQuery("Select GrpID,GrpNodeID,GrpDesc from tblGetPDAQuestGrpMapping Where SectionNo='" + SectionNo + "'", null);
            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapDistinctGroupsinSection.put(cur.getString(2), cur.getString(0).toString().trim() + "_" + cur.getString(1).toString().trim());
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception

        } finally {
            // close();
            return hmapDistinctGroupsinSection;
        }
    }

    public LinkedHashMap<String, ArrayList<String>> fnGetGroupIDMapWithQuestionID() {
        LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr = new LinkedHashMap<String, ArrayList<String>>();
        ArrayList<String> listKeyQuesVal = new ArrayList<String>();
        //open();
        //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        //tblGetPDAQuestMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnswerHint text null);";
        Cursor cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.GrpID from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping where tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  Order By tblGetPDAQuestGrpMapping.GrpID ASC  ", null);// Where PNodeID='"+TSIID+"'

        try {
            if (cursor.getCount() > 0) {
                String sectionNo = "0", preVisousSectionNum = "0";
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        sectionNo = cursor.getString(3);
                        if (i == 0) {
                            preVisousSectionNum = sectionNo;
                            listKeyQuesVal.add(cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2));
                        } else if (preVisousSectionNum.equals(sectionNo)) {
                            listKeyQuesVal.add(cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2));
                        } else {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                            listKeyQuesVal = new ArrayList<String>();
                            preVisousSectionNum = sectionNo;
                            listKeyQuesVal.add(cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2));

                        }
                        if (i == (cursor.getCount() - 1)) {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                        }

                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        } finally {
            cursor.close();
            //close();
        }
    }

    public LinkedHashMap<String, String> fnGetGroupIDWithGroupDescr() {
        {
            //open();
            LinkedHashMap<String, String> hmapGroupIDWithGroupDescr = new LinkedHashMap<String, String>();
            //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";

            Cursor cur = db.rawQuery("Select Distinct GrpID,GrpDesc from tblGetPDAQuestGrpMapping", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapGroupIDWithGroupDescr.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }

                }
            }
            //close();
            return hmapGroupIDWithGroupDescr;
        }
    }

    public int getsectionCount() {
        int sectionCount = 0;


        try {

//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
            Cursor cur = db.rawQuery("Select SectionCount from tblQuestIDForOutChannel", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {

                    sectionCount = cur.getInt(0);
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {

            return sectionCount;
        }
    }

    public LinkedHashMap<String, ArrayList<String>> fnGetSectionIDMapWithGroupID() {
        LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr = new LinkedHashMap<String, ArrayList<String>>();
        ArrayList<String> listKeyQuesVal = new ArrayList<String>();

        //open();
        int sectionCount = getsectionCount();
        //    int sectionCount=0;
        //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        //tblGetPDAQuestMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnswerHint text null);";
        Cursor cursor;
        if (sectionCount != 0) {
            cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblGetPDAQuestGrpMapping where SectionNo<=" + sectionCount + " order by SectionNo", null);// Where PNodeID='"+TSIID+"'
        } else {
            cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblGetPDAQuestGrpMapping order by SectionNo", null);// Where PNodeID='"+TSIID+"'
        }


        try {
            if (cursor.getCount() > 0) {
                String sectionNo = "0", preVisousSectionNum = "0";
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        sectionNo = cursor.getString(1);
                        if (i == 0) {
                            preVisousSectionNum = sectionNo;
                            listKeyQuesVal.add(cursor.getString(0));
                        } else if (preVisousSectionNum.equals(sectionNo)) {
                            listKeyQuesVal.add(cursor.getString(0));
                        } else {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                            listKeyQuesVal = new ArrayList<String>();
                            preVisousSectionNum = sectionNo;
                            listKeyQuesVal.add(cursor.getString(0));

                        }
                        if (i == cursor.getCount() - 1) {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                        }


                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        } finally {
            cursor.close();
            //close();
        }
    }

    public LinkedHashMap<String, String> fnGetOptionId_OptionValue() {
        LinkedHashMap<String, String> hmapOptionId_OptionValue = new LinkedHashMap<String, String>();
        //open();

        Cursor cursor = db.rawQuery("SELECT QuestID,OptID,OptionNo from tblGetPDAQuestOptionMstr Order By Sequence ASC ", null);// Where PNodeID='"+TSIID+"'

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapOptionId_OptionValue.put((String) cursor.getString(0).toString() + "_" + (String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapOptionId_OptionValue;
        } finally {
            cursor.close();
            //close();
        }
    }


    //Add New Store Section wise Code Ends Here

    public int getSectionCount() {
        int sectionNo = 0;

        try {


            Cursor cursor = db.rawQuery("Select SectionCount from tblQuestIDForOutChannel", null);

            if (cursor.getCount() > 0)  //Return the number of rows in the cursor
            {
                if (cursor.moveToFirst())  // move the cursor to the first row .
                {                          // This method will return false  if cursor is empty
                    sectionNo = cursor.getInt(0);
                    cursor.moveToNext();    // move the cursor to the next row
                }
            }
        } catch (Exception e) {

        } finally {
            return sectionNo;
        }


    }
    private String getQuestionsOnActivityBased(int feedbackType, boolean hasWhereClause, String tableName) {
        String subQuery = "";
        if (hasWhereClause) {
            subQuery = " AND " + tableName + ".";
        } else
            subQuery = " WHERE " + tableName + ".";
        if (feedbackType == 1) {
            subQuery = subQuery + DBHelper.flgNewStore + "=1";

        }
        if (feedbackType == 2) {
            subQuery = subQuery + DBHelper.flgStoreVisitFeedback + "=1";

        }
        if (feedbackType == 4) {
            subQuery = subQuery + DBHelper.flgDSMVisitFeedback + "=1";

        }
        if (feedbackType == 3) {
            subQuery = subQuery + DBHelper.flgDSMOverAllFeedback + "=1";

        }
        return subQuery;
    }

    public LinkedHashMap<String, String> fnGetQuestionMstr(int sectionCount)
    {
        LinkedHashMap<String, String> hmapQuestionMstr= new LinkedHashMap<>();

        // int sectionCount=getsectionCount();
        //tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        //tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
        Cursor cursor=null;
        if(sectionCount!=0)
        {
            if(CommonInfo.flgNewStoreORStoreValidation==1)
            {
                cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,ifnull(tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,0),tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,ifnull(tblGetPDAQuestMstr.AnswerHint,'N/A'),tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping on tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  where tblGetPDAQuestGrpMapping.SectionNo<="+sectionCount+" AND tblGetPDAQuestMstr.flgNewStore=1 Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
            }
            else if(CommonInfo.flgNewStoreORStoreValidation==2)
            {
                cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,ifnull(tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,0),tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,ifnull(tblGetPDAQuestMstr.AnswerHint,'N/A'),tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping on tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  where tblGetPDAQuestGrpMapping.SectionNo<="+sectionCount+" AND tblGetPDAQuestMstr.flgStoreValidation=1 Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
            }


        }
        else
        {
            // cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,tblGetPDAQuestMstr.AnsHint,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping on tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
            if(CommonInfo.flgNewStoreORStoreValidation==1)
            {
                cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,ifnull(tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,0),tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,ifnull(tblGetPDAQuestMstr.AnswerHint,'N/A'),tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping on tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID WHERE  tblGetPDAQuestMstr.flgNewStore=1 Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
            }
            else if(CommonInfo.flgNewStoreORStoreValidation==2)
            {
                cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,ifnull(tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,0),tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,ifnull(tblGetPDAQuestMstr.AnswerHint,'N/A'),tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping on tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID WHERE tblGetPDAQuestMstr.flgStoreValidation=1  Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
            }

        }


        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        System.out.println("Varun Quest Id = "+(String) cursor.getString(0) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(13) +"~"+ (String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(2) +"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(5) +"^"+(String) cursor.getString(6) +"^"+(String) cursor.getString(7) +"^"+(String) cursor.getString(8) +"^"+(String) cursor.getString(13) +"^"+(String) cursor.getString(14));
                        hmapQuestionMstr.put((String) cursor.getString(0) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(13), (String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(2) +"^"+(String) cursor.getString(3) +"^"+(String) cursor.getString(4) +"^"+(String) cursor.getString(5) +"^"+(String) cursor.getString(6) +"^"+(String) cursor.getString(7) +"^"+(String) cursor.getString(8) +"^"+(String) cursor.getString(9) +"^"+(String) cursor.getString(10) +"^"+(String) cursor.getString(11) +"^"+(String) cursor.getString(12) +"^"+(String) cursor.getString(13));
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            if(cursor!=null)
            {
                cursor.close();
            }


        }
    }
  /*  public LinkedHashMap<String, String> fnGetQuestionMstr(SharedPreferences sPref)
    {

        if(sPref.getString("Language", "").equals("en"))
        {

        }
        else if(sPref.getString("Language", "").equals("hi"))
        {

        }
        else
        {

        }
        LinkedHashMap<String, String> hmapQuestionMstr=new LinkedHashMap<String, String>();
        //open();
        int sectionCount=getsectionCount();




        Cursor cursor;


*//*

		if(sPref.getString("Language", "").equals("en"))
		{
			if(sectionCount!=0)
			{
				cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,tblGetPDAQuestMstr.AnswerHint,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping On tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  where tblGetPDAQuestGrpMapping.SectionNo<="+sectionCount+" Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
			else
			{
				cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,tblGetPDAQuestMstr.AnswerHint,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping On tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
		}
		else if(sPref.getString("Language", "").equals("hi"))
		{
			if(sectionCount!=0)
			{
				cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDescHindi,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,tblGetPDAQuestMstr.AnswerHint,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping On tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  where tblGetPDAQuestGrpMapping.SectionNo<="+sectionCount+" Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
			else
			{
				cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDescHindi,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,tblGetPDAQuestMstr.AnswerHint,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping On tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
		}
		else
		{
			if(sectionCount!=0)
			{
				cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,tblGetPDAQuestMstr.AnswerHint,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping On tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  where tblGetPDAQuestGrpMapping.SectionNo<="+sectionCount+" Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
			else
			{
				cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,tblGetPDAQuestMstr.AnsControlInputTypeMinLength,tblGetPDAQuestMstr.AnswerHint,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping On tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
			}
		}
*//*

        if(sectionCount!=0)
        {
            cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,ifnull(tblGetPDAQuestMstr.QuestCode,0) as QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,ifnull(tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,0) as AnsControlInputTypeMaxLength,tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,ifnull(tblGetPDAQuestMstr.AnsControlInputTypeMinLength,0) AS AnsControlInputTypeMinLength,ifnull(tblGetPDAQuestMstr.AnswerHint,'N/A') AS AnswerHint,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping On tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  where tblGetPDAQuestGrpMapping.SectionNo<="+sectionCount+" Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        }
        else
        {
            cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,ifnull(tblGetPDAQuestMstr.QuestCode,0) as QuestCode,tblGetPDAQuestMstr.QuestDesc,tblGetPDAQuestMstr.QuestType,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestMstr.AnsControlInputTypeID,ifnull(tblGetPDAQuestMstr.AnsControlInputTypeMaxLength,0) as AnsControlInputTypeMaxLength,tblGetPDAQuestMstr.AnsMustRequiredFlg,tblGetPDAQuestMstr.QuestBundleFlg,tblGetPDAQuestMstr.ApplicationTypeID,tblGetPDAQuestMstr.Sequence,ifnull(tblGetPDAQuestMstr.AnsControlInputTypeMinLength,0) AS AnsControlInputTypeMinLength,ifnull(tblGetPDAQuestMstr.AnswerHint,'N/A') AS AnswerHint,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping On tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  Order By tblGetPDAQuestGrpMapping.Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        }


        try
        {
            //	String aa="उत्पाद का $ नाम है";
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        System.out.println("Varun Quest Id = "+(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(13).toString()+"~"+ (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(13).toString()+"^"+(String) cursor.getString(14).toString());
                        //	hmapQuestionMstr.put((String) cursor.getString(0).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(13).toString(), (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()+"^"+(String) cursor.getString(11).toString()+"^"+(String) cursor.getString(12).toString()+"^"+(String) cursor.getString(13).toString());
                        hmapQuestionMstr.put((String) cursor.getString(0).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(13).toString(), (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()+"^"+(String) cursor.getString(11).toString()+"^"+(String) cursor.getString(12).toString()+"^"+(String) cursor.getString(13).toString());
                        //use=aa in place of (String) cursor.getString(2).toString()
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            cursor.close();
            // close();
        }
    }*/

    public void fnDeletesaveOutletQuestAnsMstrSctionWise(String OutletID,int sectionID)
    {
        db.execSQL("DELETE FROM tblOutletQuestAnsMstr WHERE OutletID ='"+ OutletID + "'");// and sectionID="+sectionID
    }

    public LinkedHashMap<String, String> getReasonReturn() {
        ////tblGetReturnsReasonForPDAMstr(StockStatusId text not null,StockStatus text not null);";
        LinkedHashMap<String, String> hmapRtrnRsn = new LinkedHashMap<String, String>();
        //open();
        try {


            Cursor cur = db.rawQuery("Select * from tblGetReturnsReasonForPDAMstr", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapRtrnRsn.put(cur.getString(1), cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println(" Print e =" + e.toString());
        } finally {
            //  close();
            return hmapRtrnRsn;
        }
    }

    //Code For Order Payment and Bill Starts Here

    public LinkedHashMap<String, String> getSavedRemark(String StoreID, String OrderPDAID, String TmpInvoiceCodePDA) {
//			              /  //tblStoreReturnDetail (RouteID text null,StoreID text null,ReturnProductID text null, ProdReturnQty text null, ProdReturnReason text null, ProdReturnReasonIndex text null,ReturnDate text null,Sstat integer null,OrderIDPDA text null);";
        LinkedHashMap<String, String> hmapRtrnRsn = new LinkedHashMap<String, String>();
        //open();
        try {


            Cursor cur = db.rawQuery("Select * from tblStoreReturnDetail where StoreID='" + StoreID + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapRtrnRsn.put(cur.getString(2), cur.getString(4));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println(" Print e =" + e.toString());
        } finally {
            // close();
            return hmapRtrnRsn;
        }
    }

    public void updateflgFromWhereSubmitStatusAgainstStore(String sID, int flag2set, String StoreVisitCode) {
        try {

            final ContentValues values = new ContentValues();
            values.put("flgFromWhereSubmitStatus", flag2set);
            int affected = db.update("tblStoreVisitMstr", values, "StoreID=? AND flgFromWhereSubmitStatus=? AND StoreVisitCode=?", new String[]{sID, "" + 0, StoreVisitCode});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    public int checkCountIntblNewStoreSalesQuotePaymentDetails(String StoreId) {
        //open();
        Cursor cursor = null;
        int check = 0;
        try {

            //tblNewStoreSalesQuotePaymentDetails (StoreId text null,PymtStageId text null,Sstat text null);";
            cursor = db.rawQuery("SELECT Count(*) FROM tblNewStoreSalesQuotePaymentDetails WHERE  StoreId ='" + StoreId + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = 1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            // close();
        }
        return check;
    }

    public ArrayList<LinkedHashMap<String, String>> fngetStoreBillToAddressAndDiliverToAddress(String StoreID) {

        ArrayList<LinkedHashMap<String, String>> totalProductDetail = new ArrayList<LinkedHashMap<String, String>>(3);
        LinkedHashMap<String, String> hmapStoreBillTogAddresse = new LinkedHashMap<String, String>();
        LinkedHashMap<String, String> hmapStoreShippToAddress = new LinkedHashMap<String, String>();
        LinkedHashMap<String, String> hmapStoreAddress = new LinkedHashMap<String, String>();
        //open();
        Cursor cur = db.rawQuery("Select OutAddTypeID,Address,AddressDet,OutAddID from tblStoreAddressMapDetailsMstr where StoreID='" + StoreID + "'", null);
        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                for (int i = 0; i < cur.getCount(); i++) {
                    if (Integer.parseInt(cur.getString(0)) == 1) {
                        hmapStoreBillTogAddresse.put(cur.getString(1), cur.getString(3));
                    }
                    if (Integer.parseInt(cur.getString(0)) == 2) {
                        hmapStoreShippToAddress.put(cur.getString(1), cur.getString(3));
                    }
                    hmapStoreAddress.put(cur.getString(3), cur.getString(2));

                    cur.moveToNext();
                }
            }
        }
        // close();

        totalProductDetail.add(0, hmapStoreBillTogAddresse);
        totalProductDetail.add(1, hmapStoreShippToAddress);
        totalProductDetail.add(2, hmapStoreAddress);

        return totalProductDetail;
    }

    public long fnsaveStoreSalesOrderPaymentDetails(String StoreId, String OrderID, String PaymentStageId, String Sstat, String TmpInvoiceCodePDA) {

        ContentValues initialValues = new ContentValues();


        initialValues.put("StoreId", StoreId.toString().trim());
        initialValues.put("OrderID", OrderID.toString().trim());
        initialValues.put("PymtStageId", PaymentStageId.toString().trim());
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        initialValues.put("Sstat", Sstat);

        return db.insert(DBHelper.DATABASE_TABLE_StoreSalesOrderPaymentDetails, null, initialValues);
    }
//tblStoreAddressMapDetailsMstr

    public void fndeleteStoreSalesOrderPaymentDetails(String StoreID, String OrderID, String TmpInvoiceCodePDA) {

        db.execSQL("DELETE FROM tblStoreSalesOrderPaymentDetails WHERE StoreId ='" + StoreID + "' and OrderID='" + OrderID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
    }

    public void fndeleteStoreAddressMapDetailsMstr() {

        db.execSQL("DELETE FROM tblStoreAddressMapDetailsMstr");
    }

    public int checkCountIntblStoreSalesOrderPaymentDetails(String StoreId, String OrderID, String TmpInvoiceCodePDA) {
        //open();
        Cursor cursor = null;
        int check = 0;
        try {


            cursor = db.rawQuery("SELECT * FROM tblStoreSalesOrderPaymentDetails WHERE  StoreId ='" + StoreId + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = 1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            //   close();
        }
        return check;
    }

    public String fngettblStoreSalesOrderPaymentDetails(String StoreID, String OrderID, String TmpInvoiceCodePDA) {


        String searchString = "";


        try {
            //open();

            Cursor cur = db.rawQuery("Select IFNULL(PymtStageId,0) from tblStoreSalesOrderPaymentDetails Where StoreId ='" + StoreID + "' and OrderID='" + OrderID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);

            if (cur.getCount() > 0) {

                StringBuilder sBuilder = new StringBuilder();

                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        searchString = cur.getString(0);
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //   close();
            return searchString;
        }
    }

    public int checkPaymentStageintStoreMstrTabel(String StoreId) {
        //open();
        Cursor cursor = null;
        int check = 0;
        try {

            cursor = db.rawQuery("SELECT * FROM tblStoreList WHERE  StoreID ='" + StoreId + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = 1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            // close();
        }
        return check;
    }

    public int checkStoreOrderBillAddressDetails(String StoreId, String OrderID) {
        //open();
        Cursor cursor = null;
        int check = 0;
        try {

            cursor = db.rawQuery("SELECT * FROM tblStoreOrderBillAddressDetails WHERE  StoreID ='" + StoreId + "' and OrderID='" + OrderID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = 1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            //close();
        }
        return check;
    }

    public void fndeleteStoreOrderBillAddressDetails(String StoreID, String OrderID) {
        //open();
        db.execSQL("DELETE FROM tblStoreOrderBillAddressDetails WHERE StoreId ='" + StoreID + "' and OrderID='" + OrderID + "'");
        // close();
    }

    public long fnsaveStoreOrderBillAddressDetails(String StoreId, String OrderID, String BillToAddress, String ShipToAddress, String Sstat) {

        ContentValues initialValues = new ContentValues();


        initialValues.put("StoreID", StoreId.toString().trim());
        initialValues.put("OrderID", OrderID.toString().trim());
        initialValues.put("BillToAddress", BillToAddress.toString().trim());
        initialValues.put("ShipToAddress", ShipToAddress.toString().trim());
	    /* initialValues.put("OrderID", OrderID.toString().trim());
	      initialValues.put("OutAddTypeID",OutAddTypeID );
	      initialValues.put("OutAddID", OutAddID);
	      initialValues.put("DeliveryPreferTime", DeliveryPreferTime);
	      initialValues.put("DeliveryNotPreferTime", DeliveryNotPreferTime);*/
        initialValues.put("Sstat", Sstat);

        return db.insert("tblStoreOrderBillAddressDetails", null, initialValues);
    }

    public int checkIfCurrentStoreIsNewInOrderBill(String StoreID) {

        int ScodecolumnIndex = 0;
        int ISNewStore = 0;
        //open();
        Cursor cursor = db.rawQuery("SELECT ISNewStore FROM tblStoreList where StoreID='" + StoreID + "'", null);
        try {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    ISNewStore = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                    cursor.moveToNext();
                }
            }
            return ISNewStore;
        } finally {
            cursor.close();
            //   close();
        }
    }

    public String fetchBillAddress(String OutletID) {
        //open();
        Cursor cursor = null;
        String CompleteBillAddress = "";
        try {

            cursor = db.rawQuery("SELECT QuestID,AnswerType,AnswerValue,QuestionGroupID FROM tblOutletQuestAnsMstr WHERE  OutletID ='" + OutletID + "' and QuestionGroupID in (1,3,4) ", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        String DDlStringCity = "";
                        if (Integer.parseInt(cursor.getString(1).toString()) == 8) {
                            DDlStringCity = fnGetCityName(cursor.getString(0).toString().trim(), cursor.getString(2).toString().trim());
                        }
                        if (Integer.parseInt(cursor.getString(3)) == 1 || Integer.parseInt(cursor.getString(3)) == 4) {
                            if (CompleteBillAddress.equals("")) {
                                CompleteBillAddress = cursor.getString(2).toString().trim();
                            } else {
                                CompleteBillAddress = CompleteBillAddress + ", " + cursor.getString(2).toString().trim();
                            }
                        } else if (Integer.parseInt(cursor.getString(3)) == 3) {
                            if (CompleteBillAddress.equals("")) {
                                CompleteBillAddress = DDlStringCity;
                            } else {
                                CompleteBillAddress = CompleteBillAddress + ", " + DDlStringCity;
                            }
                        }

                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            // close();
        }
        return CompleteBillAddress;
    }

    public String fnGetCityName(String QuestID, String AnsValue) {

        Cursor cursor = null;
        String DDlStringCity = "";
        try {

            cursor = db.rawQuery("SELECT OptionDescr FROM tblGetPDAQuestOptionMstr WHERE  QuestID ='" + QuestID + "' and OptID='" + AnsValue + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        DDlStringCity = cursor.getString(0).toString().trim();

                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();

        }
        return DDlStringCity;
    }

    public String fetchDeliverAddress(String OutletID) {
        //open();
        Cursor cursor = null;
        String CompleteDileveryAddress = "";
        try {

            cursor = db.rawQuery("SELECT QuestID,AnswerType,AnswerValue,QuestionGroupID FROM tblOutletQuestAnsMstr WHERE  OutletID ='" + OutletID + "' and QuestionGroupID in (5,7,8) ", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        String DDlStringCity = "";
                        if (Integer.parseInt(cursor.getString(1).toString()) == 8) {
                            DDlStringCity = fnGetCityName(cursor.getString(0).toString().trim(), cursor.getString(2).toString().trim());
                        }
                        if (Integer.parseInt(cursor.getString(3)) == 5 || Integer.parseInt(cursor.getString(3)) == 8) {
                            if (CompleteDileveryAddress.equals("")) {
                                CompleteDileveryAddress = cursor.getString(2).toString().trim();
                            } else {
                                CompleteDileveryAddress = CompleteDileveryAddress + ", " + cursor.getString(2).toString().trim();
                            }
                        } else if (Integer.parseInt(cursor.getString(3)) == 7) {
                            if (CompleteDileveryAddress.equals("")) {
                                CompleteDileveryAddress = DDlStringCity;
                            } else {
                                CompleteDileveryAddress = CompleteDileveryAddress + ", " + DDlStringCity;
                            }
                        }

                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            // close();
        }
        return CompleteDileveryAddress;
    }

    public String fnGetPreFilledStoreOrderBillAddressDetails(String StoreId, String OrderID) {
        ////tblGetReturnsReasonForPDAMstr(StockStatusId text not null,StockStatus text not null);";
        String strPreFilledStoreOrderBillAddressDetails = "";
        //open();
        try {
            Cursor cur = db.rawQuery("Select BillToAddress,ShipToAddress from tblStoreOrderBillAddressDetails Where StoreID='" + StoreId + "' and OrderID='" + OrderID + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        strPreFilledStoreOrderBillAddressDetails = cur.getString(0) + "$" + cur.getString(1);
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println(" Print e =" + e.toString());
        } finally {
            //  close();
            return strPreFilledStoreOrderBillAddressDetails;
        }
    }

    public void fndeleteStoreSalesOrderPaymentDetailsOnStoreIDBasis(String StoreID) {
        //open();
        db.execSQL("DELETE FROM tblStoreSalesOrderPaymentDetails WHERE StoreId ='" + StoreID + "'");
        //close();
    }

    public void fndeleteStoreOrderBillAddressDetailsOnStoreIDBasis(String StoreID) {
        //open();
        db.execSQL("DELETE FROM tblStoreOrderBillAddressDetails WHERE StoreId ='" + StoreID + "'");
        // close();
    }

    public String fnGetDefaultStoreOrderPAymentDetails(String StoreId) {
        //open();
        Cursor cursor = null;
        String PaymentStageFROM = "";
        try {

            cursor = db.rawQuery("SELECT PaymentStage FROM tblStoreList WHERE  StoreID ='" + StoreId + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        PaymentStageFROM = cursor.getString(0).toString();
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            // close();
        }
        return PaymentStageFROM;
    }

    // "create table tblStoreSomeProdQuotePriceMstr (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
    public LinkedHashMap<String, Integer> getMinDlvryQntty(String storeId) {
        LinkedHashMap<String, Integer> hmapMinDlvrQty = new LinkedHashMap<String, Integer>();
        //open();
        try {


            Cursor cur = db.rawQuery("Select PrdId,MinDlvrQty from tblStoreSomeProdQuotePriceMstr where StoreID='" + storeId + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapMinDlvrQty.put(cur.getString(0), cur.getInt(1));
                        cur.moveToNext();
                    }
                }
            }

        } catch (Exception e) {

        } finally {
            //  close();
            return hmapMinDlvrQty;
        }
    }

    // "create table tblStoreSomeProdQuotePriceMstr (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
    public LinkedHashMap<String, String> getMinDlvryQnttyQPBT(String storeId) {
        LinkedHashMap<String, String> hmapMinDlvrQtyQPBT = new LinkedHashMap<String, String>();
        //open();
        try {


            Cursor cur = db.rawQuery("Select PrdId,QPBT from tblStoreSomeProdQuotePriceMstr where StoreID='" + storeId + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapMinDlvrQtyQPBT.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }
            }

        } catch (Exception e) {

        } finally {
            //  close();
            return hmapMinDlvrQtyQPBT;
        }
    }

    public LinkedHashMap<String, String> getMinDlvryQnttyQPAT(String storeId) {
        LinkedHashMap<String, String> hmapMinDlvrQtyQPAT = new LinkedHashMap<String, String>();
        //open();
        try {


            Cursor cur = db.rawQuery("Select PrdId,QPAT from tblStoreSomeProdQuotePriceMstr where StoreID='" + storeId + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapMinDlvrQtyQPAT.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }
            }

        } catch (Exception e) {

        } finally {
            // close();
            return hmapMinDlvrQtyQPAT;
        }
    }

    // "create table tblStoreSomeProdQuotePriceMstr (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
    public LinkedHashMap<String, String> getMinDlvryQnttyQPTaxAmount(String storeId) {
        LinkedHashMap<String, String> hmapMinDlvrQtyQPTaxAmount = new LinkedHashMap<String, String>();
        //open();
        try {


            Cursor cur = db.rawQuery("Select PrdId,QPTaxAmount from tblStoreSomeProdQuotePriceMstr where StoreID='" + storeId + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapMinDlvrQtyQPTaxAmount.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }
            }

        } catch (Exception e) {

        } finally {
            // close();
            return hmapMinDlvrQtyQPTaxAmount;
        }
    }

    public int fnchkIfStoreFasQuote(String StoreId) {
        //open();
        Cursor cursor = null;
        int check = 0;
        try {

            cursor = db.rawQuery("SELECT flgHasQuote FROM tblStoreList WHERE  StoreID ='" + StoreId + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (Integer.parseInt(cursor.getString(0).toString()) == 1) {
                        check = 1;
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            //  close();
        }
        return check;
    }

    public void fnDeletefromtblSchemeStoreMappingAgainstStore(String StoreID) {
        //open();
        db.execSQL("DELETE  FROM tblSchemeStoreMapping WHERE  StoreID='" + StoreID + "'");
        //  close();
    }

    public int fnchkIfStoreAllowQuotation(String StoreId) {
        //open();
        Cursor cursor = null;
        int check = 0;
        try {

            cursor = db.rawQuery("SELECT flgAllowQuotation FROM tblStoreList WHERE  StoreID ='" + StoreId + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (Integer.parseInt(cursor.getString(0).toString()) == 1) {
                        check = 1;
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            //  close();
        }
        return check;
    }

    public void UpdateStoreFlagQoutation(String sID, int flag2set) {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected = db.update("tblStoreList", values, "StoreID=?", new String[]{sID});
            int affected26 = db.update("tblRateDistribution", values, "StoreId=?", new String[]{sID});

            int affected4 = db.update("tblNewStoreListEntries", values, "StoreID=?", new String[]{sID});
            int affected9 = db.update("tblNewStoreEntries", values, "StoreID=?", new String[]{sID});
            int affected10 = db.update("tblTemp", values, "StoreID=?", new String[]{sID});

            int affected17 = db.update("tblSalesQuotePersonMeetMstr", values, "StoreId=?", new String[]{sID});
            int affected21 = db.update("tblOutletQuestAnsMstr", values, "OutletID=?", new String[]{sID});
            int affected261 = db.update("tblNewAddedStoreLocationDetails", values, "StoreID=?", new String[]{sID});
            int affected23 = db.update("tblNewStoreSalesQuotePaymentDetails", values, "StoreId=?", new String[]{sID});

            LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr = fngetDistinctSalesQuotePersonMeetMstrForSstatUpdate(sID);


            Iterator it11new = hmapDistinctSalesQuotePersonMeetMstr.entrySet().iterator();

            while (it11new.hasNext()) {
                Entry pair = (Entry) it11new.next();
                if (hmapDistinctSalesQuotePersonMeetMstr.containsKey(pair.getKey().toString())) {
                    //crntPID	=pair.getKey().toString();
                    int affected18 = db.update("tblSalesQuoteProductsMstr", values, "SalesQuoteId=?", new String[]{pair.getKey().toString()});
                }

            }

            Log.w(TAG, "affected records: " + affected);

            Log.w(TAG, "Record(s) Updated..");

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void updateStoreQuoteSubmitFlgInStoreMstr(String StoreID, int flgSubmitFromQuotation, String StoreVisitCode) {
        //open();

        final ContentValues values = new ContentValues();
        values.put("flgSubmitFromQuotation", flgSubmitFromQuotation);
        int affected = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?",
                new String[]{StoreID, StoreVisitCode});

        // close();
    }

    public int fnchkIfStoreHasInvoiceEntry(String StoreId) {

        Cursor cursor = null;
        int check = 0;
        try {

            cursor = db.rawQuery("SELECT * FROM tblTmpInvoiceHeader WHERE  StoreID ='" + StoreId + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (Integer.parseInt(cursor.getString(0).toString()) == 1) {
                        check = 1;
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();

        }
        return check;
    }

    public void updateStoreQuoteSubmitFlgInStoreMstrInChangeRouteCase(String StoreID, int flgSubmitFromQuotation) {
        final ContentValues values = new ContentValues();
        values.put("flgSubmitFromQuotation", flgSubmitFromQuotation);
        int affected = db.update("tblStoreList", values, "StoreID=?", new String[]{StoreID});
    }

    public String[] FetchStoreStatusflgSubmitFromQuotation() {
        int ScodecolumnIndex = 0;
        Cursor cursor = db.rawQuery("SELECT flgSubmitFromQuotation FROM tblStoreList ORDER BY DistanceNear", null);
        try {
            String StoreName[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = cursor.getString(ScodecolumnIndex).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public LinkedHashMap<String, String> fnGetListQuoteISOfUnmappedWithProducts(String StoreID) {
        //open();
        Cursor cursor = db.rawQuery("Select Distinct tblSalesQuotePersonMeetMstr.SalesQuoteId from tblSalesQuotePersonMeetMstr Where tblSalesQuotePersonMeetMstr.SalesQuoteId not in(Select tblSalesQuoteProductsMstr.SalesQuoteId from tblSalesQuoteProductsMstr) and StoreId='" + StoreID + "'", null);
        LinkedHashMap<String, String> hmapList = new LinkedHashMap<String, String>();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    hmapList.put(cursor.getString(0).toString(), StoreID);
                }

            }
            return hmapList;
        } finally {
            //cursor.close();
            //  close();
        }
    }

    public void fndeleteQuoteISOfUnmappedWithProducts(String SalesQuoteId) {
        //open();
        db.execSQL("DELETE FROM tblSalesQuoteProductsMstr WHERE SalesQuoteId='" + SalesQuoteId + "'");
        db.execSQL("DELETE FROM tblSalesQuotePersonMeetMstr WHERE SalesQuoteId='" + SalesQuoteId + "'");
        db.execSQL("DELETE FROM tblRateDistribution WHERE SalesQuoteId='" + SalesQuoteId + "'");
        // close();
    }

    public int fnGetBusinessSegmentIDAgainstStoreType(int OutChannelID) {

        int ScodecolumnIndex = 0;
        int BusinessSegmentID = 0;
        //open();
        Cursor cursor = db.rawQuery("SELECT BusinessSegmentID FROM tblOutletChannelBusinessSegmentMaster where OutChannelID=" + OutChannelID, null);
        try {


            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    BusinessSegmentID = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                    cursor.moveToNext();
                }
            }
            return BusinessSegmentID;
        } finally {
            cursor.close();
            // close();
        }
    }

    public int fnGetAnsValID(int optionId) {
//tblGetPDAQuestOptionMstr(OptID int null,QuestID int null,OptionNo int null,OptionDescr text null,Sequence int null );";
        int ScodecolumnIndex = 0;
        int ansValId = 0;
        //open();
        Cursor cursor = db.rawQuery("SELECT OptionNo FROM tblGetPDAQuestOptionMstr where OptID=" + optionId, null);
        try {


            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    ansValId = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                    cursor.moveToNext();
                }
            }
            return ansValId;
        } finally {
            cursor.close();
            // close();
        }
    }

    public String fnGetQuestIDForOutChannelFromQuestionMstr()
    {//tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null,GrpCopyID int null,QuestCopyID int null);";

        int ScodecolumnIndex = 0;
        int ansCntrlTypeIndex = 1;
        int grpQuestIdIndex = 2;
        String QuestID="0";
        //open();
        Cursor cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestGrpMapping.GrpQuestID FROM tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping ON tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID where tblGetPDAQuestMstr.flgQuestIDForOutChannel=1", null);
        try
        {


            if (cursor.moveToFirst())
            {

                for (int i = 0; i <= (cursor.getCount() - 1); i++)
                {
                    QuestID = cursor.getString(ScodecolumnIndex)+"^"+cursor.getString(ansCntrlTypeIndex)+"^"+cursor.getString(grpQuestIdIndex);
                    cursor.moveToNext();
                }
            }
            return QuestID;
        }
        finally
        {
            cursor.close();
            // close();
        }
    }


    public long saveTblSalesQuoteSponsorMstr(String SalesQuoteSponsorID, String SponsorDescr, String Ordr) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("SalesQuoteSponsorID", SalesQuoteSponsorID.toString().trim());
        initialValues.put("SponsorDescr", SponsorDescr.toString().trim());
        initialValues.put("Ordr", Ordr.toString().trim());

        return db.insert(DBHelper.TABLE_tblSalesQuoteSponsorMstr, null, initialValues);
    }

    public long saveTblManufacturerMstrMain(String ManufacturerID, String ManufacturerName, String NodeType) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("ManufacturerID", ManufacturerID.toString().trim());
        initialValues.put("ManufacturerName", ManufacturerName.toString().trim());
        initialValues.put("NodeType", NodeType.toString().trim());

        return db.insert(DBHelper.TABLE_tblManufacturerMstrMain, null, initialValues);
    }

    public long saveTblRateDistribution(String SalesQuoteId, String StoreId, String SalesQuoteSponsorID, String ManufacturerID, String Percentage, String SponsorDescr, String ManufacturerName, String Sstat) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("SalesQuoteId", SalesQuoteId.toString().trim());
        initialValues.put("StoreId", StoreId.toString().trim());
        initialValues.put("SalesQuoteSponsorID", SalesQuoteSponsorID.toString().trim());
        initialValues.put("ManufacturerID", ManufacturerID.toString().trim());
        initialValues.put("Percentage", Percentage.toString().trim());
        initialValues.put("SponsorDescr", SponsorDescr.toString().trim());
        initialValues.put("ManufacturerName", ManufacturerName.toString().trim());
        initialValues.put("Sstat", Sstat.toString().trim());

        return db.insert(DBHelper.TABLE_tblRateDistribution, null, initialValues);
    }

    public LinkedHashMap<String, String> fnGettblManufacturerMstrMain() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
// Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'

// (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            Cursor cursor = db.rawQuery("SELECT ManufacturerID,ManufacturerName,NodeType from tblManufacturerMstrMain   ", null);// Where PNodeID='"+TSIID+"'
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(1).toString(), (String) cursor.getString(0).toString() + "^" + (String) cursor.getString(2).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();
            return hmapQuestionMstr;
        }
    }

    public LinkedHashMap<String, ArrayList<String>> fnGettblRateDistribution(String SalesQuoteId, String StoreId) {
        LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr = new LinkedHashMap<String, ArrayList<String>>();

        //open();

        try {
            Cursor cursor = db.rawQuery("SELECT SalesQuoteSponsorID,ManufacturerID,Percentage,SponsorDescr,ManufacturerName from tblRateDistribution   where SalesQuoteId='" + SalesQuoteId + "' and StoreId='" + StoreId + "'", null);// Where PNodeID='"+TSIID+"'
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        ArrayList<String> abc = new ArrayList<String>();
                        abc.add((String) cursor.getString(0).toString());
                        abc.add((String) cursor.getString(1).toString());
                        abc.add((String) cursor.getString(2).toString());
                        abc.add((String) cursor.getString(3).toString());
                        abc.add((String) cursor.getString(4).toString());
                        hmapQuestionMstr.put(abc.get(0), abc);
                        cursor.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();
            return hmapQuestionMstr;
        }
    }

    public LinkedHashMap<String, String> fnGettblSalesQuoteSponsorMstr() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
// Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'

// (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            Cursor cursor = db.rawQuery("SELECT SalesQuoteSponsorID,SponsorDescr,Ordr from tblSalesQuoteSponsorMstr   ", null);// Where PNodeID='"+TSIID+"'
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(1).toString(), (String) cursor.getString(0).toString() + "^" + (String) cursor.getString(2).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            //close();
            return hmapQuestionMstr;
        }
    }

    public LinkedHashMap<String, String> fnProductManufractureIDList() {
        LinkedHashMap<String, String> hmapProductManufractureIDList = new LinkedHashMap<String, String>();
        //open();

        try {
            Cursor cursor = db.rawQuery("SELECT ProductID,ManufacturerID from tblProductListMaster", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapProductManufractureIDList.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnProductManufractureIDList= " + e.toString());
        } finally {

            // close();
            return hmapProductManufractureIDList;
        }
    }

    public ArrayList<String> fectProductIDMappedInSchSlbSubBukRowIdTemp(int schSlbSubRowID) {
        //open();
        Cursor cursor = db.rawQuery("SELECT ProductID FROM tblSchemeSlabBucketProductMapping WHERE RowID =" + schSlbSubRowID, null);
        try {
            ArrayList<String> CompleteResult = new ArrayList<String>();
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        CompleteResult.add(cursor.getString(0));
                        cursor.moveToNext();
                    }
                }
            }
            return CompleteResult;

        } finally {
            cursor.close();
            // close();
        }

    }

    public String fnGetBenifitAssignedValue(String StoreID, int ProductIdOnClicked, int schId, String TmpInvoiceCodePDA) {
        //tblStoreProductAppliedSchemesBenifitsRecords (StoreID text not null,ProductID int not null,schId int not null,schSlabId integer not null,schSlbBuckId integer not null,schSlabSubBucketValue real not null,schSubBucketValType integer not null,schSlabSubBucketType int not null,BenifitRowID integer not null,BenSubBucketType int null,FreeProductID int null,BenifitSubBucketValue real null,BenifitMaxValue real null,BenifitAssignedValue real null,BenifitAssignedValueType int null,BenifitDiscountApplied int null,BenifitCouponCode text null,Sstat integer not null,Per real null,UOM real null,WhatFinallyApplied int null,schSlbRowId int null,SchTypeId int null,DiscountPercentage real null,OrderIDPDA text null);";
        //open();
        Cursor cursor = db.rawQuery("SELECT FreeProductID,BenifitAssignedValue,BenSubBucketType FROM tblStoreProductAppliedSchemesBenifitsRecords WHERE StoreID ='" + StoreID + "' and  schId=" + schId + " and BenSubBucketType in(1,5,2,6,3,7) AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' and ProductID=" + ProductIdOnClicked, null);
        String chkI = "";
        try {
            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (cursor.getString(0) != null && cursor.getString(1) != null && cursor.getString(2) != null) {
                            chkI = cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2);
                        }
                        cursor.moveToNext();
                    }
                }
            }

        } finally {
            cursor.close();
            //close();
        }
        return chkI;
    }

    public ArrayList<String> fnGetProductsSchIdSlabRowList(String StoreID, int RowID, String pdaOrderID, String TmpInvoiceCodePDA) {//tblSchemeSlabBenefitsProductMappingDetail (RowID text null,ProductID text null)
        //open();//schId
// Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId="+RowID, null);
        Cursor cursorE2 = db.rawQuery("SELECT ProductID FROM  tblStoreProductAppliedSchemesBenifitsRecords where schSlbRowId=" + RowID + " AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'  and StoreID='" + StoreID + "'", null);
        ArrayList<String> AllProductInSlab = new ArrayList<String>();

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    for (int i = 0; i <= (cursorE2.getCount() - 1); i++) {
                        AllProductInSlab.add(cursorE2.getString(0));
                        cursorE2.moveToNext();
                        //cursor.moveToNext();
                    }
                }
            }
            return AllProductInSlab;
        } finally {
            cursorE2.close();
            // close();
        }

    }

    public void updateManufacturerIDAndName(String SalesQuoteId, String ManufacturerID, String ManufacturerName) {

        try {
            //open();

            final ContentValues values = new ContentValues();
            values.put("ManufacturerID", ManufacturerID);
            values.put("ManufacturerName", ManufacturerName);

            int affected = db.update("tblSalesQuotePersonMeetMstr", values, "SalesQuoteId=?", new String[]{SalesQuoteId});

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            // close();
        }

    }

    public String getManufacturerIDAndManufacturerNameDetails(String SalesQuoteId) {
        String searchString = "0^0";
        // LinkedHashMap<String, String> hmapQuotationPersionMeetDetails=new LinkedHashMap<String, String>();

        try {
            //open();
            Cursor cur = db.rawQuery("Select ManufacturerID,ManufacturerName from tblSalesQuotePersonMeetMstr Where tblSalesQuotePersonMeetMstr.SalesQuoteId='" + SalesQuoteId + "'", null);

            if (cur.getCount() > 0) {

                StringBuilder sBuilder = new StringBuilder();

                if (cur.moveToFirst()) {

                    for (int i = 0; i < cur.getCount(); i++) {

                        searchString = cur.getString(0) + "^" + cur.getString(1);

                        cur.moveToNext();

                    }

                }


            }


        } catch (Exception e) {

            // TODO: handle exception

        } finally {

            // close();

            return searchString;

        }

    }

    public int checkMessageIDExistOrNotForNotification(int MsgServerID) {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblPDANotificationMaster WHERE MsgServerID =" + MsgServerID, null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public ArrayList<String> getGstDataByStore(String StoreID) {
        ArrayList<String> PrevAccuracy = new ArrayList<String>();
        //open();
        try {
            Cursor cursor2 = db.rawQuery("Select flgGSTCapture,flgGSTCompliance,GSTNumber from tblStoreList where StoreID ='" + StoreID + "'", null);
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        PrevAccuracy.add(cursor2.getString(0).toString().trim());
                        PrevAccuracy.add(cursor2.getString(1).toString().trim());
                        PrevAccuracy.add(cursor2.getString(2).toString().trim());
                        // PrevAccuracy =cursor2.getString(0).toString().trim()+"^"+cursor2.getString(1).toString().trim()+"^"+cursor2.getString(2).toString().trim();
                        cursor2.moveToNext();
                    }

                }
            }
        } catch (Exception e) {
        } finally {
            //  close();
        }
        return PrevAccuracy;
    }

    public int fnGetflgServerRecordFromOutletMstr(String StoreID) {
        int flgServerRecord = 0;

        try {
            //open();
            //Cursor cursor = db.rawQuery("SELECT flgGSTRecordFromServer FROM tblStoreList where StoreID='" + StoreID + "' and Sstat=3", null);
            Cursor cursor = db.rawQuery("SELECT flgGSTRecordFromServer FROM tblStoreList where StoreID='" + StoreID + "'", null);

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(0)) {
                        flgServerRecord = Integer.parseInt(cursor.getString(0).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return flgServerRecord;
        } finally {
            // close();
        }
    }

    public void UpdateStoreInfoGST(String StoreID, String flgGSTCapture, String flgGSTCompliance, String GSTNumber) {
        try {
            //open();
            final ContentValues values = new ContentValues();
            values.put("flgGSTCapture", flgGSTCapture);
            values.put("flgGSTCompliance", flgGSTCompliance);
            values.put("GSTNumber", GSTNumber);


            int affected = db.update("tblStoreList", values, "StoreID=?", new String[]{StoreID});
        } catch (Exception e) {

        } finally {
            // close();
        }

    }
    //private static final String DATABASE_CREATE_TABLE_OPTIONMstr = "create table tblGetPDAQuestOptionMstr" +
    //"(OptID int null,QuestID int null,OptionNo int null,OptionDescr text null,Sequence int null );";

    public String fnGetGstOptionIDComplianceWhileAddingNewStore(String flgGSTCompliance) {
        String flgGSTComplianceResult = "0";

        try {
            //open();
            Cursor cursor = db.rawQuery("SELECT OptionNo FROM tblGetPDAQuestOptionMstr where OptID='" + flgGSTCompliance + "'", null);

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(0)) {
                        flgGSTComplianceResult = cursor.getString(0).toString();
                        cursor.moveToNext();
                    }

                }
            }
            return flgGSTComplianceResult;
        } finally {
            // close();
        }
    }


    // New Added Store Fun Start

    public int countNumberOFNotificationtblPDANotificationMaster() throws IOException {
        int chkI = 0;
        Cursor cursorE2 = db.rawQuery("SELECT Count(*) FROM tblPDANotificationMaster where Noti_NewOld=1 and Noti_ReadStatus=1", null);

        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public LinkedHashMap<String, String> fngetAllOptionForQuestionID(int QuestID) {
        //open();
        LinkedHashMap<String, String> hashMapOption = new LinkedHashMap<String, String>();

        try {
            Cursor cursor = db.rawQuery("Select OptID,OptionDescr,Sequence from tblGetPDAQuestOptionMstr where QuestID=" + QuestID + "and Sequence Order by acs", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount() - 1; i++) {
                        hashMapOption.put(cursor.getString(0), cursor.getString(1));
                    }
                }
            }
        } catch (Exception e) {

        } finally {
            // close();
            return hashMapOption;
        }


    }

    public String[] getAllOptValueDpndntQuest() {
        String[] allQuestValesDpndnt = null;
        //open();
        try {

            //tblGetPDAQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null)
            Cursor cur = db.rawQuery("Select Distinct GrpID from tblGetPDAQuestionDependentMstr", null);
            if (cur.getCount() > 0) {
                allQuestValesDpndnt = new String[cur.getCount()];
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        allQuestValesDpndnt[i] = String.valueOf(cur.getInt(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            // close();
            return allQuestValesDpndnt;
        }

    }

    public String[] fnGetDependentParentQuesIdr() {


        //open();
//tblGetPDAQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";
        Cursor cursor = db.rawQuery("SELECT DISTINCT GrpDepQuestID from tblGetPDAQuestionDependentMstr", null);// Where PNodeID='"+TSIID+"'
        String[] arrbhi = new String[cursor.getCount()];
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        // hmapDpndntQuestionMstr.put((String) cursor.getString(3).toString()+"^"+(String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
                        arrbhi[i] = (String) cursor.getString(0).toString();
                        cursor.moveToNext();
                    }
                }
            }

            return arrbhi;
        } finally {
            cursor.close();
            //close();
        }
    }

    public LinkedHashMap<String, String> fnGetQuestionID_AnsCntrlType() {
        LinkedHashMap<String, String> hmapQuestionId_AnsCntrlTyper = new LinkedHashMap<String, String>();
        //open();
        int lastIndex = 0;
        //tblGetPDAQuestMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnswerHint text null);";
        Cursor cursor = db.rawQuery("SELECT QuestID,AnsControlType from tblGetPDAQuestMstr", null);

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionId_AnsCntrlTyper.put(cursor.getString(0).trim(), (String) cursor.getString(1).toString().trim());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return hmapQuestionId_AnsCntrlTyper;
        } finally {
            cursor.close();
            // close();
        }
    }

    public LinkedHashMap<String, ArrayList<String>> getAllQuestIdDpndnt() {// //tblGetPDAQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";
        LinkedHashMap<String, ArrayList<String>> hmapQuestDependVisible = new LinkedHashMap<String, ArrayList<String>>();
        ArrayList<String> listQestDpndnt = new ArrayList<String>();

        try {


            //open();

            Cursor cur = db.rawQuery("Select GrpID,GrpDepQuestID from tblGetPDAQuestionDependentMstr Order By GrpDepQuestID", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    String questId, dpndntQuestId, prvsdpndntQuestId = null;
                    for (int i = 0; i < cur.getCount(); i++) {
                        questId = String.valueOf(cur.getInt(0));
                        dpndntQuestId = String.valueOf(cur.getInt(1));
                        if (i == 0) {
                            listQestDpndnt.add(questId);
                            prvsdpndntQuestId = dpndntQuestId;
                        } else {
                            if (prvsdpndntQuestId == dpndntQuestId) {
                                listQestDpndnt.add(questId);
                            } else {
                                hmapQuestDependVisible.put(prvsdpndntQuestId, listQestDpndnt);
                                listQestDpndnt = new ArrayList<String>();

                                listQestDpndnt.add(questId);
                                prvsdpndntQuestId = dpndntQuestId;
                            }


                        }
                        if (i == cur.getCount() - 1) {
                            hmapQuestDependVisible.put(prvsdpndntQuestId, listQestDpndnt);
                        }
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("ErrorDatabase getAllQuestIdWhoseValuesDpndnt =" + e.toString());
        } finally {
            // close();
            return hmapQuestDependVisible;
        }
    }

    public LinkedHashMap<String, String> getAllQstGrpIdAgainstGrp() {
        //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        //open();
        LinkedHashMap<String, String> hmapData = new LinkedHashMap<String, String>();
        Cursor cur = db.rawQuery("Select GrpID,GrpQuestID from tblGetPDAQuestGrpMapping", null);
        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                for (int i = 0; i < cur.getCount(); i++) {
                    hmapData.put(cur.getString(1), cur.getString(0));
                    cur.moveToNext();
                }
            }
        }
        // close();
        return hmapData;
    }

    public LinkedHashMap<String, String> getQuestGrpIdLnkWdQstId() {
        //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        //open();
        LinkedHashMap<String, String> hmapData = new LinkedHashMap<String, String>();
        Cursor cur = db.rawQuery("Select QuestID,GrpQuestID from tblGetPDAQuestGrpMapping", null);
        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                for (int i = 0; i < cur.getCount(); i++) {
                    hmapData.put(cur.getString(1), cur.getString(0));
                    cur.moveToNext();
                }
            }
        }
        // close();
        return hmapData;
    }
/*	public static LinkedHashMap<String, String> fnGetQuestionIdFlgPrvValue(String TempID)
	{
	LinkedHashMap<String, String> hmapQuestionflgPrvValue=new LinkedHashMap<String, String>();
	//open();

	int lastIndex=0;
	Cursor cursor;
	cursor = db.rawQuery("SELECT QstId,AnsControlTypeID,flgPrvVal,GrpQuestID from tblPreAddedStoresDataDetails Where tblPreAddedStoresDataDetails.StoreIDDB='"+ TempID +"'", null);


	try {
		if(cursor.getCount()>0)
		{
			if (cursor.moveToFirst())
			{
				for (int i = 0; i <= (cursor.getCount() - 1); i++) {
					hmapQuestionflgPrvValue.put((String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(3).toString(), (String) cursor.getString(2).toString());

					cursor.moveToNext();
				}

			}
		}
		return hmapQuestionflgPrvValue;
	}
	finally
	{
		cursor.close();
		//close();
	}
}*/

    public String getChannelGroupIdOptId() {
        String grpQstIdOptIdForChannel = "0-0-0";


        try {

//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
            Cursor cur = db.rawQuery("Select OptID from tblQuestIDForOutChannel", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {

                    grpQstIdOptIdForChannel = cur.getString(0);
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {

            return grpQstIdOptIdForChannel;
        }
    }

   /* public LinkedHashMap<String, String> getQuestAnswer(String tempId)
    {
        //open();
        LinkedHashMap<String, String> hmapRtrvQuestAns=new LinkedHashMap<String, String>();
        try {
            String channelOptId=getChannelGroupIdOptId();
            String channelkey =getChannelGroupIdKey();
            if(!channelOptId.equals("0-0-0") && !TextUtils.isEmpty(channelkey))
            {
                hmapRtrvQuestAns.put(channelkey,channelOptId);
            }

            //  hmapRtrvQuestAns.put("1^6^1","0-1-80");
            //tblOutletQuestAnsMstr (OutletID text not null,QuestID text not null,AnswerType text null, AnswerValue text null,QuestionGroupID integer null,sectionID integer null,Sstat integer not null);";
            Cursor cursor=db.rawQuery("Select * from tblOutletQuestAnsMstr where OutletID='"+tempId+"'", null);

            if(cursor.getCount()>0)
            {
                if(cursor.moveToFirst())
                {
                    for(int i=0;i<cursor.getCount();i++)
                    {

                        hmapRtrvQuestAns.put(cursor.getString(1)+"^"+cursor.getString(2)+"^"+cursor.getString(4), cursor.getString(3));
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        }
        finally
        {
            //close();
            return hmapRtrvQuestAns;
        }
    }*/
   public LinkedHashMap<String, String> getQuestAnswer(String tempId,String prmchannelOptId)
   {

       LinkedHashMap<String, String> hmapRtrvQuestAns= new LinkedHashMap<>();
       try {
           String channelOptId=prmchannelOptId;
           String channelkey =getChannelGroupIdKey();
           if(!channelOptId.equals("0-0-0"))
           {
               hmapRtrvQuestAns.put(channelkey,channelOptId);
           }

           //  hmapRtrvQuestAns.put("1^6^1","0-1-80");
           //tblOutletQuestAnsMstr (OutletID text not null,QuestID text not null,AnswerType text null, AnswerValue text null,QuestionGroupID integer null,sectionID integer null,Sstat integer not null);";
           Cursor cursor=db.rawQuery("Select * from tblOutletQuestAnsMstr where OutletID='"+tempId+"'", null);

           if(cursor.getCount()>0)
           {
               if(cursor.moveToFirst())
               {
                   for(int i=0;i<cursor.getCount();i++)
                   {

                       hmapRtrvQuestAns.put(cursor.getString(1)+"^"+cursor.getString(2)+"^"+cursor.getString(4), cursor.getString(3));
                       cursor.moveToNext();
                   }
               }
           }
       } catch (Exception e) {
           // TODO: handle exception
       }
       finally
       {

           return hmapRtrvQuestAns;
       }
   }

    public LinkedHashMap<String, String> fnGetQuestionIdFlgPrvValue(String TempID)
    {
        LinkedHashMap<String, String> hmapQuestionflgPrvValue= new LinkedHashMap<>();

        //tblQuestionTaskIdMapd(QstId int null,TaskId int null);";
        int lastIndex=0;
        Cursor cursor;
//tblPreAddedStoresDataDetails (StoreIDDB text null,GrpQuestID text null,QstId text null,AnsControlTypeID text null,AnsTextVal text null,flgPrvVal text null);";
        cursor = db.rawQuery("SELECT QstId,AnsControlTypeID,flgPrvVal,GrpQuestID from tblPreAddedStoresDataDetails Where tblPreAddedStoresDataDetails.StoreIDDB='"+ TempID +"'", null);


        try {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionflgPrvValue.put((String) cursor.getString(0) +"^"+(String) cursor.getString(1) +"^"+(String) cursor.getString(3), (String) cursor.getString(2));

                        cursor.moveToNext();
                    }

                }
            }
            return hmapQuestionflgPrvValue;
        }
        finally
        {
            if(cursor!=null)
            cursor.close();

        }
    }
    public LinkedHashMap<String, String> getPDAUserPreviousQuestionAnswerMasterServer(String tempId) {
        //open();
        LinkedHashMap<String, String> hmapPreviousVisitServerQuestionSavedAns = new LinkedHashMap<String, String>();
        try {
//tblPreAddedStoresDataDetails (StoreIDDB text null,GrpQuestID text null,QstId text null,AnsControlTypeID text null,AnsTextVal text null,flgPrvVal text null);";
            //tblPDAUserPreviousQuestionAnswerMaster(NodeID text null, NodeType text null,QstID text null,AnsControlTypeID text null,Answers text null,temID text null,flgPrvValue text null);";
            Cursor cursor = db.rawQuery("Select * from tblPreAddedStoresDataDetails where StoreIDDB='" + tempId + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        hmapPreviousVisitServerQuestionSavedAns.put(cursor.getString(2) + "^" + cursor.getString(3) + "^" + cursor.getString(1), cursor.getString(4));
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //close();
            return hmapPreviousVisitServerQuestionSavedAns;
        }
    }

    public LinkedHashMap<String, String> getGroupIdCopyAsAbove() {
        LinkedHashMap<String, String> hmapGroupIdCopyAsAbove = new LinkedHashMap<String, String>();
        //open();
        Cursor cur = db.rawQuery("Select DISTINCT GrpID,GrpCopyID from tblGetPDAQuestGrpMapping where GrpCopyID<>0", null);
        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                for (int i = 0; i < cur.getCount(); i++) {
                    hmapGroupIdCopyAsAbove.put(cur.getString(0), cur.getString(1));
                    cur.moveToNext();
                }
            }
        }
        // close();
        return hmapGroupIdCopyAsAbove;
    }

    public String getChannelGroupId() {
        String grpQstIdForChannel = "";

        //open();
        try {

//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
            Cursor cur = db.rawQuery("Select GrpQstId,QuestID from tblQuestIDForOutChannel", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    grpQstIdForChannel = cur.getString(0);
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            // close();
            return grpQstIdForChannel;
        }
    }
    public String getChannelGroupIdOptIdForAddingStore()
    {
        String grpQstIdOptIdForChannel="0-0-0";


        try {

//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
            Cursor cur=db.rawQuery("Select OptID from tblQuestIDForOutChannel", null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {

                    grpQstIdOptIdForChannel=cur.getString(0);
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        }
        finally
        {

            return grpQstIdOptIdForChannel;
        }
    }
    public LinkedHashMap<String, String> getNameQstGrpId_QstId() {
        LinkedHashMap<String, String> grpQstId_qstIdForName = new LinkedHashMap<>();

        //open();
        try {


            Cursor cur = db.rawQuery("Select ID,GrpQstId,QuestID from tblQuestIDForName", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        grpQstId_qstIdForName.put(cur.getString(0), cur.getString(1) + "^" + cur.getString(2));
                        cur.moveToNext();
                    }

                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //  close();
            return grpQstId_qstIdForName;
        }
    }
    public List<TblStoreListMaster> fngetStoreProfileByRouteAlsoAgainstCoverageArea(int CoverageAreaNodeID, String routeID)
    {
        String sql="";//
        if(routeID.equals("0"))
        sql ="Select StoreName, LastVisitDate, NoOfBrands, P3MValue, MTDValue, LastTransactionDate, StoreID,ISNewStore,Sstat from tblStoreList inner join tblRoutelist ON tblStoreList.StoreRouteID=tblRoutelist.RouteNodeID  WHERE tblRoutelist.CoverageAreaNodeID =" + CoverageAreaNodeID + "" + " ORDER BY StoreName ASC";
        else
            sql ="Select StoreName, LastVisitDate, NoOfBrands, P3MValue, MTDValue, LastTransactionDate, StoreID,ISNewStore,Sstat from tblStoreList  inner join tblRoutelist ON tblStoreList.StoreRouteID=tblRoutelist.RouteNodeID  WHERE tblRoutelist.CoverageAreaNodeID =" + CoverageAreaNodeID + "" + " AND tblStoreList.StoreRouteID='"+routeID+"' ORDER BY StoreName ASC";

        List<TblStoreListMaster> tblStoreListMasters =  new ArrayList<>();
        Cursor cursor = db.rawQuery(sql,null);
        try
        {
            while(cursor.moveToNext())
            {
                TblStoreListMaster tblStoreListMaster = new TblStoreListMaster();
                tblStoreListMaster.setStoreName(cursor.getString(0));
                tblStoreListMaster.setLastVisitDate(cursor.getString(1));
                tblStoreListMaster.setNoOfBrands(cursor.getInt(2));
                tblStoreListMaster.setP3MValue(Double.valueOf(cursor.getString(3)));
                tblStoreListMaster.setMTDValue(Double.valueOf(cursor.getString(4)));
                tblStoreListMaster.setLastTransactionDate(cursor.getString(5));
                tblStoreListMaster.setStoreID(cursor.getString(6));
                tblStoreListMaster.setISNewStore(cursor.getInt(7));
                tblStoreListMaster.setSstat(cursor.getString(8));
                tblStoreListMaster.setStoreStatusVisitedOfNewStore(gnGetFetchStoreStatusVisitedOfNewStore(cursor.getString(6)));
                tblStoreListMaster.setFlgRadioButtonSelected(0);
                tblStoreListMasters.add(tblStoreListMaster);

            }


        }

        finally {
            cursor.close();

        }

        return tblStoreListMasters;


    }
    public List<TblStoreListMaster> fngetStoreProfileByRoute(String routeID)
    {
        String sql ="Select StoreName, LastVisitDate, NoOfBrands, P3MValue, MTDValue, LastTransactionDate, StoreID,ISNewStore,Sstat from tblStoreList WHERE StoreRouteID ='" + routeID + "'" + " ORDER BY StoreName ASC";
        List<TblStoreListMaster> tblStoreListMasters =  new ArrayList<>();
        Cursor cursor = db.rawQuery(sql,null);
        try
        {
            while(cursor.moveToNext())
            {
                TblStoreListMaster tblStoreListMaster = new TblStoreListMaster();
                tblStoreListMaster.setStoreName(cursor.getString(0));
                tblStoreListMaster.setLastVisitDate(cursor.getString(1));
                tblStoreListMaster.setNoOfBrands(cursor.getInt(2));
                tblStoreListMaster.setP3MValue(Double.valueOf(cursor.getString(3)));
                tblStoreListMaster.setMTDValue(Double.valueOf(cursor.getString(4)));
                tblStoreListMaster.setLastTransactionDate(cursor.getString(5));
                tblStoreListMaster.setStoreID(cursor.getString(6));
                tblStoreListMaster.setISNewStore(cursor.getInt(7));
                tblStoreListMaster.setSstat(cursor.getString(8));
                tblStoreListMaster.setStoreStatusVisitedOfNewStore(gnGetFetchStoreStatusVisitedOfNewStore(cursor.getString(6)));
                tblStoreListMaster.setFlgRadioButtonSelected(0);
                tblStoreListMasters.add(tblStoreListMaster);

            }


        }

        finally {
            cursor.close();

        }

        return tblStoreListMasters;


    }

    public int gnGetFetchStoreStatusVisitedOfNewStore(String StoreID)
    {

        int ScodecolumnIndex = 0;
       int StoreStatusVisitedOfNewStore=0;
        Cursor cursornew = db.rawQuery("SELECT tblStoreVisitMstr.StoreID, tblStoreList.ISNewStore FROM tblStoreList inner join tblStoreVisitMstr  On tblStoreVisitMstr.StoreID=tblStoreList.StoreID  where tblStoreList.StoreID='"+ StoreID +"' and tblStoreList.ISNewStore=1", null);

        try
        {


            if (cursornew!=null && cursornew.getCount()>0 && cursornew.moveToFirst())
            {

                for (int i = 0; i <= (cursornew.getCount() - 1); i++)
                {
                    StoreStatusVisitedOfNewStore=Integer.parseInt(cursornew.getString(1).toString());
                    cursornew.moveToNext();
                }
            }
            return StoreStatusVisitedOfNewStore;
        }
        finally
        {
            if(cursornew!=null)
                cursornew.close();
        }
    }
    public List<TblStoreListMaster> fngetStoreProfileWithCoverageArea(int coverageID,String routeID)
    {
        String sql ="";
        if(routeID.equals("0"))
         sql ="Select StoreName, LastVisitDate, NoOfBrands, P3MValue, MTDValue, LastTransactionDate, StoreID,ISNewStore,Sstat from tblStoreList inner join tblRoutelist on tblStoreList.StoreRouteID=tblRoutelist.RouteNodeID WHERE tblRoutelist.CoverageAreaNodeID ='" + coverageID + "'  ORDER BY StoreID ASC";
        else
            sql ="Select StoreName, LastVisitDate, NoOfBrands, P3MValue, MTDValue, LastTransactionDate, StoreID,ISNewStore,Sstat from tblStoreList  inner join tblRoutelist on tblStoreList.StoreRouteID=tblRoutelist.RouteNodeID WHERE tblRoutelist.CoverageAreaNodeID ='" + coverageID + "' AND  StoreRouteID ='" + routeID + "'  ORDER BY StoreID ASC";

        List<TblStoreListMaster> tblStoreListMasters =  new ArrayList<>();
        Cursor cursor = db.rawQuery(sql,null);
        try
        {
            while(cursor.moveToNext())
            {
                TblStoreListMaster tblStoreListMaster = new TblStoreListMaster();
                tblStoreListMaster.setStoreName(cursor.getString(0));
                tblStoreListMaster.setLastVisitDate(cursor.getString(1));
                tblStoreListMaster.setNoOfBrands(cursor.getInt(2));
                tblStoreListMaster.setP3MValue(Double.valueOf(cursor.getString(3)));
                tblStoreListMaster.setMTDValue(Double.valueOf(cursor.getString(4)));
                tblStoreListMaster.setLastTransactionDate(cursor.getString(5));
                tblStoreListMaster.setStoreID(cursor.getString(6));
                tblStoreListMaster.setISNewStore(cursor.getInt(7));
                tblStoreListMaster.setSstat(cursor.getString(8));
                tblStoreListMasters.add(tblStoreListMaster);

            }


        }

        finally {
            cursor.close();

        }

        return tblStoreListMasters;


    }
    public List<TblStoreListMaster> fngetStoreProfile(String routeID)
    {
        String sql ="Select StoreName, LastVisitDate, NoOfBrands, P3MValue, MTDValue, LastTransactionDate, StoreID,ISNewStore,Sstat from tblStoreList WHERE StoreRouteID ='" + routeID + "'  ORDER BY StoreID ASC";
        List<TblStoreListMaster> tblStoreListMasters =  new ArrayList<>();
        Cursor cursor = db.rawQuery(sql,null);
        try
        {
            while(cursor.moveToNext())
            {
                TblStoreListMaster tblStoreListMaster = new TblStoreListMaster();
                tblStoreListMaster.setStoreName(cursor.getString(0));
                tblStoreListMaster.setLastVisitDate(cursor.getString(1));
                tblStoreListMaster.setNoOfBrands(cursor.getInt(2));
                tblStoreListMaster.setP3MValue(Double.valueOf(cursor.getString(3)));
                tblStoreListMaster.setMTDValue(Double.valueOf(cursor.getString(4)));
                tblStoreListMaster.setLastTransactionDate(cursor.getString(5));
                tblStoreListMaster.setStoreID(cursor.getString(6));
                tblStoreListMaster.setISNewStore(cursor.getInt(7));
                tblStoreListMaster.setSstat(cursor.getString(8));
                tblStoreListMasters.add(tblStoreListMaster);

            }


        }

        finally {
            cursor.close();

        }

        return tblStoreListMasters;


    }




    public LinkedHashMap<String, String> getDepOptMstr() {


        LinkedHashMap<String, String> hmapgetOptDepMstr = new LinkedHashMap<String, String>();

        //open();
        try {


            Cursor cur = db.rawQuery("Select GrpQuestID,GrpDepQuestID from tblPDAQuestOptionDependentMstr", null);
            if (cur.getCount() > 0) {
                String grpDepQstId, grpQstd;
                if (cur.moveToFirst())
                    for (int i = 0; i < cur.getCount(); i++) {
                        grpQstd = cur.getString(0);
                        grpDepQstId = cur.getString(1);
                        hmapgetOptDepMstr.put(grpQstd, grpDepQstId);
                        cur.moveToNext();


                    }

            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //close();
            return hmapgetOptDepMstr;
        }
    }

    public ArrayList<String> getImagePath(String StoreID) {
        //open();
        ArrayList<String> listImagePath = new ArrayList<String>();
        try {

            //tableImage(tempId text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,ImageClicktime text null,Sstat integer null);";
            //imagButtonTag+"~"+tempId+"~"+uriSavedImage.toString()+"~"+clkdTime+"~"+"2";
            Cursor cursor = db.rawQuery("Select QstIdAnsCntrlTyp,StoreID,imagePath,ImageClicktime,Sstat from tableImage where StoreID='" + StoreID + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        listImagePath.add(cursor.getString(0) + "~" + cursor.getString(1) + "~" + cursor.getString(2) + "~" + cursor.getString(3) + "~" + cursor.getString(4));
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //close();
            return listImagePath;
        }
    }

    public String getChannelGroupIdKey() {
        String keyForChannel = "";


        try {
//tblGetPDAQuestMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,
//tblQuestIDForOutChannel(GrpQstId int null,QuestID int null,OptID text null,SectionCount int null);";
            Cursor cur = db.rawQuery("Select tblQuestIDForOutChannel.GrpQstId,tblQuestIDForOutChannel.QuestID,tblGetPDAQuestMstr.AnsControlType from tblQuestIDForOutChannel inner join tblGetPDAQuestMstr On tblQuestIDForOutChannel.QuestID=tblGetPDAQuestMstr.QuestID", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    keyForChannel = cur.getString(1) + "^" + cur.getString(2) + "^" + cur.getString(0);
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {

            return keyForChannel;
        }
    }
    public void fnsaveOutletQuestAnsMstrSectionWise(LinkedHashMap<String, String> hmapQuesAnsVal,int CurrentsectionID,String CurrentOutletID,String StoreCategoryType)
    {


        fnDeletesaveOutletQuestAnsMstrSctionWise(CurrentOutletID,CurrentsectionID);
      /*  String channelOptId=StoreCategoryType;//getChannelGroupIdOptId(CurrentOutletID);
        String channelkey =getChannelGroupIdKey();
        if(!channelOptId.equals("0-0-0"))
        {
            hmapQuesAnsVal.put(channelkey,channelOptId);
        }*/
        String OutletID="0",QuestID = "0",AnswerType,AnswerValue = "";
        int sectionID = 0;
        int QuestionGroupID=0;

        for(Entry<String, String> entry:hmapQuesAnsVal.entrySet())
        {
            String questId=entry.getKey().split(Pattern.quote("^"))[0].toString();
            AnswerType=entry.getKey().split(Pattern.quote("^"))[1].toString();
            QuestionGroupID=Integer.valueOf(entry.getKey().split(Pattern.quote("^"))[2].toString());
            AnswerValue=entry.getValue();

            ContentValues content=new ContentValues();

            content.put("AnswerType", Integer.parseInt(AnswerType));
            content.put("AnswerValue", AnswerValue.trim());

            content.put("Sstat", 3);

            content.put("sectionID", CurrentsectionID);
            content.put("QuestionGroupID", QuestionGroupID);

            Cursor cursor = db.rawQuery("SELECT OutletID FROM tblOutletQuestAnsMstr where OutletID='"+CurrentOutletID.toString().trim() +"' and QuestID ='"+ questId +"'" , null);

            //db.insert(TABLE_OutletQuestAnsMstr, null, content);
            if(cursor.getCount()>0)
            {

                int affected = db.update("tblOutletQuestAnsMstr", content, "OutletID=? AND QuestID=?",
                        new String[] {CurrentOutletID.toString().trim(),questId.toString().trim()});
            }
            else
            {

                content.put("QuestID", questId);
                content.put("OutletID", CurrentOutletID.toString().trim());


                db.insert(DBHelper.TABLE_OutletQuestAnsMstr, null, content);
            }

        }




    }
  /*  public void fnsaveOutletQuestAnsMstrSectionWise(LinkedHashMap<String, String> hmapQuesAnsVal,int CurrentsectionID,String CurrentOutletID)
    {

        //open();
        fnDeletesaveOutletQuestAnsMstrSctionWise(CurrentOutletID,CurrentsectionID);
        String channelOptId=getChannelGroupIdOptId();
        String channelkey =getChannelGroupIdKey();
        if(!channelOptId.equals("0-0-0"))
        {
            hmapQuesAnsVal.put(channelkey,channelOptId);
        }
        // hmapQuesAnsVal.put("1^6^1","0-1-80");
        String OutletID="0",QuestID = "0",AnswerType,AnswerValue = "";
        int sectionID = 0;
        int QuestionGroupID=0;

        for(Entry<String, String> entry:hmapQuesAnsVal.entrySet())
        {
            String questId=entry.getKey().split(Pattern.quote("^"))[0].toString();
            AnswerType=entry.getKey().split(Pattern.quote("^"))[1].toString();
            QuestionGroupID=Integer.valueOf(entry.getKey().split(Pattern.quote("^"))[2].toString());
            AnswerValue=entry.getValue();

            ContentValues content=new ContentValues();

            content.put("AnswerType", Integer.parseInt(AnswerType));
            content.put("AnswerValue", AnswerValue.trim());

            content.put("Sstat", 3);

            content.put("sectionID", CurrentsectionID);
            content.put("QuestionGroupID", QuestionGroupID);

            Cursor cursor = db.rawQuery("SELECT OutletID FROM tblOutletQuestAnsMstr where OutletID='"+CurrentOutletID.toString().trim() +"' and QuestID ='"+ questId +"'" , null);

            //db.insert(TABLE_OutletQuestAnsMstr, null, content);
            if(cursor.getCount()>0)
            {

                int affected = db.update("tblOutletQuestAnsMstr", content, "OutletID=? AND QuestID=?",
                        new String[] {CurrentOutletID.toString().trim(),questId.toString().trim()});
            }
            else
            {

                content.put("QuestID", questId);
                content.put("OutletID", CurrentOutletID.toString().trim());


                db.insert(DBHelper.TABLE_OutletQuestAnsMstr, null, content);
            }

        }


        // close();

    }*/
    public String fngettblNewStoreSalesQuotePaymentDetails(String StoreID) {


        String searchString = "";


        try {
            //open();

            Cursor cur = db.rawQuery("Select IFNULL(PymtStageId,0) from tblNewStoreSalesQuotePaymentDetails Where StoreId ='" + StoreID + "'", null);

            if (cur.getCount() > 0) {

                StringBuilder sBuilder = new StringBuilder();

                if (cur.moveToFirst()) {

                    for (int i = 0; i < cur.getCount(); i++) {

                        searchString = cur.getString(0);

                        cur.moveToNext();

                    }

                }


            }


        } catch (Exception e) {

            // TODO: handle exception

        } finally {

            // close();

            return searchString;

        }

    }

    public LinkedHashMap<String, String> fnGettblSalesQuotePaymentModeMstrAllValues() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
        Cursor cursor = db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr", null);// Where PNodeID='"+TSIID+"'
        //(String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        } finally {
            cursor.close();
            //  close();
        }
    }

    public LinkedHashMap<String, String> fnGettblSalesQuotePaymentModeMstr(String PaymentStageID) {


        String strPaymentModeID = "";
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
        strPaymentModeID = fngetPaymentModeIDsBasedOnStageID(PaymentStageID);

        String searchString = "0";

        if (strPaymentModeID.indexOf(",") != -1) {
            String[] arrsearchString = strPaymentModeID.split(Pattern.quote(","));
            for (int i = 0; i < arrsearchString.length; i++) {
                if (i == 0) {
                    searchString = "'" + arrsearchString[i].trim().toLowerCase() + "'";
                } else {
                    searchString += ",'" + arrsearchString[i].trim().toLowerCase() + "'";
                }
            }
        } else {
            searchString = "'" + strPaymentModeID.trim().toLowerCase() + "'";
        }

        // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        Cursor cursor = null;
//tblSalesQuotePaymentModeMstr (PymtModeId text null,PymtMode text null);";
        //   cursor= db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr Where  PymtModeId in ("+searchString+")  ", null);// Where PNodeID='"+TSIID+"'

        if (PaymentStageID.equals("1")) {
            cursor = db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr limit 3  ", null);// Where PNodeID='"+TSIID+"'
        }
        if (PaymentStageID.equals("2")) {
            cursor = db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr limit 4  ", null);// Where PNodeID='"+TSIID+"'
        }
        if (PaymentStageID.equals("3")) {
            cursor = db.rawQuery("SELECT PymtModeId,PymtMode from tblSalesQuotePaymentModeMstr limit 5  ", null);// Where PNodeID='"+TSIID+"'
        }
        if (PaymentStageID.equals("1") || PaymentStageID.equals("2") || PaymentStageID.equals("3")) {
            try {
                if (cursor.getCount() > 0) {
                    if (cursor.moveToFirst()) {
                        for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                            hmapQuestionMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString());
                            //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                            cursor.moveToNext();
                        }
                    }
                }

            } finally {
                cursor.close();
                // close();
            }
        }
        return hmapQuestionMstr;

    }

    public ArrayList<String> fnGetOptionMstr(int questionId) {
        //  LinkedHashMap<String, String> hmapOptionMstr=new LinkedHashMap<String, String>();
        ArrayList<String> listOptionMstr = new ArrayList<String>();
        // ArrayList<String> al1 = new ArrayList<String>();
        String idd = "0";

        //open();
        Cursor cursor = db.rawQuery("SELECT  tblGetPDAQuestMstr.AnsControlType ,tblGetPDAQuestOptionMstr.OptID,tblGetPDAQuestOptionMstr.QuestID,tblGetPDAQuestOptionMstr.OptionDescr,tblGetPDAQuestOptionMstr.Sequence from tblGetPDAQuestOptionMstr inner join tblGetPDAQuestMstr on tblGetPDAQuestOptionMstr.QuestID =tblGetPDAQuestMstr.QuestID  Where tblGetPDAQuestOptionMstr.QuestID='" + questionId + "' Order By tblGetPDAQuestOptionMstr.Sequence ASC ", null);// Where PNodeID='"+TSIID+"'
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                        listOptionMstr.add(i, (String) cursor.getString(1).toString() + "^" + (String) cursor.getString(3).toString());
                        cursor.moveToNext();
                    }
                    //  hmapOptionMstr.put(idd, al1);
                }
            }
            return listOptionMstr;
        } finally {
            cursor.close();
            //  close();
        }
    }

    public String[] getQuestIdGroupIdCopyAsAbove(int GrpCopyID, int groupId) {
        String[] questGroupIdCopyAsAbove = null;
        //open();
        Cursor cur = db.rawQuery("Select QuestCopyID from tblGetPDAQuestGrpMapping where GrpID=" + groupId + " AND GrpCopyID=" + GrpCopyID, null);
        if (cur.getCount() > 0) {
            questGroupIdCopyAsAbove = new String[cur.getCount()];
            if (cur.moveToFirst()) {
                for (int i = 0; i < cur.getCount(); i++) {
                    questGroupIdCopyAsAbove[i] = cur.getString(0);
                    cur.moveToNext();
                }
            }
        }
        //close();
        return questGroupIdCopyAsAbove;
    }

    public String[] fnGetGroupIdQuestionMstr(String questGroupID, int section) {
        String[] questonWdSameGroupId = new String[2];
        //open();
        int lastIndex = 0;
        //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        Cursor cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.AnsControlType, tblGetPDAQuestGrpMapping.GrpQuestID from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping on tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID where tblGetPDAQuestMstr.QuestBundleGroupId = '" + questGroupID + "' AND tblGetPDAQuestGrpMapping.SectionNo=" + section, null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        questonWdSameGroupId[i] = (String) cursor.getString(0).toString() + "^" + (String) cursor.getString(1).toString() + "^" + (String) cursor.getString(2).toString();

                        cursor.moveToNext();
                    }

                }
            }
            return questonWdSameGroupId;
        } finally {
            cursor.close();
            //  close();
        }
    }

    public ArrayList<String> getDepOtnVal(String depAnsValid, int grpId, int grpQstDepId) {
        ////  private static final String DATABASE_CREATE_TABLE_QUESTION_OPTION_VAL_DEPENDENTMstr = "create table tblPDAQuestOptionValuesDependentMstr(DepQstId int null,DepAnswValId int null,QstId int null,AnswValId text null,OptDescr text null,Sequence int null,GrpQuestID int null,GrpDepQuestID int null);";
        //open();

        ArrayList<String> listOptId_OptName = new ArrayList<String>();
        try {


            Cursor cur = db.rawQuery("Select AnswValId,OptDescr from tblPDAQuestOptionValuesDependentMstr where GrpQuestID=" + grpId + " AND GrpDepQuestID=" + grpQstDepId + " AND DepAnswValId='" + depAnsValid + "'", null);

            if (cur.getCount() > 0) {
                String optId_optDescr;
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        optId_optDescr = cur.getString(0) + "^" + cur.getString(1);
                        listOptId_OptName.add(optId_optDescr);
                        cur.moveToNext();
                    }

                }


            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //close();
            return listOptId_OptName;
        }

    }

    public void deleteImageData(String imageValidName, String storeId) {
        //tableImage(tempId text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,Sstat integer null);";
        //open();
        Cursor cur = db.rawQuery("Select imageName from tableImage where StoreID='" + storeId + "' AND imageName='" + imageValidName + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.TABLE_IMAGE, "StoreID=? AND imageName=?", new String[]{storeId, imageValidName});
        }
        // close();
    }

    public void insertImageInfo(String tempId, LinkedHashMap<String, String> hmapAllValues) {
        //tableImage(tempId text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,Sstat integer null);";
        //open();
        Cursor cur = db.rawQuery("Select imageName from tableImage where StoreID='" + tempId + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.TABLE_IMAGE, "StoreID=?", new String[]{tempId});
        }
        String StoreID = null, qstIdAndCntrlTyp = null, _imageName = null, imagePath = null, clkdTime;
        int sStat = 3;
        for (Entry<String, String> hmaEntry : hmapAllValues.entrySet()) {
            StoreID = hmaEntry.getValue().split(Pattern.quote("~"))[1].toString();
            qstIdAndCntrlTyp = hmaEntry.getValue().split(Pattern.quote("~"))[0].toString();
            _imageName = hmaEntry.getKey();
            imagePath = hmaEntry.getValue().split(Pattern.quote("~"))[2].toString();
            clkdTime = hmaEntry.getValue().split(Pattern.quote("~"))[3].toString();
            // sStat=Integer.valueOf(hmaEntry.getValue().split(Pattern.quote("~"))[4].toString());


            // tableImage(tempId
            ContentValues content = new ContentValues();
            content.put("StoreID", StoreID);
            content.put("QstIdAnsCntrlTyp", qstIdAndCntrlTyp);

            content.put("imageName", _imageName);
            content.put("imagePath", imagePath);
            content.put("ImageClicktime", clkdTime);
            content.put("Sstat", sStat);
            content.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
            content.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


            db.insert(DBHelper.TABLE_IMAGE, null, content);


        }

        // close();
    }

    //public void fnInsertOrUpdate_tblStoreDeatils(String StoreID, String StoreName, String ActualLatitude, String ActualLongitude, String VisitStartTS, String VisitEndTS, String LocProvider, String Accuracy, String BateryLeftStatus, int IsStoreDataCompleteSaved, String PaymentStage, int flgLocationTrackEnabled, String StoreAddress, String StoreCity, String StorePinCode, String StoreState, int Sstat) {



		/*//open();
		try {
			Cursor cursor = db.rawQuery("SELECT StoreID FROM "+ DATABASE_TABLE_MAINtblStoreDeatils +" where StoreID='"+StoreID +"'" , null);


			ContentValues initialValues = new ContentValues();


			initialValues.put("StoreName", StoreName.trim());
			initialValues.put("VisitEndTS", VisitEndTS);

			initialValues.put("IsStoreDataCompleteSaved", IsStoreDataCompleteSaved);
			initialValues.put("PaymentStage", PaymentStage);
			initialValues.put("flgLocationTrackEnabled", flgLocationTrackEnabled);
			initialValues.put("StoreAddress", StoreAddress);
			initialValues.put("StoreCity", StoreCity);
			initialValues.put("StorePinCode", StorePinCode);
			initialValues.put("StoreState", StoreState);
			initialValues.put("Sstat", Sstat);


			if(cursor.getCount()>0)
			{

				int affected = db.update(DATABASE_TABLE_MAINtblStoreDeatils, initialValues, "StoreID=?",new String[] {StoreID});
			}
			else
			{
				initialValues.put("StoreID", StoreID.trim());
				initialValues.put("ActualLatitude", ActualLatitude);
				initialValues.put("ActualLongitude", ActualLongitude);
				initialValues.put("VisitStartTS", VisitStartTS);
				initialValues.put("LocProvider", LocProvider);
				initialValues.put("Accuracy", Accuracy);
				initialValues.put("BateryLeftStatus", BateryLeftStatus);
				db.insert(DATABASE_TABLE_MAINtblStoreDeatils, null, initialValues);
			}


		} finally {
			close();
		}*/

    //}

    public int fetch_GetCoverageAreaIDAgsinstStoreID(String StoreID)
    {

        int CoverageAreaIDAgsinstStoreID =0;
        Cursor cursor = db.rawQuery("SELECT CoverageAreaID FROM tblPreAddedStores WHERE StoreID='"+StoreID+"'",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    CoverageAreaIDAgsinstStoreID=Integer.parseInt(cursor.getString(0));
                }
            }

            return CoverageAreaIDAgsinstStoreID;
        }
        finally
        {
            if(cursor!=null)
            cursor.close();

        }
    }

    public int CheckTotalStoreCountSO() throws IOException
    {

        int chkI = 0;
        Cursor cursorE2=null;

        try
        {
            cursorE2 = db.rawQuery("SELECT flgStoreOrder from tblPreAddedStores order by flgStoreOrder desc limit 1", null);
            if(cursorE2.getCount()>0) {
                if (cursorE2.moveToFirst()) {

                    if (cursorE2.getInt(0) > 0) {
                        chkI = cursorE2.getInt(0);
                    } else {
                        chkI = 0;
                    }
                }
            }

        } finally
        {
            if(cursorE2!=null) {
                cursorE2.close();
            }

        }
        return chkI;
    }
    public void fnInsertOrUpdate_tblStoreDeatils(String StoreID,String StoreName,String ActualLatitude,String ActualLongitude,
                                                 String VisitStartTS,String VisitEndTS,String LocProvider,String Accuracy,
                                                 String BateryLeftStatus,int IsStoreDataCompleteSaved,String PaymentStage,
                                                 int flgLocationTrackEnabled,String StoreAddress,String StoreCity,
                                                 String StorePinCode,String StoreState,int Sstat,
                                                 int flgApproveOrRejectOrNoActionOrReVisit,int flgStoreVisitMode,
                                                 String StoreCategoryType,int StoreSectionCount, int flgLocationServicesOnOff,
                                                 int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff,
                                                 int flgInternetOnOffWhileLocationTracking, int flgRestart, int flgStoreOrder,
                                                 int flgUpdateSomeNewStoreFlags,String CityId,String StateId,
                                                 String MapAddress,String MapCity,String MapPinCode,String MapState,String slctdBeatId,String slctdBeatNodeType,int CoverageAreaNodeID,int CoverageAreaNodeType)
    {

        int flgIfStoreHasRecords=0;
        try {
            flgIfStoreHasRecords=CheckTotalStoreCountSO();
        }
        catch (Exception ex)
        {

        }

        try {
            Cursor cursor = db.rawQuery("SELECT StoreID FROM "+ DBHelper.DATABASE_TABLE_tblPreAddedStores +" where StoreID='"+StoreID +"'" , null);


            ContentValues initialValues = new ContentValues();
            initialValues.put("StoreName", StoreName.trim());
            initialValues.put("IsStoreDataCompleteSaved", IsStoreDataCompleteSaved);
            initialValues.put("PaymentStage", PaymentStage);
            initialValues.put("flgLocationTrackEnabled", flgLocationTrackEnabled);
            initialValues.put("StoreAddress", StoreAddress);
            initialValues.put("City", StoreCity);
            initialValues.put("PinCode", StorePinCode);
            initialValues.put("State", StoreState);
            initialValues.put("Sstat", Sstat);
            initialValues.put("SOLatCode", ActualLatitude);
            initialValues.put("SOLongCode", ActualLongitude);
            initialValues.put("SOAccuracy", Accuracy);
            initialValues.put("LocProvider", LocProvider);
            // initialValues.put("Accuracy", Accuracy);
            initialValues.put("BateryLeftStatus", BateryLeftStatus);
            initialValues.put("flgApproveOrRejectOrNoActionOrReVisit", flgApproveOrRejectOrNoActionOrReVisit);
            initialValues.put("flgStoreVisitMode", flgStoreVisitMode);

            initialValues.put("CityId", CityId);
            initialValues.put("StateId", StateId);

            if(flgUpdateSomeNewStoreFlags==1)
            {
                initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
                initialValues.put("flgGPSOnOff", flgGPSOnOff);
                initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
                initialValues.put("flgFusedOnOff", flgFusedOnOff);
                initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
                initialValues.put("flgRestart", flgRestart);
            }
            if(cursor.getCount()>0)
            {
                int affected = db.update(DBHelper.DATABASE_TABLE_tblPreAddedStores, initialValues, "StoreID=?",new String[] {StoreID});
            }
            else
            {
                long syncTIMESTAMP = System.currentTimeMillis();
                Date datefromat = new Date(syncTIMESTAMP);
                SimpleDateFormat dfDate = new SimpleDateFormat("dd-MMM-yyyy",Locale.ENGLISH);
                String VisitDate = dfDate.format(datefromat);
//
                initialValues.put("DateAdded", VisitDate);
                initialValues.put("StoreID", StoreID);
                initialValues.put("SOLatCode", ActualLatitude);
                initialValues.put("SOLongCode", ActualLongitude);
                initialValues.put("LatCode", ActualLatitude);
                initialValues.put("LongCode", ActualLongitude);
                initialValues.put("Accuracy", Accuracy);
                initialValues.put("SOAccuracy", Accuracy);
                initialValues.put("DistanceNear", 0);
                initialValues.put("CoverageAreaID", CoverageAreaNodeID);
                initialValues.put("CoverageAreaType", CoverageAreaNodeType);
                initialValues.put("RouteNodeID", Integer.parseInt(slctdBeatId));
                initialValues.put("RouteNodeType",  Integer.parseInt(slctdBeatNodeType));
                initialValues.put("StoreCategoryType", StoreCategoryType);
                initialValues.put("StoreSectionCount", StoreSectionCount);
                //initialValues.put("DateAdded", "0");
                initialValues.put("VisitStartTS", VisitStartTS);
                initialValues.put("VisitEndTS", VisitEndTS);
                initialValues.put("flgRemap", 0);
                //initialValues.put("LocProvider", LocProvider);
                // initialValues.put("Accuracy", Accuracy);
                // initialValues.put("BateryLeftStatus", BateryLeftStatus);
                initialValues.put("flgOldNewStore", 1);
                initialValues.put("flgStoreOrder", (flgIfStoreHasRecords+1));

                initialValues.put("MapAddress", MapAddress);
                initialValues.put("MapCity", MapCity);
                initialValues.put("MapPinCode", MapPinCode);
                initialValues.put("MapState", MapState);
                initialValues.put("flgSelfStoreNode", 1);

                db.insert(DBHelper.DATABASE_TABLE_tblPreAddedStores, null, initialValues);
            }


        }
        catch(Exception ex)
        {
            String ex1=ex.getMessage();
        }
        finally {

        }

    }
        public void UpdateStoreNamePreAddedTable(String StoreID, String StoreName)
    {
        try
        {
            final ContentValues values = new ContentValues();
            values.put("StoreName", StoreName);



            int affected16 = db.update("tblPreAddedStores", values,"StoreID=?", new String[] { StoreID });
        }
        catch (Exception ex) {

        }
    }
    public void UpdateStoreReturnphotoFlag(String sID, int flag2set) {
        try {
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected16 = db.update("tblStoreProductPhotoDetail", values, "StoreID=?", new String[]{sID});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    public void UpdateNewAddedStorephotoFlag(String sID, int flag2set) {
        try {
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected16 = db.update("tableImage", values, "StoreID=?", new String[]{sID});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    public void UpdateStoreClosephotoWithOutFlag(String sID, int flag2set) {
        try {
            // final ContentValues values = new ContentValues();
            //values.put("Sstat", flag2set);
            // int affected16 = db.update("tblStoreClosedPhotoDetail", values,"", new String[] {  });
            db.execSQL("UPDATE tblStoreClosedPhotoDetail SET Sstat=5 where Sstat=" + 3);
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    /*public static void UpdateStoreReturnphotoFlag(String StoreID, String StoreName,int flgReMap)
	{
		try
		{
			//
			final ContentValues values = new ContentValues();
			values.put("StoreName", StoreName);
			values.put("flgReMap", flgReMap);



			int affected16 = db.update("tblPreAddedStores", values,"StoreID=?", new String[] { StoreID });
		}
		catch (Exception ex) {

		}
	}*/
    public String getTodatAndTotalStores() {
        String StoresData = "0^0";
        //open();
        try {
            Cursor cur = db.rawQuery("Select TotStoreAdded , TodayStoreAdded from tblStoreCountDetails", null);

            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        StoresData = cur.getString(0) + "^" + cur.getString(1);
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            // close();
            return StoresData;
        }
    }

	/*public static long saveTblStoreCountDetails(String TotStoreAdded,String TodayStoreAdded)
	{

		ContentValues initialValues = new ContentValues();

		initialValues.put("TotStoreAdded", Integer.parseInt(TotStoreAdded.toString().trim()));
		initialValues.put("TodayStoreAdded", Integer.parseInt(TodayStoreAdded.toString().trim()));

		return db.insert(DATABASE_TABLE_tblStoreCountDetails, null, initialValues);
	}*/



    public void deletetblStoreCountDetails() {
        db.execSQL("DELETE FROM tblStoreCountDetails");

    }

    public int checkCountIntblNewStoreMainTable(String StoreId) {
        //open();
        Cursor cursor = null;
        int check = 0;
        try {

            cursor = db.rawQuery("SELECT Count(*) FROM tblOutletQuestAnsMstr WHERE  OutletID ='" + StoreId + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = 1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {
            System.out.println("shivam query = " + e.toString());
        } finally {
            cursor.close();
            // close();
        }
        return check;
    }

    public void fndeleteNewStoreSalesQuotePaymentDetails(String StoreID) {

        db.execSQL("DELETE FROM tblNewStoreSalesQuotePaymentDetails WHERE StoreId ='" + StoreID + "'");
    }

    public long fnsaveNewStoreSalesQuotePaymentDetails(String StoreId, String PaymentStageId) {

        ContentValues initialValues = new ContentValues();


        initialValues.put("StoreId", StoreId.toString().trim());

        initialValues.put("PymtStageId", PaymentStageId.toString().trim());
        initialValues.put("Sstat", "1");

        return db.insert(DBHelper.DATABASE_TABLE_NewStoreSalesQuotePaymentDetails, null, initialValues);
    }

    public String getLocationDetails() {
        //String StoresData="0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0^0";
        String StoresData = "0";
        //open();
        try {                           //  0           1        2         3       4     5       6     7                 8          9   1 0              11     12    13           14          15         16          17                        18        19    20                21                                   22                                   23
            Cursor cur = db.rawQuery("Select Lattitude,Longitude,Accuracy,Address,City,Pincode,State,fnAccurateProvider,GpsLat,GpsLong,GpsAccuracy,NetwLat,NetwLong,NetwAccuracy,FusedLat,FusedLong,FusedAccuracy,AllProvidersLocation,GpsAddress,NetwAddress,FusedAddress,FusedLocationLatitudeWithFirstAttempt,FusedLocationLongitudeWithFirstAttempt,FusedLocationAccuracyWithFirstAttempt from tblLocationDetails", null);

            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        StoresData = cur.getString(0) + "^" + cur.getString(1) + "^" + cur.getString(2) + "^" + cur.getString(3) + "^" + cur.getString(4) + "^" + cur.getString(5) + "^" + cur.getString(6) + "^" + cur.getString(7) + "^" + cur.getString(8) + "^" + cur.getString(9) + "^" + cur.getString(10) + "^" + cur.getString(11) + "^" + cur.getString(12) + "^" + cur.getString(13) + "^" + cur.getString(14) + "^" + cur.getString(15) + "^" + cur.getString(16) + "^" + cur.getString(17) + "^" + cur.getString(18) + "^" + cur.getString(19) + "^" + cur.getString(20) + "^" + cur.getString(21) + "^" + cur.getString(22) + "^" + cur.getString(23);
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //  close();
            return StoresData;
        }
    }

   /* public long saveLatLngToTxtFile(String StoreID, String fnLati, String fnLongi,
                                    String fnAccuracy, String fnAccurateProvider,
                                    String GpsLat, String GpsLong, String GpsAccuracy,
                                    String NetwLat, String NetwLong, String NetwAccuracy, String FusedLat,
                                    String FusedLong, String FusedAccuracy,
                                    int Sstat, String flgLocNotFound, String fnAddress, String AllProvidersLocation, String GpsAddress, String NetwAddress
            , String FusedAddress, String FusedLocationLatitudeWithFirstAttempt, String FusedLocationLongitudeWithFirstAttempt, String FusedLocationAccuracyWithFirstAttempt) {
        //open();
        try {
            ContentValues initialValues = new ContentValues();

            Cursor cursor = db.rawQuery("Select StoreID from tblLatLongDetails where StoreID='" + StoreID + "'", null);

            if (cursor.getCount() > 0) {

            } else {
                initialValues.put("StoreID", StoreID);
                initialValues.put("fnLati", fnLati);
                initialValues.put("fnLongi", fnLongi.trim());
                initialValues.put("fnAccuracy", fnAccuracy.trim());
                initialValues.put("flgLocNotFound", flgLocNotFound);
                initialValues.put("fnAccurateProvider", fnAccurateProvider.trim());
                initialValues.put("fnAddress", fnAddress);
                initialValues.put("AllProvidersLocation", AllProvidersLocation);


                initialValues.put("GpsLat", GpsLat.trim());
                initialValues.put("GpsLong", GpsLong.trim());
                initialValues.put("GpsAccuracy", GpsAccuracy.trim());
                initialValues.put("GpsAddress", GpsAddress);

                initialValues.put("NetwLat", NetwLat.trim());
                initialValues.put("NetwLong", NetwLong.trim());
                initialValues.put("NetwAccuracy", NetwAccuracy.trim());
                initialValues.put("NetwAddress", NetwAddress);

                initialValues.put("FusedLat", FusedLat.trim());
                initialValues.put("FusedLong", FusedLong.trim());
                initialValues.put("FusedAccuracy", FusedAccuracy.trim());
                initialValues.put("FusedAddress", FusedAddress);


                initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt);
                initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt);
                initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt);
                initialValues.put("Sstat", Sstat);
                initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
                initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

                return db.insert(DBHelper.DATABASE_TABLE_Main271, null, initialValues);
            }


        } catch (Exception e) {

        } finally {
            // close();
        }
        return 0;
    }*/
   public long  saveLatLngToTxtFile(String StoreID,String StoreVisitCode, String fnLati, String fnLongi,
                                    String fnAccuracy, String fnAccurateProvider,
                                    String GpsLat, String GpsLong, String GpsAccuracy,
                                    String NetwLat, String NetwLong, String NetwAccuracy, String FusedLat,
                                    String FusedLong, String FusedAccuracy,
                                    int Sstat, String flgLocNotFound, String fnAddress, String AllProvidersLocation, String GpsAddress, String NetwAddress
           , String FusedAddress, String FusedLocationLatitudeWithFirstAttempt, String FusedLocationLongitudeWithFirstAttempt, String FusedLocationAccuracyWithFirstAttempt)
   {
       //open();
       try
       {
           ContentValues initialValues = new ContentValues();

           Cursor cursor=db.rawQuery("Select StoreID from tblLatLongDetails where StoreID='"+StoreID+"'",null);

           if(cursor.getCount()>0)
           {

           }
           else
           {
               initialValues.put("StoreID", StoreID);
               //initialValues.put("StoreVisitCode",StoreVisitCode);
               initialValues.put("fnLati", fnLati);
               initialValues.put("fnLongi", fnLongi.trim());
               initialValues.put("fnAccuracy", fnAccuracy.trim());
               initialValues.put("flgLocNotFound", flgLocNotFound);
               initialValues.put("fnAccurateProvider", fnAccurateProvider.trim());
               initialValues.put("fnAddress", fnAddress);
               initialValues.put("AllProvidersLocation", AllProvidersLocation);


               initialValues.put("GpsLat", GpsLat.trim());
               initialValues.put("GpsLong", GpsLong.trim());
               initialValues.put("GpsAccuracy", GpsAccuracy.trim());
               initialValues.put("GpsAddress", GpsAddress);

               initialValues.put("NetwLat", NetwLat.trim());
               initialValues.put("NetwLong", NetwLong.trim());
               initialValues.put("NetwAccuracy", NetwAccuracy.trim());
               initialValues.put("NetwAddress", NetwAddress);

               initialValues.put("FusedLat", FusedLat.trim());
               initialValues.put("FusedLong", FusedLong.trim());
               initialValues.put("FusedAccuracy", FusedAccuracy.trim());
               initialValues.put("FusedAddress", FusedAddress);


               initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt);
               initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt);
               initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt);
               initialValues.put("Sstat", Sstat);
               return db.insert(DBHelper.DATABASE_TABLE_Main271, null, initialValues);
           }





       }
       catch(Exception e)
       {

       }
       finally
       {
           // close();
       }
       return 0;
   }
    public String[] getDistributorDataMstr() {
        String strStoreTypeNamesDetais[] = null;
        try {
            Cursor cursor2 = db.rawQuery("SELECT NodeID,NodeType,Descr,flgMapped FROM tblSupplierMstrList", null);

            if (cursor2!=null && cursor2.getCount() > 0) {
                strStoreTypeNamesDetais = new String[cursor2.getCount() + 1];
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (i == 0) {
                            strStoreTypeNamesDetais[i] = "0^0^Select Distributor^0";
                        }
                        strStoreTypeNamesDetais[i + 1] = cursor2.getString(0).toString() + "^" + cursor2.getString(1) + "^" + cursor2.getString(2) + "^" + cursor2.getString(3).toString();
                        cursor2.moveToNext();
                    }
                }
            } else {
                strStoreTypeNamesDetais = new String[1];
                strStoreTypeNamesDetais[0] = "0^0^Select Distributor^0";
            }
            if(cursor2!=null)
                cursor2.close();


        }
        catch (Exception ex)
        {
            ex.printStackTrace();
            String exd=ex.getMessage().toString();
        }

        finally {

        }
        return strStoreTypeNamesDetais;
    }
    public LinkedHashMap<String, String> fetch_DSRCoverage_List() {
        //open();
        String SONodeIdAndNodeType= fnGetPersonNodeIDAndPersonNodeTypeForSO();
        String CoverageAreaNodeIDType= fnGetDSRNodeIdAndNodeTypeSO( SONodeIdAndNodeType.split(Pattern.quote("^"))[1]);
        int slctdCoverageAreaNodeID=Integer.parseInt(CoverageAreaNodeIDType.split(Pattern.quote("^"))[0]);
        int slctdCoverageAreaNodeType=Integer.parseInt(CoverageAreaNodeIDType.split(Pattern.quote("^"))[1]);
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();

        Cursor cursor = db.rawQuery("SELECT CoverageAreaNodeID,CoverageArea FROM tblCoverage where CoverageAreaNodeID<>'"+slctdCoverageAreaNodeID+"'", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    hmapCatgry.put("Select DSM", "0");
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapCatgry.put(cursor.getString(1).toString(), cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No DSM", "0");
            }
            return hmapCatgry;
        } finally {
            if(cursor!=null)
            cursor.close();
            //close();
        }
    }

    public String[] getSuplierDataMstr() {
        String strStoreTypeNamesDetais[] = null;
        try {
            Cursor cursor2 = db.rawQuery("SELECT NodeID,NodeType,Descr,flgMapped FROM tblSupplierMstrList", null);

            if (cursor2.getCount() > 0) {
                strStoreTypeNamesDetais = new String[cursor2.getCount() + 1];
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (i == 0) {
                            strStoreTypeNamesDetais[i] = "0^0^Select Distributor^0";
                        }
                        strStoreTypeNamesDetais[i + 1] = cursor2.getString(0).toString() + "^" + cursor2.getString(1) + "^" + cursor2.getString(2) + "^" + cursor2.getString(3);
                        cursor2.moveToNext();
                    }
                }
            } else {
                strStoreTypeNamesDetais = new String[1];
                strStoreTypeNamesDetais[0] = "0^0^Select Distributor^0";
            }
            return strStoreTypeNamesDetais;
        } finally {

        }
    }

    public void Delete_tblSuplierMapping(int DistribtrId, int DistributorNodeType) {
        try {

            db.execSQL("DELETE FROM tblSuplierMapping where SuplierId=" + DistribtrId + " and SuplierNodeType=" + DistributorNodeType);
        } catch (Exception e) {

        } finally {

        }
    }

    public void deletePrvsSupplierMpng() {
        db.execSQL("DELETE FROM tblSuplierMapping");
    }

    public long savetblSuplierMappingData(String SuplierId, String SuplierNodeType,
                                          String flgGSTCapture, String flgGSTCompliance, String GSTNumber, String Address,
                                          String PinCode, String City, String State, String fnLati,
                                          String fnLongi, String fnAccuracy, String flgLocNotFound, String fnAccurateProvider,
                                          String AllProvidersLocation, String fnAddress, String GpsLat, String GpsLong,
                                          String GpsAccuracy, String GpsAddress, String NetwLat, String NetwLong,
                                          String NetwAccuracy, String NetwAddress, String FusedLat, String FusedLong,
                                          String FusedAccuracy, String FusedAddress, String FusedLocationLatitudeWithFirstAttempt,
                                          String FusedLocationLongitudeWithFirstAttempt, String FusedLocationAccuracyWithFirstAttempt,
                                          int Sstat, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgRestart) {

        deletePrvsSupplierMpng();
        ContentValues initialValues = new ContentValues();


        initialValues.put("SuplierId", SuplierId.trim());
        initialValues.put("SuplierNodeType", SuplierNodeType.trim());
        initialValues.put("flgGSTCapture", flgGSTCapture.trim());
        initialValues.put("flgGSTCompliance", flgGSTCompliance.trim());
        initialValues.put("GSTNumber", GSTNumber.trim());

        initialValues.put("Address", Address.trim());
        initialValues.put("PinCode", PinCode.trim());
        initialValues.put("City", City.trim());
        initialValues.put("State", State.trim());

        initialValues.put("fnLati", fnLati.trim());
        initialValues.put("fnLongi", fnLongi.trim());
        initialValues.put("fnAccuracy", fnAccuracy.trim());
        initialValues.put("flgLocNotFound", flgLocNotFound.trim());
        initialValues.put("fnAccurateProvider", fnAccurateProvider.trim());
        initialValues.put("AllProvidersLocation", AllProvidersLocation.trim());
        initialValues.put("fnAddress", fnAddress.trim());

        initialValues.put("GpsLat", GpsLat.trim());
        initialValues.put("GpsLong", GpsLong.trim());
        initialValues.put("GpsAccuracy", GpsAccuracy.trim());
        initialValues.put("GpsAddress", GpsAddress.trim());

        initialValues.put("NetwLat", NetwLat.trim());
        initialValues.put("NetwLong", NetwLong.trim());
        initialValues.put("NetwAccuracy", NetwAccuracy.trim());
        initialValues.put("NetwAddress", NetwAddress.trim());

        initialValues.put("FusedLat", FusedLat.trim());
        initialValues.put("FusedLong", FusedLong.trim());
        initialValues.put("FusedAccuracy", FusedAccuracy.trim());
        initialValues.put("FusedAddress", FusedAddress.trim());

        initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt.trim());
        initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt.trim());
        initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt.trim());
        initialValues.put("Sstat", Sstat);

        initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
        initialValues.put("flgGPSOnOff", flgGPSOnOff);
        initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
        initialValues.put("flgFusedOnOff", flgFusedOnOff);
        initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
        initialValues.put("flgRestart", flgRestart);

        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        return db.insert(DBHelper.TABLE_tblSuplierMapping, null, initialValues);
    }

    public int fnCheckIfStoreIDExistsIn_tblStoreDeatils(String StoreID) {
        //open();
        int flgCheckIfStoreExists = 0;
        //tblStoreDetails(StoreID
        //Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblStoreList where StoreID='" + StoreID + "'", null);
        Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblPreAddedStores where StoreID='"+StoreID+"'", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    if (cursor2.getInt(0) > 0) {

                        flgCheckIfStoreExists = 1;

                    }
                }
            }


        } catch (Exception e) {

        } finally {
            cursor2.close();
            //  close();
        }
        return flgCheckIfStoreExists;
    }
    public ArrayList<String> fnGetDetails_tblStoreDeatilsSO(String StoreID,String StoreName)
    {
        ArrayList<String> arrBasisDetailsAgainstStore= new ArrayList<>();
        Cursor cursor=null;
        try
        {
             cursor = db.rawQuery("SELECT StoreName,IFNULL(tblNewStoreSalesQuotePaymentDetails.PymtStageId,'0') AS PaymentStage,IFNULL(StoreAddress,'NA') AS StoreAddress,IFNULL(City,'NA') AS City,IFNULL(PinCode,'NA') AS PinCode,IFNULL(State,'NA') AS State,LatCode,LongCode,Accuracy,SOLatCode,SOLongCode,IsStoreDataCompleteSaved,VisitStartTS,VisitEndTS,flgOldNewStore,flgSelfStoreNode FROM tblPreAddedStores LEFT OUTER JOIN tblNewStoreSalesQuotePaymentDetails on tblPreAddedStores.StoreID=tblNewStoreSalesQuotePaymentDetails.StoreId where tblPreAddedStores.StoreID='" + StoreID+"'", null);
// IFNULL(PymtStageId,0) from tblNewStoreSalesQuotePaymentDetails Where StoreId
            // private static final String DATABASE_CREATE_TABLE_tblPreAddedStores = "create table tblPreAddedStores (StoreID text null,StoreName text null,LatCode text null," +
/*
            "LongCode text null,DateAdded text null,DistanceNear int null,flgOldNewStore int null,CoverageAreaID int null,CoverageAreaType int null," +
                    "RouteNodeID int null,RouteNodeType int null,City text null,State text null,PinCode text null,StoreCategoryType int null,StoreSectionCount int null," +
                    "flgApproveOrRejectOrNoActionOrReVisit int null,SOLatCode text null,SOLongCode text,VisitStartTS text null,VisitEndTS text null," +
                    "LocProvider text null, Accuracy text null, BateryLeftStatus text null,IsStoreDataCompleteSaved int null,PaymentStage text null,flgLocationTrackEnabled integer null," +
                    "flgStoreVisitMode int null,Sstat int null);";
*/

            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(0));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(1));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(2));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(3));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(4));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(5));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(6));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(7));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(8));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(9));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(10));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(11));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(12));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(13));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(14));
                        arrBasisDetailsAgainstStore.add((String) cursor.getString(15));





                        //,Accuracy,SOLongCode,SOLongCode,IsStoreDataCompleteSaved,PaymentStage
                        // cursor.moveToNext();
                    }
                }
            }
            else
            {
                arrBasisDetailsAgainstStore.add(StoreName);
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("");
                arrBasisDetailsAgainstStore.add("NA");
                arrBasisDetailsAgainstStore.add("NA");
                arrBasisDetailsAgainstStore.add("NA");
                arrBasisDetailsAgainstStore.add("NA");

            }


        }
        catch (Exception e) {
            // TODO: handle exception
        }
        finally
        {
           if(cursor!=null) {
               cursor.close();
           }
        }

        return arrBasisDetailsAgainstStore;
    }

    public void fnVisitStartOrEndTime(String StoreID,String Time,int flgVistStatOrEnd)
    {
        Cursor cursor=null;
        try {
             cursor = db.rawQuery("SELECT StoreID FROM "+ DBHelper.DATABASE_TABLE_tblPreAddedStores +" where StoreID='"+StoreID +"'" , null);


            ContentValues initialValues = new ContentValues();

            if(flgVistStatOrEnd==0)
            {
                initialValues.put("VisitStartTS", Time);
            }
            if(flgVistStatOrEnd==1)
            {
                initialValues.put("VisitEndTS", Time);
            }



            if(cursor.getCount()>0)
            {

                int affected = db.update(DBHelper.DATABASE_TABLE_tblPreAddedStores, initialValues, "StoreID=?",new String[] {StoreID});
            }


        } finally {
           if(cursor!=null)
               cursor.close();
        }

    }

    public ArrayList<String> fnGetDetails_tblStoreDeatils(String StoreID) {
        ArrayList<String> arrBasisDetailsAgainstStore = new ArrayList<String>();

        //open();
        try {
            //Cursor cursor = db.rawQuery("SELECT StoreName,IFNULL(PaymentStage,'0') AS PaymentStage,IFNULL(StoreAddress,'NA') AS StoreAddress,IFNULL(StoreCity,'NA') AS StoreCity,IFNULL(StorePinCode,'NA') AS StorePinCode,IFNULL(StoreState,'NA') AS StoreState,ActualLatitude,ActualLongitude,Accuracy FROM tblStoreList where StoreID='" + StoreID+"'", null);
            // by sunil
            //SELECT t1.product_s_desc, t1.product_desc, t1.product_name, t2.product_price
            //FROM table1 t1
            //INNER JOIN table2 t2 ON t2.product_id = t1.product_id
            Cursor cursor = db.rawQuery("SELECT StoreName,StoreClose,StoreClose,StoreCity,StorePinCode,StoreState,ActualLatitude,ActualLongitude,Accuracy FROM tblStoreList where StoreID='" + StoreID + "'", null);


            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    arrBasisDetailsAgainstStore.add((String) cursor.getString(0).toString());
                    arrBasisDetailsAgainstStore.add((String) cursor.getString(1).toString());
                    arrBasisDetailsAgainstStore.add((String) cursor.getString(2).toString());
                    arrBasisDetailsAgainstStore.add((String) cursor.getString(3).toString());
                    arrBasisDetailsAgainstStore.add((String) cursor.getString(4).toString());
                    arrBasisDetailsAgainstStore.add((String) cursor.getString(5).toString());
                    arrBasisDetailsAgainstStore.add((String) cursor.getString(6).toString());
                    arrBasisDetailsAgainstStore.add((String) cursor.getString(7).toString());
                    arrBasisDetailsAgainstStore.add((String) cursor.getString(8).toString());
                    cursor.moveToNext();
                }
            }


        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //  close();
        }

        return arrBasisDetailsAgainstStore;
    }

    public LinkedHashMap<String, ArrayList<String>> fnGetQuestionMstrKey()
    {
        LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr=new LinkedHashMap<String, ArrayList<String>>();
        ArrayList<String> listKeyQuesVal=new ArrayList<String>();
        //open();
        //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null,GrpCopyID int null,QuestCopyID int null,Sequence int null);";
        //tblGetPDAQuestMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnswerHint text null);";
        Cursor cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.GrpID,tblGetPDAQuestGrpMapping.Sequence from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping where tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  Order By tblGetPDAQuestGrpMapping.GrpID ASC,tblGetPDAQuestGrpMapping.Sequence", null);// Where PNodeID='"+TSIID+"'

        try
        {
            if(cursor.getCount()>0)
            {

                String sectionNo="0",preVisousSectionNum="0";
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        sectionNo= cursor.getString(3);
                        System.out.println("Squence Added = "+cursor.getString(3)+" : "+cursor.getString(4));
                        if(i==0)
                        {
                            preVisousSectionNum= sectionNo;
                            listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
                        }
                        else if(preVisousSectionNum.equals(sectionNo))
                        {
                            listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
                        }
                        else
                        {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                            listKeyQuesVal=new ArrayList<String>();
                            preVisousSectionNum=sectionNo;
                            listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
                        }
                        if(i==(cursor.getCount()-1))
                        {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                        }

                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            cursor.close();
            // close();
        }
    }

    public LinkedHashMap<String, String> getGroupDescription()
    {
        //open();
        LinkedHashMap<String, String> hmapGroupDescrptn=new LinkedHashMap<String, String>();
        //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        Cursor cur=db.rawQuery("Select Distinct GrpID,GrpDesc from tblGetPDAQuestGrpMapping", null);
        if(cur.getCount()>0)
        {
            if(cur.moveToFirst())
            {
                for(int i=0;i<cur.getCount();i++)
                {
                    hmapGroupDescrptn.put(cur.getString(0), cur.getString(1));
                    cur.moveToNext();
                }

            }
        }
        // close();
        return hmapGroupDescrptn;
    }

   /* public LinkedHashMap<String, ArrayList<String>> fnGetGroupIdMpdWdSectionId()
    {
        LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr=new LinkedHashMap<String, ArrayList<String>>();
        ArrayList<String> listKeyQuesVal=new ArrayList<String>();

        //open();
        int sectionCount=getsectionCount();
        //    int sectionCount=0;
        //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        //tblGetPDAQuestMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnswerHint text null);";
        Cursor cursor;
        if(sectionCount!=0)
        {
            cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblGetPDAQuestGrpMapping where SectionNo<="+sectionCount+" order by SectionNo", null);// Where PNodeID='"+TSIID+"'
        }
        else
        {
            cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblGetPDAQuestGrpMapping order by SectionNo", null);// Where PNodeID='"+TSIID+"'
        }


        try
        {
            if(cursor.getCount()>0)
            {
                String sectionNo="0",preVisousSectionNum="0";
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        sectionNo= cursor.getString(1);
                        if(i==0)
                        {
                            preVisousSectionNum= sectionNo;
                            listKeyQuesVal.add(cursor.getString(0));
                        }
                        else if(preVisousSectionNum.equals(sectionNo))
                        {
                            listKeyQuesVal.add(cursor.getString(0));
                        }
                        else
                        {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                            listKeyQuesVal=new ArrayList<String>();
                            preVisousSectionNum=sectionNo;
                            listKeyQuesVal.add(cursor.getString(0));

                        }
                        if(i==cursor.getCount() - 1)
                        {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                        }


                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            cursor.close();
            //close();
        }
    }*/
   public LinkedHashMap<String, ArrayList<String>> fnGetGroupIdMpdWdSectionId(int StoreSectionCount)
   {
       LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr= new LinkedHashMap<>();
       ArrayList<String> listKeyQuesVal= new ArrayList<>();


       int sectionCount=StoreSectionCount;//getsectionCount();

       // int sectionCount1=getsectionCount();
       //int sectionCount=0;
       //tblPDAQuestGrpMappingMstr(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
       //tblQuestionMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnsHint text null);";
       Cursor cursor=null;
       if(sectionCount!=0)
       {
           if(CommonInfo.flgNewStoreORStoreValidation==1)
           {
               cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr where SectionNo<="+sectionCount+" AND flgNewStore=1 order by SectionNo", null);// Where PNodeID='"+TSIID+"'
           }
           else if(CommonInfo.flgNewStoreORStoreValidation==2)
           {
               cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr where SectionNo<="+sectionCount+" AND flgStoreValidation=1 order by SectionNo", null);// Where PNodeID='"+TSIID+"'
           }

       }
       else
       {
           //cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblPDAQuestGrpMappingMstr order by SectionNo", null);// Where PNodeID='"+TSIID+"'
           if(CommonInfo.flgNewStoreORStoreValidation==1)
           {
               cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblGetPDAQuestGrpMapping  WHERE flgNewStore=1 order by SectionNo", null);// Where PNodeID='"+TSIID+"'
           }
           else if(CommonInfo.flgNewStoreORStoreValidation==2)
           {
               cursor = db.rawQuery("SELECT Distinct GrpID,SectionNo from tblGetPDAQuestGrpMapping  WHERE  flgStoreValidation=1 order by SectionNo", null);// Where PNodeID='"+TSIID+"'
           }
       }


       try
       {
           if(cursor.getCount()>0)
           {
               String sectionNo="0",preVisousSectionNum="0";
               if (cursor.moveToFirst())
               {
                   for (int i = 0; i <= (cursor.getCount() - 1); i++)
                   {
                       sectionNo= cursor.getString(1);
                       if(i==0)
                       {
                           preVisousSectionNum= sectionNo;
                           listKeyQuesVal.add(cursor.getString(0));
                       }
                       else if(preVisousSectionNum.equals(sectionNo))
                       {
                           listKeyQuesVal.add(cursor.getString(0));
                       }
                       else
                       {
                           hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                           listKeyQuesVal= new ArrayList<>();
                           preVisousSectionNum=sectionNo;
                           listKeyQuesVal.add(cursor.getString(0));

                       }
                       if(i==cursor.getCount() - 1)
                       {
                           hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                       }


                       cursor.moveToNext();
                   }
               }
           }
           return hmapQuestionMstr;
       }
       finally
       {
           if(cursor!=null)
           cursor.close();

       }
   }
    public LinkedHashMap<String, String> fnGetDependentQuestionMstr() {

        LinkedHashMap<String, String> hmapDpndntQuestionMstr = new LinkedHashMap<String, String>();
        //open();
        //tblGetPDAQuestionDependentMstr(QuestionID int null,OptionID int null,DependentQuestionID int null,GrpID int null,GrpDepQuestID int null);";
        Cursor cursor = db.rawQuery("SELECT DISTINCT GrpDepQuestID,OptionID from tblGetPDAQuestionDependentMstr", null);// Where PNodeID='"+TSIID+"'
        String[] arrbhi = new String[cursor.getCount()];
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        // hmapDpndntQuestionMstr.put((String) cursor.getString(3).toString()+"^"+(String) cursor.getString(1).toString(), (String) cursor.getString(2).toString());
                        arrbhi[i] = (String) cursor.getString(0).toString() + "^" + (String) cursor.getString(1).toString();

                        cursor.moveToNext();
                    }

                }
            }
            for (int cntLoop = 0; cntLoop < arrbhi.length; cntLoop++) {
                String dpndIdAndOptId = arrbhi[cntLoop].toString();
                String dpndntId = dpndIdAndOptId.split(Pattern.quote("^"))[0];
                String optId = dpndIdAndOptId.split(Pattern.quote("^"))[1];
                StringBuilder quesIdToBeVisOrinVis = fnQuestionIdOnBasisOfDependentQuestionIDdpndntId(dpndntId, optId);
                hmapDpndntQuestionMstr.put(arrbhi[cntLoop].toString(), quesIdToBeVisOrinVis.toString());
            }

            return hmapDpndntQuestionMstr;
        } finally {
            cursor.close();
            //close();
        }

    }

    public LinkedHashMap<String, ArrayList<String>> fnGetSection_Key()
    {
        LinkedHashMap<String, ArrayList<String>> hmapQuestionMstr=new LinkedHashMap<String, ArrayList<String>>();
        ArrayList<String> listKeyQuesVal=new ArrayList<String>();
        //open();
        //tblGetPDAQuestGrpMapping(GrpQuestID int null,QuestID int null,GrpID int null,GrpNodeID int null,GrpDesc text null,SectionNo int null);";
        //tblGetPDAQuestMstr(QuestID int null,QuestCode int null,QuestDesc text null,QuestType int null,AnsControlType int null,AnsControlInputTypeID int null,AnsControlInputTypeMinLength int null,AnsControlInputTypeMaxLength int null,AnsMustRequiredFlg int null,QuestBundleFlg int null,ApplicationTypeID int null,Sequence int null,AnswerHint text null);";
        Cursor cursor = db.rawQuery("SELECT tblGetPDAQuestMstr.QuestID,tblGetPDAQuestMstr.AnsControlType,tblGetPDAQuestGrpMapping.GrpQuestID,tblGetPDAQuestGrpMapping.SectionNo from tblGetPDAQuestMstr inner join tblGetPDAQuestGrpMapping where tblGetPDAQuestMstr.QuestID=tblGetPDAQuestGrpMapping.QuestID  Order By tblGetPDAQuestGrpMapping.SectionNo ASC  ", null);// Where PNodeID='"+TSIID+"'

        try
        {
            if(cursor.getCount()>0)
            {
                String sectionNo="0",preVisousSectionNum="0";
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        sectionNo= cursor.getString(3);
                        if(i==0)
                        {
                            preVisousSectionNum= sectionNo;
                            listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
                        }
                        else if(preVisousSectionNum.equals(sectionNo))
                        {
                            listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));
                        }
                        else
                        {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                            listKeyQuesVal=new ArrayList<String>();
                            preVisousSectionNum=sectionNo;
                            listKeyQuesVal.add(cursor.getString(0)+"^"+cursor.getString(1)+"^"+cursor.getString(2));

                        }
                        if(i==(cursor.getCount()-1))
                        {
                            hmapQuestionMstr.put(preVisousSectionNum, listKeyQuesVal);
                        }

                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        }
        finally
        {
            cursor.close();
            // close();
        }
    }
    public void deleteLocationTable() {
        db.execSQL("DELETE FROM tblLocationDetails");

    }
    public void fnUpdateTblLocationDetailsSstat(String StoreID,int flgLocationCaptureLevel,int flgActivityType,String StoreVisitCode,String JointVisitID,int Sstat) {
        try {
            final ContentValues values = new ContentValues();
            values.put("Sstat", Sstat);
            int affected = db.update(DBHelper.DATABASE_TABLE_tblLocationDetails, values, "StoreVisitCode=? AND JointVisitID=? AND flgLocationCaptureLevel=? AND flgActivityType=? AND StoreID=?", new String[]{StoreVisitCode, JointVisitID, "" + flgLocationCaptureLevel, "" + flgActivityType,StoreID});
        } catch (Exception e) {

        } finally {

        }
    }
   /* public long saveTblLocationDetails(String StoreID,String Lattitude, String Longitude, String Accuracy, String Address, String City, String Pincode, String State, String fnAccurateProvider, String GpsLat, String GpsLong, String GpsAccuracy, String NetwLat, String NetwLong, String NetwAccuracy, String FusedLat, String FusedLong, String FusedAccuracy, String AllProvidersLocation, String GpsAddress, String NetwAddress, String FusedAddress, String FusedLocationLatitudeWithFirstAttempt, String FusedLocationLongitudeWithFirstAttempt, String FusedLocationAccuracyWithFirstAttempt,String DSRId,String DSRNodeType,String PersonNodeID,String PersonNodeType,String CaptureDateTime,int flgLocationCaptureLevel,int flgActivityType,String StoreVisitCode,String JointVisitID,int flgJointVisitLevel,int IsNewStore,int Sstat,int RouteNodeID,int RouteNodeType) {

      //  db.delete(DBHelper.DATABASE_TABLE_tblLocationDetails, null, null);

       // db.delete(DBHelper.DATABASE_TABLE_tblLocationDetails, null, null);
        db.delete(DBHelper.DATABASE_TABLE_tblLocationDetails, "StoreVisitCode=? AND JointVisitID=? AND flgLocationCaptureLevel=? AND flgActivityType=? AND StoreID=?", new String[]{StoreVisitCode, JointVisitID, ""+flgLocationCaptureLevel,""+flgActivityType,StoreID});

        ContentValues initialValues = new ContentValues();

//flgActivityType=0 Means SO Location At DayStart
//flgActivityType=1 Means Questions While Adding Store
//flgActivityType=2 Means Questions While Store Visit Feed Back
//flgActivityType=3 Means Questions While DSM Over All Feed Back
//flgActivityType=4 Means Questions While DSM Store Visit Feed Back
// flgActivityType=5 Means Collections While DSM Store Visit Feed Back
        //flgLocationCaptureLevel =0 At DayStart
        //flgLocationCaptureLevel =1 After DayStart
        initialValues.put("StoreID", StoreID);

        initialValues.put("DSRId", DSRId);
        initialValues.put("DSRNodeType", DSRNodeType);
        initialValues.put("PersonNodeID", PersonNodeID);
        initialValues.put("PersonNodeType", PersonNodeType);
        initialValues.put("DateTime", CaptureDateTime);
        initialValues.put("flgActivityType", flgActivityType);
        initialValues.put("StoreVisitCode", StoreVisitCode);
        initialValues.put("JointVisitID", JointVisitID);
        initialValues.put("flgJointVisitLevel", flgJointVisitLevel);
        initialValues.put("flgLocationCaptureLevel", flgLocationCaptureLevel);
        initialValues.put("IsNewStore", IsNewStore);

        initialValues.put("RouteNodeID", RouteNodeID);

        initialValues.put("RouteNodeType", RouteNodeType);

        initialValues.put("Sstat", Sstat);







        initialValues.put("Lattitude", Lattitude);
        initialValues.put("Longitude", Longitude);
        initialValues.put("Accuracy", Accuracy);
        initialValues.put("Address", Address);
        initialValues.put("City", City);
        initialValues.put("Pincode", Pincode);
        initialValues.put("State", State);

        initialValues.put("fnAccurateProvider", fnAccurateProvider);
        initialValues.put("GpsLat", GpsLat);
        initialValues.put("GpsLong", GpsLong);
        initialValues.put("GpsAccuracy", GpsAccuracy);
        initialValues.put("NetwLat", NetwLat);
        initialValues.put("NetwLong", NetwLong);
        initialValues.put("NetwAccuracy", NetwAccuracy);
        initialValues.put("FusedLat", FusedLat);
        initialValues.put("FusedLong", FusedLong);
        initialValues.put("FusedAccuracy", FusedAccuracy);

        initialValues.put("AllProvidersLocation", AllProvidersLocation);
        initialValues.put("GpsAddress", GpsAddress);
        initialValues.put("NetwAddress", NetwAddress);
        initialValues.put("FusedAddress", FusedAddress);
        initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt);
        initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt);
        initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt);


        return db.insert(DBHelper.DATABASE_TABLE_tblLocationDetails, null, initialValues);
    }*/
   public long saveTblLocationDetails(String Lattitude, String Longitude, String Accuracy, String Address, String City, String Pincode, String State, String fnAccurateProvider, String GpsLat, String GpsLong, String GpsAccuracy, String NetwLat, String NetwLong, String NetwAccuracy, String FusedLat, String FusedLong, String FusedAccuracy, String AllProvidersLocation, String GpsAddress, String NetwAddress, String FusedAddress, String FusedLocationLatitudeWithFirstAttempt, String FusedLocationLongitudeWithFirstAttempt, String FusedLocationAccuracyWithFirstAttempt)
   {

       db.delete(DBHelper.DATABASE_TABLE_tblLocationDetails,null,null);
       ContentValues initialValues = new ContentValues();

       initialValues.put("Lattitude", Lattitude);
       initialValues.put("Longitude", Longitude);
       initialValues.put("Accuracy", Accuracy);
       initialValues.put("Address", Address);
       initialValues.put("City", City);
       initialValues.put("Pincode", Pincode);
       initialValues.put("State", State);

       initialValues.put("fnAccurateProvider", fnAccurateProvider);
       initialValues.put("GpsLat", GpsLat);
       initialValues.put("GpsLong", GpsLong);
       initialValues.put("GpsAccuracy", GpsAccuracy);
       initialValues.put("NetwLat", NetwLat);
       initialValues.put("NetwLong", NetwLong);
       initialValues.put("NetwAccuracy", NetwAccuracy);
       initialValues.put("FusedLat", FusedLat);
       initialValues.put("FusedLong", FusedLong);
       initialValues.put("FusedAccuracy", FusedAccuracy);

       initialValues.put("AllProvidersLocation", AllProvidersLocation);
       initialValues.put("GpsAddress", GpsAddress);
       initialValues.put("NetwAddress", NetwAddress);
       initialValues.put("FusedAddress", FusedAddress);
       initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt);
       initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt);
       initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt);



       return db.insert(DBHelper.DATABASE_TABLE_tblLocationDetails, null, initialValues);
   }

    public int fncheckCountNearByStoreExistsOrNot(int DistanceRange) {
        int flgCheck = 0;
        //open();

        try {
            // Cursor cursor = db.rawQuery("SELECT Count(*) from tblPreAddedStores Where (LatCode<>'0' and LatCode<>'NA') and DistanceNear<"+ DistanceRange+ " ORDER BY DistanceNear", null);

            Cursor cursor = db.rawQuery("SELECT Count(*) from tblStoreList WHERE (StoreLatitude<>'0' AND StoreLatitude<>'NA')    ORDER BY DistanceNear ASC", null);//
            //StoreID,StoreName,LatCode,LongCode,DateAdded
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        flgCheck = 1;
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();
            if (flgCheck == 0) {
                flgCheck = fncheckCountNewAddedNearByStoreExistsOrNotSM(flgCheck);
            }
            return flgCheck;
        }
    }

    public int fncheckCountNewAddedNearByStoreExistsOrNotSM(int DistanceRange) {

        //open();

        try {
            Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear from tblPreAddedStores WHERE (LatCode<>'0' AND LatCode<>'NA') AND DistanceNear<" + DistanceRange + " ORDER BY DistanceNear  ASC Limit 30", null);//
            // Cursor cursor = db.rawQuery("SELECT Count(*) from tblStoreList WHERE (StoreLatitude='NA') and ISNewStore=1", null);//
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        DistanceRange = 1;
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();

        }
        return DistanceRange;
    }

    public LinkedHashMap<String, String> fnGetALLOutletMstrSM() {
        Cursor cursor = null;

        LinkedHashMap<String, String> hmapOutletMstr = new LinkedHashMap<String, String>();
        //open();

        cursor = db.rawQuery("SELECT StoreID,ifnull(LatCode,0),ifnull(LongCode,0) from tblPreAddedStores", null);


        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    String phoneNum;
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapOutletMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString() + "^" + (String) cursor.getString(2).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapOutletMstr;
        } finally {
            cursor.close();
            // close();
        }
    }

    public int fncheckCountNewAddedNearByStoreExistsOrNot(int flgCheck) {

        //open();

        try {
            //Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear from tblPreAddedStores WHERE (LatCode<>'0' AND LatCode<>'NA') AND DistanceNear<"+ DistanceRange +" ORDER BY DistanceNear  ASC Limit 30", null);//
            Cursor cursor = db.rawQuery("SELECT Count(*) from tblStoreList WHERE (StoreLatitude='NA') and ISNewStore=1", null);//
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        flgCheck = 1;
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();

        }
        return flgCheck;
    }

    public LinkedHashMap<String, String> fnGeStoreList(int DistanceRange) {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        String ForDate = fnGetDateTimeString();
        //open();

        try {
            Cursor cursor = db.rawQuery("SELECT StoreID,StoreLatitude,StoreLongitude,DistanceNear,0 AsflgReMap from tblStoreList WHERE (StoreLatitude<>'0' AND StoreLatitude<>'NA') ORDER BY StoreName", null);//
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        String StoreLat = "0.00";
                        String StoreLon = "0.00";
                        if (!cursor.getString(2).toString().equals("NA")) {
                            StoreLat = (String) cursor.getString(2).toString();
                            StoreLon = (String) cursor.getString(3).toString();
                        }

                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), StoreLat + "^" + StoreLon + "^" + ForDate + "^" + (String) cursor.getString(5).toString());

                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();
            fnGeNewlyAddedStoreList(hmapQuestionMstr);
            return hmapQuestionMstr;
        }
    }

    public void fnGeNewlyAddedStoreList(LinkedHashMap<String, String> hmapQuestionMstr) {

        //open();

        try {
            //Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear from tblPreAddedStores WHERE (LatCode<>'0' AND LatCode<>'NA') AND DistanceNear<"+ DistanceRange +" ORDER BY DistanceNear  ASC Limit 30", null);//
            String fetchdate = fnGetDateTimeString();
            Cursor cursor = db.rawQuery("SELECT StoreID,StoreLatitude,StoreLongitude,DistanceNear,0 AsflgReMap from tblStoreList WHERE (StoreLatitude='NA') and ISNewStore=1", null);//
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        String StoreLat = "0.00";
                        String StoreLon = "0.00";
                        if (!cursor.getString(1).toString().equals("NA")) {
                            StoreLat = (String) cursor.getString(1).toString();
                            StoreLon = (String) cursor.getString(2).toString();
                        }

                        //hmapQuestionMstr.put((String) cursor.getString(0).toString(),StoreLat+"^"+StoreLon+"^"+(String) cursor.getString(3).toString());
                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), StoreLat + "^" + StoreLon + "^" + fetchdate + "^" + (String) cursor.getString(4).toString());
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            //close();

        }
    }
    public LinkedHashMap<String, String> fnGeStoreLatAndLongBasedOnStoreID(String StoreID) {
        LinkedHashMap<String, String> hmapStoreLisMstr = new LinkedHashMap<>();
        Cursor cursor = null;

        try {

            cursor = db.rawQuery("SELECT StoreID,LatCode,LongCode from tblPreAddedStores Where  StoreID='" + StoreID + "'", null);


            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapStoreLisMstr.put((String) cursor.getString(0), (String) cursor.getString(1) + "~" + (String) cursor.getString(2));
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {

        } finally {
            if(cursor!=null)
            {
                cursor.close();
            }


            return hmapStoreLisMstr;
        }
    }

    public LinkedHashMap<String, String> fnGetALLOutletMstr() {
        Cursor cursor = null;

        LinkedHashMap<String, String> hmapOutletMstr = new LinkedHashMap<String, String>();
        //open();

        cursor = db.rawQuery("SELECT StoreID,ifnull(StoreLatitude,0),ifnull(StoreLongitude,0) from tblStoreList", null);


        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    String phoneNum;
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapOutletMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString() + "^" + (String) cursor.getString(2).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapOutletMstr;
        } finally {
            cursor.close();
            //close();
        }
    }

    public void UpdateStoreDistanceNear(String OutletID, int DistanceNear) {
        try {

            final ContentValues values = new ContentValues();
            values.put("DistanceNear", DistanceNear);
            int affected = db.update("tblStoreList", values, "StoreID=?", new String[]{OutletID});
        } catch (Exception e) {

        } finally {

        }

    }

    public long savetblManagerMstr(String PersonID, String PersonType, String PersonName, String ManagerID, String ManagerType, String ManagerName) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("PersonID", PersonID.trim());
        initialValues.put("PersonType", PersonType.trim());
        initialValues.put("PersonName", PersonName.trim());
        initialValues.put("ManagerID", ManagerID.trim());
        initialValues.put("ManagerType", ManagerType.trim());
        initialValues.put("ManagerName", ManagerName.trim());

        return db.insert(DBHelper.DATABASE_TABLE_MAIN261, null, initialValues);
    }

    public LinkedHashMap<String, String> fetch_Manager_List() {
        //open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT ManagerID,ManagerName FROM tblManagerMstr ", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
											/*if(i==0)
											{
												hmapCatgry.put("Select Manager", "00");
											}*/
                        hmapCatgry.put(cursor.getString(1).toString(), cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Manager", "0");
            }
            return hmapCatgry;
        } finally {
            cursor.close();
            //close();
        }
    }

    public void deletetblSelectedManagerDetails() {
        //open();
        db.execSQL("DELETE FROM tblSelectedManagerDetails");

        // close();
    }

    public int counttblSelectedManagerDetails() {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblSelectedManagerDetails", null);
        int chkI = 0;
        try {
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();
        }
        return chkI;
    }

    public String Fetch_tblSelectedManagerDetails() {
        //open();
        Cursor cursor = null;
        try {
            cursor = db.rawQuery("SELECT ManagerID,ManagerName  FROM tblSelectedManagerDetails", null);

            String RankOutletName = null;//[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                RankOutletName = (String) cursor.getString(0).toString() + "_"
                        + (String) cursor.getString(1).toString();
                cursor.moveToNext();


            }
            return RankOutletName;
        } finally {
            cursor.close();
            //close();
        }

    }

    public String fetchOtherNameBasicOfManagerID(int ManagerID) {
        int SnamecolumnIndex1 = 0;
        String LocIDDesc = "0";
        Cursor cursor = db.rawQuery("SELECT  OtherName from tblSelectedManagerDetails where ManagerID='" + ManagerID + "'", null);
        try {

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    LocIDDesc = (String) cursor.getString(SnamecolumnIndex1).toString().trim();

                    cursor.moveToNext();
                }

            }
            return LocIDDesc;
        } finally {
            cursor.close();
        }


    }

    public long savetblSelectedManagerDetails(String IMEI, String CurDate, String PersonID,
                                              String PersonType, String PersonName, String ManagerID, String ManagerType,
                                              String ManagerName, String OtherName) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("IMEI", IMEI.trim());
        initialValues.put("CurDate", CurDate.trim());
        initialValues.put("PersonID", PersonID.trim());
        initialValues.put("PersonType", PersonType.trim());
        initialValues.put("PersonName", PersonName.trim());
        initialValues.put("ManagerID", ManagerID.trim());
        initialValues.put("ManagerType", ManagerType.trim());
        initialValues.put("ManagerName", ManagerName.trim());
        initialValues.put("OtherName", OtherName.trim());
        initialValues.put("Sstat", 3);
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        return db.insert(DBHelper.DATABASE_TABLE_MAIN262, null, initialValues);
    }

    public String fetchtblManagerMstr(String ManagerID) {
        //open();
        int SnamecolumnIndex1 = 0;
        String LocIDDesc = "0";
        Cursor cursor = null;
        try {
            cursor = db.rawQuery("SELECT  * from tblManagerMstr where ManagerID='" + ManagerID + "'", null);


            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    LocIDDesc = (String) cursor.getString(0).toString().trim() + "^" + (String) cursor.getString(1).toString().trim() + "^" + (String) cursor.getString(2).toString().trim() + "^" + (String) cursor.getString(3).toString().trim() + "^" + (String) cursor.getString(4).toString().trim() + "^" + (String) cursor.getString(5).toString().trim();

                    cursor.moveToNext();
                }

            }
            return LocIDDesc;
        } finally {
            cursor.close();
            // close();
        }


    }

    public void droptblManagerMstr() {
        db.execSQL("DROP TABLE IF EXISTS tblManagerMstr");
        db.execSQL("DROP TABLE IF EXISTS tblSelectedManagerDetails");

    }

    public void createtblManagerMstr() {
        try {
            db.execSQL(DBHelper.DATABASE_CREATE_TABLE_261);
            db.execSQL(DBHelper.DATABASE_CREATE_TABLE_262);
        } catch (Exception e) {

        }

    }

    public void Delete_tblRouteMasterMstr() {
        db.execSQL("DELETE FROM tblRouteListMaster");

    }

    public void Delete_tblManagerMstr() {
        //db.execSQL("DELETE FROM tblManagerMstr");
        //db.execSQL("DELETE FROM tblSelectedManagerDetails");
    }

    public String[] getSuplierData() {
        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT *  FROM tblSupplierMstrList", null);
            String strStoreTypeNamesDetais[] = null;// new String[cursor2.getCount()];
            if (cursor2.getCount() > 0) {
                strStoreTypeNamesDetais = new String[cursor2.getCount() + 1];
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        if (i == 0) {
                            strStoreTypeNamesDetais[i] = "0^0^Select Distributor";
                        }
                        strStoreTypeNamesDetais[i + 1] = cursor2.getString(0).toString() + "^" + cursor2.getString(1) + "^" + cursor2.getString(2);
                        cursor2.moveToNext();
                    }
                }
            } else {
                strStoreTypeNamesDetais = new String[1];
                strStoreTypeNamesDetais[0] = "0^0^Select Distributor";

            }
            return strStoreTypeNamesDetais;
        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }

        }
    }

    public String fetchSuplierIdByName(String Descr) {
        //open();
        Cursor cursor2 = null;
        String strStoreTypeNamesDetais = "0^0";
        try {
            //tblSupplierMstrList(NodeID int not null,NodeType int not null,Descr text not null,latCode real null,LongCode real null,flgMapped int not null,Address text null,State text null,City text null,PinCode text null,ContactNumber text null,TaxNumber text null,flgStockManage int not null,EmailID text null,flgDefault int not null);";
            cursor2 = db.rawQuery("SELECT NodeID,NodeType FROM tblSupplierMstrList where Descr='" + Descr + "'", null);
            /*[] = new String[cursor2.getCount()]*/

            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStoreTypeNamesDetais = cursor2.getInt(0) + "^" + cursor2.getInt(1);
                    cursor2.moveToNext();
                }
            }
            return strStoreTypeNamesDetais;
        } catch (Exception e) {
            System.out.println("EXCEPTION    " + e);
        } finally {

            cursor2.close();
            //close();
            return strStoreTypeNamesDetais;
        }
    }

    public int fetchSuplierNodeTypeByID(int NodeID) {
        //open();
        Cursor cursor2 = null;
        int strStoreTypeNamesDetais = 0;
        try {
            cursor2 = db.rawQuery("SELECT NodeType FROM tblSupplierMstrList where NodeID='" + NodeID + "'", null);
            /*[] = new String[cursor2.getCount()]*/

            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStoreTypeNamesDetais = cursor2.getInt(0);
                    cursor2.moveToNext();
                }
            }
            return strStoreTypeNamesDetais;
        } catch (Exception e) {
            System.out.println("EXCEPTION    " + e);
        } finally {

            cursor2.close();
            //close();
            return strStoreTypeNamesDetais;
        }
    }

    public String fetchProductNodeTypeByID(int ProductNodeID, int DistID, int DistNodeType) {
        //open();
        Cursor cursor2 = null;
        String strStoreTypeNamesDetais = "0^0";
        try {
            cursor2 = db.rawQuery("SELECT ProductNodeType,StockDate FROM tblDistributorDayReport where ProductNodeID='" + ProductNodeID + "' and DistributorNodeID=" + DistID + " and DistributorNodeType=" + DistNodeType, null);
            /*[] = new String[cursor2.getCount()]*/

            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStoreTypeNamesDetais = cursor2.getInt(0) + "^" + cursor2.getString(1).toString();
                    cursor2.moveToNext();
                }
            }
            return strStoreTypeNamesDetais;
        } catch (Exception e) {
            System.out.println("EXCEPTION    " + e);
        } finally {

            //cursor2.close();
            // close();
            return strStoreTypeNamesDetais;
        }
    }

    public int countDataIntblDistributorSavedData(int DistribtrId, int DistributorNodeType, int Sstat) {
        //open();

        Cursor cursorE2 = null;
        int chkI = 0;
        try {
            cursorE2 = db.rawQuery("SELECT * FROM tblDistributorSavedData WHERE DistribtrId=" + DistribtrId + " and DistributorNodeType=" + DistributorNodeType, null);

            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {


                }
                chkI = 1;

            }

        } finally {
            //cursorE2.close();
            // close();
        }
        return chkI;
    }

    public int counttblDistributorSavedData() throws IOException {
        int chkI = 0;
        try {
            //open();
            Cursor cursorE2 = db.rawQuery("SELECT * from tblSuplierMapping where Sstat=3", null);

            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    chkI = 1;

                }
            }

        } catch (Exception e) {

        } finally {
            //cursorE2.close();
            //close();
        }
        return chkI;
    }

    public void deleteDistributorStockTbles() {
        try {
            //open();

            db.execSQL("DELETE FROM tblDistributorDayReport");
            db.execSQL("DELETE FROM tblDistributorDayReportColumnsDesc");
            db.execSQL("DELETE FROM tblDistributorSavedData");
            db.execSQL("DELETE FROM tblDistributorOldStockData");
        } catch (Exception e) {

        } finally {
            //  close();
        }

    }

    public String GetActiveRouteIDForDistributor() {
        int LoncolumnIndex = 0;
        String activeRouteID = "0";
        Cursor cursor2 = db.rawQuery("SELECT RouteNodeID FROM tblRoutelist WHERE flgTodayRoute = 1 Limit 1", null);
        try {

            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();
                }

            }
            return activeRouteID;
        } finally {
            cursor2.close();
        }

    }

    public void deleteDistributorStockTblesOnDistributorIDBasic(int DistributorNodeID, int DistributorNodeType) {
        try {
            //open();

            db.execSQL("DELETE FROM tblDistributorDayReport where DistributorNodeID=" + DistributorNodeID + " and DistributorNodeType=" + DistributorNodeType);
            db.execSQL("DELETE FROM tblDistributorDayReportColumnsDesc where DistributorNodeID=" + DistributorNodeID + " and DistributorNodeType=" + DistributorNodeType);
            db.execSQL("DELETE FROM tblDistributorSavedData where DistribtrId=" + DistributorNodeID + " and DistributorNodeType=" + DistributorNodeType);
            db.execSQL("DELETE FROM tblDistributorOldStockData where DistribtrId=" + DistributorNodeID + " and DistributorNodeType=" + DistributorNodeType);
        } catch (Exception e) {

        } finally {
            //close();
        }

    }

    public LinkedHashMap<String, String> fetchtblDistribtrReport(int DistributorNodeID, int DistributorNodeType) {
        int ScodecolumnIndex = 0;

        Cursor cursor = null;
        LinkedHashMap<String, String> HmapDistrbutrReport;
        try {
            cursor = db.rawQuery("SELECT *  FROM tblDistributorDayReport where DistributorNodeType=" + DistributorNodeID + " and DistributorNodeType=" + DistributorNodeType, null);
            HmapDistrbutrReport = new LinkedHashMap<String, String>();

            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = 1;

                    HmapDistrbutrReport.put(cursor.getString(0).toString().trim() + "^" + (String) cursor.getString(3).toString().trim(), cursor.getString(1).toString().trim() + "^" + (String) cursor.getString(2).toString().trim());
                    //// System.out.println("Value inserting 231 fetching :"+allData[i]);
                    cursor.moveToNext();
                    // cursor.close();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return HmapDistrbutrReport;
        } finally {
            cursor.close();
        }

    }

    public ArrayList<String> fetchtblDistribtrReportColumnDesc(int DistributorNodeID, int DistributorNodeType) {
        int ScodecolumnIndex = 0;

        Cursor cursor = null;
        ArrayList<String> alist;
        try {
            cursor = db.rawQuery("SELECT *  FROM tblDistributorDayReportColumnsDesc where DistributorNodeID=" + DistributorNodeID + " and DistributorNodeType=" + DistributorNodeType, null);
            alist = new ArrayList<String>();

            if (cursor.moveToFirst()) {
                for (int i = 0; i < cursor.getCount(); i++) {
                    if (i > 4) {
                        alist.add(cursor.getString(0) + "^" + cursor.getString(1).toString().trim());
                        System.out.println(cursor.getString(0).toString().trim() + "^" + cursor.getString(1).toString().trim());
                        //// System.out.println("Value inserting 231 fetching :"+allData[i]);
                        // cursor.close();
                    }
                    cursor.moveToNext();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return alist;
        } finally {
            cursor.close();
        }
    }

    public void Delete_tblDistributorSavedData(int DistribtrId, int DistributorNodeType) {
        try {
            //open();
            db.execSQL("DELETE FROM tblDistributorSavedData where DistribtrId=" + DistribtrId + " and DistributorNodeType=" + DistributorNodeType);
            db.execSQL("DELETE FROM tblDistributorOldStockData where DistribtrId=" + DistribtrId + " and DistributorNodeType=" + DistributorNodeType);
        } catch (Exception e) {

        } finally {
            // close();
        }
    }

    public long savetblDistributorSavedData(String ProductName, String ShortName, String ProductID, String Date, String EnteredValue, int DistribtrId, int DistributorNodeType, int ProductNodeType, String StockDate, int Sstat, int EntryType, int StockPcsCaseType) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("ProductName", ProductName.trim());
        initialValues.put("ShortName", ShortName.trim());
        initialValues.put("ProductID", ProductID.trim());
        initialValues.put("Date", Date.trim());
        initialValues.put("EnteredValue", EnteredValue.trim());
        initialValues.put("DistribtrId", DistribtrId);
        initialValues.put("DistributorNodeType", DistributorNodeType);
        initialValues.put("ProductNodeType", ProductNodeType);
        initialValues.put("EntryType", EntryType);
        initialValues.put("StockDate", StockDate);
        initialValues.put("StockPcsCaseType", StockPcsCaseType);


        initialValues.put("Sstat", Sstat);
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


        return db.insert(DBHelper.TABLE_tblDistributorSavedData, null, initialValues);
    }

    public LinkedHashMap<String, String> fetchtblDistribtrMnthDates(int DistributorNodeID, int DistributorNodeType) {
        //open();
        int ScodecolumnIndex = 0;

        Cursor cursor = null;
        LinkedHashMap<String, String> HmapForDates;
        try {
            cursor = db.rawQuery("SELECT DistDayReportColumnDisplayName  FROM tblDistributorDayReportColumnsDesc where DistributorNodeID=" + DistributorNodeID + " and DistributorNodeType=" + DistributorNodeType, null);
            HmapForDates = new LinkedHashMap<String, String>();

            if (cursor.moveToFirst()) {
                for (int i = 0; i < cursor.getCount(); i++) {
                    if (i > 6) {
                        HmapForDates.put(cursor.getString(0).toString().trim(), cursor.getString(0).toString().trim());
                        System.out.println(cursor.getString(0).toString().trim());
                    }
                    cursor.moveToNext();
                }


            }
            HmapForDates.put("01-01-1900", "Older Stock");
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return HmapForDates;
        } finally {
            cursor.close();
            // close();
        }
    }

    public String[] getDistinctProdctName(int DistributorNodeID, int DistributorNodeType) {
        int LoncolumnIndex = 0;

        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT DISTINCT SKUName  FROM tblDistributorDayReport where DistributorNodeID=" + DistributorNodeID + " and DistributorNodeType=" + DistributorNodeType, null);
            String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];

            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStoreTypeNamesDetais[i] = cursor2.getString(0);
                    cursor2.moveToNext();
                }

            }
            return strStoreTypeNamesDetais;
        } finally {
            cursor2.close();
        }
    }

    public String[] getPrdctIdAndSku(String SKUName, int DistribtrId, int DistributorNodeType) {
        int LoncolumnIndex = 0;

        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT ProductNodeID,FlvShortName  FROM tblDistributorDayReport where SKUName='" + SKUName + "' and DistributorNodeID=" + DistribtrId + " and DistributorNodeType=" + DistributorNodeType, null);
            String strStoreTypeNamesDetais[] = new String[cursor2.getCount()];

            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStoreTypeNamesDetais[i] = cursor2.getString(0) + "^" + cursor2.getString(1);
                    cursor2.moveToNext();
                }

            }
            return strStoreTypeNamesDetais;
        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
        }
    }

    public LinkedHashMap<String, String> fetchtblDistribtrOldStockData(int DistribtrId, int DistribtrNodeType) {
        //open();
        int ScodecolumnIndex = 0;

        Cursor cursor = null;
        LinkedHashMap<String, String> HmapDistrbutrSavedData;
        try {
            cursor = db.rawQuery("SELECT DistribtrTag,EnteredValue  FROM tblDistributorOldStockData where  DistribtrId=" + DistribtrId + " and DistributorNodeType=" + DistribtrNodeType, null);
            HmapDistrbutrSavedData = new LinkedHashMap<String, String>();

            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = 1;

                    HmapDistrbutrSavedData.put(cursor.getString(0).toString().trim(), (String) cursor.getString(1).toString().trim());
                    //// System.out.println("Value inserting 231 fetching :"+allData[i]);
                    cursor.moveToNext();
                    // cursor.close();
                }
            }
            return HmapDistrbutrSavedData;
        } finally {
            //cursor.close();
            //close();
        }
    }

    public LinkedHashMap<String, String> fetchtblDistribtrSavedData(int DistribtrId, int DistribtrNodeType) {
        //open();
        int ScodecolumnIndex = 0;

        Cursor cursor = null;
        LinkedHashMap<String, String> HmapDistrbutrSavedData;
        try {
            cursor = db.rawQuery("SELECT ProductID,Date,EnteredValue,DistribtrId,DistributorNodeType,EntryType  FROM tblDistributorSavedData where  DistribtrId=" + DistribtrId + " and DistributorNodeType=" + DistribtrNodeType, null);
            HmapDistrbutrSavedData = new LinkedHashMap<String, String>();

            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = 1;

                    HmapDistrbutrSavedData.put(cursor.getString(0).toString().trim() + "_" + (String) cursor.getString(1).toString().trim() + "_" + (String) cursor.getString(3).toString().trim() + "_" + (String) cursor.getString(4).toString().trim() + "_" + (String) cursor.getString(5).toString().trim(), (String) cursor.getString(2).toString().trim());
                    //// System.out.println("Value inserting 231 fetching :"+allData[i]);
                    cursor.moveToNext();
                    // cursor.close();
                }
            }
            return HmapDistrbutrSavedData;
        } finally {
            //cursor.close();
            // close();
        }


    }

    public int fnGetDistributorStockPcsCaseType(int DistribtrId, int DistributorNodeType) {

        //open();
        int ScodecolumnIndex = 0;

        Cursor cursor = null;
        //LinkedHashMap<String, String> HmapDistrbutrSavedData;
        try {
            cursor = db.rawQuery("SELECT DISTINCT StockPcsCaseType  FROM tblDistributorSavedData where DistribtrId=" + DistribtrId + " and DistributorNodeType=" + DistributorNodeType, null);

            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = Integer.parseInt(cursor.getString(0).toString().trim());
                    cursor.moveToNext();
                }
            }
            return ScodecolumnIndex;
        } finally {
            //cursor.close();
            // close();
        }

    }

    public String getDistinctStockDate() {
        //open();
        int LoncolumnIndex = 0;

        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT DISTINCT StockDate  FROM tblDistributorDayReport", null);
            String strStoreTypeNamesDetais = "NA";

            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStoreTypeNamesDetais = cursor2.getString(0);
                    cursor2.moveToNext();
                }

            }
            return strStoreTypeNamesDetais;
        } finally {
            cursor2.close();
            // close();
        }
    }

    public long savetblDistributorOldStockData(int DistribtrId, int DistributorNodeType, String DistribtrTag, String EnteredValue) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("DistribtrId", DistribtrId);
        initialValues.put("DistributorNodeType", DistributorNodeType);
        initialValues.put("DistribtrTag", DistribtrTag.trim());
        initialValues.put("EnteredValue", EnteredValue.trim());

        return db.insert(DBHelper.TABLE_tblDistributorOldStockData, null, initialValues);
    }

    public long savetblDistributorDayReportColumnsDesc(String DistDayReportCoumnName, String DistDayReportColumnDisplayName, int CustomerNodeID, int CustomerNodeType) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("DistDayReportCoumnName", DistDayReportCoumnName);
        initialValues.put("DistDayReportColumnDisplayName", DistDayReportColumnDisplayName);
        initialValues.put("DistributorNodeID", CustomerNodeID);
        initialValues.put("DistributorNodeType", CustomerNodeType);

        return db.insert(DBHelper.TABLE_tblDistributorDayReportColumnsDesc, null, initialValues);
    }

    public long savetblDistributorDayReport(int ProductNodeID, int ProductNodeType, String SKUName, String FlvShortName, String StockDate, int CustomerNodeID, int CustomerNodeType) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("ProductNodeID", String.valueOf(ProductNodeID));
        initialValues.put("ProductNodeType", String.valueOf(ProductNodeType).trim());
        initialValues.put("SKUName", SKUName.trim());
        initialValues.put("FlvShortName", FlvShortName.trim());
        initialValues.put("StockDate", StockDate.trim());
        initialValues.put("DistributorNodeID", CustomerNodeID);
        initialValues.put("DistributorNodeType", CustomerNodeType);
        return db.insert(DBHelper.TABLE_tblDistributorDayReport, null, initialValues);
    }

    public void updateDistributorSstat() {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", "4");
            int affected = db.update("tblDistributorSavedData", values, "Sstat=?", new String[]{"3"});

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    public void updateDistributorCheckInSstat() {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", "4");
            int affected = db.update("tblDistributorSavedData", values, "Sstat=?", new String[]{"3"});
            int affected1 = db.update("tblSuplierMapping", values, "Sstat=?", new String[]{"3"});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    public long savetblTargetVsAchievedNote(String msgToDisplay) {
        //DATABASE_TABLE_MAIN236 = "create table tblTargetVsAchievedNote (MsgToDisplay text null);";
        ContentValues initialValues = new ContentValues();

        initialValues.put("MsgToDisplay", msgToDisplay);


        return db.insert(DBHelper.DATABASE_TABLE_MAIN236, null, initialValues);
    }

    public String fetchNoteFromtblTargetVsAchievedNote() {
        //open();
        int ScodecolumnIndex = 0;
        ////DATABASE_TABLE_MAIN236 = "create table tblTargetVsAchievedNote (MsgToDisplay text null);";

        try {
            Cursor cursor = db.rawQuery("SELECT MsgToDisplay  FROM tblTargetVsAchievedNote", null);
            String note = "";
            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = 1;
                    note = cursor.getString(0);
                    //// System.out.println("Value inserting 231 fetching :"+allData[i]);
                    cursor.moveToNext();
                    // cursor.close();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return note;
        } finally {

            // close();
        }

    }

    public long savetblStoreWiseTarget(String StoreID, String TargetValue) {

        ContentValues initialValues = new ContentValues();


        initialValues.put("StoreID", StoreID.trim());
        initialValues.put("TargetValue", TargetValue.trim());

        return db.insert(DBHelper.DATABASE_TABLE_MAIN23, null, initialValues);
    }



    public void Delete_tblStoreWiseTarget() {
        db.execSQL("DELETE FROM tblStoreWiseTarget");
    }

    public String fetchtblStoreWiseTarget(String StoreID) {

        //open();
        String LocIDDesc = "0";
        Cursor cursor = db.rawQuery("SELECT  TargetValue from tblStoreWiseTarget where StoreID='" + StoreID + "'", null);
        try {

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    LocIDDesc = (String) cursor.getString(0).toString().trim();
                    cursor.moveToNext();
                }

            }
            return LocIDDesc;
        } finally {
            cursor.close();
            // close();
        }


    }

    public ArrayList<Object> fetchIncentiveData() {
        ArrayList<Object> arrlstObjects = new ArrayList<Object>();
        ArrayList<LinkedHashMap<String, ArrayList<String>>> array = new ArrayList<LinkedHashMap<String, ArrayList<String>>>();
        ;
        LinkedHashMap<String, ArrayList<String>> HmapSecondaryMstrData = new LinkedHashMap<String, ArrayList<String>>();
        LinkedHashMap<String, ArrayList<String>> HmapMstrData = new LinkedHashMap<String, ArrayList<String>>();

        LinkedHashMap<String, ArrayList<String>> HmapIncMasterListData = new LinkedHashMap<String, ArrayList<String>>();

        LinkedHashMap<String, ArrayList<String>> HmapIncPastDetailData = new LinkedHashMap<String, ArrayList<String>>();
        LinkedHashMap<String, ArrayList<String>> HmapInnerData = new LinkedHashMap<String, ArrayList<String>>();
        String total_earning = "0", Incentive_msg = "NA";

        HmapIncMasterListData = fnGetIncentivesMasterListData();

        // open();
        try {

            for (String key : HmapIncMasterListData.keySet()) {

                int MasterIncId = Integer.parseInt(key);

                HmapMstrData.put("" + MasterIncId, HmapIncMasterListData.get("" + MasterIncId));
                array.add(HmapMstrData);
                Cursor cursor = db.rawQuery("SELECT tblIncentiveSecondaryMaster.IncSlabId,tblIncentiveSecondaryMaster.OutputType,tblIncentiveSecondaryMaster.IncSlabName,count(tblIncentiveDetailsColumnsDesc.IncSlabId) as ColumnCount,tblIncentiveSecondaryMaster.flgAcheived,tblIncentiveSecondaryMaster.Earning FROM tblIncentiveSecondaryMaster INNER JOIN tblIncentiveDetailsColumnsDesc ON tblIncentiveSecondaryMaster.IncSlabId = tblIncentiveDetailsColumnsDesc.IncSlabId WHERE tblIncentiveSecondaryMaster.IncId=" + MasterIncId + " group by tblIncentiveDetailsColumnsDesc.IncSlabId", null);//

                if (cursor.getCount() > 0) {
                    if (cursor.moveToFirst()) {
                        for (int i = 0; i < cursor.getCount(); i++) {
                            ArrayList<String> list_frstTbl = new ArrayList<String>();
                            list_frstTbl.add(0, cursor.getString(0).toString().trim());//IncSlabId
                            list_frstTbl.add(1, cursor.getString(1).toString().trim()); //output type
                            list_frstTbl.add(2, cursor.getString(2).toString().trim()); //incentive name
                            list_frstTbl.add(3, cursor.getString(3).toString().trim()); //count of incId frm columndesc tbl
                            list_frstTbl.add(4, cursor.getString(4).toString().trim()); //flgAchieved
                            list_frstTbl.add(5, cursor.getString(5).toString().trim()); //Earning

                            HmapSecondaryMstrData.put("" + MasterIncId + "^" + cursor.getString(0).toString().trim(), list_frstTbl);

                            HmapInnerData.put(cursor.getString(0).toString().trim(), fetchIncentiveInnerData(cursor.getString(0).toString().trim()));

                            ArrayList<String> list_pastDetail = new ArrayList<String>();
                            list_pastDetail = fetchIncPastDetailData(cursor.getString(0).toString().trim());
                            if (!list_pastDetail.isEmpty()) {
                                HmapIncPastDetailData.put(cursor.getString(0).toString().trim(), list_pastDetail);
                            }

                            list_frstTbl.add(5, String.valueOf(getCountFromIncPastDetails(cursor.getString(0).toString().trim())));

                            cursor.moveToNext();
                        }

                        array.add(HmapSecondaryMstrData);
                        array.add(HmapInnerData);
                        array.add(HmapIncPastDetailData);
                        arrlstObjects.add(array);
                        total_earning = fetchTotalEarning();
                        arrlstObjects.add(total_earning);
                        Incentive_msg = getMsgToDisplay();
                        arrlstObjects.add(Incentive_msg);
                        String flgToShowBankDetails = "" + getflgToShowBankDetails();
                        arrlstObjects.add(flgToShowBankDetails);
                        LinkedHashMap<String, String> hmapBankDetails = getIncentiveBankDetails();
                        arrlstObjects.add(hmapBankDetails);

                    }
                }
            }


        } catch (Exception e) {
            System.out.println("EXception.." + e);
        } finally {
            // close();
        }
        return arrlstObjects;
    }

    public LinkedHashMap<String, String> getIncentiveBankDetails() {
        LinkedHashMap<String, String> hmapBankDetails = new LinkedHashMap<String, String>();
        try {
            Cursor cursor = db.rawQuery("SELECT LvlName,Value FROM tblIncentiveBankDetails", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        hmapBankDetails.put(cursor.getString(0).toString().trim(), cursor.getString(1).toString().trim());
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
        }
        return hmapBankDetails;
    }

    public int getflgToShowBankDetails() {
        int val = 0;
        try {
            Cursor cursor = db.rawQuery("SELECT flgBankDetailsToShow FROM tblIncentiveMsgToDisplay", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    val = Integer.parseInt(cursor.getString(0).toString().trim());
                    System.out.println("MSG FETCHED..." + val);
                }
            }
        } finally {
        }
        return val;
    }

    public ArrayList<String> fetchIncentiveInnerData(String IncSlabId) {
        LinkedHashMap<String, ArrayList<String>> HmapInnerData = new LinkedHashMap<String, ArrayList<String>>();
        String columnIncentives = "";
        String columnIncentivesForTableDisplay = "";
        ArrayList<String> list_frstTbl = new ArrayList<String>();
        int ColumnCount = 0;
        try {
            Cursor cursor = db.rawQuery("SELECT Distinct ReportColumnName,DisplayColumnName FROM tblIncentiveDetailsColumnsDesc where IncSlabId='" + IncSlabId + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        ArrayList<String> arrIncenticeData = new ArrayList<String>();
                        if (columnIncentives.equals("")) {
                            columnIncentives = "IFNULL(" + cursor.getString(0).toString().trim() + ",' ')";
                            columnIncentivesForTableDisplay = cursor.getString(1).toString().trim();
                            ColumnCount = 0;
                        } else {
                            columnIncentives = columnIncentives + ",IFNULL(" + cursor.getString(0).toString().trim() + ",' ')";
                            ;
                            columnIncentivesForTableDisplay = columnIncentivesForTableDisplay + "^" + cursor.getString(1).toString().trim();
                            ColumnCount = ColumnCount + 1;

                        }
											/*	ArrayList<String> list_frstTbl=new ArrayList<String>();
												list_frstTbl.add(cursor.getString(1).toString().trim()); //column desc to show in tbl

												;*/

                        if (i == (cursor.getCount() - 1)) {
                            list_frstTbl.add(columnIncentivesForTableDisplay);
                            arrIncenticeData = fetchColumnData(IncSlabId, columnIncentives, ColumnCount, list_frstTbl);
                        }

                        cursor.moveToNext();
                    }

                }
            }
            return list_frstTbl;
        } finally {
        }
    }

    public ArrayList<String> fetchColumnData(String IncSlabId, String columnIncentives, int ColumnCount, ArrayList<String> list_frstTbl) {
        try {
            Cursor cursor = db.rawQuery("SELECT " + columnIncentives + " FROM tblIncentiveDetailsData where IncSlabId='" + IncSlabId + "'", null);

            System.out.println("PASSED INFO..." + "IncSlabId:" + IncSlabId + " columnIncentives:" + columnIncentives + " ColumnCount:" + ColumnCount);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        Boolean val = false;
                        String incentiveColumnsData = "";
                        for (int j = 0; j <= ColumnCount; j++) {
                            if (incentiveColumnsData.equals("") && val == false) {
                                incentiveColumnsData = cursor.getString(j).toString().trim();
                                val = true;
                            } else {
                                if (j == (ColumnCount)) {
                                    if (cursor.getString(j).toString().trim().equals("")) {
                                        incentiveColumnsData = incentiveColumnsData + "^" + "NA";
                                        System.out.println("j:" + j + "-" + incentiveColumnsData + "-" + cursor.getColumnName(j).toString());
                                    } else {
                                        incentiveColumnsData = incentiveColumnsData + "^" + cursor.getString(j).toString().trim();
                                    }

                                    System.out.println("END OF LOOP: " + "IncSlabId" + IncSlabId + "-" + incentiveColumnsData);
                                } else {
                                    incentiveColumnsData = incentiveColumnsData + "^" + cursor.getString(j).toString().trim();
                                }
                            }

                        }
                        list_frstTbl.add(incentiveColumnsData); //column desc to show in tbl
                        cursor.moveToNext();
                    }
                }
            }
            return list_frstTbl;
        } finally {
        }
    }

    public String fetchTotalEarning() {
        String total_earning = "NA";
        try {
            Cursor cursor = db.rawQuery("SELECT Total_Earning FROM tblTotalEarning", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    total_earning = cursor.getString(0).toString().trim();
                    System.out.println("TOTAL EARNING: " + total_earning);
                    cursor.moveToNext();
                }
            }
        } finally {
            return total_earning;
        }
    }

    public ArrayList<String> fetchIncPastDetailData(String IncSlabId) {
        LinkedHashMap<String, ArrayList<String>> HmapInnerData = new LinkedHashMap<String, ArrayList<String>>();

        String columnIncentives = "";
        String columnIncentivesForTableDisplay = "";
        ArrayList<String> list_frstTbl = new ArrayList<String>();
        int ColumnCount = 0;

        try {
            Cursor cursor = db.rawQuery("SELECT Distinct ReportColumnName,DisplayColumnName FROM tblIncentivePastDetailsColumnsDesc where IncSlabId='" + IncSlabId + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        ArrayList<String> arrIncenticeData = new ArrayList<String>();

                        if (columnIncentives.equals("")) {
                            columnIncentives = cursor.getString(0).toString().trim();
                            columnIncentivesForTableDisplay = cursor.getString(1).toString().trim();
                            ColumnCount = 0;
                        } else {
                            columnIncentives = columnIncentives + "," + cursor.getString(0).toString().trim();
                            columnIncentivesForTableDisplay = columnIncentivesForTableDisplay + "^" + cursor.getString(1).toString().trim();
                            ColumnCount = ColumnCount + 1;
                        }

                        if (i == (cursor.getCount() - 1)) //in end
                        {
                            list_frstTbl.add(columnIncentivesForTableDisplay);
                            fetchIncPastDetailColumnData(IncSlabId, columnIncentives, ColumnCount, list_frstTbl);
                        }

                        cursor.moveToNext();
                    }
                }
            }
            return list_frstTbl;
        } finally {
        }
    }

    public void fetchIncPastDetailColumnData(String IncSlabId, String columnIncentives, int ColumnCount, ArrayList<String> list_frstTbl) {
        try {
            Cursor cursor = db.rawQuery("SELECT " + columnIncentives + " FROM tblIncentivePastDetailsData where IncSlabId='" + IncSlabId + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        String incentiveColumnsData = "";

                        for (int j = 0; j <= ColumnCount; j++) {
                            if (incentiveColumnsData.equals("")) {
                                incentiveColumnsData = cursor.getString(j).toString().trim();
                            } else {
                                incentiveColumnsData = incentiveColumnsData + "^" + cursor.getString(j).toString().trim();
                            }
                        }
                        list_frstTbl.add(incentiveColumnsData); //column desc to show in tbl
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
        }
    }

    public int getCountFromIncPastDetails(String IncSlabId) {
        int cal = 0;
        try {
            Cursor cursor = db.rawQuery("SELECT IncSlabId as ColumnCount FROM tblIncentivePastDetailsColumnsDesc where IncSlabId='" + IncSlabId + "'", null);

            if (cursor.getCount() > 0) {
                cal = cursor.getCount();
                System.out.println("COUNT..." + cal + "IncSlab ID.." + IncSlabId);
            }
        } finally {
        }
        return cal;
    }

    public String getMsgToDisplay() {
        String val = "NA";
        try {
            Cursor cursor = db.rawQuery("SELECT MsgToDisplay FROM tblIncentiveMsgToDisplay", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    val = cursor.getString(0).toString().trim();
                    System.out.println("MSG FETCHED..." + val);
                }
            }
        } finally {
        }
        return val;
    }

    public void truncatetblTargetVsAchievedSummary() {
        db.execSQL("DELETE FROM tblTargetVsAchievedSummary");

    }

    public String[] fetchAllDataFromtblTargetVsAchievedSummary() {
        int ScodecolumnIndex = 0;
        //open();
        Cursor cursor = db.rawQuery("SELECT *  FROM tblTargetVsAchievedSummary", null);
        try {
            String allData[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    ScodecolumnIndex = 1;
                    String val4 = "0";
                    String val8 = "0";
                    if (cursor.getString(4) != null) {
                        val4 = cursor.getString(4).toString();
                    }
                    if (cursor.getString(8) != null) {
                        val8 = cursor.getString(8).toString();
                    }

                    allData[i] = (String) cursor.getString(0).toString().trim() + "^" + (String) cursor.getString(1).toString().trim() + "^" + (String) cursor.getString(2).toString().trim() + "^" + (String) cursor.getString(3).toString().trim() + "^" + val4 + "^" + (String) cursor.getString(5).toString().trim() + "^" + (String) cursor.getString(6).toString().trim() + "^" + (String) cursor.getString(7).toString().trim() + "^" + val8 + "^" + (String) cursor.getString(9).toString().trim() + "^" + String.valueOf(cursor.getInt(10));
                    //// System.out.println("Value inserting 231 fetching :"+allData[i]);
                    cursor.moveToNext();
                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return allData;
        } finally {
            cursor.close();
            //close();
        }

    }

    public void deleteIncentivesTbles() {
        try {
            db.execSQL("DELETE FROM tblIncentiveMainMaster");
            db.execSQL("DELETE FROM tblIncentiveSecondaryMaster");
            db.execSQL("DELETE FROM tblIncentiveDetailsData");
            db.execSQL("DELETE FROM tblIncentiveDetailsColumnsDesc");
            db.execSQL("DELETE FROM tblTotalEarning");
            db.execSQL("DELETE FROM tblIncentivePastDetailsData");
            db.execSQL("DELETE FROM tblIncentivePastDetailsColumnsDesc");
            db.execSQL("DELETE FROM tblIncentiveMsgToDisplay");
            db.execSQL("DELETE FROM tblIncentiveBankDetails");

        } catch (Exception e) {
        } finally {
        }
    }

    public void insertRestartStoreInfo(String prvsStoreID, String CrntStoreID, String isSavedOrSubmittedStore, String MsgToRestartPopUpShown, String isRestartDoneByDSR, int Sstat, String ActionTime) {
        //tblsameLocationForStoreRestartDone(UniqueID INTEGER PRIMARY KEY AUTOINCREMENT,prvsStoreID text null,CrntStoreID text null,isSavedOrSubmittedStore text null,is MsgToRestartPopUpShown text null,isRestartDoneByDSR text null ,prvsStoreFlag text null,Sstat text null);";
        //open();

        Cursor cursor = db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where prvsStoreID='" + CrntStoreID + "'", null);

        ContentValues values = new ContentValues();


        values.put("Sstat", Sstat);

        if (cursor.getCount() > 0) {


            db.update(DBHelper.DATABASE_TABLE_tblSameLocationForStoreRestartDone, values, "prvsStoreID=?", new String[]{prvsStoreID});
        } else {
            fnDeleteFlgStoreUnusedPrvs("0");

            values.put("ActionTime", ActionTime);
            values.put("CrntStoreID", CrntStoreID);
            values.put("prvsStoreID", prvsStoreID);
            values.put("isMsgToRestartPopUpShown", MsgToRestartPopUpShown);
            values.put("isSavedOrSubmittedStore", isSavedOrSubmittedStore);
            values.put("isRestartDoneByDSR", isRestartDoneByDSR);
            values.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
            values.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

            db.insert(DBHelper.DATABASE_TABLE_tblSameLocationForStoreRestartDone, null, values);
        }


        //close();


    }

    public void updateMsgToRestartPopUpShown(String prvsStoreId, String visitSTime) {
        //open();
        ContentValues values = new ContentValues();
        values.put("isMsgToRestartPopUpShown", "1");
        values.put("ActionTime", visitSTime);
        db.update(DBHelper.DATABASE_TABLE_tblSameLocationForStoreRestartDone, values, "prvsStoreID=?", new String[]{prvsStoreId});
        // close();
    }

    public boolean isPrvsStoreMsgShownAndRestrtDone(String prvsStoreId) {
        //open();
        boolean isToShowPopUpForResart = true;
        try {
            Cursor cur = db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where isMsgToRestartPopUpShown='1' AND isRestartDoneByDSR='1' AND prvsStoreID='" + prvsStoreId + "'", null);
            if (cur.getCount() > 0) {
                isToShowPopUpForResart = false;
            }
        } catch (Exception e) {

        } finally {
            //close();
            return isToShowPopUpForResart;
        }

    }

    public String PrvsStoreMsgShownAndRestrtDone() {
        //open();
        String storeShowPopUpForResartAndDone = "";
        try {
            Cursor cur = db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where isMsgToRestartPopUpShown='1' AND isRestartDoneByDSR='1' AND UniqueID=(SELECT MAX(UniqueID) FROM tblsameLocationForStoreRestartDone)", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    storeShowPopUpForResartAndDone = cur.getString(0);
                }

            } else {
                cur.close();
                Cursor cursor = db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where isMsgToRestartPopUpShown='1' AND isRestartDoneByDSR='0' AND UniqueID=(SELECT MAX(UniqueID) FROM tblsameLocationForStoreRestartDone)", null);
                if (cursor.getCount() > 0) {
                    if (cursor.moveToFirst()) {
                        storeShowPopUpForResartAndDone = cursor.getString(0);
                    }

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // close();
            return storeShowPopUpForResartAndDone;
        }

    }

    public void updateisRestartDoneByDSR(String prvsStoreId) {
        //open();
        ContentValues values = new ContentValues();
        values.put("isRestartDoneByDSR", "1");
        db.update(DBHelper.DATABASE_TABLE_tblSameLocationForStoreRestartDone, values, "prvsStoreID=?", new String[]{prvsStoreId});
        //close();
    }

    public void updateCurrentStoreId(String crntStoreID, String prvsStoreId) {
        //open();
        ContentValues values = new ContentValues();
        values.put("CrntStoreID", crntStoreID);
        db.update(DBHelper.DATABASE_TABLE_tblSameLocationForStoreRestartDone, values, "prvsStoreID=?", new String[]{prvsStoreId});
        //close();
    }

    public String getPreviousStoreId() {
        String prvsStoreId = "";
        //open();
        try {
            Cursor cursor = db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where UniqueID=(SELECT MAX(UniqueID) FROM tblsameLocationForStoreRestartDone)", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    prvsStoreId = cursor.getString(0);
                }

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            // close();
            return prvsStoreId;
        }

    }

    public String getPreviousShownPopUpStoreId() {
        String prvsStoreId = "";
        //open();
        try {
            Cursor cursor = db.rawQuery("Select prvsStoreID from tblsameLocationForStoreRestartDone where UniqueID=(SELECT MAX(UniqueID) FROM tblsameLocationForStoreRestartDone) AND isMsgToRestartPopUpShown='1'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    prvsStoreId = cursor.getString(0);
                }

            }
        } catch (Exception e) {

        } finally {
            //close();
            return prvsStoreId;
        }

    }

    public void fnDeleteFlgStoreUnusedPrvs(String MsgToRestartPopUpShown) {
        try {
            db.execSQL("DELETE FROM tblsameLocationForStoreRestartDone WHERE isMsgToRestartPopUpShown='" + MsgToRestartPopUpShown + "'");// and sectionID="+sectionID
        } catch (Exception e) {

        }


    }

    public String[] getAllStoreIDIntblNewAddedStorePhotoDetail() {

        int SnamecolumnIndex1 = 0;


        Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tableImage where Sstat=5", null);
        //Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
        try {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    cursor.moveToNext();
                }
            }

            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public String[] getAllStoreIDIntblStoreCheckIn() {

        int SnamecolumnIndex1 = 0;


        Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tblStoreCheckInPic where Sstat=5", null);
        //Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
        try {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    cursor.moveToNext();
                }
            }

            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public int getExistingPicNosForNewAddedStore(String StoreID) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tableImage where StoreID='" + StoreID + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public int getExistingPicNosForStoreCheckIn(String StoreID) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tblStoreCheckInPic where StoreID='" + StoreID + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public String[] getImgsPathForNewAddedStore(String StoreID) {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT imageName FROM tableImage WHERE StoreID ='" + StoreID + "'", null);
        try {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public String[] getImgsPathForStoreCheckIn(String StoreID) {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT imageName FROM tblStoreCheckInPic WHERE StoreID ='" + StoreID + "'", null);
        try {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public void updateImageRecordsSyncdForNewAddedStore(String PhotoName) {

        try {
            //open();
            //System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
            final ContentValues values = new ContentValues();
            values.put("Sstat", 4);

            int affected3 = db.update("tableImage", values, "imageName=?", new String[]{PhotoName});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            // close();
        }


    }


//nitika


    //nitika

    public void updateImageRecordsSyncdForStoreCheckIN(String PhotoName) {

        try {
            //open();
            //System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
            final ContentValues values = new ContentValues();
            values.put("Sstat", 4);

            int affected3 = db.update("tblStoreCheckInPic", values, "imageName=?", new String[]{PhotoName});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            // close();
        }


    }

    public LinkedHashMap<String, LinkedHashMap<String, String>> fetchTblRowSummary() {
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
        LinkedHashMap<String, LinkedHashMap<String, String>> hmapCatgryAll = new LinkedHashMap<String, LinkedHashMap<String, String>>();

        Cursor cursor = db.rawQuery("SELECT DISTINCT TableNo FROM tblAllSummaryDay", null);
        try {
            String allData[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i < cursor.getCount(); i++) {
                    allData[i] = (String) cursor.getString(0).toString().trim();

                    hmapCatgry = fetch_Summary_Detail_DayData(allData[i]);
                    hmapCatgryAll.put(allData[i], hmapCatgry);
                    cursor.moveToNext();

                }

            }
            ////// System.out.println("value  of new store is in DBadapter"+ScodecolumnIndex);
            return hmapCatgryAll;
        } finally {
            cursor.close();
        }

    }

    public LinkedHashMap<String, String> fetch_Summary_Detail_DayData(String TableNo) {
//		//open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
        try {
            Cursor cursor = db.rawQuery("SELECT Measures,TodaysSummary,MTDSummary,ColorCode FROM tblAllSummaryDay WHERE TableNo='" + TableNo + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapCatgry.put(cursor.getString(0).toString(), cursor.getString(1).toString() + "^" + cursor.getString(2).toString() + "^" + cursor.getString(3).toString());
                        cursor.moveToNext();
                    }
                }

            }

            return hmapCatgry;
        } finally {
//			cursor.close();
//			close();
        }
    }

    public void updateFlgCrediBal(String storeId, int flgCreditRetailBal) {
        //flgRetailerCreditBalnce
        // tblStoreList(StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null, StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null, Sstat integer not null, ForDate string not null, ActualLatitude text null, ActualLongitude text null, VisitStartTS text null, VisitEndTS text null,AutoIdStore int null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreClose integer null,StoreNextDay integer null,chainID integer null,ISNewStore int null,StoreRouteID int null,RouteNodeType int null,StoreCatNodeId int null,IsNewStoreDataCompleteSaved int null,flgFromWhereSubmitStatus int null,StoreAddress text null,PaymentStage text null,flgHasQuote int null,flgAllowQuotation int null,flgSubmitFromQuotation int null,flgGSTCapture text null,flgGSTCompliance text null,GSTNumber text null,flgGSTRecordFromServer int null,DistanceNear int null,flgLocationServicesOnOff int null,flgGPSOnOff int null,flgNetworkOnOff int null,flgFusedOnOff int null,flgInternetOnOffWhileLocationTracking int null,flgRestart int null,flgStoreOrder int null,StoreCity text null,StorePinCode text not null,StoreState text null,flgRetailerCreditBalnce text null);";
        //open();
        try {

            ContentValues values = new ContentValues();
            values.put("flgRetailerCreditBalnce", flgCreditRetailBal);

            db.update(DBHelper.DATABASE_TABLE_MAIN13, values, "StoreID=?", new String[]{storeId});

        } catch (Exception e) {

        } finally {
            // close();
        }

    }

    public boolean isFlgCrediBalSubmitted(String storeId) {
        boolean isRtalrCreditBalSbmtd = true;
        Cursor cur = null;
        //open();
        try {

            cur = db.rawQuery("Select flgRetailerCreditBalnce from tblStoreList where StoreID='" + storeId + "' AND flgRetailerCreditBalnce<>-1", null);
            if (cur.getCount() > 0) {
                isRtalrCreditBalSbmtd = true;
            }
        } catch (Exception e) {

        } finally {
            if (cur != null) {
                cur.close();
            }
            // close();
            return isRtalrCreditBalSbmtd;
        }
    }

    public int fetchtblStockUploadedCycleId() {
        //open();
        int retVal = 0;
        try {
            Cursor cur = db.rawQuery("Select VanLoadUnLoadCycID from tblStockUploadedStatus", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        retVal = Integer.parseInt(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            // close();
            return retVal;
        }
    }

    public int fetchtblVanCycleId() {
        //open();
        int retVal = -1;
        try {
            //tblCycleID(CycleID int null,Sstat int null,CycStartTime text null);";
            Cursor cur = db.rawQuery("Select CycleID from tblCycleID", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        retVal = Integer.parseInt(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            // close();
            return retVal;
        }
    }

    public String fetchtblVanCycleTime() {
        //open();
        String CycStartTime = "";
        try {
            //tblCycleID(CycleID int null,Sstat int null,CycStartTime text null,CycleTime text null);";
            Cursor cur = db.rawQuery("Select CycleTime from tblCycleID", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        CycStartTime = cur.getString(0);
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            // close();
            return CycStartTime;
        }
    }

    public void updateOriginalStock(HashMap<String, Integer> hmapProductStock, String distId) {
        //open();
        for (Entry<String, Integer> entry : hmapProductStock.entrySet()) {
            ContentValues values = new ContentValues();
            System.out.println("hmapProductStock = " + entry.getKey() + " : " + entry.getValue());
            values.put("OriginalStock", String.valueOf(entry.getValue()));
            db.update(DBHelper.DATABASE_TABLE_DISTRIBUTOR_STOCK, values, "DistributorNodeIdNodeType=? AND PrdctId=?", new String[]{distId, entry.getKey()});
        }

        // close();
    }

    public void insertStockOut(int flgStockOutEntryDone) {
        ////open();

        ContentValues values = new ContentValues();


        values.put("flgStockOutEntryDone", flgStockOutEntryDone);

        db.insert(DBHelper.DATABASE_TABLE_tblStockOut, null, values);


        //close();
    }

    public String getDistinctInvoiceNumbers() {
        //open();
        String distIDOrderId = "";
        Cursor cur = null;

        //tblDistributorOrderPdaId(DistributorNodeIdNodeType text null,OrderPDAID text null,ProductId text null,OrderQntty text null,Sstat integer not null);";
        try {
            cur = db.rawQuery("Select DISTINCT ServingDBRId,InvoiceNumber from tblInvoiceDetails", null);
            if (cur.getCount() > 0) {
                StringBuilder sb = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        if (i == 0) {
                            sb.append(cur.getString(0)).append("|").append(cur.getString(1));
                        } else {
                            sb.append("^").append(cur.getString(0)).append("|").append(cur.getString(1));
                        }
                        cur.moveToNext();
                    }
                }
                distIDOrderId = sb.toString();
            }
        } catch (Exception e) {

        } finally {
            if (cur != null) {
                cur.close();
            }
            // close();
            return distIDOrderId;
        }

    }

    public String getDistinctCollectionPaymentIds() {
        //open();
        String strStoreCollectionUniquneVisitId = "";
        Cursor cur = null;
        try {
            cur = db.rawQuery("Select DISTINCT StoreVisitCode from tblAllCollectionData WHERE Sstat in(3,5,6)", null);
            if (cur.getCount() > 0) {
                StringBuilder sb = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        if (i == 0) {
                            sb.append(cur.getString(0));
                        } else {
                            sb.append("^").append(cur.getString(0));
                        }
                        cur.moveToNext();
                    }
                }
                strStoreCollectionUniquneVisitId = sb.toString();
            }
        } catch (Exception e) {

        } finally {
            if (cur != null) {
                cur.close();
            }
            // close();
            return strStoreCollectionUniquneVisitId;
        }

    }

    public void insertDistributorPDAOrderId(String distributorNodeIdNodeType, String orderId, String productId, String orderQntty, int Sstat) {
        //tblDistributorOrderPdaId(DistributorNodeIdNodeType text null,OrderPDAID text null,ProductId text null,OrderQntty text null,Sstat integer not null);";
        //open();
//tblDistributorOrderPdaId
        Cursor cur = db.rawQuery("Select DistributorNodeIdNodeType from tblDistributorOrderPdaId where OrderPDAID='" + orderId + "' AND ProductId='" + productId + "' AND DistributorNodeIdNodeType='" + distributorNodeIdNodeType + "'", null);
        ContentValues values = new ContentValues();
        values.put("Sstat", Sstat);

        values.put("OrderQntty", orderQntty);
        if (cur.getCount() > 0) {
            if (cur != null) {
                cur.close();
            }
            db.update(DBHelper.DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID, values, "OrderPDAID=? AND DistributorNodeIdNodeType=? AND ProductId=?", new String[]{orderId, distributorNodeIdNodeType, productId});
        } else {

            values.put("ProductId", productId);

            values.put("DistributorNodeIdNodeType", distributorNodeIdNodeType);
            values.put("OrderPDAID", orderId);

            long insertd = db.insert(DBHelper.DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID, null, values);
            System.out.println("Nitish Entered = " + insertd);
        }

        // close();
    }

    public void deleteExistStockTable(String distributorNodeIdNodeType, String orderId, String ProductId) {
        //open();
        Cursor cur = db.rawQuery("Select DistributorNodeIdNodeType from tblDistributorOrderPdaId where OrderPDAID='" + orderId + "' AND DistributorNodeIdNodeType='" + distributorNodeIdNodeType + "' AND ProductId='" + ProductId + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID, "DistributorNodeIdNodeType=? AND OrderPDAID=? AND ProductId=?", new String[]{distributorNodeIdNodeType, orderId, ProductId});
        }
        // close();
    }

    public HashMap<String, String> getProductStock(String orderPDAId, String distId) {
        //open();
        HashMap<String, String> hmapPrdctStock = new HashMap<String, String>();
        Cursor cur = db.rawQuery("Select ProductId,OrderQntty from tblDistributorOrderPdaId where DistributorNodeIdNodeType='" + distId + "' AND OrderPDAID='" + orderPDAId + "'", null);
        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                for (int i = 0; i < cur.getCount(); i++) {
                    hmapPrdctStock.put(cur.getString(0), cur.getString(1));
                    cur.moveToNext();
                }
            }
        }
        // close();
        return hmapPrdctStock;
    }

    public void deleteCompleteDataDistStock() {


        db.execSQL("DELETE FROM tblTmpDistributorStock");
        db.execSQL("DELETE FROM tblDistributorStockOutFlg");
        db.execSQL("DELETE FROM tblCycleID");
//tblStockConfirm


        db.execSQL("DELETE FROM tblVanIDOrderIDLeft");


    }

    public String fngetSalesPersonMstrData() {
        String abcd = "0^0";
        Cursor cursor = null;
        try {
            //open();
            cursor = db.rawQuery("SELECT PersonNodeID,PersonNodeType from tblUserAuthenticationMstr", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        abcd = cursor.getString(0) + "^" + cursor.getString(1);
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
            return abcd;
        }
    }

    public LinkedHashMap<String, String> getDistStockCountName() {
        // tblVanProductStock(PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null);";
        LinkedHashMap<String, String> hmapDistPrdctStockCount = new LinkedHashMap<>();
        int flgVal = flgConfirmedWareHouse();

        Cursor cur = null;
        if (flgVal == 0)//tblTmpDistributorStock
        {
            if (CommonInfo.hmapAppMasterFlags.get("flgVanStockCalculate") == 1) {
                cur = db.rawQuery(" SELECT DISTINCT S.PrdctId,S.SKUName,(S.StockQntty-ifnull(X.OrderQty,0)) AS Stqty,S.OpeningStock,S.CycleAddedStock,S.NetSalesQty+ifnull(X.OrderQty,0) AS OrdQty,S.CategoryID,S.CycleUnloadStk FROM tblTmpDistributorStock S LEFT join tblVanProductStock ST ON S.PrdctId=ST.PrdctId LEFT OUTER JOIN (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceDetails AS ID WHERE ID.InvoiceNumber NOT IN (SELECT D.OrderId FROM tblVanIDOrderIDLeft AS D WHERE D.flgProcessedInvoice=1) GROUP BY ID.ProdID) X ON S.PrdctId=X.ProdID ", null);
            } else {
                cur = db.rawQuery(" SELECT DISTINCT S.PrdctId,S.SKUName,(S.StockQntty-ifnull(X.OrderQty,0)) AS Stqty,S.OpeningStock,S.CycleAddedStock,S.NetSalesQty+ifnull(X.OrderQty,0) AS OrdQty,S.CategoryID,S.CycleUnloadStk FROM tblTmpDistributorStock S LEFT join tblVanProductStock ST ON S.PrdctId=ST.PrdctId LEFT OUTER JOIN (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceDetails AS ID WHERE ID.TmpInvoiceCodePDA NOT IN (SELECT D.OrderId FROM tblVanIDOrderIDLeft AS D WHERE D.flgProcessedInvoice=1) GROUP BY ID.ProdID) X ON S.PrdctId=X.ProdID ", null);
            }
        } else {
            if (CommonInfo.hmapAppMasterFlags.get("flgVanStockCalculate") == 1) {
                cur = db.rawQuery(" SELECT DISTINCT S.PrdctId,S.SKUName,S.StockQntty-ifnull(D.OrderQty,0) AS Stqty,S.OpeningStock,S.CycleAddedStock,S.NetSalesQty+ifnull(D.OrderQty,0) AS OrdQty,S.CategoryID,S.CycleUnloadStk FROM tblVanProductStock S LEFT OUTER JOIN \n" +
                        " (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.InvoiceNumber=I.InvoiceNumber  WHERE I.flgProcessedInvoice=0 GROUP BY ID.ProdID) D ON D.ProdID=S.PrdctId", null);
            } else {
                cur = db.rawQuery(" SELECT DISTINCT S.PrdctId,S.SKUName,S.StockQntty-ifnull(D.OrderQty,0) AS Stqty,S.OpeningStock,S.CycleAddedStock,S.NetSalesQty+ifnull(D.OrderQty,0) AS OrdQty,S.CategoryID,S.CycleUnloadStk FROM tblVanProductStock S LEFT OUTER JOIN \n" +
                        " (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.TmpInvoiceCodePDA=I.TmpInvoiceCodePDA  WHERE I.flgProcessedInvoice=0 GROUP BY ID.ProdID) D ON D.ProdID=S.PrdctId", null);
            }
        }
        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                for (int i = 0; i < cur.getCount(); i++) {
                    hmapDistPrdctStockCount.put(cur.getString(0) + "^" + cur.getString(1), cur.getString(2) + "^" + cur.getString(3) + "^" + cur.getString(4) + "^" + cur.getString(5) + "^" + cur.getString(6) + "^" + cur.getString(7));
                    cur.moveToNext();
                }
            }


        }


        // } catch(Exception e)
        // {
        //  System.out.println("Error to Done = "+e.toString());
        //  }

       /* finally
        {*/
        // close();
        return hmapDistPrdctStockCount;
        // }


    }

    public String getUserId() {
        // tblVanProductStock(PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null);";
        String userId = "0";
        int flgVal = flgConfirmedWareHouse();
        Cursor cur = null;
        //open();
        try {
            if (flgVal == 0) {
                cur = db.rawQuery("Select DISTINCT DistributorNodeIdNodeType from tblTmpDistributorStock", null);
            } else {
                //  tblVanProductStock
                cur = db.rawQuery("Select DISTINCT DistributorNodeIdNodeType from tblVanProductStock", null);
            }
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        userId = cur.getString(0);
                        cur.moveToNext();
                    }
                }


            }


        } catch (Exception e) {

        } finally {
            //  close();
            return userId;
        }


    }

    public int getLeftProductToAddBasedOnInvoiceNumberQantity(int NetStockQty, String distId, String PrdctId) {
        int netStock = 0;
        //tblTmpInvoiceDetails (IMEIno text not null,RouteID int null,StoreID text not null,CatID text  null,ProdID text not null,TransDate string not null,Stock integer not null,OrderQty integer not null,OrderVal real not null,FreeQty integer not null,DisVal real not null,Sstat integer not null,SampleQuantity int null,ProductShortName text null,ProductPrice real null, TaxRate real null,TaxValue real null,StoreCatNodeId int null,OrderIDPDA text null,flgIsQuoteRateApplied int null,distibutorID text null,flgWholeSellApplicable int null,TmpInvoiceCodePDA text null);";
        try {
            boolean isPrdctFound = false;
            //Cursor cur=db.rawQuery("Select tblTmpInvoiceDetails.ProdID , tblTmpInvoiceDetails.OrderQty from tblTmpInvoiceDetails inner join tblVanIDOrderIDLeft ON tblTmpInvoiceDetails.FinalAllotedInvoiceIds=tblVanIDOrderIDLeft.OrderId where tblTmpInvoiceDetails.distibutorID='"+distId+"' AND tblTmpInvoiceDetails.FinalAllotedInvoiceIds<>'NA'",null);
            Cursor cur = db.rawQuery("Select tblInvoiceDetails.ProdID , tblInvoiceDetails.OrderQty from tblInvoiceDetails inner join tblVanIDOrderIDLeft ON tblInvoiceDetails.InvoiceNumber=tblVanIDOrderIDLeft.OrderId where  tblInvoiceDetails.InvoiceNumber<>'NA' AND tblVanIDOrderIDLeft.flgProcessedInvoice=0", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        if (PrdctId.equals(cur.getString(0))) {
                            netStock = NetStockQty + Integer.parseInt(cur.getString(1));
                            NetStockQty = netStock;
                            isPrdctFound = true;

                        }


                        cur.moveToNext();
                    }
                }
            } else {
                netStock = NetStockQty;
            }

            if (!isPrdctFound) {
                netStock = NetStockQty;
            }

        } catch (Exception e) {
            Log.e("Error", e.toString());
        } finally {
            {
                return netStock;
            }
        }


    }

    public String getDisId(String storeId) {
        //open();
        String dbstID = "";
        boolean isDBRPresent = false;
        Cursor cur = null;
        try {


            cur = db.rawQuery("Select DBR from tblStoreList where StoreID='" + storeId + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    if (!cur.getString(0).equals("0")) {
                        isDBRPresent = true;
                        dbstID = cur.getString(0);
                    }
                }
            }
            if (!isDBRPresent) {
                cur = db.rawQuery("Select DBR from tblStoreList where DBR<>'0' Limit 1", null);
                if (cur.getCount() > 0) {
                    if (cur.moveToFirst()) {
                        if (!cur.getString(0).equals("0")) {
                            dbstID = cur.getString(0);
                        }
                    }
                }
            }
        } catch (Exception e) {

        } finally {
            if (cur != null) {
                cur.close();
            }
            //close();
            return dbstID;
        }
    }

    public void updateRtlrCrdtBal(String storeId) {
        ContentValues values = new ContentValues();
        values.put("flgRetailerCreditBalnce", 1);
        try {
            db.update(DBHelper.DATABASE_TABLE_MAIN13, values, "StoreID=?", new String[]{storeId});
        } catch (Exception e) {

        }

    }

    public void deleteOrderId(String orderId) {
        //"Select DistributorNodeIdNodeType from tblDistributorOrderPddb.insert(DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID,null,values);
        Cursor cur = db.rawQuery("Select DistributorNodeIdNodeType from tblDistributorOrderPdaId where OrderPDAID='" + orderId + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.DATABASE_TABLE_DISTRIBUTOR_ORDERPDAID, "OrderPDAID=?", new String[]{orderId});
        }
    }

    public String[] getAllDSRSignatureAndSelfi() {

        int SnamecolumnIndex1 = 0;


        Cursor cursor = db.rawQuery("SELECT DISTINCT(IMEI) FROM tblDsrRegDetails", null);
        //Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
        try {
            String StoreName[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                        cursor.moveToNext();
                    }
                }

            }

            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public int getExistingPicNosForSignatureAndSelfi() {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT ifnull(SelfiePath,''),ifnull(SignPath,'') FROM tblDsrRegDetails", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        if (!cursor.getString(ScodecolumnIndex).toString().equals("")) {
                            strProdStockQty = 1;
                        }
                        if (!cursor.getString(1).toString().equals("")) {
                            strProdStockQty = 2;
                        }
                        ///strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public String[] getImgsPathForSignatureAndSelfi() {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT ifnull(SelfieName,''),ifnull(SignName,'') FROM tblDsrRegDetails", null);
        try {

            String StoreName[] = new String[cursor.getCount() + 1];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.getString(SnamecolumnIndex1).toString().equals("")) {
                        StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    }
                    if (!cursor.getString(1).toString().equals("")) {
                        StoreName[1] = (String) cursor.getString(1).toString();
                    }

                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public void updateImageRecordsSyncdForDSRRegistrationAndSelfi(int sstat) {

        try {
            //open();
            db.execSQL("Update tblDsrRegDetails SET Sstat="+sstat);

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            //close();
        }


    }

    public void UpdateDistributerFlag(String SuplierUniqueId, int flag2set) {

        try {
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected = db.update("tblSuplierMapping", values, "SuplierUniqueId=?", new String[]{SuplierUniqueId});
        } catch (Exception ex) {
            String ex1 = ex.getMessage();
        }

    }

    public String fngetDIdAndDType(String DistribtrUniqueId) {

        String flgCheckIfStoreExists = "0^0";
        //tblStoreDetails(StoreID
        Cursor cursor2 = db.rawQuery("SELECT NodeID,NodeType FROM tblSuplierMapping WHERE tblSuplierMapping.SuplierUniqueId='" + DistribtrUniqueId + "'", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {

                    flgCheckIfStoreExists = (String) cursor2.getString(0).toString() + "^" + (String) cursor2.getString(1).toString();

                }
            }
        } catch (Exception e) {
            String ex1 = e.getMessage();
        } finally {
            cursor2.close();

        }
        return flgCheckIfStoreExists;
    }

    public void fnupdateSuplierMstrLocationtrackRemapFlg(String DistribtrUniqueId) {
        //open();
        String DIdAndDType = fngetDIdAndDType(DistribtrUniqueId);
        db.execSQL("UPDATE tblSupplierMstrList SET flgRemap=0 WHERE tblSupplierMstrList.NodeID='" + DIdAndDType.split(Pattern.quote("^"))[0] + "' AND tblSupplierMstrList.NodeType='" + DIdAndDType.split(Pattern.quote("^"))[1] + "'");
        //  close();

    }

    public void Delete_tblDistributorMstr() {
        db.execSQL("DELETE FROM tblSupplierMstrList");
    }

    public void deletetblStoreList() {
        //open();
        db.execSQL("DELETE FROM tblStoreList");
        // close();


    }
    //Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList WHERE Sstat = 1 ",null);

    public String[] SaveStoreList() {

        int LoncolumnIndex = 0;
        int LoncolumnIndex2 = 1;

        Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList WHERE Sstat = 1 or Sstat = 3", null);
        try {
            String strAreaIdsDetais[] = new String[cursor2.getCount()];
            ////// System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());
            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    strAreaIdsDetais[i] = (String) cursor2.getString(LoncolumnIndex) + "%" + (String) cursor2.getString(LoncolumnIndex2);

                    ////// System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
                    cursor2.moveToNext();
                }

            }
            return strAreaIdsDetais;
        } finally {
            cursor2.close();
        }

    }


    public LinkedHashMap<String, String> fetch_CoverageRouteMap_List(int flgForReportOrStoreListActivity,int CoverageAreaNodeID)
    {

        LinkedHashMap<String, String> hmapCoverageRouteMap_details = new LinkedHashMap<>();
        Cursor cursor=null;
        if(CoverageAreaNodeID==0)
        {
            cursor = db.rawQuery("SELECT RouteNodeID,Route FROM tblRoutelist",null);
        }
        else
        {
            cursor = db.rawQuery("SELECT RouteNodeID,Route FROM tblRoutelist WHERE CoverageAreaNodeID="+CoverageAreaNodeID,null);
        }

        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        if(i==0)
                        {
                            if(flgForReportOrStoreListActivity==0) {
                                hmapCoverageRouteMap_details.put("All Beats", "0");
                            }
                            if(flgForReportOrStoreListActivity==1) {
                                hmapCoverageRouteMap_details.put("All Beats", "0");
                            }
                        }
                        hmapCoverageRouteMap_details.put(cursor.getString(1), cursor.getString(0));
                        cursor.moveToNext();
                    }
                }

            }

            else
            {
                // hmapFSO.put("All FSO's Stores List", "0");
                if(flgForReportOrStoreListActivity==0) {
                    hmapCoverageRouteMap_details.put("All Beats", "0");
                }
                if(flgForReportOrStoreListActivity==1) {
                    hmapCoverageRouteMap_details.put("All Beats", "0");
                }
            }
            return hmapCoverageRouteMap_details;
        }
        finally
        {
            if(cursor!=null)
            cursor.close();

        }
    }

    public LinkedHashMap<String, String> fetch_CoverageArea_List(int flgForReportOrStoreListActivity)
    {

        LinkedHashMap<String, String> hmapCoverageArea = new LinkedHashMap<>();
        Cursor cursor = db.rawQuery("SELECT DISTINCT CoverageAreaNodeID,CoverageArea FROM tblRoutelist",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        if(i==0)
                        {
                            if(flgForReportOrStoreListActivity==0) {
                                hmapCoverageArea.put("All DSR/Coverage Area", "0");
                            }
                            if(flgForReportOrStoreListActivity==1) {
                                hmapCoverageArea.put("All DSR/Coverage Area", "0");
                            }
                        }
                        hmapCoverageArea.put(cursor.getString(1), cursor.getString(0));
                        cursor.moveToNext();
                    }
                }

            }

            else
            {
                // hmapFSO.put("All FSO's Stores List", "0");
                if(flgForReportOrStoreListActivity==0) {
                    hmapCoverageArea.put("All DSR/Coverage Area", "0");
                }
                if(flgForReportOrStoreListActivity==1) {
                    hmapCoverageArea.put("All DSR/Coverage Area", "0");
                }
            }
            return hmapCoverageArea;
        }
        finally
        {
            if(cursor!=null)
            cursor.close();

        }
    }

    public LinkedHashMap<String, String> fetch_Route_LisStoreListActivityt(int flgForReportOrStoreListActivity)
    {

        LinkedHashMap<String, String> hmapRoute = new LinkedHashMap<>();
        Cursor cursor = db.rawQuery("SELECT DISTINCT RouteNodeID,Route FROM tblRoutelist",null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++)
                    {
                        if(i==0)
                        {
                            if(flgForReportOrStoreListActivity==0) {
                                hmapRoute.put("All Beats", "0");
                            }
                            if(flgForReportOrStoreListActivity==1) {
                                hmapRoute.put("All Beats", "0");
                            }
                        }
                        hmapRoute.put(cursor.getString(1), cursor.getString(0));
                        cursor.moveToNext();
                    }
                }

            }

            else
            {
                // hmapFSO.put("All FSO's Stores List", "0");
                if(flgForReportOrStoreListActivity==0) {
                    hmapRoute.put("All Beats", "0");
                }
                if(flgForReportOrStoreListActivity==1) {
                    hmapRoute.put("All Beats", "0");
                }
            }
            return hmapRoute;
        }
        finally
        {
            if(cursor!=null)
            cursor.close();

        }
    }
    public LinkedHashMap<String, String> fetch_Route_List() {
        //open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT RouteNodeID,RouteNodeType,Route FROM tblRoutelist Where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' AND CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' ", null);

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
											/*if(i==0)
											{
												hmapCatgry.put("Select Manager", "00");
											}*/
                        hmapCatgry.put(cursor.getString(2).toString(), cursor.getString(0).toString() + "_" + cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Routes", "0");
            }
            return hmapCatgry;
        } finally {
            cursor.close();
            // close();
        }
    }

    public int checkDSRCheckIntblSuplierMapping() {
        int chkI = 0;
        //open();
        Cursor cursorE2 = null;

        try {
            //cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblSuplierMapping WHERE Sstat =4", null);
            cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblSuplierMapping", null);
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }
            //chkI=checkDSRCheckIntblDistributorSavedData();

        } finally {
            cursorE2.close();
            // close();
        }
        return chkI;
    }

    public int checkDSRCheckIntblDistributorSavedData() {
        int chkI = 0;
        Cursor cursorE2 = null;

        try {
            cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblDistributorSavedData WHERE Sstat =4", null);
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            cursorE2.close();

        }
        return chkI;
    }

    public String GetActiveRouteDescr() {
        int LoncolumnIndex = 0;

        //open();
        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT Route FROM tblRoutelist WHERE flgTodayRoute = 1 AND CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' AND CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' Limit 1", null);

            String activeRouteID = "0";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            if (activeRouteID.equals("0")) {
                activeRouteID = GetNoActiveRouteDescr();
            }
            return activeRouteID;
        } finally {
            cursor2.close();
            //close();
        }

    }

    public String GetNoActiveRouteDescr() {
        int LoncolumnIndex = 0;


        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT Route FROM tblRoutelist WHERE flgTodayRoute = 0 AND CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' AND CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"' Limit 1", null);

            String activeRouteID = "0";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }

            return activeRouteID;
        } finally {
            cursor2.close();

        }

    }

    public String[] FetchStoreRouteIdType(String rID) {// where StoreRouteID='" + rID + "'
        int ScodecolumnIndex = 0;
        int SnamecolumnIndex = 1;

        Cursor cursor = db.rawQuery("SELECT StoreRouteID, RouteNodeType FROM tblStoreList  ORDER BY StoreName ASC", null);
        //Cursor cursor = db.rawQuery("SELECT StoreRouteID, RouteNodeType FROM tblStoreList ORDER BY DistanceNear", null);
        try {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex).toString() + "_" + (String) cursor.getString(SnamecolumnIndex).toString();
                    cursor.moveToNext();
                }

            }
            return StoreName;
        } finally {
            if(cursor!=null)
            cursor.close();
        }

    }

    public boolean checkDistributorLocatioExists(String DistribtrId) {
        // int entryCount;
        //open();
        Cursor cursorE2 = null;
        boolean chkI = false;
        try {
            cursorE2 = db.rawQuery("SELECT count(*) FROM tblSuplierMapping WHERE SuplierId ='" + DistribtrId + "'", null);
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    ////// System.out.println("Stock prev.. entered!");
                    chkI = true;
                } else {
                    chkI = false;
                }
            }

        } finally {
            cursorE2.close();
            // close();
        }
        return chkI;
    }

    public void deleteStorecloseLocationTable() {
        db.execSQL("DELETE FROM tblStoreCloseLocationDetails");
    }

    public void deleteStorecloseLocationTableBasedOnStoreID(String StoreID, String StoreVisitCode) {
        db.execSQL("DELETE FROM tblStoreCloseLocationDetails where StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'");
    }

    public long saveTblStorecloseLocationDetails(String StoreID,
                                                 String Lattitude, String Longitude, String Accuracy,
                                                 String Address, String City, String Pincode, String State,
                                                 String fnAccurateProvider, String GpsLat, String GpsLong,
                                                 String GpsAccuracy, String NetwLat, String NetwLong,
                                                 String NetwAccuracy, String FusedLat, String FusedLong,
                                                 String FusedAccuracy, String AllProvidersLocation, String GpsAddress,
                                                 String NetwAddress, String FusedAddress,
                                                 String FusedLocationLatitudeWithFirstAttempt, String FusedLocationLongitudeWithFirstAttempt,
                                                 String FusedLocationAccuracyWithFirstAttempt, int Sstat, String StoreVisitCode) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreVisitCode", StoreVisitCode);
        initialValues.put("StoreID", StoreID);

        initialValues.put("Lattitude", Lattitude);
        initialValues.put("Longitude", Longitude);
        initialValues.put("Accuracy", Accuracy);
        initialValues.put("Address", Address);
        initialValues.put("City", City);
        initialValues.put("Pincode", Pincode);
        initialValues.put("State", State);
        initialValues.put("fnAccurateProvider", fnAccurateProvider);
        initialValues.put("GpsLat", GpsLat);
        initialValues.put("GpsLong", GpsLong);
        initialValues.put("GpsAccuracy", GpsAccuracy);
        initialValues.put("NetwLat", NetwLat);
        initialValues.put("NetwLong", NetwLong);
        initialValues.put("NetwAccuracy", NetwAccuracy);
        initialValues.put("FusedLat", FusedLat);
        initialValues.put("FusedLong", FusedLong);
        initialValues.put("FusedAccuracy", FusedAccuracy);

        initialValues.put("AllProvidersLocation", AllProvidersLocation);
        initialValues.put("GpsAddress", GpsAddress);
        initialValues.put("NetwAddress", NetwAddress);
        initialValues.put("FusedAddress", FusedAddress);
        initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt);
        initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt);
        initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt);

        initialValues.put("Sstat", Sstat);
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


        return db.insert(DBHelper.DATABASE_TABLE_tblStoreCloseLocationDetails, null, initialValues);
    }

    public long inserttblStoreClosedPhotoDetail(String storeId, String ClickedDateTime, String PhotoName,
                                                String PDAPhotoPath, int Sstat, String StoreVisitCode) {

        //open();
        ContentValues initialValues = new ContentValues();
        //StoreID text null,ClickedDateTime text null,PhotoName text null,PDAPhotoPath text null,Sstat integer null
        initialValues.put("StoreID", storeId.trim());
        initialValues.put("StoreVisitCode", StoreVisitCode);
        initialValues.put("ClickedDateTime", ClickedDateTime.trim());
        initialValues.put("PhotoName", PhotoName.trim());
        initialValues.put("PDAPhotoPath", PDAPhotoPath.trim());
        initialValues.put("Sstat", Sstat);

        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        long inserted = db.insert(DBHelper.DATABASE_TABLE_tblStoreClosedPhotoDetail, null, initialValues);
        // close();
        return inserted;
    }

    public void validateAndDelStoreClosePic(String StoreId, String imgName, String StoreVisitCode) {
        //open();
        try {
            /*tblPutStckRoomPhotoDetails(TempId text null,StoreId text null,PhotoName text null,PhotoPath text null,ClickedDateTime text null,ClickTagPhoto text null,Sstat text null);";*/
            Cursor cur = db.rawQuery("Select PhotoName from tblStoreClosedPhotoDetail where StoreId='" + StoreId + "'" +
                    "and PhotoName='" + imgName + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);

            if (cur.getCount() > 0) {
                db.delete(DBHelper.DATABASE_TABLE_tblStoreClosedPhotoDetail, "StoreID=? and PhotoName=?",
                        new String[]{StoreId, imgName});
            }
        } catch (SQLiteException ex) {
            System.out.println("validate pic..." + ex);
        } finally {
            // close();
        }
    }

    public ArrayList<String> getStoreClosedImgNameByStoreId(String StoreID, String StoreVisitCode) {
        //open();
        ArrayList<String> list = new ArrayList<>();
        try {
            Cursor cur = db.rawQuery("Select PhotoName from tblStoreClosedPhotoDetail where StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        list.add(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getStoreClosedImgNameByStoreId = " + e.toString());
        } finally {
            //close();
            return list;
        }
    }

    public void upDateCloseStoreReason(String StoreID, String ReasonID, String ReasonDesc, String StoreVisitCode) {
        try {
            //open();
            final ContentValues values = new ContentValues();
            values.put("ReasonID", ReasonID);
            values.put("ReasonDesc", ReasonDesc);
            //values.put("StoreVisitCode", StoreVisitCode);

            int affected = db.update("tblStoreCloseReasonSaving", values, "StoreID=? AND StoreVisitCode=?",
                    new String[]{StoreID, StoreVisitCode});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            // close();
        }
    }

    public void savetblStoreCloseReasonMaster(int CloseReasonID, String CloseReasonDescr) {
        ContentValues values = new ContentValues();
        values.put("CloseReasonID", CloseReasonID);
        values.put("CloseReasonDescr", CloseReasonDescr);

        db.insert(DBHelper.DATABASE_TABLE_tblStoreCloseReasonMaster, null, values);
    }

    public void deletetblStoreCloseReasonMaster() {
        db.execSQL("DELETE FROM tblStoreCloseReasonMaster");
    }

    public LinkedHashMap<String, String> getStoreClosedReasons() {
        //open();
        LinkedHashMap<String, String> list = new LinkedHashMap<>();
        try {
            Cursor cur = db.rawQuery("Select CloseReasonID,CloseReasonDescr from tblStoreCloseReasonMaster", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        if (i == 0) {
                            list.put("00", "Select");
                            list.put(cur.getString(0), cur.getString(1));
                        } else {
                            list.put(cur.getString(0), cur.getString(1));
                        }
                        cur.moveToNext();
                    }
                }
            } else {
                list.put("00", "Select");
            }
        } catch (Exception e) {
            System.out.println("Error getStoreClosedReasons = " + e.toString());
        } finally {
            // close();
            return list;
        }
    }


    public String getOtherReason(String StoreID, String StoreVisitCode) {
        //open();
        String list = "00^NA";
        try {
            Cursor cur = db.rawQuery("Select ReasonID,ReasonDescr from tblStoreCloseReasonSaving where StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        list = cur.getString(0) + "^" + cur.getString(1);
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            // close();
            return list;
        }
    }

    //changes
    public String getLatLongForDistrbtrMap(String DistribtrId) {
        //open();
        String list = "NA";
        try {
            Cursor cur = db.rawQuery("Select fnLati,fnLongi from tblSuplierMapping where SuplierId='" + DistribtrId + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        list = cur.getString(0) + "^" + cur.getString(1);
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getLatLongForDistrbtrMap = " + e.toString());
        } finally {
            //close();
            return list;
        }
    }

    public long inserttblStoreCloseReasonSaving(String storeId, String ReasonID, String ReasonDescr, int Sstat, String StoreVisitCode) {
        //open();
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", storeId.trim());
        initialValues.put("ReasonID", ReasonID.trim());
        initialValues.put("ReasonDescr", ReasonDescr.trim());
        initialValues.put("StoreVisitCode", StoreVisitCode);
        initialValues.put("Sstat", Sstat);
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


        long inserted = db.insert(DBHelper.DATABASE_TABLE_tblStoreCloseReasonSaving, null, initialValues);
        // close();
        return inserted;
    }

    //map distributor
    public long savetblIsDBRStockSubmitted(int IsDBRStockSubmitted) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("IsDBRStockSubmitted", IsDBRStockSubmitted);


        return db.insert(DBHelper.TABLE_tblIsDBRStockSubmitted, null, initialValues);
    }

    public int fetchtblIsDBRStockSubmitted() {
        //open();
        int retVal = 0;
        try {
            Cursor cur = db.rawQuery("Select IsDBRStockSubmitted from tblIsDBRStockSubmitted", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        retVal = Integer.parseInt(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            // close();
            return retVal;
        }
    }

    public int counttblSupplierMstrList()//If fnChkFlgTodayRoute=1 it will get added to Actual Call On Route Else get Added in Off Route
    {

        //open();
        int ActualCall = 0;
        Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblSupplierMstrList", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {

                        if (!cursor2.isNull(0)) {
                            ActualCall = Integer.parseInt(cursor2.getString(0).toString());
                            cursor2.moveToNext();
                        }
                    }
                }
            }

            return ActualCall;
        } finally {
            cursor2.close();
            //close();
        }
    }

    public LinkedHashMap<String, String> fnGetPaymentMode() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
        // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        Cursor cursor = db.rawQuery("SELECT InstrumentModeId,InstrumentMode from tblInstrumentMaster   ", null);// Where PNodeID='"+TSIID+"'
        // (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        } finally {
            cursor.close();
            // close();
        }
    }

    public LinkedHashMap<String, String> fnGetBankIdData() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
        // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        Cursor cursor = db.rawQuery("SELECT BankId,BankName from tblBankMaster   ", null);// Where PNodeID='"+TSIID+"'
        // (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        } finally {
            cursor.close();
            // close();
        }
    }

    public LinkedHashMap<String, String> fnGettblBankMaster() {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();
        // Cursor cursor = db.rawQuery("SELECT SST_NameId,SST_Name_des from tbl_SST_NameMstr Order By Sequence ASC  ", null);// Where PNodeID='"+TSIID+"'
        Cursor cursor = db.rawQuery("SELECT BankId,BankName from tblBankMaster   ", null);// Where PNodeID='"+TSIID+"'
        // (String) cursor.getString(0).toString()+"^"+(String) cursor.getString(1).toString()+"^"+(String) cursor.getString(2).toString()+"^"+(String) cursor.getString(3).toString()+"^"+(String) cursor.getString(4).toString()+"^"+(String) cursor.getString(5).toString()+"^"+(String) cursor.getString(6).toString()+"^"+(String) cursor.getString(7).toString()+"^"+(String) cursor.getString(8).toString()+"^"+(String) cursor.getString(9).toString()+"^"+(String) cursor.getString(10).toString()
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapQuestionMstr.put((String) cursor.getString(1).toString(), (String) cursor.getString(0).toString());
                        //    System.out.println("QuestID:"+(String)cursor.getString(0).toString()+"QuestCode:"+(String) cursor.getString(1).toString()+"QuestDesc:"+(String) cursor.getString(2).toString()+"QuestType:"+(String) cursor.getString(3).toString()+"AnsControlType:"+(String) cursor.getString(4).toString()+"AnsControlInputTypeID:"+(String) cursor.getString(5).toString()+"AnsControlInputTypeMaxLength:"+(String) cursor.getString(6).toString()+"AnsMustRequiredFlg:"+(String) cursor.getString(7).toString()+"QuestBundleFlg:"+(String) cursor.getString(8).toString()+"ApplicationTypeID:"+(String) cursor.getString(9).toString()+"Sequence:"+(String) cursor.getString(10).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapQuestionMstr;
        } finally {
            cursor.close();
            // close();
        }
    }

    public void deleteWhereStoreId(String StoreID, String OrderPDAID, String TmpInvoiceCodePDA) {

        db.execSQL("DELETE FROM tblAllCollectionData WHERE StoreID ='" + StoreID + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
    }

    //Activity Amount Collection Functions

    public long savetblAllCollectionData(String StoreVisitCode, String StoreID, String paymentMode, String PaymentModeID, String Amount,
                                         String RefNoChequeNoTrnNo, String Date, String Bank, String TmpInvoiceCodePDA, String CollectionCode) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreVisitCode", StoreVisitCode);
        initialValues.put("StoreID", StoreID.toString().trim());
        initialValues.put("PaymentMode", paymentMode.toString().trim());
        initialValues.put("PaymentModeID", PaymentModeID.toString().trim());
        initialValues.put("Amount", Amount.toString().trim());
        initialValues.put("RefNoChequeNoTrnNo", RefNoChequeNoTrnNo.toString().trim());
        initialValues.put("Date", Date.toString().trim());
        initialValues.put("Bank", Bank.toString().trim());
        initialValues.put("Sstat", "1");
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        initialValues.put("CollectionCode", CollectionCode);
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

       /* initialValues.put("AmountChequesOrDD", AmountSecondString.toString().trim());
        initialValues.put("CashID", "1");
        initialValues.put("RefNoChequeNoTrnNo", ChequeNoSecondString.toString().trim());
        initialValues.put("DateChequesOrDD", DateSecondString.toString().trim());
        initialValues.put("BankChequesOrDD", BankSecondString.toString().trim());

        initialValues.put("ElectronicID", "3");
        initialValues.put("PaymentModeElectronic", paymentModeThirdString.toString().trim());
        initialValues.put("AmountElectronic", AmountThirdString.toString().trim());
        initialValues.put("RefNoChequeNoTrnNoElectronic", ChequeNoThirdString.toString().trim());
        initialValues.put("DateElectronic", DateThirdString.toString().trim());
        initialValues.put("BankElectronic",  BankThirdString.toString().trim());
        initialValues.put("Sstat", "1");
        initialValues.put("OrderPDAID", OrderPDAID);*/


        return db.insert(DBHelper.DATABASE_TABLE_tblAllCollectionData, null, initialValues);
    }

    public String fnRetrieveCollectionDataBasedOnStoreID(String StoreVisitCode, String StoreID, String OrderPDAID, String TmpInvoiceCodePDA) {
        String flag = "0";
        try {
            //open();
            Cursor cursor = db.rawQuery("SELECT PaymentMode, PaymentModeID,Amount,RefNoChequeNoTrnNo,Date,Bank from tblAllCollectionData where StoreID = '" + StoreID + "' and StoreVisitCode='" + StoreVisitCode + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (flag.equals("0")) {
                            flag = cursor.getString(0).toString() + "^" + cursor.getString(1).toString() + "^" + cursor.getString(2).toString() + "^" + cursor.getString(3).toString() + "^" + cursor.getString(4).toString() + "^" + cursor.getString(5).toString();

                        } else {
                            flag = flag + "$" + cursor.getString(0).toString() + "^" + cursor.getString(1).toString() + "^" + cursor.getString(2).toString() + "^" + cursor.getString(3).toString() + "^" + cursor.getString(4).toString() + "^" + cursor.getString(5).toString();
                        }
                        cursor.moveToNext();
                    }

                }
            }
            return flag;
        } catch (Exception e) {

        } finally {

            // close();
            return flag;
        }
    }

    public void deleteAllCollectionTables() {

        db.execSQL("DELETE FROM tblBankMaster");
        db.execSQL("DELETE FROM tblInstrumentMaster");
        db.execSQL("DELETE FROM tblAllCollectionData");


    }

    public String fnCheckNewOrUpdateAndRetrieveCollectionData(String StoreID) {
        String flag = "NEW";
        try {
            //open();
            Cursor cursor = db.rawQuery("SELECT PaymentMode, Amount,RefNoChequeNoTrnNo,Date,Bank from tblAllCollectionData where StoreID = '" + StoreID + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (flag.equals("NEW")) {
                            flag = cursor.getString(0).toString() + "^" + cursor.getString(1).toString() + "^" + cursor.getString(2).toString() + "^" + cursor.getString(3).toString() + "^" + cursor.getString(4).toString();
                        } else {
                            flag = flag + "~" + cursor.getString(0).toString() + "^" + cursor.getString(1).toString() + "^" + cursor.getString(2).toString() + "^" + cursor.getString(3).toString() + "^" + cursor.getString(4).toString();
                        }
                        cursor.moveToNext();
                    }

                }
            }
            return flag;
        } catch (Exception e) {

        } finally {

            //close();
            return flag;
        }
    }

    public int fetchTblStockOut() {
        //open();
        int retVal = 0;
        try {
            Cursor cur = db.rawQuery("Select flgStockOutEntryDone from tblDistributorStockOutFlg", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        retVal = Integer.parseInt(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            // close();
            return retVal;
        }
    }

    public void inserttblStockUploadedStatus(Integer flgStockTrans, Integer VanLoadUnLoadCycID, BigInteger CycleTime, Integer statusId, Integer flgDayEnd) {

        ContentValues values = new ContentValues();
//tblStockUploadedStatus(flgStockTrans int null,VanLoadUnLoadCycID int null,CycleTime text null);";
        values.put("flgStockTrans", flgStockTrans);
        values.put("VanLoadUnLoadCycID", VanLoadUnLoadCycID);
        values.put("CycleTime", "" + CycleTime);
        values.put("StatusId", statusId);
        values.put("flgDayEnd", flgDayEnd);
       /* SharedPreferences sharedPref = mContext.getSharedPreferences(CommonInfo.Preference, MODE_PRIVATE);
        SharedPreferences.Editor editorFinalSubmit = sharedPref.edit();
        editorFinalSubmit.putInt("FinalSubmit", flgDayEnd);
        editorFinalSubmit.commit();*/
        db.insert(DBHelper.DATABASE_TABLE_tblStockUploadedStatus, null, values);


    }

    public int fetchtblStockUploadedStatus() {
        //open();
        int retVal = 0;
        try {
            Cursor cur = db.rawQuery("Select flgStockTrans from tblStockUploadedStatus", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        retVal = Integer.parseInt(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            //close();
            return retVal;
        }
    }

    public int fetchtblDayEndStatus() {
        //open();
        int retVal = 0;
        try {
            Cursor cur = db.rawQuery("Select flgDayEnd from tblStockUploadedStatus", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {

                    retVal = cur.getInt(0);
                    cur.moveToNext();

                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            //close();
            return retVal;
        }
    }

    public String[] getAllStoreClosePhotoDetail() {

        int SnamecolumnIndex1 = 0;


        Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tblStoreClosedPhotoDetail where Sstat=5", null);
        //Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
        try {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    cursor.moveToNext();
                }
            }

            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public int getExistingPicNosForStoreClose(String StoreID) {

        int ScodecolumnIndex = 0;
        // tblStoreClosedPhotoDetail
        Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tblStoreClosedPhotoDetail where StoreID='" + StoreID + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public String[] getImgsPathForStoreClose(String StoreID) {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT PhotoName FROM tblStoreClosedPhotoDetail WHERE StoreID ='" + StoreID + "'", null);
        try {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public void updateImageRecordsSyncdForStoreClose(String PhotoName) {

        try {
            //open();
            //System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
            final ContentValues values = new ContentValues();
            values.put("Sstat", 4);

            int affected3 = db.update("tblStoreClosedPhotoDetail", values, "PhotoName=?", new String[]{PhotoName});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            //close();
        }


    }

    public void UpdateStoreClosephotoFlag(String sID, int flag2set) {
        try {
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected16 = db.update("tblStoreClosedPhotoDetail", values, "StoreID=?", new String[]{sID});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
    }

    public LinkedHashMap<String, String> getPrdctIdAndSkuWrehouse() {
        //private static final String CREATE_TABLE_tblDistributorDayReport="
        // create table tblDistributorDayReport(ProductNodeID text null, ProductNodeType text null, SKUName text null, FlvShortName text null,StockDate text null,DistributorNodeID int null,DistributorNodeType int null);";
        LinkedHashMap<String, String> hmapGetData = new LinkedHashMap<>();
        int LoncolumnIndex = 0;

        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT ProductNodeID,FlvShortName  FROM tblDistributorDayReport ", null);


            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    hmapGetData.put(cursor2.getString(0), cursor2.getString(1));
                    cursor2.moveToNext();
                }

            }
            return hmapGetData;
        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
        }
    }

    public void deleteConfirmWArehouse() {
        //open();
        db.execSQL("Delete from tblStockConfirm");
        //close();
    }

    public void insertConfirmWArehouse(String UserId, String confirmFlg) {

        //open();
        deleteVanConfirmFlag();
        ContentValues values = new ContentValues();
        values.put("UserId", UserId);
        values.put("confirmFlg", confirmFlg);
        db.insert(DBHelper.DATABASE_TABLE_tblStockConfirm, null, values);
        db.execSQL("DELETE FROM tblVanProductStock");
//PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null,SKUName text null,OpeningStock text null,TodaysAddedStock text null,CycleAddedStock text null,NetSalesQty text null,TodaysUnloadStk text null,CycleUnloadStk text null,CategoryID
        db.execSQL("INSERT INTO " + DBHelper.DATABASE_TABLE_DISTRIBUTOR_STOCK + " SELECT * FROM " + DBHelper.DATABASE_TABLE_TMP_DISTRIBUTOR_STOCK);
        db.execSQL("DELETE FROM tblTmpDistributorStock");
        updateInvoiceExecuted();

        if (SplashScreen.sPrefVanStockChanged != null) {
            Editor editor = SplashScreen.sPrefVanStockChanged.edit();
            editor.clear();
            editor.commit();
        }
        CommonInfo.VanLoadedUnloaded = 0;
        //DATABASE_TABLE_TMP_DISTRIBUTOR_STOCK
        //  DATABASE_TABE_DISTRIBUTOR_STOCK

        //close();

    }

    public void updateInvoiceExecuted() {
        // flgProcessedInvoice,InvoiceNumber
        //tblVanIDOrderIDLeft(DistributorNodeIdNodeType text null,OrderId text null,flgProcessedInvoice int not null);";
        //tblInvoiceHeader (StoreVisitCode text not null,InvoiceNumber int not null,TmpInvoiceCodePDA text null, StoreID text not null, InvoiceDate string not null, TotalBeforeTaxDis real not null, TaxAmt real not null, TotalDis real not null, InvoiceVal real not null, FreeTotal integer not null, Sstat integer not null, InvAfterDis real not null, AddDis real not null,  NoCoupon int null, TotalCoupunAmount real null,TransDate string not null,FlgInvoiceType text not null,flgWholeSellApplicable int null,flgProcessedInvoice int not null,CycleID  int not null);";

        //  if(CommonInfo.flgDrctslsIndrctSls==1) {
        if (CommonInfo.hmapAppMasterFlags.containsKey("flgVanStockCalculate") || CommonInfo.hmapAppMasterFlags.containsKey("flgDBRStockCalculate")) {
            if (CommonInfo.hmapAppMasterFlags.get("flgVanStockCalculate") != null) {
                if (CommonInfo.hmapAppMasterFlags.get("flgVanStockCalculate") == 1) {
                    //db.execSQL("UPDATE tblInvoiceHeader SET tblInvoiceHeader.flgProcessedInvoice=(Select tblVanIDOrderIDLeft.flgProcessedInvoice from tblVanIDOrderIDLeft inner join tblInvoiceHeader ON  tblInvoiceHeader.InvoiceNumber=tblVanIDOrderIDLeft.OrderId Where tblInvoiceHeader.InvoiceNumber=tblVanIDOrderIDLeft.InvoiceNumber AND tblVanIDOrderIDLeft.flgProcessedInvoice<>null) D where D.flgProcessedInvoice<>null");
                    if (fnCounttblVanProductLeft() > 0) {
                        db.execSQL("UPDATE tblInvoiceHeader SET flgProcessedInvoice=(Select tblVanIDOrderIDLeft.flgProcessedInvoice from tblVanIDOrderIDLeft Where (tblInvoiceHeader.InvoiceNumber=tblVanIDOrderIDLeft.OrderId))");
                    }
                }
            }
            if (CommonInfo.hmapAppMasterFlags.get("flgDBRStockCalculate") != null) {
                if (CommonInfo.hmapAppMasterFlags.get("flgDBRStockCalculate") == 1) {
                    if (fnCounttblDistributorProductLeft() > 0) {
                        db.execSQL("UPDATE tblInvoiceHeader SET flgProcessedInvoice=(Select ifnull(flgProcessedInvoice,0) from tblDistributorIDOrderIDLeft Where (tblInvoiceHeader.TmpInvoiceCodePDA=tblDistributorIDOrderIDLeft.OrderId))");
                    }
                }
            }

        }

        //  }
       /* else
        {
            db.execSQL("UPDATE tblInvoiceHeader SET flgProcessedInvoice=(Select flgProcessedInvoice from tblVanIDOrderIDLeft Where (tblInvoiceHeader.TmpInvoiceCodePDA=tblVanIDOrderIDLeft.OrderId))");
        }*/
    }

    public void deleteVanConfirmFlag() {

        db.execSQL("DELETE FROM tblStockConfirm");

    }

    public int flgConfirmedWareHouse() {
        int flgConfirm = 0;
        //open();
        try {


            Cursor cur = db.rawQuery("Select * from tblStockConfirm", null);
            if (cur.getCount() > 0) {
                flgConfirm = 1;
            }
        } catch (SQLException exception) {

        } finally {
            //close();
            return flgConfirm;
        }
    }

    public double fnGettblPriceApplycutoffvalue(String storeID) {
        //open();
        Double cutoffvalue = 0.0;
        Cursor cursor = db.rawQuery("Select ifnull(cutoffvalue,0.0) from tblPriceApplyType", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                cutoffvalue = Double.parseDouble(cursor.getString(0));
                //cutoffvalue=Double.parseDouble(decimalFormat.format(cutoffvalue));
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        // close();
        return cutoffvalue;
    }

    public LinkedHashMap<String, String> fetch_Store_RemaningStockStatus() {

        //open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
//tblVanProductStock(PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null,SKUName text null,OpeningStock text null,TodaysAddedStock text null,CycleAddedStock text null,NetSalesQty text null,TodaysUnloadStk text null,CycleUnloadStk text null,CategoryID text null);";
        Cursor cursor = db.rawQuery("Select DISTINCT S.SKUName,S.StockQntty-ifnull(D.OrderQty,0) AS StockAvailable,((S.OpeningStock+S.TodaysAddedStock)-S.TodaysUnloadStk) As openingStk,S.NetSalesQty+ifnull(D.OrderQty,0) from tblVanProductStock S left outer join (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.InvoiceNumber=I.InvoiceNumber  WHERE I.flgProcessedInvoice=0 GROUP BY ID.ProdID) D ON D.ProdID=S.PrdctId", null);

//Cursor cur=db.rawQuery("Select PrdctId,OriginalStock from tblVanProductStock where DistributorNodeIdNodeType='"+distId+"'",null);
        //  Cursor	cursor = db.rawQuery("SELECT Distinct ProductShortName,IFNULL(StockQntty,0),IFNULL(OriginalStock,0) from tblVanProductStock inner join tblProductListMaster on tblVanProductStock.PrdctId=tblProductListMaster.ProductID", null); //order by AutoIdOutlet Desc
//Cursor	cursor = db.rawQuery("SELECT tblStoreList.StoreID, tblStoreList.StoreName, IFNULL(tblTmpInvoiceHeader.InvoiceVal,0) FROM tblStoreList left outer join tblTmpInvoiceHeader on tblStoreList.StoreID=tblTmpInvoiceHeader.StoreID", null); //order by AutoIdOutlet Desc
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        //hmapCatgry.put(cursor.getString(0).toString(),cursor.getString(1).toString() + "( Order Value:-"+cursor.getString(2).toString()+")");
                        // hmapCatgry.put((i+1)+")  "+cursor.getString(0).toString(), "[Stock Left: "+cursor.getString(2).toString()+"]");//[Stock Loaded:->"+cursor.getString(1).toString()+ "]
                        hmapCatgry.put((i + 1) + ")  " + cursor.getString(0).toString(), cursor.getString(1).toString() + "^" + cursor.getString(2).toString() + "^" + cursor.getString(3).toString());//[Stock Loaded:->"+cursor.getString(1).toString()+ "]

                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Stock", "0");
            }
            return hmapCatgry;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }
    }

    public Double fetch_Store_MaxCollectionAmount(String StoreID, String TmpInvoiceCodePDA) {
//tv_GrossInvVal
        //open();
        Double dblMaxCollectionAmount = 0.0;
        Cursor cursor = db.rawQuery("SELECT ifnull(tblLastOutstanding.Outstanding,'0.0'),tblTmpInvoiceHeader.InvoiceVal from tblTmpInvoiceHeader left outer join tblLastOutstanding on tblTmpInvoiceHeader.StoreID=tblLastOutstanding.StoreID WHERE tblTmpInvoiceHeader.StoreID='" + StoreID + "' AND tblTmpInvoiceHeader.TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null); //order by AutoIdOutlet Desc
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        //hmapCatgry.put(cursor.getString(0).toString(),cursor.getString(1).toString() + "( Order Value:-"+cursor.getString(2).toString()+")");
                        dblMaxCollectionAmount = Double.parseDouble(cursor.getString(0).toString()) + Double.parseDouble(cursor.getString(1).toString());

                        cursor.moveToNext();
                    }
                }

            } else {
                dblMaxCollectionAmount = 0.0;
            }
            return dblMaxCollectionAmount;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }
    }

    public Double fetch_Store_InvValAmount(String StoreID, String TmpInvoiceCodePDA) {
//tv_GrossInvVal
        //open();
        Double dblMaxCollectionAmount = 0.0;
        // Cursor   cursor = db.rawQuery("SELECT tblTmpInvoiceHeader.InvoiceVal from tblTmpInvoiceHeader WHERE tblTmpInvoiceHeader.StoreID='"+StoreID+"' AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'", null); //order by AutoIdOutlet Desc
        Cursor cursor = db.rawQuery("SELECT tblTmpInvoiceHeader.InvoiceVal from tblTmpInvoiceHeader WHERE tblTmpInvoiceHeader.StoreID='" + StoreID + "'", null); //order by AutoIdOutlet Desc
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        //hmapCatgry.put(cursor.getString(0).toString(),cursor.getString(1).toString() + "( Order Value:-"+cursor.getString(2).toString()+")");
                        dblMaxCollectionAmount = Double.parseDouble(cursor.getString(0).toString());

                        cursor.moveToNext();
                    }
                }

            } else {
                dblMaxCollectionAmount = 0.0;
            }
            return dblMaxCollectionAmount;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }
    }

    public double fnGetStoretblLastOutstanding(String storeID) {
        //open();
        double LastOutstanding = 0.0;
        Cursor cursor = db.rawQuery("Select ifnull(Outstanding,'0.0') from tblLastOutstanding WHERE StoreID='" + storeID + "'", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                LastOutstanding = Double.parseDouble(cursor.getString(0));
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        // close();
        return LastOutstanding;
    }

    public Double fnTotCollectionAmtAgainstStore(String StoreID, String TmpInvoiceCodePDA, String StoreVisitCode) {
        //open();
        Double TotCollectionAmt = 0.0;
        try {

            Cursor cursor = db.rawQuery("SELECT  SUM(IFNULL(Amount,0.0)) from tblAllCollectionData where StoreID = '" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    TotCollectionAmt = Double.parseDouble(cursor.getString(0).toString());
                }
            }
        } catch (Exception e) {

        } finally {
            if (cursor != null) {
                cursor.close();
                ;
            }
            // close();
            // return flag;
        }
        return TotCollectionAmt;
    }

    public String[] fetch_Store_tblInvoiceLastVisitDetails(String StoreID) {
//tv_GrossInvVal
        //open();

        Cursor cursor = db.rawQuery("SELECT ifnull(tblInvoiceLastVisitDetails.InvCode,'0.0'),ifnull(tblInvoiceLastVisitDetails.InvDate,'NA'),ifnull(tblInvoiceLastVisitDetails.OutstandingAmt,'0.0'),ifnull(tblInvoiceLastVisitDetails.AmtOverdue,'0.0') from tblInvoiceLastVisitDetails WHERE tblInvoiceLastVisitDetails.StoreID='" + StoreID + "'", null); //order by AutoIdOutlet Desc
        String InvoiceLastVisitDetails[] = new String[cursor.getCount()];
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        InvoiceLastVisitDetails[i] = cursor.getString(0).toString() + "^" + cursor.getString(1).toString() + "^" + cursor.getString(2).toString() + "^" + cursor.getString(3).toString();
                        cursor.moveToNext();
                    }
                }
            }
            return InvoiceLastVisitDetails;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }
    }

    public long savetblInvoiceCaption(String INVPrefix, int VanIntialInvoiceIds, String INVSuffix) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("INVPrefix", INVPrefix);
        initialValues.put("VanIntialInvoiceIds", VanIntialInvoiceIds);
        initialValues.put("INVSuffix", INVSuffix);
        return db.insert(DBHelper.DATABASE_TABLE_tblInvoiceCaption, null, initialValues);
    }

    public void Delete_tblInvoiceCaption() {
        db.execSQL("DELETE FROM tblInvoiceCaption");

    }

    public String fnGetExistingInvoiceNumber(String StoreID) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT TmpInvoiceCodePDA FROM tblTmpInvoiceHeader WHERE StoreID='" + StoreID + "' AND Sstat=1", null);
        String TmpInvoiceCodePDA = "0";
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    TmpInvoiceCodePDA = cursorE2.getString(0).toString();
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            // close();
        }
        return TmpInvoiceCodePDA;
    }

    public void updateOutstandingOfStore(String StoreID, Double OutStandingAmt) {

        //open();
        //
        try {
            db.execSQL("Update tblLastOutstanding Set  Outstanding=" + OutStandingAmt + " WHERE StoreID='" + StoreID + "'");
        } catch (Exception ex) {

        }


        // close();
    }

    public void deletetblDistributorOrderPdaId() {


        db.execSQL("DELETE FROM tblDistributorOrderPdaId");
        //db.execSQL("DELETE FROM tblVanProductStock");
        db.execSQL("DELETE FROM tblVanIDOrderIDLeft");
        //db.execSQL("DELETE FROM tblDistributorOrderPdaId");

        db.execSQL("DELETE FROM tblDistributorStockOutFlg");


    }

    public HashMap<String, String> checkForStoreIdVisitStatus() {
        Cursor cursor = db.rawQuery("Select StoreID,VisitTypeStatus from tblStoreVisitMstr", null);
        HashMap<String, String> hmapStoreIdVisitStatus = new HashMap<String, String>();
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int index = 0; index < cursor.getCount(); index++) {
                    hmapStoreIdVisitStatus.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapStoreIdVisitStatus;
    }

    public void updateVisitTypeStatusOfStore(String StoreID, String VisitTypeStatus, String StoreVisitCode) {
        //open();
        try {
            db.execSQL("Update tblStoreVisitMstr Set  VisitTypeStatus=" + VisitTypeStatus + " WHERE StoreID='" + StoreID + "' and StoreVisitCode='" + StoreVisitCode + "'");
        } catch (Exception ex) {

        }
        // close();
    }

    public int fnStoreCountWithVisitTypeStatus() {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT Count(VisitTypeStatus) FROM tblStoreVisitMstr WHERE VisitTypeStatus=1 OR VisitTypeStatus=3", null);
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    chkI = Integer.valueOf(cursorE2.getCount());
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }
        return chkI;
    }

    public int fnStoreCountWithsStatStatus() {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT Count(Sstat) FROM tblStoreList WHERE Sstat=1", null);
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    chkI = Integer.valueOf(cursorE2.getCount());
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }
        return chkI;
    }

    public void UpdateStoreFlagAtDayEndOrChangeRouteWithOnlyVistOrCollection(String sID, int flag2set) {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);

            int affected24 = db.update("tblStoreOrderBillAddressDetails", values, "StoreID=?", new String[]{sID});
            int affected25 = db.update("tblStoreSalesOrderPaymentDetails", values, "StoreId=?", new String[]{sID});
            int affected26 = db.update("tblRateDistribution", values, "StoreId=?", new String[]{sID});
            // int affected27 = db.update("tableImage", values,"StoreID=?", new String[] { sID });

            //tblNewStoreSalesQuotePaymentDetails (StoreId text null,PymtStageId text null,Sstat text null);";
            int affected23 = db.update("tblNewStoreSalesQuotePaymentDetails", values, "StoreId=?", new String[]{sID});

            //tblOutletQuestAnsMstr
            ////// System.out.println("Updating Status for Store ID: " + sID);
            int affected = db.update("tblStoreList", values, "StoreID=?", new String[]{sID});
            int affected61 = db.update("tblStoreCheckInPic", values, "StoreID=?", new String[]{sID});
            int affected121 = db.update("tblNewAddedStoreLocationDetails", values, "StoreID=?", new String[]{sID});
            //int affected2 = db.update("tblTransac", values, "StoreID=?",new String[] { sID });

            int affected4 = db.update("tblNewStoreListEntries", values, "StoreID=?", new String[]{sID});

            //int affected4 = db.update("tblDistributionStoreProductWiseDetails", values, "StoreID=?",new String[] { sID });
            //int affected5 = db.update("tblDistributionStoreProductMstr", values, "StoreID=?",new String[] { sID });

            int affected9 = db.update("tblNewStoreEntries", values, "StoreID=?", new String[]{sID});
            int affected10 = db.update("tblTemp", values, "StoreID=?", new String[]{sID});

            //   int affected3 = db.update("tblTmpInvoiceHeader", values, "StoreID=? ",new String[] { sID });

            //int affected4 = db.update("tblDistributionStoreProductWiseDetails", values, "StoreID=?",new String[] { sID });
            //int affected5 = db.update("tblDistributionStoreProductMstr", values, "StoreID=?",new String[] { sID });
            int affected5 = db.update("tblPDAProductReturnMstr", values,
                    "StoreID=? ", new String[]{sID});

            // int affected7 = db.update("tblTmpInvoiceDetails", values,"StoreID=?  ", new String[] { sID });
            int affected8 = db.update("tblStoreProductAppliedSchemesBenifitsRecords", values, "StoreID=? ", new String[]{sID});


            int affected11 = db.update("tblStoreReturnDetail", values, "StoreID=? ", new String[]{sID});

            //int affected12 = db.update("tblStoreReturnDetail", values,"StoreID=?", new String[] { sID });
            int affected13 = db.update("tblProductMappedWithSchemeSlabApplied", values, "StoreId=? ", new String[]{sID});
            //StoreId text null,ProductID text null,schSlabId text null,schmIdMapped text null,Sstat int null);";
            int affected14 = db.update("tblStoreProductPhotoDetail", values, "StoreID=? ", new String[]{sID});

            int affected21 = db.update("tblOutletQuestAnsMstr", values, "OutletID=?", new String[]{sID});


            int affected17 = db.update("tblSalesQuotePersonMeetMstr", values, "StoreId=?", new String[]{sID});

            //int affected171 = db.update("tblAllCollectionData", values,"StoreID=?", new String[] { sID });

            // int affected19 = db.update("tblDsrRegDetails", values, "StoreID=?",new String[] { sID });

            db.execSQL("UPDATE tblDsrRegDetails SET Sstat=" + flag2set);

            LinkedHashMap<String, String> hmapDistinctSalesQuotePersonMeetMstr = fngetDistinctSalesQuotePersonMeetMstrForSstatUpdate(sID);


            Iterator it11new = hmapDistinctSalesQuotePersonMeetMstr.entrySet().iterator();

            while (it11new.hasNext()) {
                Entry pair = (Entry) it11new.next();
                if (hmapDistinctSalesQuotePersonMeetMstr.containsKey(pair.getKey().toString())) {
                    //crntPID	=pair.getKey().toString();
                    int affected18 = db.update("tblSalesQuoteProductsMstr", values, "SalesQuoteId=?", new String[]{pair.getKey().toString()});
                }

            }


            int chkValue = fnChkStoreIdExistsInReturnMstrDayEndChangeRoute(sID);

            if (chkValue == 1) {
                int productreturnmstrid = fnGetAutoIdStoreOnReturnPAge(sID);

                int chkValueReturnDetails = fnChkAutoIdMstrForReturnDetailsChangeRouteDayEnd(productreturnmstrid);
                if (chkValueReturnDetails == 1) {
                    int affected6 = db.update("tblPDAProductReturnDetails",
                            values, "ReturnIdMstr=? ", new String[]{""
                                    + productreturnmstrid});
                }
            }

            Log.w(TAG, "affected records: " + affected);

            Log.w(TAG, "Record(s) Updated..");

        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public LinkedHashMap<String, String> fnGetStoreListToProcessWithoutAlret() {
        //open();
        int LoncolumnIndex = 0;
        int LoncolumnIndex2 = 1;
        LinkedHashMap<String, String> hmapStoreListToProcessWithoutAlret = new LinkedHashMap<String, String>();
        //Cursor cursor2 = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList WHERE (Sstat = 1  OR StoreNextDay = 1) and Sstat<>4  and Sstat<>5 and Sstat<>6",null);//OR StoreClose = 1
        Cursor cursor2 = db.rawQuery("SELECT tblStoreVisitMstr.StoreID, tblStoreList.StoreName FROM tblStoreVisitMstr inner join tblStoreList On tblStoreVisitMstr.StoreID=tblStoreList.StoreID WHERE tblStoreVisitMstr.Sstat = 1 AND (VisitTypeStatus='1' OR VisitTypeStatus='3')", null);//OR StoreClose = 1
        try {
            String strAreaIdsDetais[] = new String[cursor2.getCount()];
            ////// System.out.println("records count[ProcessStoreReq]: "+cursor2.getCount());
            if (cursor2.moveToFirst()) {
                for (int i = 0; i < cursor2.getCount(); i++) {
                    hmapStoreListToProcessWithoutAlret.put((String) cursor2.getString(LoncolumnIndex), (String) cursor2.getString(LoncolumnIndex2)); //(String) cursor2.getString(LoncolumnIndex)+ "%"+ (String) cursor2.getString(LoncolumnIndex2);
                    ////// System.out.println("VAL1: "+(String) cursor2.getString(LoncolumnIndex) + "  "+"VAL2: "+(String) cursor2.getString(LoncolumnIndex2));
                    cursor2.moveToNext();
                }
            }
            return hmapStoreListToProcessWithoutAlret;
        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
            // close();
        }

    }

    public int fnCounttblDistributorProductLeft() {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT * FROM tblDistributorIDOrderIDLeft", null);
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    chkI = Integer.valueOf(cursorE2.getCount());
                }
            }
        } catch (Exception ex) {

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }
        return chkI;
    }

    public int fnCounttblVanProductLeft() {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT * FROM tblVanIDOrderIDLeft", null);
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    chkI = Integer.valueOf(cursorE2.getCount());
                }
            }
        } catch (Exception ex) {

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }
        return chkI;
    }
    public String fnGetRouteIDWhilePurshase(int CoverageAreaNodeID,int CoverageAreaNodeType) {
        int LoncolumnIndex = 0;


        Cursor cursor3 = null;
        try {

            cursor3 = db.rawQuery("SELECT RouteNodeID FROM tblRoutelist WHERE flgTodayRoute = 0  AND CoverageAreaNodeID='"+CoverageAreaNodeID+"' AND CoverageAreaNodeType='"+CoverageAreaNodeType+"'  Limit 1", null);


            String activeRouteID = "0";
            if (cursor3!=null && cursor3.getCount()>0) {
                cursor3.moveToFirst();
                for (int i = 0; i < cursor3.getCount(); i++) {
                    activeRouteID = cursor3.getString(LoncolumnIndex);
                    cursor3.moveToNext();

                }

            }
            return activeRouteID;
        } finally {
            if (cursor3 != null) {
                cursor3.close();
            }

        }

    }
    public String fnGetRouteIDAgainstStoreID(String StoreID)
    {
        int LoncolumnIndex = 0;
        String activeRouteID = "0";
        Cursor cursor2=null;
        cursor2 = db.rawQuery("SELECT StoreRouteID  FROM tblStoreList WHERE StoreID  ='"+StoreID+"'", null);

        try
        {

            if (cursor2.moveToFirst())
            {

                for (int i = 0; i < cursor2.getCount(); i++)
                {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }
            }
            if(activeRouteID.equals("0"))
            {
                activeRouteID=fnGetRouteIDWhilePurshase(CommonInfo.CoverageAreaNodeID,CommonInfo.CoverageAreaNodeType);
            }
            if(!CommonInfo.ActiveRouteSM.equals("0"))
            {
                activeRouteID= CommonInfo.ActiveRouteSM;
            }

        } finally {
            if(cursor2!=null) {
                cursor2.close();
            }
            return activeRouteID;
        }
    }
    /*public String fnGetRouteIDWhilePurshase(int CoverageAreaNodeID,int CoverageAreaNodeType) {
        int LoncolumnIndex = 0;


        Cursor cursor3 = null;
        try {

            cursor3 = db.rawQuery("SELECT RouteNodeID FROM tblRoutelist WHERE flgTodayRoute = 0  AND CoverageAreaNodeID='"+CoverageAreaNodeID+"' AND CoverageAreaNodeType='"+CoverageAreaNodeType+"'  Limit 1", null);


            String activeRouteID = "0";
            if (cursor3!=null && cursor3.getCount()>0) {
                cursor3.moveToFirst();
                for (int i = 0; i < cursor3.getCount(); i++) {
                    activeRouteID = cursor3.getString(LoncolumnIndex);
                    cursor3.moveToNext();

                }

            }
            return activeRouteID;
        } finally {
            if (cursor3 != null) {
                cursor3.close();
            }

        }

    }*/

    public LinkedHashMap<String, String> fetch_Category_ForWarehouseCheckIn() {
        //open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT DISTINCT CategoryID,CategoryDescr FROM tblCategoryMaster  Order by CatOrdr", null);
        //  Cursor cursorStock = db.rawQuery("SELECT DISTINCT tblVanProductStock.CategoryID,tblCategoryMaster.CategoryDescr FROM tblCategoryMaster inner join tblVanProductStock ON tblVanProductStock.CategoryID=tblCategoryMaster.CategoryID Order by tblCategoryMaster.CatOrdr",null);
        //"Select PrdctId,SKUName,OriginalStock,OpeningStock,AddedStock,NetStockQty,CategoryID from tblVanProductStock",null);
        // System.out.println("Count to ="+cursorCat.getCount()+" : "+cursorStock.getCount());
        // Cursor cursor = db.rawQuery("SELECT DISTINCT tblVanProductStock.CategoryID,CategoryDescr FROM tblCategoryMaster inner join tblVanProductStock ON tblVanProductStock.CategoryID=tblCategoryMaster.CategoryID Order by CatOrdr",null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                        hmapCatgry.put(cursor.getString(1).toString(), cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Category", "0");
            }
            return hmapCatgry;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }
    }

    /*public String fnGetFinalAllotedInvoiceIds(String StoreID)
     {
         //open();
         String VanFinalAllotedInvoiceId="";
         Cursor cursor=db.rawQuery("Select INVPrefix,VanIntialInvoiceIds from tblInvoiceCaption",null);

         if(cursor.getCount()>0)
         {
             if(cursor.moveToFirst())
             {
                 VanFinalAllotedInvoiceId=(cursor.getString(0))+(Integer.parseInt(cursor.getString(1)));
             }
         }
         if(cursor!=null) {
             cursor.close();
         }
         close();
         return VanFinalAllotedInvoiceId;
     }*/
   /*public void updateFinalAllotedInvoiceIdstblInvoiceCaption()
    {
        int FinalAllotedInvoiceIds=fnGettblInvoiceAllotmentId();
        //open();
///tblInvoiceCaption(INVPrefix text null,VanIntialInvoiceIds int null,FinalAllotedInvoiceIds int null);";
        db.execSQL("Update tblInvoiceCaption Set  VanIntialInvoiceIds="+(FinalAllotedInvoiceIds+1));
      //  db.execSQL("Update tblInvoiceCaption Set  VanIntialInvoiceIds="+(FinalAllotedInvoiceIds+1));

        close();
    }*/
    public int fnGettblInvoiceAllotmentId() {

        int VanInvoiceIds = 0;
        Cursor cursor = null;
        try {
            cursor = db.rawQuery("Select VanIntialInvoiceIds from tblInvoiceCaption", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    VanInvoiceIds = Integer.parseInt(cursor.getString(0));
                }
            }
        } catch (Exception ex) {

        } finally {
            if (cursor != null) {
                cursor.close();
            }

        }

        return VanInvoiceIds;
    }

    /* public String fnGetFinalAllotedInvoiceIdsAgainstInvoiceTable(String StoreID)
      {
          //open();
          String VanFinalAllotedInvoiceId="NA";
          Cursor cursor=db.rawQuery("Select INVPrefix,VanIntialInvoiceIds from tblInvoiceCaption",null);

          if(cursor.getCount()>0)
          {
              if(cursor.moveToFirst())
              {
                  VanFinalAllotedInvoiceId=(cursor.getString(0))+(Integer.parseInt(cursor.getString(1)));
              }
          }
          if(cursor!=null) {
              cursor.close();
          }
          close();
          return VanFinalAllotedInvoiceId;
      }*/
    public int fnGetStoreCurrentOutsStat(String StoreID) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT Sstat FROM  tblStoreList where StoreID='" + StoreID + "'", null);
        int StoreCurrentOutsStat = 0;

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {


                    StoreCurrentOutsStat = (Integer.parseInt(cursorE2.getString(0).toString()));


                }
            }
            return StoreCurrentOutsStat;
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }

    }

    public String fnGetStoreVisitCode(String StoreID) {
        //open();
        String StoreVisitCode = "NA";
        Cursor cursor = db.rawQuery("Select StoreVisitCode from tblStoreVisitMstr Where StoreID='" + StoreID + "' AND Sstat=1", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                StoreVisitCode = cursor.getString(0);
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        //close();
        return StoreVisitCode;
    }


    // function given by Abhianv Sir Start
    public void fnInsertOrUpdate_tblStoreVisitMstr(String StoreVisitCode,String StoreID,int Sstat,String ForDate,String ActualLatitude,String ActualLongitude,String VisitTimeOutSideStore,String VisitTimeInSideStore,String VisitTimeCheckStore,String VisitEndTS,String LocProvider,String Accuracy,String BateryLeftStatus,int StoreClose,int StoreNextDay,int ISNewStore,int IsNewStoreDataCompleteSaved,int flgFromWhereSubmitStatus,int flgSubmitFromQuotation,int flgLocationServicesOnOff,int flgGPSOnOff,int flgNetworkOnOff,int flgFusedOnOff,int flgInternetOnOffWhileLocationTracking,int flgStoreOrder,int flgRetailerCreditBalnce,int VisitTypeStatus,int flgVisitCollectionMarkedStatus,String MapAddress,String MapCity,String MapPinCode,String MapState,String routeId,String routetype)
    {

        //open();
        try {
            Cursor cursor = db.rawQuery("SELECT StoreVisitCode FROM tblStoreVisitMstr where StoreVisitCode='"+StoreVisitCode +"' AND StoreID='"+StoreID+"' AND Sstat=1" , null);
            ContentValues initialValues = new ContentValues();
            initialValues.put("IMEINumber", CommonInfo.imei.toString());
            initialValues.put("Sstat", Sstat);

            initialValues.put("VisitEndTS", VisitEndTS);
            initialValues.put("flgFromWhereSubmitStatus", flgFromWhereSubmitStatus);
            // initialValues.put("flgOrderType", flgOrderType);
            //flgOrderType
            //flgFromWhereSubmitStatus
            if(cursor.getCount()>0)
            {
                int affected = db.update(DBHelper.DATABASE_TABLE_STOREVISIT, initialValues, "StoreID=? AND StoreVisitCode=?",new String[] {StoreID,StoreVisitCode});
            }
            else
            {
                initialValues.put("BateryLeftStatus", BateryLeftStatus);
                initialValues.put("IsNewStoreDataCompleteSaved", 0);
                initialValues.put("StoreVisitCode", StoreVisitCode);
                initialValues.put("StoreID", StoreID);
                initialValues.put("ForDate", ForDate);
                initialValues.put("ActualLatitude", ActualLatitude);
                initialValues.put("ActualLongitude", ActualLongitude);
                initialValues.put("VisitTimeOutSideStore", VisitTimeOutSideStore);
                initialValues.put("VisitTimeInSideStore", VisitTimeInSideStore);
                initialValues.put("VisitTimeCheckStore", VisitTimeCheckStore);//01-JAN-1900
                initialValues.put("LocProvider", LocProvider);
                initialValues.put("Accuracy", Accuracy);
                initialValues.put("StoreClose", StoreClose);
                initialValues.put("StoreNextDay", StoreNextDay);
                initialValues.put("ISNewStore", ISNewStore);
                // initialValues.put("IsNewStoreDataCompleteSaved", IsNewStoreDataCompleteSaved);
                initialValues.put("flgSubmitFromQuotation", flgSubmitFromQuotation);
                initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
                initialValues.put("flgGPSOnOff", flgGPSOnOff);
                initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
                initialValues.put("flgFusedOnOff", flgFusedOnOff);
                initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
                initialValues.put("flgStoreOrder", flgStoreOrder);
                initialValues.put("flgRetailerCreditBalnce", flgRetailerCreditBalnce);
                initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
                initialValues.put("VisitTypeStatus", VisitTypeStatus);
                initialValues.put("flgVisitCollectionMarkedStatus", flgVisitCollectionMarkedStatus);
                initialValues.put("SelfCreditNote", 0.0);
                initialValues.put("MapAddress", MapAddress);
                initialValues.put("MapCity", MapCity);
                initialValues.put("MapState", MapState);
                initialValues.put("MapPinCode", MapPinCode);
                initialValues.put("RouteNodeID", routeId);
                initialValues.put("RouteNodeType", routetype);


                db.insert(DBHelper.DATABASE_TABLE_STOREVISIT, null, initialValues);
            }
        } finally {
            // close();
        }
    }
    /*public void fnInsertOrUpdate_tblStoreVisitMstr(String StoreVisitCode, String StoreID, int Sstat, String ForDate, String ActualLatitude, String ActualLongitude, String VisitTimeOutSideStore, String VisitTimeInSideStore, String VisitTimeCheckStore, String VisitEndTS, String LocProvider, String Accuracy, String BateryLeftStatus, int StoreClose, int StoreNextDay, int ISNewStore, int IsNewStoreDataCompleteSaved, int flgFromWhereSubmitStatus, int flgSubmitFromQuotation, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgStoreOrder, int flgRetailerCreditBalnce, int VisitTypeStatus, int flgVisitCollectionMarkedStatus) {

        //open();
        try {
            Cursor cursor = db.rawQuery("SELECT StoreVisitCode FROM tblStoreVisitMstr where StoreVisitCode='" + StoreVisitCode + "' AND StoreID='" + StoreID + "' AND Sstat=1", null);
            ContentValues initialValues = new ContentValues();
            initialValues.put("IMEINumber", CommonInfo.imei.toString());
            initialValues.put("Sstat", Sstat);

            initialValues.put("VisitEndTS", VisitEndTS);
            initialValues.put("flgFromWhereSubmitStatus", flgFromWhereSubmitStatus);
            // initialValues.put("flgOrderType", flgOrderType);
            //flgOrderType
            //flgFromWhereSubmitStatus
            if (cursor.getCount() > 0) {
                int affected = db.update(DBHelper.DATABASE_TABLE_STOREVISIT, initialValues, "StoreID=? AND StoreVisitCode=?", new String[]{StoreID, StoreVisitCode});
            } else {
                initialValues.put("BateryLeftStatus", BateryLeftStatus);
                initialValues.put("IsNewStoreDataCompleteSaved", 0);
                initialValues.put("StoreVisitCode", StoreVisitCode);
                initialValues.put("StoreID", StoreID);
                initialValues.put("ForDate", ForDate);
                initialValues.put("ActualLatitude", ActualLatitude);
                initialValues.put("ActualLongitude", ActualLongitude);
                initialValues.put("VisitTimeOutSideStore", VisitTimeOutSideStore);
                initialValues.put("VisitTimeInSideStore", VisitTimeInSideStore);
                initialValues.put("VisitTimeCheckStore", VisitTimeCheckStore);//01-JAN-1900
                initialValues.put("LocProvider", LocProvider);
                initialValues.put("Accuracy", Accuracy);
                initialValues.put("StoreClose", StoreClose);
                initialValues.put("StoreNextDay", StoreNextDay);
                initialValues.put("ISNewStore", ISNewStore);
                // initialValues.put("IsNewStoreDataCompleteSaved", IsNewStoreDataCompleteSaved);
                initialValues.put("flgSubmitFromQuotation", flgSubmitFromQuotation);
                initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
                initialValues.put("flgGPSOnOff", flgGPSOnOff);
                initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
                initialValues.put("flgFusedOnOff", flgFusedOnOff);
                initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
                initialValues.put("flgStoreOrder", flgStoreOrder);
                initialValues.put("flgRetailerCreditBalnce", flgRetailerCreditBalnce);
                initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
                initialValues.put("VisitTypeStatus", VisitTypeStatus);
                initialValues.put("flgVisitCollectionMarkedStatus", flgVisitCollectionMarkedStatus);
                initialValues.put("SelfCreditNote", 0.0);
                initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
                initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


                db.insert(DBHelper.DATABASE_TABLE_STOREVISIT, null, initialValues);
            }
        } finally {
            // close();
        }
    }*/

    public LinkedHashMap<String, String> fngetStoreBasicDetails(String StoreID) {
        LinkedHashMap<String, String> hmapStoreBasicDetails = new LinkedHashMap<String, String>();//=null;
        Cursor cur = null;
        //open();
        try {
            cur = db.rawQuery("Select ifnull(StoreName,'NA'),ifnull(OwnerName,'NA'),ifnull(StoreContactNo,'NA'),ifnull(StoreAddress,'NA'),ifnull(StoreCatType,'NA'),ifnull(SalesPersonName,'NA'),ifnull(SalesPersonContact,'NA') from tblStoreList where StoreID = '" + StoreID + "'", null);//
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    // System.out.println("System Value :"+cur.getString(0)+"="+ cur.getString(1)+"~"+cur.getString(2));
                    hmapStoreBasicDetails.put("StoreName", cur.getString(0));
                    hmapStoreBasicDetails.put("OwnerName", cur.getString(1));
                    hmapStoreBasicDetails.put("StoreContactNo", cur.getString(2));
                    hmapStoreBasicDetails.put("StoreAddress", cur.getString(3));
                    hmapStoreBasicDetails.put("StoreCatType", cur.getString(4));
                    hmapStoreBasicDetails.put("SalesPersonName", cur.getString(5));
                    hmapStoreBasicDetails.put("SalesPersonContact", cur.getString(6));

                }

            }

        } catch (Exception ex) {
            hmapStoreBasicDetails.put("StoreName", "NA");
            hmapStoreBasicDetails.put("OwnerName", "NA");
            hmapStoreBasicDetails.put("StoreContactNo", "NA");
            hmapStoreBasicDetails.put("StoreAddress", "NA");
            hmapStoreBasicDetails.put("StoreCatType", "NA");
        } finally {
            if (cur != null) {
                cur.close();
            }
            //close();
        }
        return hmapStoreBasicDetails;
    }

    public String fnGetInvoiceCodePDA(String StoreID, String StoreVisitCode) {


        int flginvoiceAnyInPErmanentTable = fnCheckForNewInvoiceOrPreviousValueFromPermanentTable(StoreID, StoreVisitCode);
        Cursor cursorE2 = null;
        String InvoiceCodePDA = "0";
        if (CommonInfo.flgDrctslsIndrctSls == 2) {
            if (flginvoiceAnyInPErmanentTable == 0) {
                cursorE2 = db.rawQuery("SELECT TmpInvoiceCodePDA FROM tblTmpInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "' AND Sstat=1", null);
            } else {
                cursorE2 = db.rawQuery("SELECT TmpInvoiceCodePDA FROM tblInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);
            }
        } else {
            cursorE2 = db.rawQuery("SELECT TmpInvoiceCodePDA FROM tblTmpInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "' AND Sstat=1", null);
        }

        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    InvoiceCodePDA = cursorE2.getString(0).toString();
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        //open();
      /*  Cursor cursorE2 = db.rawQuery("SELECT TmpInvoiceCodePDA FROM tblTmpInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='"+StoreVisitCode+"' AND Sstat=1", null);
        String InvoiceCodePDA = "0";
        try {
            if(cursorE2.getCount()>0)
            {
                if (cursorE2.moveToFirst()) {
                    InvoiceCodePDA = cursorE2.getString(0).toString();
                }
            }
        } finally {
            if(cursorE2!=null) {
                cursorE2.close();
            }
           // close();
        }
        return InvoiceCodePDA;*/
        return InvoiceCodePDA;
    }

    public long saveStoreTempInvoice(String StoreVisitCode, String TmpInvoiceCodePDA, String storeID, String pickerDate, Double TBtaxDis, Double TAmt, Double Dis, Double INval,
                                     int Ftotal, Double InvAfterDis, Double AddDis, int NoOfCouponValue, Double TotalCoupunAmount, String pickerDateWithTime, int flgTransType,
                                     int flgWholeSellApplicable, int flgRuleTaxVal, int Outstat, int flgTransferStatus,String routeID,String routetype)// , Double CreditAmt, Double

    {

        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreVisitCode", StoreVisitCode);
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        initialValues.put("StoreID", storeID);
        initialValues.put("InvoiceDate", pickerDate);
        initialValues.put("TotalBeforeTaxDis", TBtaxDis);
        initialValues.put("TaxAmt", TAmt);
        initialValues.put("TotalDis", Dis);
        initialValues.put("InvoiceVal", INval);
        initialValues.put("FreeTotal", Ftotal);
        initialValues.put("InvAfterDis", InvAfterDis);
        initialValues.put("AddDis", AddDis);
        initialValues.put("NoCoupon", NoOfCouponValue);
        initialValues.put("TotalCoupunAmount", TotalCoupunAmount);
        initialValues.put("TransDate", pickerDateWithTime);
        initialValues.put("FlgInvoiceType", flgTransType);
        initialValues.put("flgWholeSellApplicable", flgWholeSellApplicable);
        initialValues.put("flgTransferStatus", flgTransferStatus);
        initialValues.put("RouteNodeID",routeID);
        initialValues.put("RouteNodetype",routetype);
        //  initialValues.put("flgRuleTaxVal", flgRuleTaxVal);
        //flgTransferStatus
        initialValues.put("Sstat", Outstat);

        return db.insert(DBHelper.DATABASE_TABLE_MAIN32, null, initialValues);
    }

   /* public long fnsaveStoreFinalInvoiceSummaryEntry(String StoreVisitCode,String TmpInvoiceCodePDA,String storeID,String pickerDate,Double TBtaxDis,Double TAmt,Double Dis,Double INval,
                                                    int Ftotal,Double InvAfterDis,Double AddDis,int  NoOfCouponValue,Double TotalCoupunAmount,String pickerDateWithTime,int flgTransType,
                                                    int flgWholeSellApplicable,int flgRuleTaxVal,int Outstat,String FinalInvoiceNumberGenerated)// , Double CreditAmt, Double

    {
        int CycleID = fetchtblVanCycleIdForInvoiceHeader();

        ContentValues initialValues = new ContentValues();

        initialValues.put("StoreVisitCode", StoreVisitCode);
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        initialValues.put("StoreID", storeID);
        initialValues.put("InvoiceDate", pickerDate);
        initialValues.put("TotalBeforeTaxDis", TBtaxDis);
        initialValues.put("TaxAmt", TAmt);
        initialValues.put("TotalDis", Dis);
        initialValues.put("InvoiceVal", INval);
        initialValues.put("FreeTotal", Ftotal);
        initialValues.put("InvAfterDis", InvAfterDis);
        initialValues.put("AddDis", AddDis);
        initialValues.put("NoCoupon", NoOfCouponValue);
        initialValues.put("TotalCoupunAmount", TotalCoupunAmount);
        initialValues.put("TransDate", pickerDateWithTime);
        initialValues.put("FlgInvoiceType", flgTransType);
        initialValues.put("flgWholeSellApplicable", flgWholeSellApplicable);
        //initialValues.put("flgRuleTaxVal", flgRuleTaxVal);
        initialValues.put("InvoiceNumber", FinalInvoiceNumberGenerated);

        initialValues.put("flgProcessedInvoice", 0);
        initialValues.put("CycleID", CycleID);
        initialValues.put("Sstat", Outstat);
        return db.insert(DBHelper.DATABASE_TABLE_INVOICE_HEADER, null, initialValues);
    }*/
   public long fnsaveStoreFinalInvoiceSummaryEntry(String StoreVisitCode,String TmpInvoiceCodePDA,String storeID,String pickerDate,Double TBtaxDis,Double TAmt,Double Dis,Double INval,
                                                   int Ftotal,Double InvAfterDis,Double AddDis,int  NoOfCouponValue,Double TotalCoupunAmount,String pickerDateWithTime,int flgTransType,
                                                   int flgWholeSellApplicable,int flgRuleTaxVal,int Outstat,String FinalInvoiceNumberGenerated,String routeID,String routetype)// , Double CreditAmt, Double

   {
       int CycleID=fetchtblVanCycleIdForInvoiceHeader();

       ContentValues initialValues = new ContentValues();

       initialValues.put("StoreVisitCode", StoreVisitCode);
       initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
       initialValues.put("StoreID", storeID);
       initialValues.put("InvoiceDate", pickerDate);
       initialValues.put("TotalBeforeTaxDis", TBtaxDis);
       initialValues.put("TaxAmt", TAmt);
       initialValues.put("TotalDis", Dis);
       initialValues.put("InvoiceVal", INval);
       initialValues.put("FreeTotal", Ftotal);
       initialValues.put("InvAfterDis", InvAfterDis);
       initialValues.put("AddDis", AddDis);
       initialValues.put("NoCoupon", NoOfCouponValue);
       initialValues.put("TotalCoupunAmount", TotalCoupunAmount);
       initialValues.put("TransDate", pickerDateWithTime);
       initialValues.put("FlgInvoiceType", flgTransType);
       initialValues.put("flgWholeSellApplicable", flgWholeSellApplicable);
       //initialValues.put("flgRuleTaxVal", flgRuleTaxVal);
       initialValues.put("InvoiceNumber", FinalInvoiceNumberGenerated);

       initialValues.put("flgProcessedInvoice", 0);
       initialValues.put("CycleID", CycleID);
       initialValues.put("Sstat", Outstat);
       initialValues.put("RouteNodeID ", routeID);
       initialValues.put("RouteNodetype ", routetype);
       return db.insert(DBHelper.DATABASE_TABLE_INVOICE_HEADER, null, initialValues);


   }


      public long saveStoreFinalInvoiceDetails(String TmpInvoiceCodePDA,String storeID,String PCateId,String ProductID,Double PRate,Double TaxRate,int flgRuleTaxVal,int OrderQTY,int SelectedUOMId,Double LineValBfrTxAftrDscnt,Double LineValAftrTxAftrDscnt,                                                 int OrderFreeQty,Double OrderDisVal,int SampleQTY,String PName,Double TaxValue,String strGlobalOrderID,int flgIsQuoteRateApplied,int PriceApplyDiscountLevelType,String distID,int Outstat,String FinalInvoiceNumberGenerated)
      {
          ContentValues initialValues = new ContentValues();
          initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
          initialValues.put("StoreID", storeID);
          initialValues.put("CatID", PCateId);
          initialValues.put("ProdID", ProductID);
          initialValues.put("ProductPrice", PRate);
          initialValues.put("TaxRate", TaxRate);
          initialValues.put("flgRuleTaxVal", flgRuleTaxVal);
          initialValues.put("OrderQty", OrderQTY);
          initialValues.put("UOMId", SelectedUOMId);

          initialValues.put("LineValBfrTxAftrDscnt", LineValBfrTxAftrDscnt);

          initialValues.put("LineValAftrTxAftrDscnt", LineValAftrTxAftrDscnt);
          initialValues.put("FreeQty", OrderFreeQty);
          initialValues.put("DisVal", OrderDisVal);
          initialValues.put("SampleQuantity", SampleQTY);
          initialValues.put("ProductShortName", PName);

          initialValues.put("TaxValue", TaxValue);
          initialValues.put("OrderIDPDA", strGlobalOrderID);
          initialValues.put("flgIsQuoteRateApplied", flgIsQuoteRateApplied);
          initialValues.put("ServingDBRId", distID);
          initialValues.put("flgWholeSellApplicable", PriceApplyDiscountLevelType);
          //initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
          initialValues.put("InvoiceNumber", FinalInvoiceNumberGenerated);
          initialValues.put("Sstat", Outstat);

          return db.insert(DBHelper.DATABASE_TABLE_INVOICE_DETAILS, null, initialValues);
      }
    public String fnGetDateTimeString() {
        long syncTIMESTAMP = System.currentTimeMillis();
        Date dateobj = new Date(syncTIMESTAMP);
        SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy HH:mm:ss", Locale.ENGLISH);
        String StampEndsTime = TimeUtils.getNetworkDateTime(mContext, TimeUtils.DATE_TIME_FORMAT);

        return StampEndsTime;
    }

    public void UpdateStoreActualLatLongi(String StoreID,
                                          String ActualLatitude, String ActualLongitude, String Accuracy,
                                          String LocProvider, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgRestart, int flgStoreOrder,String StoreVisitCode,String VisitTimeInSideStore)
    {
        String GetDateTimeString=fnGetDateTimeString();
        //open();
        final ContentValues values = new ContentValues();
        values.put("ActualLatitude", ActualLatitude);
        values.put("ActualLongitude", ActualLongitude);
        values.put("Accuracy", Accuracy);
        values.put("LocProvider", LocProvider);
        values.put("VisitTimeInSideStore", VisitTimeInSideStore);
        values.put("VisitEndTS", GetDateTimeString);
        values.put("VisitTimeCheckStore", "01-Jan-1900");
        values.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
        values.put("flgGPSOnOff", flgGPSOnOff);
        values.put("flgNetworkOnOff", flgNetworkOnOff);
        values.put("flgFusedOnOff", flgFusedOnOff);
        values.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
        // values.put("flgRestart", flgRestart);


        int affected = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?",new String[] { StoreID,StoreVisitCode });
        // close();
        Log.w(TAG, "affected records: " + affected);

        Log.w(TAG, "UpdateStoreActualLatLongi added..");
    }
    // function given by Abhianv Sir End



    public long fnsaveStoreTempOrderEntryDetails(String TmpInvoiceCodePDA,String storeID,String PCateId,String ProductID,Double PRate,Double TaxRate,int flgRuleTaxVal,int OrderQTY,int SelectedUOMId,Double LineValBfrTxAftrDscnt,Double LineValAftrTxAftrDscnt,
                                                 int OrderFreeQty,Double OrderDisVal,int SampleQTY,String PName,Double TaxValue,String strGlobalOrderID,int flgIsQuoteRateApplied,int PriceApplyDiscountLevelType,String distID,int Outstat,int ProductExtraOrder)
    {
        ContentValues initialValues = new ContentValues();
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        initialValues.put("StoreID", storeID);
        initialValues.put("CatID", PCateId);
        initialValues.put("ProdID", ProductID);
        initialValues.put("ProductPrice", PRate);
        initialValues.put("TaxRate", TaxRate);
        initialValues.put("flgRuleTaxVal", flgRuleTaxVal);
        initialValues.put("OrderQty", OrderQTY);
        initialValues.put("UOMId", SelectedUOMId);

        initialValues.put("LineValBfrTxAftrDscnt", LineValBfrTxAftrDscnt);

        initialValues.put("LineValAftrTxAftrDscnt", LineValAftrTxAftrDscnt);
        initialValues.put("FreeQty", OrderFreeQty);
        initialValues.put("DisVal", OrderDisVal);
        initialValues.put("SampleQuantity", SampleQTY);
        initialValues.put("ProductShortName", PName);

        initialValues.put("TaxValue", TaxValue);
        initialValues.put("OrderIDPDA", strGlobalOrderID);
        initialValues.put("flgIsQuoteRateApplied", flgIsQuoteRateApplied);
        initialValues.put("ServingDBRId", distID);
        initialValues.put("flgWholeSellApplicable", PriceApplyDiscountLevelType);
        initialValues.put("TmpInvoiceCodePDA", TmpInvoiceCodePDA);
        initialValues.put("ProductExtraOrder", ProductExtraOrder);
        initialValues.put("Sstat", Outstat);

        return db.insert(DBHelper.DATABASE_TABLE_MAIN210, null, initialValues);
    }

    public LinkedHashMap<String, Integer> fnGetFinalInvoiceQtyProductWise(int flgDrctslsIndrctSls) {
        LinkedHashMap<String, Integer> hmapFinalInvoiceQtyProductWise = new LinkedHashMap<String, Integer>();
        //open();
        Cursor cursor = null;// db.rawQuery("SELECT DISTINCT S.PrdctId,S.StockQntty-ifnull(D.OrderQty,0) AS StockAvailable  from tblVanProductStock S left outer join (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.InvoiceNumber=I.InvoiceNumber  WHERE I.flgProcessedInvoice=0 GROUP BY ID.ProdID) D ON D.ProdID=S.PrdctId", null);

        if(CommonInfo.hmapAppMasterFlags.containsKey("flgVanStockCalculate")) {
            if (CommonInfo.hmapAppMasterFlags.get("flgVanStockCalculate") == 1) {
                cursor = db.rawQuery("SELECT DISTINCT S.PrdctId,S.StockQntty-ifnull(D.OrderQty,0) AS StockAvailable  from tblVanProductStock S left outer join (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.InvoiceNumber=I.InvoiceNumber  WHERE I.flgProcessedInvoice=0 GROUP BY ID.ProdID) D ON D.ProdID=S.PrdctId", null);
            } else {
                cursor = db.rawQuery("SELECT DISTINCT PrdctId, StockQntty  from tblVanProductStock", null);
            }
        }
        else
        {
            cursor = db.rawQuery("SELECT DISTINCT PrdctId, StockQntty  from tblVanProductStock", null);
        }


       /* else
        {
            cursor= db.rawQuery("SELECT DISTINCT S.PrdctId,S.StockQntty-ifnull(D.OrderQty,0) AS StockAvailable  from tblVanProductStock S left outer join (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.TmpInvoiceCodePDA=I.TmpInvoiceCodePDA  WHERE I.flgProcessedInvoice=0 GROUP BY ID.ProdID) D ON D.ProdID=S.PrdctId", null);
        }*/
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapFinalInvoiceQtyProductWise.put((String) cursor.getString(0).toString(), Integer.parseInt(cursor.getString(1)));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }

        return hmapFinalInvoiceQtyProductWise;
    }

    public void UpdateStoreVisitWiseTables(String sID, int flag2set, String StoreVisitCode, String TmpInvoiceCodePDA,String JointVisitId) {

        try {
//open();
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);


            //int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { sID });

                int affected0 = db.update("tblOutletQuestAnsMstr", values, "OutletID=?", new String[]{sID});

            int affected1 = db.update("tblAllCollectionData", values, "StoreID=? AND StoreVisitCode=? AND TmpInvoiceCodePDA=?", new String[]{sID, StoreVisitCode, TmpInvoiceCodePDA});
            int affected2 = db.update("tblInvoiceHeader", values, "StoreID=? AND StoreVisitCode=? AND TmpInvoiceCodePDA=?", new String[]{sID, StoreVisitCode, TmpInvoiceCodePDA});
            int affected3 = db.update("tblInvoiceDetails", values, "StoreID=? AND TmpInvoiceCodePDA=?", new String[]{sID, TmpInvoiceCodePDA});
            int affected4 = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?", new String[]{sID, StoreVisitCode});
            int affected71 = db.update("tblStoreCloseLocationDetails", values, "StoreID=? AND StoreVisitCode=?", new String[]{sID, StoreVisitCode});
            int affected10 = db.update(DBHelper.TABLE_JOINTVISITDETAILS, values, DBHelper.JOINTVISITID + " =? ", new String[]{JointVisitId});// AND StoreVisitCode=?,StoreVisitCode

            int affected72 = db.update("tblStoreClosedPhotoDetail", values, "StoreID=? AND StoreVisitCode=?", new String[]{sID, StoreVisitCode});

            int affected73 = db.update("tblStoreCloseReasonSaving", values, "StoreID=? AND StoreVisitCode=?", new String[]{sID, StoreVisitCode});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
//close();
    }

    public void UpdateStoreVisitMStrTable(String sID, int flag2set, String StoreVisitCode) {
        //open();
        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);

            int affected4 = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?", new String[]{sID, StoreVisitCode});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            // close();
        }

    }

    public String fetchtblVanCycStartTime() {
        //open();
        String CycStartTime = "";
        try {
            //tblCycleID(CycleID int null,Sstat int null,CycStartTime text null,CycleTime text null);";
            Cursor cur = db.rawQuery("Select CycStartTime from tblCycleID", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        CycStartTime = cur.getString(0);
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            // close();
            return CycStartTime;
        }
    }

    public String fetchtblStatusCycleTime() {
        //open();
        String CycStartTime = "0";
        try {
            //tblStockUploadedStatus(flgStockTrans int null,VanLoadUnLoadCycID int null,CycleTime text null,StatusID int null);";
            Cursor cur = db.rawQuery("Select CycleTime from tblStockUploadedStatus", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        CycStartTime = cur.getString(0);
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            //  close();
            return CycStartTime;
        }
    }

    public String fnGetInvoiceCodePDAWhileSync(String StoreID, String StoreVisitCode) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT TmpInvoiceCodePDA FROM tblInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "' AND Sstat=1", null);
        String InvoiceCodePDA = "0";
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    InvoiceCodePDA = cursorE2.getString(0).toString();
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }
        return InvoiceCodePDA;
    }



    public void UpdateStoreClose(String sID, int flag2set) {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);


            int affected = db.update("tblStoreList", values, "StoreID=?", new String[]{sID});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void fnInsert_tblNewAddedStoreLocationDetails(String StoreID, int Sstat, String ActualLatitude, String ActualLongitude, String VisitEndTS, String LocProvider, String Accuracy, String BateryLeftStatus, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff, int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking) {


        try {

            //// "create table tblNewAddedStoreLocationDetails(StoreID text not null, VisitEndTS text null, LocProvider text null,
            /// Accuracy text null, BateryLeftStatus text null,flgLocationServicesOnOff int null," +
            //      "flgGPSOnOff int null,flgNetworkOnOff int null,flgFusedOnOff int null,flgInternetOnOffWhileLocationTracking int null, Sstat integer not null);";

            ContentValues initialValues = new ContentValues();

            initialValues.put("StoreID", StoreID);
            initialValues.put("VisitEndTS", VisitEndTS);
            initialValues.put("LocProvider", LocProvider);
            initialValues.put("Accuracy", Accuracy);
            initialValues.put("BateryLeftStatus", BateryLeftStatus);

            initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
            initialValues.put("flgGPSOnOff", flgGPSOnOff);
            initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
            initialValues.put("flgFusedOnOff", flgFusedOnOff);
            initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);

            initialValues.put("Sstat", 3);
            initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
            initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

            db.insert(DBHelper.DATABASE_TABLE_NewAddedStoreLocationDetails, null, initialValues);


        } finally {

        }

    }

    public void inserttblDayCheckIn(int confirmFlg) {

        //open();
        long syncTIMESTAMP = System.currentTimeMillis();
        Date dateobj = new Date(syncTIMESTAMP);
        SimpleDateFormat sdfPDaDate = new SimpleDateFormat("dd-MMM-yyyy", Locale.ENGLISH);
        String DateOfDayCheckIn = TimeUtils.getNetworkDateTime(mContext, TimeUtils.DATE_FORMAT);
        ContentValues values = new ContentValues();
        values.put("DateOfDayCheckIn", DateOfDayCheckIn);
        values.put("flgDayDayCheckIn", confirmFlg);
        db.insert(DBHelper.DATABASE_TABLE_DayCheckIn, null, values);

        // close();

    }

    public int fnCkechDayStart() {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT * FROM tblDayCheckIn", null);
        int flgCkechDayStart = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    flgCkechDayStart = 1;
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //close();
        }
        return flgCkechDayStart;
    }

    // function by Sunil

    public int confirmedStock() {
        int statusId = 0;
        //tblStockUploadedStatus(flgStockTrans int null,VanLoadUnLoadCycID int null,CycleTime text null,StatusID int null);";
        //open();
        try {
            Cursor cur = db.rawQuery("Select StatusID from tblStockUploadedStatus", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    statusId = cur.getInt(0);
                }

            }
        } catch (Exception excptn) {
            System.out.println("Error = " + excptn.toString());
        } finally {
            // close();
            return statusId;
        }

    }

    public int CheckStoreListPresentOrNot() {
        Cursor cursorE2 = null;
        int chkI = 0;

        try {
            //open();
            cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblStoreList", null);

            if (cursorE2.moveToFirst()) {
                if (Integer.parseInt(cursorE2.getString(0)) > 0) {
                    chkI = 1;
                } else {
                    chkI = 0;
                }
            }

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            // close();
        }
        return chkI;
    }

    public int fnCheckForPendingImages() {
        //open();
        Cursor cursor = null;
        int check = 0;
        try {

            cursor = db.rawQuery("SELECT StoreID FROM tableImage WHERE  Sstat =5", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = 1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {

        } finally {
            cursor.close();
            //close();
        }
        return check;
    }

    public ArrayList<String> getImageDetails(int sStat) {
        //open();
        ArrayList<String> listImageDetails = new ArrayList<String>();
        try {
            Cursor cursor = db.rawQuery("Select StoreID,imagePath,imageName from tableImage where Sstat='" + sStat + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        listImageDetails.add(cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2));
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //  close();
            return listImageDetails;
        }
    }

    public ArrayList<String> getStoreCheckInImages(int sStat) {
        //open();
        ArrayList<String> listImageDetails = new ArrayList<String>();
        try {
            Cursor cursor = db.rawQuery("Select StoreID,picClkdPath,imageName from tblStoreCheckInPic where Sstat='" + sStat + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        listImageDetails.add(cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2));
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //  close();
            return listImageDetails;
        }
    }

    public ArrayList<String> getStoreClosedImages(int sStat) {
        //open();
        ArrayList<String> listImageDetails = new ArrayList<String>();
        try {
            Cursor cursor = db.rawQuery("Select StoreID,PDAPhotoPath,PhotoName from tblStoreClosedPhotoDetail where Sstat='" + sStat + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        listImageDetails.add(cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2));
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //  close();
            return listImageDetails;
        }
    }

    public void updateSSttImage(String imageName, int sStat) {
        //open();
        Cursor cursorImage = db.rawQuery("Select StoreID from tableImage where imageName='" + imageName + "'", null);
        if (cursorImage.getCount() > 0) {
            ContentValues value = new ContentValues();
            value.put("Sstat", sStat);
            db.update(DBHelper.TABLE_IMAGE, value, "imageName=?", new String[]{imageName});
        }

        //close();
    }

    public void updateSSttStoreCheckImageImage(String imageName, int sStat) {
        //open();
        Cursor cursorImage = db.rawQuery("Select StoreID from tblStoreCheckInPic where imageName='" + imageName + "'", null);
        if (cursorImage.getCount() > 0) {
            ContentValues value = new ContentValues();
            value.put("Sstat", sStat);
            db.update(DBHelper.DATABASE_TABLE_tblStoreCheckInPic, value, "imageName=?", new String[]{imageName});
        }

        //close();
    }

    public void fndeleteSbumittedStoreImagesOfSotre(int Sstat) {

        //open();

        db.execSQL("DELETE FROM tblStoreCheckInPic WHERE  Sstat='" + Sstat + "'");

        // close();
    }

    public void fndeleteSbumittedStoreImagesOfSotreCheckIn(int Sstat) {

        //open();

        db.execSQL("DELETE FROM tableImage WHERE  Sstat='" + Sstat + "'");

        // close();
    }

    public int fnCheckForPendingXMLFilesInTable() {
        //open();
        Cursor cursor = null;
        int check = 0;
        try {


            cursor = db.rawQuery("SELECT XmlFileName FROM tbl_XMLfiles WHERE  Sstat=3", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = 1;
                        cursor.moveToNext();
                    }
                }

            }


        } catch (Exception e) {

        } finally {
            cursor.close();
            // close();
        }
        return check;
    }

    public void fnUpdateProcessedInvoiceflg(String InvoiceNumber, int flag2set) {

        try {

            final ContentValues values = new ContentValues();
            values.put("flgProcessedInvoice", flag2set);


            int affected = db.update("tblInvoiceHeader", values, "InvoiceNumber=?", new String[]{InvoiceNumber});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public String[] deletFromSDcCardPhotoNewStoreValidationBasedSstat(String Sstat) {

        String[] imageNameToBeDeleted = null;
        //open();

        Cursor cursor = db.rawQuery("SELECT  imageName from tableImage where Sstat='" + Sstat + "'", null);
        try {
            if (cursor.getCount() > 0) {
                imageNameToBeDeleted = new String[cursor.getCount()];
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        imageNameToBeDeleted[i] = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }
            } else {
                imageNameToBeDeleted = new String[1];
                imageNameToBeDeleted[0] = "No Data";
            }
        } finally {
            cursor.close();
            // close();
        }


        return imageNameToBeDeleted;
    }

    public int fetchtblVanCycleIdForInvoiceHeader() {

        int retVal = -1;
        Cursor cur = null;
        try {
            //tblCycleID(CycleID int null,Sstat int null,CycStartTime text null);";
            cur = db.rawQuery("Select CycleID from tblCycleID", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        retVal = Integer.parseInt(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }
            //close();
            return retVal;
        }
    }

    public int fetchtblInvoiceReviewLineCount(String sID, String TmpInvoiceCodePDA) {
        //open();
        int retVal = 0;
        Cursor cur = null;
        try {
            //tblCycleID(CycleID int null,Sstat int null,CycStartTime text null);";
            cur = db.rawQuery("Select DISTINCT ifnull(COUNT(ProdID),0) from tblTmpInvoiceDetails Where StoreID='" + sID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        retVal = Integer.parseInt(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error fetchtblInvoiceReviewLineCount = " + e.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }
            //close();
            return retVal;
        }
    }

    public int fetchtblInvoiceReviewCount(String sID, String TmpInvoiceCodePDA) {
        //open();
        int retVal = 0;
        Cursor cur = null;
        try {
            //tblCycleID(CycleID int null,Sstat int null,CycStartTime text null);";
            cur = db.rawQuery("Select ifnull(SUM(OrderQty),0) from tblTmpInvoiceDetails Where StoreID='" + sID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        retVal = Integer.parseInt(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error fetchtblInvoiceReviewCount = " + e.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }
            //  close();
            return retVal;
        }
    }

    public void getInvoiceNumber() {
        //tblInvoiceHeader (StoreVisitCode text not null,InvoiceNumber text not null,TmpInvoiceCodePDA text null, StoreID text not null, InvoiceDate string not null, TotalBeforeTaxDis real not null, TaxAmt real not null, TotalDis real not null, InvoiceVal real not null, FreeTotal integer not null, Sstat integer not null, InvAfterDis real not null, AddDis real not null,  NoCoupon int null, TotalCoupunAmount real null,TransDate string not null,FlgInvoiceType text not null,flgWholeSellApplicable int null,flgProcessedInvoice int not null,CycleID  int not null);";
    }

    public void UpdateStoreVisitWiseTablesAfterSync(int flag2set) {

        try {
            //open();
            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);


            //int affected = db.update("tblStoreList", values, "StoreID=?",new String[] { sID });
          

            int affected1 = db.update("tblAllCollectionData", values, "Sstat=?", new String[]{"5"});
            int affected2 = db.update("tblInvoiceHeader", values, "Sstat=?", new String[]{"5"});
            int affected3 = db.update("tblInvoiceDetails", values, "Sstat=?", new String[]{"5"});
            int affected4 = db.update("tblStoreVisitMstr", values, "Sstat=?", new String[]{"5"});
            int affected71 = db.update("tblStoreCloseLocationDetails", values, "Sstat=?", new String[]{"5"});

            int affected72 = db.update("tblStoreClosedPhotoDetail", values, "Sstat=?", new String[]{"5"});

            int affected73 = db.update("tblStoreCloseReasonSaving", values, "Sstat=?", new String[]{"5"});
            int affected74 = db.update("tblNewAddedStoreLocationDetails", values, "Sstat=?", new String[]{"3"});
            int affected75 = db.update(DBHelper.DATABASE_TABLE_tblLocationDetails, values, "Sstat=?", new String[]{"3"});
            int affected76 = db.update(DBHelper.TABLE_JOINTVISITMASTER, values, "Sstat=?", new String[]{"3"});
            int affected77 = db.update(DBHelper.TABLE_JOINTVISITDETAILS, values, "Sstat=?", new String[]{"3"});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
        // close();
    }

    public int checkVisitTypeStatus(String StoreID, String StoreVisitCode) {
//open();
        int check = 0;
        Cursor cursor = db.rawQuery("SELECT VisitTypeStatus FROM tblStoreVisitMstr WHERE  StoreID ='" + StoreID + "' and StoreVisitCode='" + StoreVisitCode + "'", null);

        try {


            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        check = Integer.parseInt(cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }

            }
            return check;

        } finally {
            cursor.close();
            // close();
        }

    }

    public void fnTransferDataFromTempToPermanent(String storeID,String StoreVisitCode,String TmpInvoiceCodePDA,int flgDrctslsIndrctSls)
    {
        //open();
        int InvoiceNumber = 0;
        int CycleID = 0;
        int flgProcessedInvoice=0;
        if(flgDrctslsIndrctSls==2)
        {

            db.execSQL("Delete from tblInvoiceHeader Where tblInvoiceHeader.StoreID='"+storeID+"' AND StoreVisitCode='"+StoreVisitCode+"' AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'");

            db.execSQL("Delete from tblInvoiceDetails Where StoreID='"+storeID+"' AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'");
            flgProcessedInvoice=2;

        }
        if(CommonInfo.flgDrctslsIndrctSls==1)
        {
            InvoiceNumber = fnFetchInvoiceNumber();
            CycleID = fetchtblVanCycleIdForInvoiceHeader();
        }

        try {
            int flgTransferStatus=1;
            fnUpdateflgTransferStatusInInvoiceHeader(storeID,StoreVisitCode,TmpInvoiceCodePDA,flgTransferStatus);
       /* db.execSQL("INSERT INTO tblInvoiceHeader(StoreVisitCode,TmpInvoiceCodePDA,StoreID,InvoiceDate,TotalBeforeTaxDis,TaxAmt,TotalDis,InvoiceVal,FreeTotal,Sstat,InvAfterDis,AddDis,NoCoupon,TotalCoupunAmount,TransDate,FlgInvoiceType,flgWholeSellApplicable,InvoiceNumber,flgProcessedInvoice,CycleID) SELECT StoreVisitCode,TmpInvoiceCodePDA,StoreID,InvoiceDate,TotalBeforeTaxDis,TaxAmt,TotalDis,InvoiceVal,FreeTotal,3,InvAfterDis,AddDis,NoCoupon,TotalCoupunAmount,TransDate,FlgInvoiceType,flgWholeSellApplicable,"+InvoiceNumber+",0,"+CycleID+" FROM tblTmpInvoiceHeader Where tblTmpInvoiceHeader.StoreVisitCode='"+StoreVisitCode+"' AND  tblTmpInvoiceHeader.TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"' AND tblTmpInvoiceHeader.StoreID='"+storeID+"'");

        db.execSQL("INSERT INTO tblInvoiceDetails(InvoiceNumber,TmpInvoiceCodePDA,StoreID,CatID,ProdID,ProductPrice,TaxRate,flgRuleTaxVal,OrderQty,UOMId,LineValBfrTxAftrDscnt,LineValAftrTxAftrDscnt,FreeQty,DisVal,Sstat,SampleQuantity,ProductShortName,TaxValue,OrderIDPDA,flgIsQuoteRateApplied,ServingDBRId,flgWholeSellApplicable,ProductExtraOrder) SELECT "+InvoiceNumber+",TmpInvoiceCodePDA,StoreID,CatID,ProdID,ProductPrice,TaxRate,flgRuleTaxVal,OrderQty,UOMId,LineValBfrTxAftrDscnt,LineValAftrTxAftrDscnt,FreeQty,DisVal,3,SampleQuantity,ProductShortName,TaxValue,OrderIDPDA,flgIsQuoteRateApplied,ServingDBRId,flgWholeSellApplicable,ProductExtraOrder FROM tblTmpInvoiceDetails Where tblTmpInvoiceDetails.TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"' AND tblTmpInvoiceDetails.StoreID='"+storeID+"'");
*/
            db.execSQL("INSERT INTO tblInvoiceHeader(StoreVisitCode,TmpInvoiceCodePDA,StoreID,InvoiceDate,TotalBeforeTaxDis,TaxAmt,TotalDis,InvoiceVal,FreeTotal,Sstat,InvAfterDis,AddDis,NoCoupon,TotalCoupunAmount,TransDate,FlgInvoiceType,flgWholeSellApplicable,InvoiceNumber,flgProcessedInvoice,CycleID,flgDrctslsIndrctSls,RouteNodeID,RouteNodetype) SELECT StoreVisitCode,TmpInvoiceCodePDA,StoreID,InvoiceDate,TotalBeforeTaxDis,TaxAmt,TotalDis,InvoiceVal,FreeTotal,3,InvAfterDis,AddDis,NoCoupon,TotalCoupunAmount,TransDate,FlgInvoiceType,flgWholeSellApplicable,"+InvoiceNumber+","+flgProcessedInvoice+","+CycleID+","+flgDrctslsIndrctSls+",RouteNodeID,RouteNodetype FROM tblTmpInvoiceHeader Where tblTmpInvoiceHeader.StoreVisitCode='"+StoreVisitCode+"' AND  tblTmpInvoiceHeader.TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"' AND tblTmpInvoiceHeader.StoreID='"+storeID+"'");

            db.execSQL("INSERT INTO tblInvoiceDetails(InvoiceNumber,TmpInvoiceCodePDA,StoreID,CatID,ProdID,ProductPrice,TaxRate,flgRuleTaxVal,OrderQty,UOMId,LineValBfrTxAftrDscnt,LineValAftrTxAftrDscnt,FreeQty,DisVal,Sstat,SampleQuantity,ProductShortName,TaxValue,OrderIDPDA,flgIsQuoteRateApplied,ServingDBRId,flgWholeSellApplicable,ProductExtraOrder,flgDrctslsIndrctSls) SELECT "+InvoiceNumber+",TmpInvoiceCodePDA,StoreID,CatID,ProdID,ProductPrice,TaxRate,flgRuleTaxVal,OrderQty,UOMId,LineValBfrTxAftrDscnt,LineValAftrTxAftrDscnt,FreeQty,DisVal,3,SampleQuantity,ProductShortName,TaxValue,OrderIDPDA,flgIsQuoteRateApplied,ServingDBRId,flgWholeSellApplicable,ProductExtraOrder,"+flgDrctslsIndrctSls+" FROM tblTmpInvoiceDetails Where tblTmpInvoiceDetails.TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"' AND tblTmpInvoiceDetails.StoreID='"+storeID+"'");

            flgTransferStatus=2;
            fnUpdateflgTransferStatusInInvoiceHeader(storeID,StoreVisitCode,TmpInvoiceCodePDA,flgTransferStatus);
            // fnUpdateInvoiceNumber(storeID,StoreVisitCode,TmpInvoiceCodePDA,InvoiceNumber);
        }
        catch (Exception ex)
        {
            System.out.println("Error While trnasfering data from temp to permanent.");
        }
        finally {
            //close();
        }

    }
    public int fnFetchInvoiceNumber() {

        int flCheckPrevoiusInvoiceNumberIfAnyGenerated = 0;
        int InNumber = 0;
        flCheckPrevoiusInvoiceNumberIfAnyGenerated = fnCheckForPrevoiusInvoiceNumberIfAnyGenerated();
        if (flCheckPrevoiusInvoiceNumberIfAnyGenerated == 0) {
            InNumber = fnGettblInvoiceAllotmentId();
        } else {
            InNumber = fnGetMaxInvoiceNumberIfAnyGenerated();
        }
        return InNumber;
    }

    public int fnCheckForPrevoiusInvoiceNumberIfAnyGenerated() {
        int flCheckPrevoiusInvoiceNumberIfAnyGenerated = 0;
        Cursor cursor = db.rawQuery("SELECT InvoiceNumber FROM tblInvoiceHeader", null);

        try {


            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    flCheckPrevoiusInvoiceNumberIfAnyGenerated = 1;

                }

            }
            return flCheckPrevoiusInvoiceNumberIfAnyGenerated;

        } finally {
            cursor.close();

        }


    }

    public int fnGetMaxInvoiceNumberIfAnyGenerated() {
        int MaxInvoiceNumberGenerated = 0;
        Cursor cursor = db.rawQuery("SELECT Max(InvoiceNumber) FROM tblInvoiceHeader", null);

        try {


            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    MaxInvoiceNumberGenerated = Integer.parseInt(cursor.getString(0)) + 1;

                }

            }
            return MaxInvoiceNumberGenerated;

        } finally {
            cursor.close();

        }


    }

    public LinkedHashMap<String, String> fetch_InvoiceCaptionPrefixAndSuffix() {

        // //open();
        LinkedHashMap<String, String> hmapInvoiceCaptionPrefixAndSuffix = new LinkedHashMap<String, String>();


        Cursor cursor = db.rawQuery("SELECT ifnull(INVPrefix,''),ifnull(INVSuffix,'') FROM tblInvoiceCaption", null); //order by AutoIdOutlet Desc

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    hmapInvoiceCaptionPrefixAndSuffix.put("INVPrefix", cursor.getString(0));
                    hmapInvoiceCaptionPrefixAndSuffix.put("INVSuffix", cursor.getString(1));

                }
            } else {
                hmapInvoiceCaptionPrefixAndSuffix.put("INVPrefix", "");
                hmapInvoiceCaptionPrefixAndSuffix.put("INVSuffix", "");
            }

            return hmapInvoiceCaptionPrefixAndSuffix;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //   close();
        }
    }

    public ArrayList<String> getImageNameToDel(String StoreID) {
        //open();
        ArrayList<String> listImagePath = new ArrayList<String>();
        try {
//
            //tableImage(StoreID text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,ImageClicktime text null,Sstat integer null);";
            //imagButtonTag+"~"+tempId+"~"+uriSavedImage.toString()+"~"+clkdTime+"~"+"2";
            Cursor cursor = db.rawQuery("Select imageName from tableImage where StoreID='" + StoreID + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        listImagePath.add(cursor.getString(0));
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //  close();
            return listImagePath;
        }
    }

    public void deleteImageDataCanceled(String storeId) {
        //tableImage(tempId text null,QstIdAnsCntrlTyp text null,imageName text null,imagePath text null,Sstat integer null);";
        //open();
        Cursor cur = db.rawQuery("Select imageName from tableImage where StoreID='" + storeId + "'", null);
        if (cur.getCount() > 0) {
            db.delete(DBHelper.TABLE_IMAGE, "StoreID=?", new String[]{storeId});
        }
        if (cur != null) {
            cur.close();
        }
        //close();
    }

    public int fnCheckflgTransferStatus(String storeID, String StoreVisitCode, String TmpInvoiceCodePDA) {
        //open();
        int flgTransferStatus = 0;
        Cursor cursor = db.rawQuery("SELECT ifnull(flgTransferStatus,0) FROM tblTmpInvoiceHeader WHERE tblTmpInvoiceHeader.StoreVisitCode='" + StoreVisitCode + "' AND  tblTmpInvoiceHeader.TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' AND tblTmpInvoiceHeader.StoreID=='" + storeID + "'", null);

        try {


            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    flgTransferStatus = Integer.parseInt(cursor.getString(0));

                }

            }


        } finally {
            if (cursor != null) {
                cursor.close();
            }
//close();
        }
        return flgTransferStatus;

    }

    public void deleteMasterTblFromParmanentInvoiceTables(String StoreID, String TmpInvoiceCodePDA) {
        //open();
        db.execSQL("DELETE FROM tblInvoiceHeader WHERE StoreID='" + StoreID + "'  AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        db.execSQL("DELETE FROM tblInvoiceDetails WHERE StoreID='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'");
        // close();
    }

    public LinkedHashMap<String, String> getPerUnitName() {
        LinkedHashMap<String, String> hmapPerUnitName = new LinkedHashMap<>();
        //open();
        //tblProductListMaster(ProductID text  null,RptUnitName text null,PerbaseUnit text null);";
        Cursor cur = null;
        try {
            cur = db.rawQuery("Select ProductID,'('||RptUnitName ||' : '||PerbaseUnit||')' As perUnitName from tblProductListMaster", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapPerUnitName.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception excptn) {
            System.out.println("Error getPerUnitName= " + excptn.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }
            // close();
            return hmapPerUnitName;
        }

    }

    public LinkedHashMap<String, String> getPerBaseQty() {
        LinkedHashMap<String, String> hmapPerBaseQty = new LinkedHashMap<>();
        //open();
        //tblProductListMaster(ProductID text  null,RptUnitName text null,PerbaseUnit text null);";
        Cursor cur = null;
        try {
            cur = db.rawQuery("Select ProductID,PerbaseUnit from tblProductListMaster", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapPerBaseQty.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception excptn) {
            System.out.println("Error getPerUnitName= " + excptn.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }
            //close();
            return hmapPerBaseQty;
        }

    }

    public void UpdateStorWhileAdding(String sID, int flag2set) {
        //open();
        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected1 = db.update("tblStoreList", values, "StoreID=?", new String[]{sID});
            int affected7 = db.update("tblPreAddedStores", values, "StoreID=?", new String[]{sID});
            int affected2 = db.update("tblNewAddedStoreLocationDetails", values, "StoreID=?", new String[]{sID});
            int affected3 = db.update("tblNewStoreListEntries", values, "StoreID=?", new String[]{sID});
            int affected4 = db.update("tblNewStoreSalesQuotePaymentDetails", values, "StoreId=?", new String[]{sID});
            int affected5 = db.update("tblOutletQuestAnsMstr", values, "OutletID=?", new String[]{sID});
            int affected6 = db.update("tableImage", values, "StoreID=?", new String[]{sID});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
        //close();

    }

    public void UpdateXMLCreatedFilesTablesFlag(int flag2set) {
        //open();
        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);//
            int affected1 = db.update("tblStoreList", values, "Sstat=?", new String[]{"3"});
            int affected61 = db.update("tblStoreCheckInPic", values, "Sstat=?", new String[]{"3"});
            int affected20 = db.update("tblActualVisitStock", values, "Sstat=?", new String[]{"3"});
            int affected2 = db.update("tblNewAddedStoreLocationDetails", values, "Sstat=?", new String[]{"3"});
            int affected3 = db.update("tblNewStoreListEntries", values, "Sstat=?", new String[]{"3"});
            int affected4 = db.update("tblNewStoreSalesQuotePaymentDetails", values, "Sstat=?", new String[]{"3"});
            int affected5 = db.update("tblOutletQuestAnsMstr", values, "Sstat=?", new String[]{"3"});
            int affected6 = db.update("tableImage", values, "Sstat=?", new String[]{"3"});


            int affected7 = db.update("tblStoreVisitMstr", values, "Sstat=?", new String[]{"3"});
            int affected8 = db.update("tblInvoiceDetails", values, "Sstat=?", new String[]{"3"});
            int affected9 = db.update("tblInvoiceHeader", values, "Sstat=?", new String[]{"3"});
            int affected10 = db.update("tblAllCollectionData", values, "Sstat=?", new String[]{"3"});
            int affected11 = db.update("tblStoreProductPhotoDetail", values, "Sstat=?", new String[]{"3"});
            int affected12 = db.update("tblNewStoreEntries", values, "Sstat=?", new String[]{"3"});
            int affected13 = db.update("tblNoVisitStoreDetails", values, "Sstat=?", new String[]{"3"});
            int affected14 = db.update("tblSelectedManagerDetails", values, "Sstat=?", new String[]{"3"});
            int affected15 = db.update("tblLatLongDetails", values, "Sstat=?", new String[]{"3"});
            int affected16 = db.update("tblStoreCloseLocationDetails", values, "Sstat=?", new String[]{"3"});
            int affected17 = db.update("tblStoreClosedPhotoDetail", values, "Sstat=?", new String[]{"3"});
            int affected18 = db.update("tblStoreCloseReasonSaving", values, "Sstat=?", new String[]{"3"});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }
        //  close();

    }

    public int fnGetCollectionOutSstat(String StoreID) {
        //open();
        Cursor cursorE2 = db.rawQuery("SELECT Sstat FROM  tblAllCollectionData where StoreID='" + StoreID + "'", null);
        int StoreCurrentOutsStat = 0;

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {


                    StoreCurrentOutsStat = (Integer.parseInt(cursorE2.getString(0).toString()));


                }
            }
            return StoreCurrentOutsStat;
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            //  close();
        }

    }

    public String fnGetStoreCollectionCode(String StoreID) {
        //open();
        String StoreCollectionCode = "NA";
        Cursor cursor = db.rawQuery("Select CollectionCode from tblAllCollectionData Where StoreID='" + StoreID + "' AND Sstat=1", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                StoreCollectionCode = cursor.getString(0);
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        //close();
        return StoreCollectionCode;
    }

    public int checkflgVisitCollectionMarkedStatus(String StoreID, String StoreVisitCode) {
        //open();
        int check = 0;
        Cursor cursor = db.rawQuery("SELECT flgVisitCollectionMarkedStatus FROM tblStoreVisitMstr WHERE  StoreID ='" + StoreID + "' and StoreVisitCode='" + StoreVisitCode + "'", null);

        try {


            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    check = Integer.parseInt(cursor.getString(0).toString());

                }

            }
            return check;

        } finally {
            cursor.close();
            // close();
        }

    }

    public void fnUpdateflgVisitCollectionMarkedStatus(String storeID, String StoreVisitCode, String TmpInvoiceCodePDA, int flgVisitCollectionMarkedStatus) {
        // Cursor cursor = db.rawQuery("SELECT flgVisitCollectionMarkedStatus FROM tblStoreVisitMstr WHERE  StoreID ='"+ StoreID + "' and StoreVisitCode='"+StoreVisitCode+"'", null);
        //open();
        final ContentValues values = new ContentValues();
        values.put("flgVisitCollectionMarkedStatus", flgVisitCollectionMarkedStatus);
        int affected1 = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?", new String[]{storeID, StoreVisitCode});
        // close();
    }

    public String getDefaultCity() {
        //open();
        String defaultCity = "";
        Cursor cur = null;
        try {
            cur = db.rawQuery("Select City from tblStateCityMaster where CityDefault=1", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    defaultCity = cur.getString(0);
                }
            }
        } catch (SQLiteException exception) {

        } finally {
            if (cur != null) {
                cur.close();
            }
            //  close();
            return defaultCity;
        }
    }

    public LinkedHashMap<String, String> getCityAgainstState() {
        //open();
        LinkedHashMap<String, String> hmapCityAgainstState = new LinkedHashMap<String, String>();
        Cursor cur = null;
        try {
            cur = db.rawQuery("Select City,State from tblStateCityMaster", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapCityAgainstState.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }
            }
        } catch (SQLiteException exception) {

        } finally {
            if (cur != null) {
                cur.close();
            }
            //close();
            return hmapCityAgainstState;

        }
    }

    public LinkedHashMap<String, String> fngetCityList() {

        //open();
        Cursor cur = null;
        LinkedHashMap<String, String> hmapCityList = new LinkedHashMap<String, String>();
        try {
            cur = db.rawQuery("Select CityID,City from tblStateCityMaster", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapCityList.put(cur.getString(1).trim(), cur.getString(0));
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            if (cur != null) {
                cur.close();
            }
            // close();
            return hmapCityList;
        }
    }

    public LinkedHashMap<String, String> fngetDistinctState() {

        //open();
        Cursor cur = null;
        LinkedHashMap<String, String> hmapDistinctStates = new LinkedHashMap<String, String>();
        try {
            cur = db.rawQuery("Select Distinct StateID,State from tblStateCityMaster", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapDistinctStates.put(cur.getString(1), cur.getString(0));
                        cur.moveToNext();
                    }
                }

            }

        } catch (SQLiteException e) {
            // TODO: handle exception
        } finally {
            if (cur != null) {
                cur.close();
            }
            //  close();
            return hmapDistinctStates;
        }
    }

    public void updateAllDefaultCity(String cityId) {
        //open();
        try {


            db.execSQL("UPDATE tblStateCityMaster SET CityDefault=0");
            ContentValues values = new ContentValues();
            values.put("CityDefault", 1);
            db.update(DBHelper.TABLE_tblStateCityMaster, values, "CityID=?", new String[]{cityId});
        } catch (SQLiteException exception) {

        } finally {
            // close();
        }

    }

    public void deletetblStateCityMaster() {

        db.execSQL("DELETE FROM tblStateCityMaster");

    }

    public void fnsavetblStateCityMaster(String StateID, String State, String CityID, String City, int cityDefault) {

        ContentValues values = new ContentValues();
        values.put("StateID", Integer.parseInt(StateID));
        values.put("State", State);
        values.put("CityID", Integer.parseInt(CityID));
        values.put("City", City);
        values.put("CityDefault", cityDefault);

        db.insert(DBHelper.TABLE_tblStateCityMaster, null, values);

    }

    public LinkedHashMap<Integer, String> fetch_Reason_List_for_option() {
        //open();
        LinkedHashMap<Integer, String> hmapCatgry = new LinkedHashMap<Integer, String>();
        Cursor cursor = db.rawQuery("SELECT ReasonId,ReasonDescr FROM tblDayStartAttendanceOptions where flgDSRApplicable='" + 1 + "' and flgNoVisitOption='" + 0 + "' and flgDelayedReason='" + 0 + "' and ReasonId<>'15' order by SeqNo asc", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapCatgry.put(Integer.parseInt(cursor.getString(0).toString()), cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                // hmapCatgry.put(0, "No Reason");
            }
            return hmapCatgry;
        } finally {
            cursor.close();
            // close();
        }
    }

    public LinkedHashMap<Integer, String> fetch_NoWorking_Reason_List() {
        //open();
        LinkedHashMap<Integer, String> hmapCatgry = new LinkedHashMap<Integer, String>();
        Cursor cursor = db.rawQuery("SELECT ReasonId,ReasonDescr FROM tblDayStartAttendanceOptions where flgDSRApplicable='" + 1 + "' and flgNoVisitOption=" + 1, null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    // hmapCatgry.put("Select Reason", "0");
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapCatgry.put(Integer.parseInt(cursor.getString(0).toString()), cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }

            } else {
                // hmapCatgry.put(0, "No Reason");
            }
            return hmapCatgry;
        } finally {
            cursor.close();
            //close();
        }
    }

    public void fnSettblAttandanceDetails() {

        try {

            //open();
            db.execSQL("UPDATE tblAttandanceDetails SET Sstat= 4");
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
            //close();
        }

    }

    public long savetblAttandanceDetails(String AttandanceTime, String PersonNodeID, String PersonNodeType, String PersonName,
                                         String OptionID, String OptionDesc, String ReasonID, String ReasonDesc,
                                         String Address,
                                         String PinCode, String City, String State, String fnLati,
                                         String fnLongi, String fnAccuracy, String flgLocNotFound, String fnAccurateProvider,
                                         String AllProvidersLocation, String fnAddress, String GpsLat, String GpsLong,
                                         String GpsAccuracy, String GpsAddress, String NetwLat, String NetwLong,
                                         String NetwAccuracy, String NetwAddress, String FusedLat, String FusedLong,
                                         String FusedAccuracy, String FusedAddress, String FusedLocationLatitudeWithFirstAttempt,
                                         String FusedLocationLongitudeWithFirstAttempt, String FusedLocationAccuracyWithFirstAttempt,
                                         int Sstat, int flgLocationServicesOnOff, int flgGPSOnOff, int flgNetworkOnOff,
                                         int flgFusedOnOff, int flgInternetOnOffWhileLocationTracking, int flgRestart
            , String CityId, String StateId, String MapAddress, String MapCity, String MapPinCode, String MapState) {
        try {
            db.execSQL("DELETE FROM tblAttandanceDetails");
        } catch (Exception e) {

        }

        ContentValues initialValues = new ContentValues();
        String aa = fnGetPersonNodeIDAndPersonNodeType();


        initialValues.put("AttandanceTime", AttandanceTime.trim());
        initialValues.put("PersonNodeID", aa.split(Pattern.quote("^"))[0].trim());
        initialValues.put("PersonNodeType", aa.split(Pattern.quote("^"))[1].trim());

        initialValues.put("OptionID", OptionID.trim());
        initialValues.put("OptionDesc", OptionDesc.trim());
        initialValues.put("ReasonID", ReasonID.trim());
        initialValues.put("ReasonDesc", ReasonDesc.trim());

        initialValues.put("Address", Address.trim());
        initialValues.put("PinCode", PinCode.trim());
        initialValues.put("City", City.trim());
        initialValues.put("State", State.trim());

        initialValues.put("fnLati", fnLati.trim());
        initialValues.put("fnLongi", fnLongi.trim());
        initialValues.put("fnAccuracy", fnAccuracy.trim());
        initialValues.put("flgLocNotFound", flgLocNotFound.trim());
        initialValues.put("fnAccurateProvider", fnAccurateProvider.trim());
        initialValues.put("AllProvidersLocation", AllProvidersLocation.trim());
        initialValues.put("fnAddress", fnAddress.trim());

        initialValues.put("GpsLat", GpsLat.trim());
        initialValues.put("GpsLong", GpsLong.trim());
        initialValues.put("GpsAccuracy", GpsAccuracy.trim());
        initialValues.put("GpsAddress", GpsAddress.trim());

        initialValues.put("NetwLat", NetwLat.trim());
        initialValues.put("NetwLong", NetwLong.trim());
        initialValues.put("NetwAccuracy", NetwAccuracy.trim());
        initialValues.put("NetwAddress", NetwAddress.trim());

        initialValues.put("FusedLat", FusedLat.trim());
        initialValues.put("FusedLong", FusedLong.trim());
        initialValues.put("FusedAccuracy", FusedAccuracy.trim());
        initialValues.put("FusedAddress", FusedAddress.trim());

        initialValues.put("FusedLocationLatitudeWithFirstAttempt", FusedLocationLatitudeWithFirstAttempt.trim());
        initialValues.put("FusedLocationLongitudeWithFirstAttempt", FusedLocationLongitudeWithFirstAttempt.trim());
        initialValues.put("FusedLocationAccuracyWithFirstAttempt", FusedLocationAccuracyWithFirstAttempt.trim());
        initialValues.put("Sstat", Sstat);

        initialValues.put("flgLocationServicesOnOff", flgLocationServicesOnOff);
        initialValues.put("flgGPSOnOff", flgGPSOnOff);
        initialValues.put("flgNetworkOnOff", flgNetworkOnOff);
        initialValues.put("flgFusedOnOff", flgFusedOnOff);
        initialValues.put("flgInternetOnOffWhileLocationTracking", flgInternetOnOffWhileLocationTracking);
        initialValues.put("flgRestart", flgRestart);

        initialValues.put("MapAddress", MapAddress);
        initialValues.put("MapCity", MapCity);
        initialValues.put("MapPinCode", MapPinCode);
        initialValues.put("MapState", MapState);
        initialValues.put("CityId", CityId);
        initialValues.put("StateId", StateId);
        initialValues.put("DistributorId", "0");
        initialValues.put("DistributorNodeType", "0");
        initialValues.put("DistributorName", "NA");
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


        return db.insert(DBHelper.TABLE_tblAttandanceDetails, null, initialValues);
    }

    public void updatetblAttandanceDetails(String OptionID, String OptionDesc, String ReasonID, String ReasonDesc,
                                           String Comment, String DistributorId, String DistributorNodeType, String DistributorName) {
        //open();
        try {


            ContentValues values = new ContentValues();
            values.put("OptionID", OptionID.trim());
            values.put("OptionDesc", OptionDesc.trim());
            values.put("ReasonID", ReasonID.trim());
            values.put("ReasonDesc", ReasonDesc);
            values.put("Comment", Comment);

            values.put("DistributorId", DistributorId.trim());
            values.put("DistributorNodeType", DistributorNodeType);
            values.put("DistributorName", DistributorName);

            db.update(DBHelper.TABLE_tblAttandanceDetails, values, "", new String[]{});
        } catch (SQLiteException exception) {

        } finally {
            //close();
        }

    }

    public String fnGetPersonNodeIDAndPersonNodeType() {
        String SONodeIdAndNodeType = "0^0";


        Cursor cursor = db.rawQuery("Select PersonNodeID,PersonNodeType from tblUserAuthenticationMstr", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                SONodeIdAndNodeType = cursor.getString(0) + "^" + cursor.getString(1);
            }
        }

        return SONodeIdAndNodeType;
    }

    public int FetchflgPersonTodaysAtt() {
        int CatId = 0;

        Cursor cursor = db.rawQuery("SELECT flgPersonTodaysAtt from tblUserAuthenticationMstr", null);
        try {

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    String abc = (String) cursor.getString(0).toString();
                    CatId = Integer.parseInt(abc);
                    cursor.moveToNext();
                }

            }
            return CatId;
        } finally {
            cursor.close();
        }

    }

    public void deleteActualVisitData(String storeID) {
        //open();
        db.execSQL("DELETE FROM tblActualVisitStock where storeID='" + storeID + "'");
        // close();
    }

    public void saveTblActualVisitStock(String storeID, String ProductID, String Stock, int sStat) {
//(tblActualVisitStock (storeID text null,ProductID text null,Stock text null,Sstat integer null);";
        //open();
        ContentValues initialValues = new ContentValues();
        initialValues.put("storeID", storeID);
        initialValues.put("ProductID", ProductID.trim());
        initialValues.put("Stock", Stock.trim());
        initialValues.put("Sstat", sStat);
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        db.insert(DBHelper.DATABASE_TABLE_tblActualVisitStock, null, initialValues);
        // close();
    }

    public LinkedHashMap<String, String> fetchActualVisitData(String storeID) {
//tblActualVisitStock (ProductID text null,Stock text null);";
        LinkedHashMap<String, String> hmapData = new LinkedHashMap<>();
        Cursor cursor = null;

        try {
            cursor = db.rawQuery("SELECT ProductID,Stock from tblActualVisitStock  where storeID='" + storeID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                        hmapData.put(cursor.getString(0), cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if (cursor != null)
                cursor.close();
            return hmapData;
        }
    }

    public LinkedHashMap<String, String> fetchProductDataForActualVisit() {
        LinkedHashMap<String, String> hmapData = new LinkedHashMap<>();
        Cursor cursor = null;

        try {
            cursor = db.rawQuery("SELECT ProductID,ProductShortName from tblProductListMaster Order By PrdOrdr", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                        hmapData.put(cursor.getString(0), cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if (cursor != null)
                cursor.close();
            return hmapData;
        }
    }

    public LinkedHashMap<String, String> fetchProductStockFromPurchaseTable(String storeID) {
//tblActualVisitStock (ProductID text null,Stock text null);";
        LinkedHashMap<String, String> hmapData = new LinkedHashMap<>();
        Cursor cursor = null;

        try {
            cursor = db.rawQuery("SELECT ProdID,Stock from tblTmpInvoiceDetails  where StoreID='" + storeID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                        hmapData.put(cursor.getString(0), cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if (cursor != null)
                cursor.close();
            return hmapData;
        }
    }

    public LinkedHashMap<String, String> fetchProductListLastvisitAndOrderBasis(String StoreID) {
//tblActualVisitStock (ProductID text null,Stock text null);";
        LinkedHashMap<String, String> hmapData = new LinkedHashMap<>();
        Cursor cursor = null;
        //open();
        try {
            cursor = db.rawQuery("SELECT  Distinct tblProductListLastVisitStockOrOrderMstr.PrdID,tblProductListMaster.ProductShortName from tblProductListLastVisitStockOrOrderMstr inner join tblProductListMaster on tblProductListLastVisitStockOrOrderMstr.PrdID=tblProductListMaster.ProductID   where tblProductListLastVisitStockOrOrderMstr.StoreID='" + StoreID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                        hmapData.put(cursor.getString(0), cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (cursor != null) {
                cursor.close();
            }

            //close();
            return hmapData;
        }
    }

    public void deletetblProductListLastVisitStockOrOrderMstr() {
        db.execSQL("DELETE FROM tblProductListLastVisitStockOrOrderMstr");

    }

    public String fnGetLastStockDate(String ssStoreID) {
        String lstStockDate = "";
        //open();
        Cursor cursor = db.rawQuery("SELECT Date123 FROM tblPDAGetLastVisitDetails where StoreID= '" + ssStoreID + "'", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {

                        lstStockDate = cursor.getString(0);
                        cursor.moveToNext();
                    }
                }
            }
            return lstStockDate;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }

    }
    public HashMap<String,String> fnGetLastOrderByDMS_Or_SFA(String ssStoreID)
    {
        HashMap<String, String> hmapProductIdLastStock= new HashMap<>();

        Cursor cursor = db.rawQuery("SELECT ProductID,Order123 FROM tblPDAGetLastVisitDetails where StoreID= '" + ssStoreID + "'", null);
        try
        {
            if(cursor!=null && cursor.getCount()>0)
            {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {

                        hmapProductIdLastStock.put((String) cursor.getString(0),(String) cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
            return hmapProductIdLastStock;
        } finally {
            if(cursor!=null) {
                cursor.close();
            }

        }

    }
    public HashMap<String, String> fnGetLastStockByDMS_Or_SFA(String ssStoreID) {
        HashMap<String, String> hmapProductIdLastStock = new HashMap<String, String>();
        //open();
        Cursor cursor = db.rawQuery("SELECT ProductID,Stock FROM tblPDAGetLastVisitDetails where StoreID= '" + ssStoreID + "'", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i < cursor.getCount(); i++) {

                        hmapProductIdLastStock.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hmapProductIdLastStock;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }

    }

    // store list page methods
    public int fnGetExistingOutletIDFromOutletMstr(String ODescr) {
        int existOutID = 0;
        //open();
        Cursor cursor = db.rawQuery("SELECT Count(StoreID)  from tblPreAddedStores where StoreName like '" + ODescr + "%'", null);
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        existOutID = 1;
                    }

                }
            }
            return existOutID;
        } finally {
            cursor.close();
            // close();
        }
    }
   public LinkedHashMap<String, String> fnGeStoreListAllForSO(int CoverageAreadID,int RouteID)
    {
        LinkedHashMap<java.lang.String, java.lang.String> hmapStoreLisMstr=new LinkedHashMap<java.lang.String, java.lang.String>();


        Cursor cursor=null;
        try {

            if(CoverageAreadID==0 && RouteID==0)
            {
                cursor = db.rawQuery("SELECT StoreID,StoreName,DateAdded,CoverageAreaID,RouteNodeID,StoreCategoryType,StoreSectionCount,flgApproveOrRejectOrNoActionOrReVisit,Sstat,flgOldNewStore,flgRemap,flgSelfStoreNode from tblPreAddedStores Where  Sstat<>4  ORDER BY DistanceNear", null);
            }
            else if(CoverageAreadID!=0 && RouteID!=0)
            {
                cursor = db.rawQuery("SELECT StoreID,StoreName,DateAdded,CoverageAreaID,RouteNodeID,StoreCategoryType,StoreSectionCount,flgApproveOrRejectOrNoActionOrReVisit,Sstat,flgOldNewStore,flgRemap,flgSelfStoreNode from tblPreAddedStores WHERE CoverageAreadID="+CoverageAreadID+" AND RouteID="+RouteID+" and Sstat<>4 ORDER BY DistanceNear", null);//
            }
            else if(CoverageAreadID!=0 && RouteID==0)
            {
                cursor = db.rawQuery("SELECT StoreID,StoreName,DateAdded,CoverageAreaID,RouteNodeID,StoreCategoryType,StoreSectionCount,flgApproveOrRejectOrNoActionOrReVisit,Sstat,flgOldNewStore,flgRemap,flgSelfStoreNode from tblPreAddedStores WHERE CoverageAreadID="+CoverageAreadID+" AND Sstat<>4 ORDER BY DistanceNear", null);//
            }
            else if(CoverageAreadID==0 && RouteID!=0)
            {
                cursor = db.rawQuery("SELECT StoreID,StoreName,DateAdded,CoverageAreaID,RouteNodeID,StoreCategoryType,StoreSectionCount,flgApproveOrRejectOrNoActionOrReVisit,Sstat,flgOldNewStore,flgRemap,flgSelfStoreNode from tblPreAddedStores WHERE RouteID="+RouteID+" AND Sstat<>4 ORDER BY DistanceNear", null);//
            }

            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapStoreLisMstr.put((java.lang.String) cursor.getString(0).toString(),(java.lang.String) cursor.getString(1).toString()+"^"+(java.lang.String) cursor.getString(2).toString()+"^"+(java.lang.String) cursor.getString(3).toString()+"^"+(java.lang.String) cursor.getString(4).toString()+"^"+(java.lang.String) cursor.getString(5).toString()+"^"+(java.lang.String) cursor.getString(6).toString()+"^"+(java.lang.String) cursor.getString(7).toString()+"^"+(java.lang.String) cursor.getString(8).toString()+"^"+(java.lang.String) cursor.getString(9).toString()+"^"+(java.lang.String) cursor.getString(10).toString()+"^"+(java.lang.String) cursor.getString(11).toString());
                        cursor.moveToNext();
                    }
                }
            }

        }
        catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= "+e.toString());
        }
        finally
        {

if(cursor!=null)
    cursor.close();

        }
        return hmapStoreLisMstr;
    }
    public LinkedHashMap<String, String> fnGeStoreListSM(int DistanceRange) {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();

        try {

            // Cursor cursor = db.rawQuery("SELECT OutletID,OutletDescr,BeatName,RetailerNo,ifnull(OutletNew,0),Sstat from tblOutletMstr", null);

            // Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear,flgReMap from tblPreAddedStores WHERE (LatCode<>'0' AND LatCode<>'NA') ORDER BY DistanceNear", null);//
            Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear,flgReMap from tblPreAddedStores ORDER BY DistanceNear", null);//

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        String StoreLat = "0.00";
                        String StoreLon = "0.00";
                        if (!cursor.getString(2).toString().equals("NA")) {
                            StoreLat = (String) cursor.getString(2).toString();
                            StoreLon = (String) cursor.getString(3).toString();
                        }

                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString() + "^" + StoreLat + "^" + StoreLon + "^" + (String) cursor.getString(4).toString() + "^" + (String) cursor.getString(6).toString());

                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            // System.out.println("Error fnGettblUOMMstr= "+e.toString());
        } finally {

            // close();
            fnGeNewlyAddedStoreList(hmapQuestionMstr);
            return hmapQuestionMstr;
        }
    }

    public int fncheckCountNearByStoreExistsOrNotSM(int DistanceRange) {
        int flgCheck = 0;
        //open();

        try {

            // Cursor cursor = db.rawQuery("SELECT Count(*) from tblPreAddedStores WHERE (LatCode<>'0' AND LatCode<>'NA')    ORDER BY DistanceNear ASC", null);//
            Cursor cursor = db.rawQuery("SELECT Count(*) from tblPreAddedStores  ORDER BY DistanceNear ASC", null);//

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        flgCheck = 1;
                    }
                }
            }

        } catch (Exception e) {
            System.out.println("Error fnGettblUOMMstr= " + e.toString());
        } finally {

            // close();
            if (flgCheck == 0) {
                flgCheck = fncheckCountNewAddedNearByStoreExistsOrNot(flgCheck);
            }
            return flgCheck;
        }
    }

    public void UpdateStoreDistanceNearSM(String OutletID, int DistanceNear) {
        try {

            final ContentValues values = new ContentValues();
            values.put("DistanceNear", DistanceNear);
            int affected = db.update("tblPreAddedStores", values, "StoreID=?", new String[]{OutletID});
        } catch (Exception e) {

        } finally {

        }

    }

    public void delete_all_storeDetailTables() {
        db.execSQL("DELETE FROM tblUserName");
        db.execSQL("DELETE FROM tblStoreCountDetails");
        db.execSQL("DELETE FROM tblPreAddedStores");
        db.execSQL("DELETE FROM tblPreAddedStoresDataDetails");

        db.execSQL("DELETE FROM tblStoreImageList");
        // db.execSQL("DELETE FROM tblLocationDetails");
    }
    public LinkedHashMap<String, String> fnGetImagesAgainstStoreForSOView(String StoreID)
    {

        Cursor cursor=db.rawQuery("Select StoreImagename,ImageType from tblStoreImageList where StoreID='"+StoreID+"'",null);
        LinkedHashMap<String, String> hmapStoresDSRImageList= new LinkedHashMap<>();
        if(cursor.getCount()>0)
        {
            if(cursor.moveToFirst())
            {
                for(int index=0;index<cursor.getCount();index++)
                {
                    hmapStoresDSRImageList.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }

        return hmapStoresDSRImageList;
    }
    public long saveTblUserName(String UserName) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("UserName", UserName);

        return db.insert(DBHelper.DATABASE_TABLE_tblUserName, null, initialValues);
    }

    public long saveTblStoreCountDetails(String TotStoreAdded, String TodayStoreAdded) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("TotStoreAdded", Integer.parseInt(TotStoreAdded.toString().trim()));
        initialValues.put("TodayStoreAdded", Integer.parseInt(TodayStoreAdded.toString().trim()));

        return db.insert(DBHelper.DATABASE_TABLE_tblStoreCountDetails, null, initialValues);
    }

    public LinkedHashMap<String, String> fnCompleteRouteList() {
        LinkedHashMap<String, String> hmapRouteMstr = new LinkedHashMap<String, String>();
        //open();

        try {

            Cursor cursor = db.rawQuery("SELECT RouteNodeID,Route from tblRoutelist ", null);//

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        if (i == 0) {
                            hmapRouteMstr.put("All", "0");
                        }

                        hmapRouteMstr.put((String) cursor.getString(1).toString(), (String) cursor.getString(0).toString());

                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            // System.out.println("Error fnGettblUOMMstr= "+e.toString());
        } finally {

            //close();

            return hmapRouteMstr;
        }
    }

    public String getUsername() {
        String userName = "0" + "^" + "0";

        //open();
        try {
            Cursor cur = db.rawQuery("Select UserName from tblUserName", null);

            if (cur.getCount() > 0) {
                StringBuilder sBuilder = new StringBuilder();
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        userName = cur.getString(0);
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            // TODO: handle exception
        } finally {
            //close();
            return userName;
        }
    }

    public LinkedHashMap<String, String> fnGeStoreListAgainstRoute(int RouteID) {
        LinkedHashMap<String, String> hmapQuestionMstr = new LinkedHashMap<String, String>();
        //open();

        try {

            Cursor cursor = db.rawQuery("SELECT StoreID,StoreName,LatCode,LongCode,DateAdded,DistanceNear,flgReMap from tblPreAddedStores where RouteID=" + RouteID, null);//

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        String StoreLat = "0.00";
                        String StoreLon = "0.00";
                        if (!cursor.getString(2).toString().equals("NA")) {
                            StoreLat = (String) cursor.getString(2).toString();
                            StoreLon = (String) cursor.getString(3).toString();
                        }

                        hmapQuestionMstr.put((String) cursor.getString(0).toString(), (String) cursor.getString(1).toString() + "^" + StoreLat + "^" + StoreLon + "^" + (String) cursor.getString(4).toString() + "^" + (String) cursor.getString(6).toString());

                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            // System.out.println("Error fnGettblUOMMstr= "+e.toString());
        } finally {

            // close();
            fnGeNewlyAddedStoreList(hmapQuestionMstr);
            return hmapQuestionMstr;
        }
    }

    public LinkedHashMap<String, String> fnGetHampGetLastProductExecution(String StoreID) {
        LinkedHashMap<String, String> hampGetLastProductExecution = new LinkedHashMap<String, String>();
        //open();
        Cursor cursor = db.rawQuery("SELECT tblProductListMaster.ProductID,ifnull(tblPDAGetLastVisitDetails.ExecutionQty,0) FROM tblProductListMaster left outer join tblPDAGetLastVisitDetails  WHERE tblPDAGetLastVisitDetails.StoreID ='" + StoreID + "'", null);

        try {


            if (cursor.getCount() > 0) {

                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hampGetLastProductExecution.put(cursor.getString(0).toString(), cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return hampGetLastProductExecution;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }

    }

    public ArrayList<HashMap<String, String>> getDayStartSuplierOtherData() {
        ArrayList<HashMap<String, String>> arrDiatributorOtherDetails = new ArrayList<HashMap<String, String>>();
        HashMap<String, String> hmapCurrentDistributorNodeIdType = new HashMap<String, String>();
        HashMap<String, String> hmapDistflgPerviousLocation = new HashMap<String, String>();
        HashMap<String, String> hmapDistLatLocation = new HashMap<String, String>();
        HashMap<String, String> hmapDistLongLocation = new HashMap<String, String>();
        Cursor cursor2 = null;
        //open();
        try {
            cursor2 = db.rawQuery("SELECT *  FROM tblSupplierMstrList Where flgDefault=1", null);
            String strStoreTypeNamesDetais[] = null;// new String[cursor2.getCount()];
            if (cursor2.getCount() > 0) {
                strStoreTypeNamesDetais = new String[cursor2.getCount() + 1];
                if (cursor2.moveToFirst()) {
                    for (int i = 0; i < cursor2.getCount(); i++) {
                        hmapCurrentDistributorNodeIdType.put("CurrentDistribuotrNodeIdType", cursor2.getString(0).toString() + "^" + cursor2.getString(1));
                        hmapDistflgPerviousLocation.put(cursor2.getString(0).toString() + "^" + cursor2.getString(1), cursor2.getString(5));
                        hmapDistLatLocation.put(cursor2.getString(0).toString() + "^" + cursor2.getString(1), cursor2.getString(3));
                        hmapDistLongLocation.put(cursor2.getString(0).toString() + "^" + cursor2.getString(1), cursor2.getString(4));
                        //strStoreTypeNamesDetais[i+1] = cursor2.getString(0).toString()+"^"+cursor2.getString(1)+"^"+cursor2.getString(2);
                        cursor2.moveToNext();
                    }
                }
                arrDiatributorOtherDetails.add(hmapCurrentDistributorNodeIdType);
                arrDiatributorOtherDetails.add(hmapDistflgPerviousLocation);
                arrDiatributorOtherDetails.add(hmapDistLatLocation);
                arrDiatributorOtherDetails.add(hmapDistLongLocation);
            } else {
                strStoreTypeNamesDetais = new String[1];
                strStoreTypeNamesDetais[0] = "0^0^Select Distributor";

            }
            return arrDiatributorOtherDetails;
        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
            // close();
        }
    }

    public void UpdateStoreReturnphotoFlagSM(String StoreID, String StoreName, int flgReMap) {
        try {
            //
            final ContentValues values = new ContentValues();
            values.put("StoreName", StoreName);
            values.put("flgReMap", flgReMap);


            int affected16 = db.update("tblPreAddedStores", values, "StoreID=?", new String[]{StoreID});
        } catch (Exception ex) {

        }
    }

    public Double fnTotCollectionAmtAgainstStoreIrespectiveOfVisit(String StoreID) {
        //open();
        Double TotCollectionAmt = 0.0;
        try {

            Cursor cursor = db.rawQuery("SELECT  IFNULL(SUM(Amount),0.0) from tblAllCollectionData  where tblAllCollectionData.StoreID='" + StoreID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    TotCollectionAmt = Double.parseDouble(cursor.getString(0).toString());
                }
            }
        } catch (Exception e) {

        } finally {
            if (cursor != null) {
                cursor.close();
                ;
            }
            //close();
            // return flag;
        }
        return TotCollectionAmt;
    }

    public Double fnTotInvoicesAmtAgainstStoreIrespectiveOfVisit(String StoreID) {
        //open();
        Double TotCollectionAmt = 0.0;
        try {

            Cursor cursor = db.rawQuery("SELECT  IFNULL(SUM(InvoiceVal),0.0) from tblInvoiceHeader where tblInvoiceHeader.StoreID = '" + StoreID + "'", null);

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    TotCollectionAmt = Double.parseDouble(cursor.getString(0).toString());
                }
            }
        } catch (Exception e) {

        } finally {
            if (cursor != null) {
                cursor.close();
                ;
            }
            //close();
            // return flag;
        }
        return TotCollectionAmt;
    }

    public Double fetch_Store_AllOustandings(String StoreID) {
//tv_GrossInvVal
        //open();
        Double TotCollectionAmt = 0.0;

        Cursor cursor = db.rawQuery("SELECT ifnull(SUM(tblInvoiceLastVisitDetails.OutstandingAmt),'0.0') from tblInvoiceLastVisitDetails WHERE tblInvoiceLastVisitDetails.StoreID='" + StoreID + "'", null); //order by AutoIdOutlet Desc
        String InvoiceLastVisitDetails[] = new String[cursor.getCount()];
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        TotCollectionAmt = Double.parseDouble(cursor.getString(0).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return TotCollectionAmt;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }
    }

    public void insertStoreCheckInPic(String storeId, LinkedHashMap<String, String> hmapPicData) {
        //open();
        db.beginTransaction();

        ContentValues value = new ContentValues();
        for (Entry<String, String> entry : hmapPicData.entrySet()) {
            value.put("StoreID", storeId);
            value.put("imageName", entry.getKey());
            value.put("picClkdPath", entry.getValue().split(Pattern.quote("^"))[0]);
            value.put("clkdDateTime", entry.getValue().split(Pattern.quote("^"))[1]);
            value.put("Sstat", 1);
            value.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
            value.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

            db.insert(DBHelper.DATABASE_TABLE_tblStoreCheckInPic, null, value);

        }

        db.setTransactionSuccessful();
        db.endTransaction();
        //close();
    }

    public void validateStoreCheckIn(String StoreID, String imgName) {
        //open();
        try {
            Cursor cur = db.rawQuery("Select imageName from tblStoreCheckInPic where StoreID='" + StoreID + "' and imageName='" + imgName + "'", null);

            if (cur.getCount() > 0) {
                db.delete(DBHelper.DATABASE_TABLE_tblStoreCheckInPic, "StoreID=? and imageName=?",
                        new String[]{StoreID, imgName});
            }
        } catch (SQLiteException ex) {
            System.out.println("validate pic..." + ex);
        } finally {
            // close();
        }
    }

    public ArrayList<String> getImageNameForStoreCheckIn(String StoreID) {
        //open();
        ArrayList<String> list = new ArrayList<>();
        try {

            Cursor cur = db.rawQuery("Select imageName from tblStoreCheckInPic where StoreID='" + StoreID + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        list.add(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error tblCategoryPhotoDetails = " + e.toString());
        } finally {
            // close();
            return list;
        }

    }

    public Double fnGetStoreVisitSelfCreditNote(String StoreID, String StoreVisitCode) {

        Double valSelfCreditNote = 0.0;
        //open();
        Cursor cursor2 = db.rawQuery("SELECT ifnull(SelfCreditNote,0.0) FROM tblStoreVisitMstr Where StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);
        try {
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    valSelfCreditNote = Double.parseDouble(cursor2.getString(0));
                }
            }

        } catch (Exception ex) {

        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
            //close();
        }
        return valSelfCreditNote;
    }

    public void UpdateStoreVisitSelfCreditNote(String StoreID, String StoreVisitCode, Double SelfCreditNote) {
        //open();
        final ContentValues values = new ContentValues();
        values.put("SelfCreditNote", SelfCreditNote);
        int affected = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?", new String[]{StoreID, StoreVisitCode});
        //close();
    }

    public long saveWarehouseMstrData(int NodeID, int NodeType, String Descr, String latCode,
                                      String LongCode, int flgMapped, String Address, String State, String City, String PinCode, String PhoneNo, String TaxNumber) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("NodeID", NodeID);
        initialValues.put("NodeType", NodeType);
        initialValues.put("Descr", Descr.trim());
        initialValues.put("latCode", latCode.trim());
        initialValues.put("LongCode", LongCode.trim());
        initialValues.put("flgMapped", flgMapped);   //0=Not To be mapped Again,1=Can Map Distributor
        initialValues.put("Address", Address.trim());
        initialValues.put("State", State.trim());
        initialValues.put("City", City.trim());
        initialValues.put("PinCode", PinCode.trim());
        initialValues.put("PhoneNo", PhoneNo.trim());
        initialValues.put("TaxNumber", TaxNumber.trim());

        return db.insert(DBHelper.TABLE_tblWarehouseMstr, null, initialValues);
    }

    public void Delete_tblWarehouseMstr() {
        db.execSQL("DELETE FROM tblWarehouseMstr");
    }

    public void Delete_tblAppMasterFlags() {
        db.execSQL("DELETE FROM tblAppMasterFlags");
    }

    public ArrayList<LinkedHashMap<String, ArrayList<String>>> fnFetch_InvoiceReportForPrint(String VisitCode, String StoreID, int WarehouseNodeID, int WarehouseNodeType) {

        ArrayList<LinkedHashMap<String, ArrayList<String>>> arrResult = new ArrayList<LinkedHashMap<String, ArrayList<String>>>();

        //--------------Ware House Details Starts Here--------------------------------
        LinkedHashMap<String, ArrayList<String>> hmapWareHouseDetails = new LinkedHashMap<String, ArrayList<String>>();
        ArrayList<String> arrWareHouseDetails = new ArrayList<String>();
        arrWareHouseDetails = fnGetWarehouseDataForPrint(VisitCode, StoreID, WarehouseNodeID, WarehouseNodeType);
        hmapWareHouseDetails.put("WarehouseDetails", arrWareHouseDetails);

        //--------------Ware House Details Ends Here--------------------------------
        //--------------Store  Details Starts Here--------------------------------

        LinkedHashMap<String, ArrayList<String>> hmapStoreBasicDetails = fnGetStoreDetailsDataForPrint(VisitCode, StoreID);

        //--------------Store Details Ends Here--------------------------------

        //--------------Store Invoice  Details Starts Here--------------------------------

        LinkedHashMap<String, ArrayList<String>> hmapInvoiceRecodsToPrint = fnGetInvoiceListForPrint(VisitCode, StoreID);

        //--------------Store Invoice Details Ends Here--------------------------------

        //--------------Store Invoice  Before Tax And After Tax Starts Here--------------------------------

        LinkedHashMap<String, ArrayList<String>> hmapTotalBfrAftrTaxVal = fnGetTotalBfrAftrTaxVal(StoreID, VisitCode);

        //--------------Store Invoice Before Tax And After Tax Ends Here--------------------------------

        //--------------Store Invoice  Tax wise Product Details Starts Here--------------------------------

        LinkedHashMap<String, ArrayList<String>> hmapTaxWisePrdctDtlt = fnGetTaxWisePrdctDtl(StoreID, VisitCode);

        //--------------Store Invoice Tax wise Product Details  Ends Here--------------------------------

        //--------------Store Invoice  Tax wise Product Details Starts Here--------------------------------

        LinkedHashMap<String, ArrayList<String>> hmapOverAllProductOrderQtyValue = fnGetOverAllProductOrderQtyValue(StoreID, VisitCode);

        //--------------Store Invoice Tax wise Product Details  Ends Here--------------------------------

        arrResult.add(hmapWareHouseDetails);
        arrResult.add(hmapStoreBasicDetails);
        arrResult.add(hmapInvoiceRecodsToPrint);
        arrResult.add(hmapTotalBfrAftrTaxVal);
        arrResult.add(hmapTaxWisePrdctDtlt);
        arrResult.add(hmapOverAllProductOrderQtyValue);
        return arrResult;
    }

    public ArrayList<String> fnGetWarehouseDataForPrint(String VisitCode, String StoreID, int WarehouseNodeID, int WarehouseNodeType) {
        ArrayList<String> arrWareHouseDetails = new ArrayList<String>();
        try {
            Cursor cursor2 = db.rawQuery("SELECT Descr,ifnull(State,'') AS State,ifnull(Address,'') AS Address,ifnull(City,'') AS City,ifnull(PinCode,'') AS PinCode,ifnull(PhoneNo,'NA') AS PhoneNo,ifnull(TaxNumber,'Not Registered') AS TaxNumber FROM tblWarehouseMstr Where NodeID=" + WarehouseNodeID + " and NodeType=" + WarehouseNodeType, null);

            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    arrWareHouseDetails.add(cursor2.getString(0));
                    arrWareHouseDetails.add(cursor2.getString(1));
                    arrWareHouseDetails.add(cursor2.getString(2));
                    arrWareHouseDetails.add(cursor2.getString(3));
                    arrWareHouseDetails.add(cursor2.getString(4));
                    arrWareHouseDetails.add(cursor2.getString(5));
                    arrWareHouseDetails.add(cursor2.getString(6));
                    int IsCompositeStatus = fnGetStoreIsCompositeStatus(StoreID);
                    if (IsCompositeStatus == 0) {
                        arrWareHouseDetails.add("No");
                    }
                    if (IsCompositeStatus == 1) {
                        arrWareHouseDetails.add("Yes");
                    }

                }
            } else {
                arrWareHouseDetails.add("Not Available");
                arrWareHouseDetails.add("Not Available");
                arrWareHouseDetails.add("Not Available");
                arrWareHouseDetails.add("Not Available");
                arrWareHouseDetails.add("Not Available");
                arrWareHouseDetails.add("Not Available");
                arrWareHouseDetails.add("Not Available");
                int IsCompositeStatus = 0;
                if (IsCompositeStatus == 0) {
                    arrWareHouseDetails.add("No");
                }
                if (IsCompositeStatus == 1) {
                    arrWareHouseDetails.add("Yes");
                }
            }
            return arrWareHouseDetails;
        } finally {

        }
    }

    public int fnGetStoreIsCompositeStatus(String StoreID) {
        int IsCompositeStatus = 0;
        try {
            Cursor cursor2 = db.rawQuery("SELECT ifnull(IsComposite,0) AS IsComposite FROM tblStoreList Where StoreID='" + StoreID + "'", null);

            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    IsCompositeStatus = Integer.parseInt(cursor2.getString(0));
                }
            }
            return IsCompositeStatus;
        } finally {

        }
    }

    public long savetblStoreLastDeliveryNoteNumber(int LastDeliveryNoteNumber) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("LastDeliveryNoteNumber", LastDeliveryNoteNumber);
        return db.insert(DBHelper.TABLE_tblStoreLastDeliveryNoteNumber, null, initialValues);
    }

    public void fnupdatetblStoreLastDeliveryNoteNumber() {
        int valExistingDeliveryNoteNumber = 0;
        valExistingDeliveryNoteNumber = fnGettblStoreLastDeliveryNoteNumber();
        db.execSQL("UPDATE tblStoreLastDeliveryNoteNumber SET LastDeliveryNoteNumber=" + (valExistingDeliveryNoteNumber + 1) + "");
        fnWriteTextFile(valExistingDeliveryNoteNumber + 1);

    }

    public void Delete_tblStoreLastDeliveryNoteNumber() {
        db.execSQL("DELETE FROM tblStoreLastDeliveryNoteNumber");
    }

    public int fnGettblStoreLastDeliveryNoteNumber() {
        int valExistingDeliveryNoteNumber = 0;
        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT LastDeliveryNoteNumber FROM tblStoreLastDeliveryNoteNumber", null);

            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    valExistingDeliveryNoteNumber = Integer.parseInt(cursor2.getString(0));
                }
            }
            return valExistingDeliveryNoteNumber;
        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
        }
    }

    public LinkedHashMap<String, ArrayList<String>> fnGetStoreDetailsDataForPrint(String StoreVisitCode, String StoreID) {
        LinkedHashMap<String, ArrayList<String>> hmapStoreBasicDetails = new LinkedHashMap<String, ArrayList<String>>();

        Cursor cursor2 = null;
        ArrayList<String> arrStoreDetails = new ArrayList<String>();
        try {
            cursor2 = db.rawQuery("SELECT StoreName,ifnull(StoreAddress,'') AS StoreAddress,ifnull(StoreState,'') AS StoreState,ifnull(StoreCity,'') AS StoreCity,ifnull(StorePinCode,'') AS StorePinCode,ifnull(StoreContactNo,'') AS StoreContactNo,ifnull(GSTNumber,'Not Registered') AS GSTNumber FROM tblStoreList Where StoreID='" + StoreID + "'", null);
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {

                    arrStoreDetails.add(cursor2.getString(0));
                    arrStoreDetails.add(cursor2.getString(1));
                    arrStoreDetails.add(cursor2.getString(2));
                    arrStoreDetails.add(cursor2.getString(3));
                    arrStoreDetails.add(cursor2.getString(4));
                    arrStoreDetails.add(cursor2.getString(5));
                    if (cursor2.getString(6).toString().equals("NA") || cursor2.getString(6).toString().equals("0")) {
                        arrStoreDetails.add("Not Registered");
                    } else {
                        arrStoreDetails.add(cursor2.getString(6));
                    }
                }
            }
            hmapStoreBasicDetails.put("StoreDetails", arrStoreDetails);
            return hmapStoreBasicDetails;
        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
        }
    }

    public LinkedHashMap<String, ArrayList<String>> fnGetInvoiceListForPrint(String StoreVisitCode, String StoreID) {
        LinkedHashMap<String, ArrayList<String>> hmapInvoiceRecodsToPrint = new LinkedHashMap<String, ArrayList<String>>();

        Cursor cursor21 = null;
        try {
            cursor21 = db.rawQuery("SELECT tblInvoiceDetails.ProdID,ifnull(tblProductListMaster.HSNCode,'') AS HSNCode,ifnull(tblInvoiceDetails.ProductShortName,'NA') AS ProductShortName,ifnull(tblInvoiceDetails.ProductPrice,'0') AS ProductPrice,ifnull(tblProductSegementMap.VatTax,'0') AS VatTax,ifnull(tblInvoiceDetails.OrderQty,'0') AS OrderQty,ifnull(tblInvoiceDetails.LineValAftrTxAftrDscnt,'0') AS OrdValue FROM tblInvoiceDetails inner join tblProductSegementMap on tblInvoiceDetails.ProdID=tblProductSegementMap.ProductID inner join tblProductListMaster on tblProductListMaster.ProductID=tblInvoiceDetails.ProdID inner join tblInvoiceHeader on tblInvoiceHeader.InvoiceNumber=tblInvoiceDetails.InvoiceNumber Where tblInvoiceHeader.StoreID='" + StoreID + "' AND tblInvoiceHeader.StoreVisitCode='" + StoreVisitCode + "' AND tblInvoiceDetails.OrderQty>0", null);
            if (cursor21.getCount() > 0) {
                if (cursor21.moveToFirst()) {
                    for (int i = 0; i < cursor21.getCount(); i++) {
                        ArrayList<String> arrProductInvoiceDetailsForPrint = new ArrayList<String>();
                        arrProductInvoiceDetailsForPrint.add(cursor21.getString(1));
                        arrProductInvoiceDetailsForPrint.add(cursor21.getString(2));
                        arrProductInvoiceDetailsForPrint.add(cursor21.getString(3));
                        arrProductInvoiceDetailsForPrint.add(cursor21.getString(4) + "%");
                        arrProductInvoiceDetailsForPrint.add(cursor21.getString(5));
                        arrProductInvoiceDetailsForPrint.add(cursor21.getString(6));
                        hmapInvoiceRecodsToPrint.put(cursor21.getString(0).toString().trim(), arrProductInvoiceDetailsForPrint);
                        cursor21.moveToNext();
                    }
                }
            }

            return hmapInvoiceRecodsToPrint;
        } finally {
            if (cursor21 != null) {
                cursor21.close();
            }
        }
    }

    public LinkedHashMap<String, ArrayList<String>> fnGetTotalBfrAftrTaxVal(String StoreID, String storeVisitCode) {
        LinkedHashMap<String, ArrayList<String>> hmapTotalBfrAftrTaxVal = new LinkedHashMap<String, ArrayList<String>>();
        // ArrayList<String> arrTaxWisePrdctDtlt=new ArrayList<String>();
        Cursor cursor21 = null;
        try {
            cursor21 = db.rawQuery("Select tblInvoiceHeader.TotalBeforeTaxDis,tblInvoiceHeader.InvoiceVal from tblInvoiceHeader where tblInvoiceHeader.StoreID='" + StoreID + "' AND tblInvoiceHeader.StoreVisitCode='" + storeVisitCode + "'"
                    , null);
            if (cursor21.getCount() > 0) {
                if (cursor21.moveToFirst()) {

                    // arrTaxWisePrdctDtlt.add(cursor21.getString(0));
                    ArrayList<String> arrTaxWisePrdctDtlt = new ArrayList<String>();
                    arrTaxWisePrdctDtlt.add(cursor21.getString(0));
                    arrTaxWisePrdctDtlt.add(cursor21.getString(1));

                    Double cntInVal = Double.parseDouble(cursor21.getString(1));
                    cntInVal = Double.parseDouble(new DecimalFormat("##.##").format(cntInVal));

                    int roundAmt = round(cntInVal);
                    Double cntroundAmt = Double.parseDouble("" + roundAmt);

                    Double roundOfVal = 0.00;
                    if (cntInVal > cntroundAmt) {
                        roundOfVal = cntInVal - cntroundAmt;
                    }
                    if (cntInVal < cntroundAmt) {
                        roundOfVal = cntroundAmt - cntInVal;
                    }
                    roundOfVal = Double.parseDouble(new DecimalFormat("##.##").format(roundOfVal));
                    arrTaxWisePrdctDtlt.add("" + roundOfVal);

                    arrTaxWisePrdctDtlt.add("" + cntroundAmt);
                    hmapTotalBfrAftrTaxVal.put("TotalInvoiceBeforeAfterTax", arrTaxWisePrdctDtlt);

                }
            }

            return hmapTotalBfrAftrTaxVal;
        } finally {
            if (cursor21 != null) {
                cursor21.close();
            }
        }
    }

    public LinkedHashMap<String, ArrayList<String>> fnGetTaxWisePrdctDtl(String StoreID, String StoreVisitCode) {
        LinkedHashMap<String, ArrayList<String>> hmapTaxWisePrdctDtlt = new LinkedHashMap<String, ArrayList<String>>();
        // ArrayList<String> arrTaxWisePrdctDtlt=new ArrayList<String>();
        Cursor cursor21 = null;
        try {
            cursor21 = db.rawQuery("Select DISTINCT tblProductSegementMap.VatTax,CASE WHEN ifnull(Sum(tblInvoiceDetails.LineValAftrTxAftrDscnt-tblInvoiceDetails.LineValBfrTxAftrDscnt),'0.0')=0 THEN '0.0' ELSE ifnull(Sum(tblInvoiceDetails.LineValAftrTxAftrDscnt-tblInvoiceDetails.LineValBfrTxAftrDscnt),'0.0') END AS TaxAmtPercent from tblProductSegementMap inner join tblInvoiceDetails On tblProductSegementMap.ProductID=tblInvoiceDetails.ProdID inner join tblInvoiceHeader on tblInvoiceHeader.InvoiceNumber=tblInvoiceDetails.InvoiceNumber where tblInvoiceDetails.StoreID='" + StoreID + "' AND tblInvoiceHeader.StoreVisitCode='" + StoreVisitCode + "' AND tblInvoiceDetails.OrderQty>0 group by tblProductSegementMap.VatTax Order by tblProductSegementMap.VatTax ASC", null);
            if (cursor21.getCount() > 0) {
                if (cursor21.moveToFirst()) {
                    for (int i = 0; i < cursor21.getCount(); i++) {
                        // arrTaxWisePrdctDtlt.add(cursor21.getString(0));
                        ArrayList arrTaxWisePrdctDtlt = new ArrayList<String>();
                        Double TaxSum = Double.parseDouble(cursor21.getString(1).toString());

                        if (TaxSum > 0.0) {
                            TaxSum = TaxSum / 2.0;
                        }

                        TaxSum = Double.parseDouble(new DecimalFormat("##.##").format(TaxSum));
                        arrTaxWisePrdctDtlt.add("" + TaxSum);

                        Double TaxRateToShow = Double.parseDouble(cursor21.getString(0).toString());

                        if (TaxRateToShow > 0.0) {
                            TaxRateToShow = TaxRateToShow / 2.0;
                        }
                        TaxRateToShow = Double.parseDouble(new DecimalFormat("##.##").format(TaxRateToShow));

                        hmapTaxWisePrdctDtlt.put("CGST " + TaxRateToShow + "%", arrTaxWisePrdctDtlt);
                        hmapTaxWisePrdctDtlt.put("SGST " + TaxRateToShow + "%", arrTaxWisePrdctDtlt);
                        cursor21.moveToNext();
                    }
                }
            }

            return hmapTaxWisePrdctDtlt;
        } finally {
            if (cursor21 != null) {
                cursor21.close();
            }
        }
    }

    public Double fnCollectionDetailsToPrint(String StoreID, String StoreVisitCode) {
        Double valCollectionDetailsToPrint = 0.0;
        // ArrayList<String> arrTaxWisePrdctDtlt=new ArrayList<String>();
        Cursor cursor21 = null;
        try {

            cursor21 = db.rawQuery("Select DISTINCT ifnull(Sum(tblAllCollectionData.Amount),'0.0') As Amount from tblAllCollectionData where tblAllCollectionData.StoreID='" + StoreID + "' AND tblAllCollectionData.StoreVisitCode='" + StoreVisitCode + "'", null);
            if (cursor21.getCount() > 0) {
                if (cursor21.moveToFirst()) {
                    valCollectionDetailsToPrint = Double.parseDouble(cursor21.getString(0).toString().trim());
                    cursor21.moveToNext();
                }
            }

            return valCollectionDetailsToPrint;
        } finally {
            if (cursor21 != null) {
                cursor21.close();
            }
        }
    }

    public ArrayList<String> fnFetch_tblWarehouseMstr() {
        ArrayList<String> arrResult = new ArrayList<String>();


        //  Cursor cursor = db.rawQuery("SELECT NodeID ,NodeType from tblWarehouseMstr", null); //order by AutoIdOutlet Desc
        try {
            Cursor cursor = db.rawQuery("SELECT NodeID,NodeType from tblWarehouseMstr", null); //order by AutoIdOutlet Desc
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        arrResult.add(0, cursor.getString(0));
                        arrResult.add(1, cursor.getString(1));
                        // cursor.moveToNext();
                    }

                }
            }


        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            return arrResult;

        }
    }

    public String fnFetch_StoreGST_Number(String StoreID) {

        String gstNo = "0";


        //  Cursor cursor = db.rawQuery("SELECT NodeID ,NodeType from tblWarehouseMstr", null); //order by AutoIdOutlet Desc
        try {
            Cursor cursor = db.rawQuery("SELECT StoreID from tblStoreList", null); //order by AutoIdOutlet Desc
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        gstNo = cursor.getString(0);
                        // cursor.moveToNext();
                    }

                }
            }


        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            return gstNo;

        }
    }

    public LinkedHashMap<String, ArrayList<String>> fnGetOverAllProductOrderQtyValue(String StoreID, String StoreVisitCode) {
        LinkedHashMap<String, ArrayList<String>> hmapOverAllProductOrderQtyValue = new LinkedHashMap<String, ArrayList<String>>();
        // ArrayList<String> arrTaxWisePrdctDtlt=new ArrayList<String>();
        Cursor cursor21 = null;
        try {
            cursor21 = db.rawQuery("Select ifnull(Sum(tblInvoiceDetails.OrderQty),'0') AS OrderQtyCount,ifnull(Sum(tblInvoiceDetails.LineValAftrTxAftrDscnt),'0.00') AS LineValAftrTxAftrDscntValue from tblInvoiceDetails inner join tblInvoiceHeader on tblInvoiceDetails.InvoiceNumber=tblInvoiceHeader.InvoiceNumber where tblInvoiceDetails.StoreID='" + StoreID + "' AND tblInvoiceHeader.StoreVisitCode='" + StoreVisitCode + "' AND tblInvoiceDetails.OrderQty>0", null);
            if (cursor21.getCount() > 0) {
                if (cursor21.moveToFirst()) {
                    ArrayList arrOverAllProductOrderQtyValue = new ArrayList<String>();
                   /* Double AllProductOrderQty=Double.parseDouble(cursor21.getString(0).toString());
                    AllProductOrderQty=Double.parseDouble(new DecimalFormat("##.##").format(AllProductOrderQty));*/
                    arrOverAllProductOrderQtyValue.add(cursor21.getString(0).toString());

                    Double AllProductOrderValue = Double.parseDouble(cursor21.getString(1).toString());
                    // AllProductOrderValue=Double.parseDouble(new DecimalFormat("##.##").format(AllProductOrderValue));
                    arrOverAllProductOrderQtyValue.add("" + String.format("%.2f", AllProductOrderValue));

                    hmapOverAllProductOrderQtyValue.put("OverAllProductOrderQtyValue", arrOverAllProductOrderQtyValue);
                }
            }
            return hmapOverAllProductOrderQtyValue;
        } finally {
            if (cursor21 != null) {
                cursor21.close();
            }
        }
    }

    public String fnGetExistingInvoiceNumberAgainstInvoiceNumebr(String StoreID, String StoreVisitCode) {
        //open();
        LinkedHashMap<String, String> hmapInvoiceCaptionPrefixAndSuffix = fetch_InvoiceCaptionPrefixAndSuffix();
        Cursor cursorE2 = db.rawQuery("SELECT InvoiceNumber FROM tblInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);
        String InvoiceNumber = "0";
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    InvoiceNumber = hmapInvoiceCaptionPrefixAndSuffix.get("INVPrefix") + "-" + cursorE2.getString(0).toString() + "/" + hmapInvoiceCaptionPrefixAndSuffix.get("INVSuffix");
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
            // close();
        }
        return InvoiceNumber;
    }

    public LinkedHashMap<String, String> fetch_Store_Req() {

        //open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();
//tblVanProductStock(PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null,SKUName text null,OpeningStock text null,TodaysAddedStock text null,CycleAddedStock text null,NetSalesQty text null,TodaysUnloadStk text null,CycleUnloadStk text null,CategoryID text null);";
        Cursor cursor = db.rawQuery("Select DISTINCT S.PrdctId,S.StockQntty-ifnull(D.OrderQty,0) AS StockAvailable from tblVanProductStock S left outer join (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.InvoiceNumber=I.InvoiceNumber  WHERE I.flgProcessedInvoice=0 GROUP BY ID.ProdID) D ON D.ProdID=S.PrdctId", null);

//Cursor cur=db.rawQuery("Select PrdctId,OriginalStock from tblVanProductStock where DistributorNodeIdNodeType='"+distId+"'",null);
        //  Cursor	cursor = db.rawQuery("SELECT Distinct ProductShortName,IFNULL(StockQntty,0),IFNULL(OriginalStock,0) from tblVanProductStock inner join tblProductListMaster on tblVanProductStock.PrdctId=tblProductListMaster.ProductID", null); //order by AutoIdOutlet Desc
//Cursor	cursor = db.rawQuery("SELECT tblStoreList.StoreID, tblStoreList.StoreName, IFNULL(tblTmpInvoiceHeader.InvoiceVal,0) FROM tblStoreList left outer join tblTmpInvoiceHeader on tblStoreList.StoreID=tblTmpInvoiceHeader.StoreID", null); //order by AutoIdOutlet Desc
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        //hmapCatgry.put(cursor.getString(0).toString(),cursor.getString(1).toString() + "( Order Value:-"+cursor.getString(2).toString()+")");
                        // hmapCatgry.put((i+1)+")  "+cursor.getString(0).toString(), "[Stock Left: "+cursor.getString(2).toString()+"]");//[Stock Loaded:->"+cursor.getString(1).toString()+ "]
                        hmapCatgry.put(cursor.getString(0), cursor.getString(1));//[Stock Loaded:->"+cursor.getString(1).toString()+ "]

                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Stock", "0");
            }
            return hmapCatgry;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }
    }

    public LinkedHashMap<String, String> fetch_Store_Req_Prdct() {

        //open();
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();

        Cursor cursor = db.rawQuery("Select tblProductListMaster.ProductID,tblProductListMaster.ProductShortName from tblProductListMaster inner join tblVanProductStock  on tblVanProductStock.PrdctId=tblProductListMaster.ProductID", null);

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        //hmapCatgry.put(cursor.getString(0).toString(),cursor.getString(1).toString() + "( Order Value:-"+cursor.getString(2).toString()+")");
                        // hmapCatgry.put((i+1)+")  "+cursor.getString(0).toString(), "[Stock Left: "+cursor.getString(2).toString()+"]");//[Stock Loaded:->"+cursor.getString(1).toString()+ "]
                        hmapCatgry.put(cursor.getString(0), cursor.getString(1));//[Stock Loaded:->"+cursor.getString(1).toString()+ "]

                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Stock", "0");
            }
            return hmapCatgry;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
        }
    }

    public void insertUOMMstr(int UOMId, String UOM, int flgBaseUnit) {

        ContentValues values = new ContentValues();
        values.put("UOMId", UOMId);
        values.put("UOM", UOM);
        values.put("flgBaseUnit", flgBaseUnit);
        db.insert(DBHelper.TABLE_tblUOMMstr, null, values);
    }

    public void insertUOMMapping(int nodeId, int nodeType, int BaseUnitID, int PackUnitId, Double BaseValue, int flgDefaultUOM) {

        ContentValues values = new ContentValues();
        values.put("NodeId", nodeId);
        values.put("NodeType", nodeType);
        values.put("BaseUnitID", BaseUnitID);
        values.put("PackUnitId", PackUnitId);
        values.put("BaseValue", BaseValue);
        values.put("flgDefaultUOM", flgDefaultUOM);

        db.insert(DBHelper.TABLE_tblUOMMapping, null, values);
    }

    public ArrayList<LinkedHashMap<String, String>> getUOMMstrForRqstStock() {
        // open();
        ArrayList<LinkedHashMap<String, String>> listUOMMstr = new ArrayList<LinkedHashMap<String, String>>();
        LinkedHashMap<String, String> hmapUOMMstrNameId = new LinkedHashMap<String, String>();
        LinkedHashMap<String, String> hmapUOMMstrIdName = new LinkedHashMap<String, String>();
        Cursor cur = null;

        try {
            cur = db.rawQuery("Select UOM,UOMId from tblUOMMaster", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapUOMMstrNameId.put(cur.getString(0).trim(), cur.getString(1));
                        hmapUOMMstrIdName.put(cur.getString(1).trim(), cur.getString(0));
                        cur.moveToNext();
                    }
                    listUOMMstr.add(hmapUOMMstrNameId);
                    listUOMMstr.add(hmapUOMMstrIdName);
                }
            }
        } catch (Exception e) {
            System.out.println("Error = " + e.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }
            // close();
        }
        return listUOMMstr;
    }

    public LinkedHashMap<String, String> getBaseUOMId() {
        // open();
        LinkedHashMap<String, String> hmapbaseUomId = new LinkedHashMap<String, String>();
        Cursor cur = null;

        try {
//         cur=db.rawQuery("Select NodeId||'^'||PackUnitId As prdId_packId,BaseValue from tblUOMMapping where BaseUnitID="+baseUOMID+"  Order by NodeId",null);
            cur = db.rawQuery("Select DISTINCT NodeId,BaseUnitID  from tblUOMMapping ", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapbaseUomId.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }


                }
            }
        } catch (Exception e) {
            System.out.println("Error = " + e.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }
            //  close();
        }
        return hmapbaseUomId;
    }

    public LinkedHashMap<String, String> getBaseUOMCalcValue() {
        // open();
        LinkedHashMap<String, String> hmapUOMMstrPrdtWise = new LinkedHashMap<String, String>();
        Cursor cur = null;

        try {
            cur = db.rawQuery("Select NodeId||'^'||PackUnitId As prdId_packId,BaseValue from tblUOMMapping  Order by NodeId", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {


                    for (int i = 0; i < cur.getCount(); i++) {

                        hmapUOMMstrPrdtWise.put(cur.getString(0), cur.getString(1));

                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error = " + e.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }

        }
        return hmapUOMMstrPrdtWise;
    }

    public LinkedHashMap<String, ArrayList<String>> getPrdctMpngWithUOM() {
        // open();
        LinkedHashMap<String, ArrayList<String>> hmapUOMMstrPrdtWise = new LinkedHashMap<String, ArrayList<String>>();
        Cursor cur = null;

        try {
            cur = db.rawQuery("Select NodeId,BaseUnitID,PackUnitId from tblUOMMapping Order by NodeId", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    ArrayList<String> listUOM = new ArrayList<String>();
                    String prdctId = "0", prvsPrdctId = "0";
                    for (int i = 0; i < cur.getCount(); i++) {
                        prdctId = cur.getString(0);
                        if (i == 0) {
                            prvsPrdctId = prdctId;
                            //listUOM.add(cur.getString(1));
                            listUOM.add(cur.getString(2));
                        } else {
                            if (prvsPrdctId.equals(prdctId)) {
                                listUOM.add(cur.getString(2));
                            } else {
                                hmapUOMMstrPrdtWise.put(prvsPrdctId, listUOM);
                                listUOM = new ArrayList<String>();
                                prvsPrdctId = prdctId;
                                // listUOM.add(cur.getString(1));
                                listUOM.add(cur.getString(2));
                            }
                        }
                        if (i == (cur.getCount() - 1)) {
                            hmapUOMMstrPrdtWise.put(prvsPrdctId, listUOM);
                        }

                        // hmapUOMMstr.put(cur.getString(0).trim(),cur.getInt(1));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error = " + e.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }

        }
        return hmapUOMMstrPrdtWise;
    }

    public void insertStockReq(int prdctId, int reqStock, int dfltUOMId, int slctdUOMId) {


        ContentValues values = new ContentValues();
        values.put("ProductID", prdctId);
        values.put("ReqStock", reqStock);
        values.put("dfltUOMId", dfltUOMId);
        values.put("SlctdUOMID", slctdUOMId);
        db.insert(DBHelper.TABLE_tbl_StockRqst, null, values);
    }

    public void deletePrvsStkRqst() {
        db.execSQL("Delete from tblStockRqst");
    }

    public LinkedHashMap<String, String> getStockReq() {
        // open();
        LinkedHashMap<String, String> hmapStockReqData = new LinkedHashMap<String, String>();
        Cursor cur = null;

        try {
            cur = db.rawQuery("Select ProductID,ReqStock,SlctdUOMID from tblStockRqst", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapStockReqData.put(cur.getString(0).trim(), cur.getString(1));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error = " + e.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }
            // close();
        }
        return hmapStockReqData;
    }

    public int fetchtblStockUploadedStatusForRqstStatus() {
        //open();
        int retVal = 0;
        try {
            Cursor cur = db.rawQuery("Select StatusID from tblStockUploadedStatus", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        retVal = Integer.parseInt(cur.getString(0));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error getOtherReason = " + e.toString());
        } finally {
            //close();
            return retVal;
        }
    }

    public String fngetSalesPersonCvrgIdCvrgNdTyp() {
        String abcd = "0^0";
        Cursor cursor = null;
        try {
            //open();
            cursor = db.rawQuery("SELECT CoverageNodeId,CoverageNodeType from tblUserAuthenticationMstr", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        abcd = cursor.getString(0) + "^" + cursor.getString(1);
                        cursor.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            //close();
            return abcd;
        }
    }

    public LinkedHashMap<String, String> getPrdctDfltMpngWithUOM() {
        // open();
        LinkedHashMap<String, String> hmapDfltUOMMstrPrdtWise = new LinkedHashMap<String, String>();
        Cursor cur = null;

        try {
            cur = db.rawQuery("Select NodeId,PackUnitId from tblUOMMapping where flgDefaultUOM=1", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {

                        hmapDfltUOMMstrPrdtWise.put(cur.getString(0), cur.getString(1));

                        // hmapUOMMstr.put(cur.getString(0).trim(),cur.getInt(1));
                        cur.moveToNext();
                    }
                }
            }
        } catch (Exception e) {
            System.out.println("Error = " + e.toString());
        } finally {
            if (cur != null) {
                cur.close();
            }

        }
        return hmapDfltUOMMstrPrdtWise;
    }

    public ArrayList<LinkedHashMap<String, ArrayList<String>>> fnGetDayEndOverAllCollectionReport() {
        ArrayList<LinkedHashMap<String, ArrayList<String>>> arrList = new ArrayList<LinkedHashMap<String, ArrayList<String>>>();
        Double dblAllInvoiceAmount = fetch_AllInvoiceAmount();
        LinkedHashMap<String, ArrayList<String>> hmapAllInvoiceAmount = new LinkedHashMap<String, ArrayList<String>>();
        ArrayList<String> arrFirstSectionDetails = new ArrayList<String>();
        arrFirstSectionDetails.add("" + dblAllInvoiceAmount);
        //hmapAllInvoiceAmount.put("AllInvValue",arrFirstSectionDetails);
        Double BalAmount = 0.0;


        Double ChequeCollectedAmountDetails = fnGetAllChequeCollectedAmountDetails();
        Double CashCollectedAmountDetails = fnGetAllCashCollectedAmountDetails();
        arrFirstSectionDetails.add("" + CashCollectedAmountDetails);
        arrFirstSectionDetails.add("" + ChequeCollectedAmountDetails);

        Double BalanceAmount = dblAllInvoiceAmount - (ChequeCollectedAmountDetails + CashCollectedAmountDetails);
        arrFirstSectionDetails.add("" + BalanceAmount);
        hmapAllInvoiceAmount.put("FirstSectionDetails", arrFirstSectionDetails);
        // Cursor cur=null;

        try {
       /*      cur=db.rawQuery("Select DISTINCT PaymentMode, ifnull(SUM(Amount)) AS CollectedAmtVal FROM tblAllCollectionData GROUP BY PaymentMode",null);
            if(cur.getCount()>0)
            {
                if(cur.moveToFirst())
                {
                    for(int i=0;i<cur.getCount()-1;i++)
                    {
                        ArrayList<String> arrAllPaymentModes=new ArrayList<String>();
                        arrAllPaymentModes.add(cur.getString(1));
                        hmapAllInvoiceAmount.put(cur.getString(0),arrAllPaymentModes);
                        cur.moveToNext();
                    }
                }
            }*/
            arrList.add(hmapAllInvoiceAmount);
            LinkedHashMap<String, ArrayList<String>> hmapAllChequeCollectedDetails = fnGetAllChequeCollectedDetails();
            arrList.add(hmapAllChequeCollectedDetails);


        } catch (Exception e) {
            System.out.println("Error = " + e.toString());
        } finally {
          /*  if(cur!=null)
            {
                cur.close();
            }*/

        }
        return arrList;
    }

    public LinkedHashMap<String, ArrayList<String>> fnGetAllChequeCollectedDetails() {
        LinkedHashMap<String, ArrayList<String>> hmapAllChequeCollectedDetails = new LinkedHashMap<String, ArrayList<String>>();
        Cursor cursor = db.rawQuery("SELECT RefNoChequeNoTrnNo,Amount,Date,tblBankMaster.BankName from tblAllCollectionData inner join tblBankMaster ON tblAllCollectionData.Bank=tblBankMaster.BankId WHERE PaymentModeID=2", null); //order by AutoIdOutlet Desc
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        ArrayList<String> arrChequeDetails = new ArrayList<String>();
                        arrChequeDetails.add(cursor.getString(1) + "^" + cursor.getString(2) + "^" + cursor.getString(3));
                        hmapAllChequeCollectedDetails.put(cursor.getString(0).toString(), arrChequeDetails);
                        cursor.moveToNext();
                    }
                }

            }
            return hmapAllChequeCollectedDetails;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }
    }

    public double fnGetAllChequeCollectedAmountDetails() {
        Double ChequeCollectedAmountDetails = 0.0;
        Cursor cursor = db.rawQuery("SELECT ifnull(SUM(Amount),'0.00') CheckAmount from tblAllCollectionData WHERE PaymentModeID=2", null); //order by AutoIdOutlet Desc
        try {
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    ChequeCollectedAmountDetails = Double.parseDouble(cursor.getString(0));
                }
            }
            return ChequeCollectedAmountDetails;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }
    }

    public double fnGetAllCashCollectedAmountDetails() {
        Double CashCollectedAmountDetails = 0.0;
        Cursor cursor = db.rawQuery("SELECT ifnull(SUM(Amount),'0.00') CashAmount from tblAllCollectionData WHERE PaymentModeID=1", null); //order by AutoIdOutlet Desc
        try {
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();
                CashCollectedAmountDetails = Double.parseDouble(cursor.getString(0));

            }
            return CashCollectedAmountDetails;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }
    }

    public Double fetch_AllInvoiceAmount() {
//tv_GrossInvVal
        //open();
        Double dblAllInvoiceAmount = 0.0;
        // Cursor   cursor = db.rawQuery("SELECT tblTmpInvoiceHeader.InvoiceVal from tblTmpInvoiceHeader WHERE tblTmpInvoiceHeader.StoreID='"+StoreID+"' AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'", null); //order by AutoIdOutlet Desc
        Cursor cursor = db.rawQuery("SELECT ifnull(SUM(tblInvoiceHeader.InvoiceVal),'0.0') from tblInvoiceHeader", null); //order by AutoIdOutlet Desc
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    //hmapCatgry.put(cursor.getString(0).toString(),cursor.getString(1).toString() + "( Order Value:-"+cursor.getString(2).toString()+")");
                    dblAllInvoiceAmount = Double.parseDouble(cursor.getString(0).toString());

                }

            } else {
                dblAllInvoiceAmount = 0.0;
            }
            return dblAllInvoiceAmount;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }
    }

    public LinkedHashMap<String, String> fnGetAllStoreWiseCollectionReport() {
        LinkedHashMap<String, String> hmapAllStoreWiseCollectionReport = new LinkedHashMap<String, String>();
        LinkedHashMap<String, String> hmapAllStoreWiseCollectionReportModified = new LinkedHashMap<String, String>();
        hmapAllStoreWiseCollectionReportModified = fnGetAllDistinctStoreWithInvoiceOrCollectionModified();

        LinkedHashMap<String, String> hmapAllDistinctStoreWithInvoiceOrCheque = new LinkedHashMap<String, String>();
        hmapAllDistinctStoreWithInvoiceOrCheque = fnGetAllDistinctStoreWithInvoiceOrChequeModified();

        Cursor cursor = db.rawQuery("SELECT StoreName,ifnull(SUM(tblInvoiceHeader.InvoiceVal),'0.00') InvAmount,ifnull((select SUM(tblAllCollectionData.Amount) from tblAllCollectionData  where tblSt.StoreID=tblAllCollectionData.StoreID AND tblAllCollectionData.PaymentModeID='1'),'0.00') CashCollection,ifnull((select SUM(tblAllCollectionData.Amount) from tblAllCollectionData   where tblSt.StoreID=tblAllCollectionData.StoreID AND tblAllCollectionData.PaymentModeID='2'),'0.00')ChequeCollection,'0.00' AS BalAmount,tblSt.StoreID from tblStoreList tblSt inner join tblInvoiceHeader ON tblSt.StoreID=tblInvoiceHeader.StoreID Group By tblSt.StoreID,tblSt.StoreName", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                        String txtInvoiceAmount = cursor.getString(1);
                        String txtCollection = cursor.getString(2);
                        String txtChqAmt = cursor.getString(3);
                        if (hmapAllStoreWiseCollectionReportModified != null && hmapAllStoreWiseCollectionReportModified.size() > 0) {
                            if (hmapAllStoreWiseCollectionReportModified.containsKey(cursor.getString(5) + "^" + cursor.getString(0).toString())) {
                                txtCollection = hmapAllStoreWiseCollectionReportModified.get(cursor.getString(5) + "^" + cursor.getString(0).toString());
                            }
                        }
                        if (hmapAllDistinctStoreWithInvoiceOrCheque != null && hmapAllDistinctStoreWithInvoiceOrCheque.size() > 0) {
                            if (hmapAllDistinctStoreWithInvoiceOrCheque.containsKey(cursor.getString(5) + "^" + cursor.getString(0).toString())) {
                                txtChqAmt = hmapAllDistinctStoreWithInvoiceOrCheque.get(cursor.getString(5) + "^" + cursor.getString(0).toString());
                            }
                        }
                        //Double BalAmt=Double.parseDouble(txtInvoiceAmount)-(Double.parseDouble(txtCollection)+Double.parseDouble(txtChqAmt));
                        Double BalAmt = (Double.parseDouble(txtCollection) + Double.parseDouble(txtChqAmt));


                        hmapAllStoreWiseCollectionReport.put(cursor.getString(5) + "^" + cursor.getString(0).toString(), txtInvoiceAmount + "^" + txtCollection + "^" + txtChqAmt + "^" + BalAmt);

                        cursor.moveToNext();
                    }
                }

            }
            // hmapAllStoreWiseCollectionReport.putAll(hmapAllStoreWiseCollectionReportModified);
           /* if(hmapAllStoreWiseCollectionReportModified.containsKey(cursor.getString(5)+"^"+cursor.getString(0).toString()))
            {
                hmapAllStoreWiseCollectionReport.put(cursor.getString(5)+"^"+cursor.getString(0).toString(),hmapAllStoreWiseCollectionReportModified.get(cursor.getString(5)+"^"+cursor.getString(0).toString()));
            }*/
            return hmapAllStoreWiseCollectionReport;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }
    }

    public void fnWriteTextFile(int VanIntialInvoiceIdNum) {

        try {

            JSONArray jArray = new JSONArray();
            JSONObject jsonObjMain = new JSONObject();
            JSONObject jOnew = new JSONObject();
            jOnew.put("VanIntialInvoiceIdNum", VanIntialInvoiceIdNum);
            jArray.put(jOnew);
            jsonObjMain.put(CommonInfo.TextFileArrayName, jArray);
            File jsonTxtFolder = new File(Environment.getExternalStorageDirectory(), CommonInfo.TextFileFolder);
            if (!jsonTxtFolder.exists()) {
                jsonTxtFolder.mkdirs();

            }
            String txtFileNamenew = CommonInfo.TextFileName;
            File file = new File(jsonTxtFolder, txtFileNamenew);
            // If file does not exists, then create it
            if (!file.exists()) {
                try {
                    file.createNewFile();
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }


            FileWriter fw;
            try {
                fw = new FileWriter(file.getAbsoluteFile());

                BufferedWriter bw = new BufferedWriter(fw);

                bw.write(jsonObjMain.toString());

                bw.close();
            } catch (IOException e) {
                // TODO Auto-generated catch block
                e.printStackTrace();
            }

        } catch (JSONException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } finally {

        }
    }

    public String[] FetchAllStoreListForCollectionReport() {
        int ScodecolumnIndex = 0;
        int SnamecolumnIndex = 1;

        //Cursor cursor = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList   ORDER BY DistanceNear", null); //where StoreRouteID='"+ rID +"'
        Cursor cursor = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList", null); //where StoreRouteID='"+ rID +"'

        try {
            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {
                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    StoreName[i] = (String) cursor.getString(ScodecolumnIndex).toString() + "_" + (String) cursor.getString(SnamecolumnIndex).toString();
                    cursor.moveToNext();
                }

            }
            return StoreName;
        } finally {
            cursor.close();
        }
    }

    public void fnDeleteInsertCollectionReportCashChange(String StoreID, String PreviousCashCollectionAmt, String ModifiedCashCollectionAmt, String Sstat) {
        db.execSQL("DELETE FROM tblCollectionReportCashChange Where StoreID='" + StoreID + "'");
        ContentValues values = new ContentValues();
        values.put("StoreID", StoreID);
        values.put("PreviousCashCollectionAmt", PreviousCashCollectionAmt);
        values.put("ModifiedCashCollectionAmt", ModifiedCashCollectionAmt);
        values.put("Sstat", Sstat);
        values.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        values.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


        db.insert(DBHelper.TABLE_tblCollectionReportCashChange, null, values);
    }

    public void fnDeletetblCollectionReportChequeChange(String StoreID) {
        db.execSQL("DELETE FROM tblCollectionReportChequeChange Where StoreID='" + StoreID + "'");
    }

    public long fnsavetblCollectionReportChequeChange(String StoreID, String PaymentMode_Old, String PaymentModeID_Old, String Amount_Old,
                                                      String RefNoChequeNoTrnNo_Old, String Date_Old, String Bank_Old, String PaymentMode_New, String PaymentModeID_New, String Amount_New,
                                                      String RefNoChequeNoTrnNo_New, String Date_New, String Bank_New, int flgDeleteModifyNew) {
        //db.execSQL("DELETE FROM tblCollectionReportChequeChange Where StoreID='"+StoreID+"'");
        ContentValues initialValues = new ContentValues();
        initialValues.put("StoreID", StoreID.toString().trim());
        initialValues.put("PaymentMode_Old", PaymentMode_Old.toString().trim());
        initialValues.put("PaymentModeID_Old", PaymentModeID_Old.toString().trim());
        initialValues.put("Amount_Old", Amount_Old.toString().trim());
        initialValues.put("RefNoChequeNoTrnNo_Old", RefNoChequeNoTrnNo_Old.toString().trim());
        initialValues.put("Date_Old", Date_Old.toString().trim());
        initialValues.put("Bank_Old", Bank_Old.toString().trim());
        initialValues.put("PaymentMode_New", PaymentMode_New.toString().trim());
        initialValues.put("PaymentModeID_New", PaymentModeID_New.toString().trim());
        initialValues.put("Amount_New", Amount_New.toString().trim());
        initialValues.put("RefNoChequeNoTrnNo_New", RefNoChequeNoTrnNo_New.toString().trim());
        initialValues.put("Date_New", Date_New.toString().trim());
        initialValues.put("Bank_New", Bank_New.toString().trim());
        initialValues.put("Sstat", "3");
        initialValues.put("flgDeleteModifyNew", flgDeleteModifyNew);
        initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        return db.insert(DBHelper.DATABASE_TABLE_tblCollectionReportChequeChange, null, initialValues);
    }

    public ArrayList<LinkedHashMap<String, LinkedHashMap<String, String>>> fnRetrievetblCollectionReportChequeChange(String StoreID) {
        ArrayList<LinkedHashMap<String, LinkedHashMap<String, String>>> arrStoreChequeDetails = new ArrayList<LinkedHashMap<String, LinkedHashMap<String, String>>>();
        Cursor cursor = null;
        LinkedHashMap<String, LinkedHashMap<String, String>> hmapStoreAllChequeDetails = new LinkedHashMap<String, LinkedHashMap<String, String>>();
        try {
            cursor = db.rawQuery("SELECT ifnull(PaymentMode_Old,'NA')PaymentMode_Old,ifnull(PaymentModeID_Old,0) PaymentMode_Old,ifnull(Amount_Old,0.0)Amount_Old,ifnull(RefNoChequeNoTrnNo_Old,'NA') RefNoChequeNoTrnNo_Old,ifnull(Date_Old,'NA') Date_Old,ifnull(Bank_Old,0) Bank_Old,PaymentMode_New,PaymentModeID_New,Amount_New,RefNoChequeNoTrnNo_New,Date_New,Bank_New,flgDeleteModifyNew from tblCollectionReportChequeChange where StoreID='" + StoreID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        LinkedHashMap<String, String> hmapChequeRecords = new LinkedHashMap<String, String>();

                        String PaymentMode_Old = cursor.getString(0).toString();
                        int PaymentModeID_Old = Integer.parseInt(cursor.getString(1).toString());
                        Double Amount_Old = Double.parseDouble(cursor.getString(2).toString());
                        String RefNoChequeNoTrnNo_Old = cursor.getString(3).toString();
                        String Date_Old = cursor.getString(4).toString();
                        String Bank_Old = cursor.getString(5).toString();
                        String PaymentMode_New = cursor.getString(6).toString();
                        int PaymentModeID_New = Integer.parseInt(cursor.getString(7).toString());
                        Double Amount_New = Double.parseDouble(cursor.getString(8).toString());
                        String RefNoChequeNoTrnNo_New = cursor.getString(9).toString();
                        String Date_New = cursor.getString(10).toString();
                        String Bank_New = cursor.getString(11).toString();
                        int flgDeleteModifyNew = Integer.parseInt(cursor.getString(12).toString());

                        String oldChequeRecord = PaymentMode_Old + "^" + PaymentModeID_Old + "^" + Amount_Old + "^" + RefNoChequeNoTrnNo_Old + "^" + Date_Old + "^" + Bank_Old;
                        String newChequeRecord = PaymentMode_New + "^" + PaymentModeID_New + "^" + Amount_New + "^" + RefNoChequeNoTrnNo_New + "^" + Date_New + "^" + Bank_New;

                        hmapChequeRecords.put("Old", oldChequeRecord);
                        hmapChequeRecords.put("New", newChequeRecord);

                        hmapStoreAllChequeDetails.put("" + (i + 1) + "^" + flgDeleteModifyNew, hmapChequeRecords);
                        cursor.moveToNext();

                    }

                }
                arrStoreChequeDetails.add(hmapStoreAllChequeDetails);
            }
            // return arrStoreChequeDetails;
        } catch (Exception e) {

        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
        return arrStoreChequeDetails;
    }

    public int fnCheckflgCollectionReportChequeChangeAgainstStore(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT * FROM tblCollectionReportChequeChange WHERE StoreID='" + StoreID + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    if (!cursorE2.isNull(0)) {
                        chkI = 1;
                    } else {
                        chkI = 0;
                    }
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        return chkI;
    }

    public ArrayList<LinkedHashMap<String, LinkedHashMap<String, String>>> fnRetrievetblCollectionChequeAgainstStore(String StoreID) {
        ArrayList<LinkedHashMap<String, LinkedHashMap<String, String>>> arrStoreChequeDetails = new ArrayList<LinkedHashMap<String, LinkedHashMap<String, String>>>();
        Cursor cursor = null;
        LinkedHashMap<String, LinkedHashMap<String, String>> hmapStoreAllChequeDetails = new LinkedHashMap<String, LinkedHashMap<String, String>>();
        try {
            cursor = db.rawQuery("SELECT PaymentMode,PaymentModeID,Amount,RefNoChequeNoTrnNo,Date,Bank from tblAllCollectionData where StoreID='" + StoreID + "' AND PaymentModeID=2", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        LinkedHashMap<String, String> hmapChequeRecords = new LinkedHashMap<String, String>();

                        String PaymentMode_Old = cursor.getString(0).toString();
                        int PaymentModeID_Old = Integer.parseInt(cursor.getString(1).toString());
                        Double Amount_Old = Double.parseDouble(cursor.getString(2).toString());
                        String RefNoChequeNoTrnNo_Old = cursor.getString(3).toString();
                        String Date_Old = cursor.getString(4).toString();
                        String Bank_Old = cursor.getString(5).toString();

                        int flgDeleteModifyNew = 2;

                        String oldChequeRecord = PaymentMode_Old + "^" + PaymentModeID_Old + "^" + Amount_Old + "^" + RefNoChequeNoTrnNo_Old + "^" + Date_Old + "^" + Bank_Old;
                        String newChequeRecord = PaymentMode_Old + "^" + PaymentModeID_Old + "^" + Amount_Old + "^" + RefNoChequeNoTrnNo_Old + "^" + Date_Old + "^" + Bank_Old;

                        hmapChequeRecords.put("Old", oldChequeRecord);
                        hmapChequeRecords.put("New", newChequeRecord);

                        hmapStoreAllChequeDetails.put("" + (i + 1) + "^" + flgDeleteModifyNew, hmapChequeRecords);
                        cursor.moveToNext();

                    }
                }
                arrStoreChequeDetails.add(hmapStoreAllChequeDetails);
            }
            // return arrStoreChequeDetails;
        } catch (Exception e) {

        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
        return arrStoreChequeDetails;
    }

    public double fnGetAllCashCollectedAmountDetailsAgainstStore(String StoreID) {
        Double CashCollectedAmountDetailsAgainstStore = 0.0;
        Cursor cursor = db.rawQuery("SELECT ifnull(SUM(Amount),'0.00') CashAmount from tblAllCollectionData WHERE PaymentModeID=1 And StoreID='" + StoreID + "'", null); //order by AutoIdOutlet Desc
        try {
            if (cursor.getCount() > 0) {
                cursor.moveToFirst();
                CashCollectedAmountDetailsAgainstStore = Double.parseDouble(cursor.getString(0));

            }
            return CashCollectedAmountDetailsAgainstStore;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            // close();
        }
    }

    public Double fnfetchModifiedCollectionReportCashChange(String StoreID) {
        Cursor cursorE2 = db.rawQuery("SELECT ModifiedCashCollectionAmt FROM tblCollectionReportCashChange WHERE StoreID='" + StoreID + "'", null);
        Double chkI = 0.0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    if (!cursorE2.isNull(0)) {
                        chkI = Double.parseDouble((cursorE2.getString(0)));
                    } else {
                        chkI = 0.0;
                    }
                }
            }

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        return chkI;
    }

    public LinkedHashMap<String, String> fnGetAllDistinctStoreWithInvoiceOrCollectionModified() {
        LinkedHashMap<String, String> hmapAllDistinctStoreWithInvoiceOrCollection = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT StoreName,ifnull(SUM(tblCollectionReportCashChange.ModifiedCashCollectionAmt),'0.00') CashCollection,tblStoreList.StoreID from tblStoreList inner join tblCollectionReportCashChange ON tblStoreList.StoreID=tblCollectionReportCashChange.StoreID Group By tblStoreList.StoreID,tblStoreList.StoreName", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        //  Double BalAmt=Double.parseDouble(cursor.getString(1))-(Double.parseDouble(cursor.getString(2))+Double.parseDouble(cursor.getString(3)));
                        hmapAllDistinctStoreWithInvoiceOrCollection.put(cursor.getString(2) + "^" + cursor.getString(0).toString(), cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
            return hmapAllDistinctStoreWithInvoiceOrCollection;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }

    public LinkedHashMap<String, String> fnGetAllDistinctStoreWithInvoiceOrChequeModified() {
        LinkedHashMap<String, String> hmapAllDistinctStoreWithInvoiceOrCheque = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("SELECT StoreName,ifnull(SUM(tblCollectionReportChequeChange.Amount_New),'0.00') AS ChequeCollection,tblStoreList.StoreID from tblStoreList inner join tblCollectionReportChequeChange ON tblStoreList.StoreID=tblCollectionReportChequeChange.StoreID Group By tblStoreList.StoreID,tblStoreList.StoreName", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapAllDistinctStoreWithInvoiceOrCheque.put(cursor.getString(2) + "^" + cursor.getString(0).toString(), cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }
            return hmapAllDistinctStoreWithInvoiceOrCheque;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }




    public LinkedHashMap<String ,Integer> fnGetAppMasterFlags(int flgDrctslsIndrctSls)
    {
        LinkedHashMap<String,Integer> hmapAppMasterFlags=new LinkedHashMap<String,Integer>();
        //0             1                   2                  3                       4                    5              6            7          8                   9                  10                11                 12                       13              14                        15                       16                          17                       18                 19              20           21                              22                         23                 24                                   25                            26                  27          28         29
        Cursor cursor = db.rawQuery("SELECT flgDistributorCheckIn ,flgDBRStockInApp ,flgDBRStockEdit ,flgDBRStockCalculate ,flgDBRStockControl ,flgCollRequired ,flgCollReqOrdr ,flgCollTab ,flgCollDefControl ,flgCashDiscount ,flgCollControlRule ,flgSchemeAvailable ,flgSchemeAllowEntry ,flgSchemeAllowEdit ,flgQuotationIsAvailable ,flgExecutionIsAvailable ,flgExecutionPhotoCompulsory,flgTargetShowatStart,flgIncentiveShowatStart,flgInvoicePrint,flgShowPOSM,flgVisitStartOutstandingDetails,flgVisitStartSchemeDetails,flgStoreDetailsEdit,flgShowDeliveryAddressButtonOnOrder,flgShowManagerOnStoreList,flgRptTargetVsAchived,SalesNodeID,SalesNodetype,WorkingTypeID,flgVanStockInApp,flgVanStockEdit,flgVanStockCalculate,flgVanStockControl,flgStockRefillReq,flgDayEnd,flgStockUnloadAtCycleEnd,flgStockUnloadAtDayEnd,flgCollReqATCycleEnd,flgCollReqATDayEnd,flgDayEndSummary,flgStoreCheckInApplicable,flgStoreCheckInPhotoCompulsory  from tblAppMasterFlags Where WorkingTypeID="+flgDrctslsIndrctSls, null);
        try
        {
            if(cursor.getCount()>0)
            {
                if (cursor.moveToFirst())
                {
                    hmapAppMasterFlags.put("flgDistributorCheckIn", cursor.getInt(0));
                    hmapAppMasterFlags.put("flgDBRStockInApp", cursor.getInt(1));
                    hmapAppMasterFlags.put("flgDBRStockEdit", cursor.getInt(2));
                    hmapAppMasterFlags.put("flgDBRStockCalculate", cursor.getInt(3));
                    hmapAppMasterFlags.put("flgDBRStockControl", cursor.getInt(4));
                    hmapAppMasterFlags.put("flgCollRequired", cursor.getInt(5));   //0=Not To be mapped Again,1=Can Map Distributor
                    hmapAppMasterFlags.put("flgCollReqOrdr", cursor.getInt(6));
                    hmapAppMasterFlags.put("flgCollTab", cursor.getInt(7));
                    hmapAppMasterFlags.put("flgCollDefControl", cursor.getInt(8));
                    hmapAppMasterFlags.put("flgCashDiscount", cursor.getInt(9));
                    hmapAppMasterFlags.put("flgCollControlRule", cursor.getInt(10));
                    hmapAppMasterFlags.put("flgSchemeAvailable", cursor.getInt(11));
                    hmapAppMasterFlags.put("flgSchemeAllowEntry", cursor.getInt(12));
                    hmapAppMasterFlags.put("flgSchemeAllowEdit", cursor.getInt(13));
                    hmapAppMasterFlags.put("flgQuotationIsAvailable", cursor.getInt(14));
                    hmapAppMasterFlags.put("flgExecutionIsAvailable", cursor.getInt(15));
                    hmapAppMasterFlags.put("flgExecutionPhotoCompulsory", cursor.getInt(16));

                    hmapAppMasterFlags.put("flgTargetShowatStart", cursor.getInt(17));
                    hmapAppMasterFlags.put("flgIncentiveShowatStart", cursor.getInt(18));
                    hmapAppMasterFlags.put("flgInvoicePrint", cursor.getInt(19));
                    hmapAppMasterFlags.put("flgShowPOSM", cursor.getInt(20));
                    hmapAppMasterFlags.put("flgVisitStartOutstandingDetails", cursor.getInt(21));
                    hmapAppMasterFlags.put("flgVisitStartSchemeDetails", cursor.getInt(22));
                    hmapAppMasterFlags.put("flgStoreDetailsEdit", cursor.getInt(23));
                    hmapAppMasterFlags.put("flgShowDeliveryAddressButtonOnOrder", cursor.getInt(24));
                    hmapAppMasterFlags.put("flgShowManagerOnStoreList", cursor.getInt(25));
                    hmapAppMasterFlags.put("flgRptTargetVsAchived", cursor.getInt(26));

                    hmapAppMasterFlags.put("SalesNodeID", cursor.getInt(27));
                    hmapAppMasterFlags.put("SalesNodetype", cursor.getInt(28));
                    hmapAppMasterFlags.put("WorkingTypeID", cursor.getInt(29));

                    hmapAppMasterFlags.put("flgVanStockInApp", cursor.getInt(30));
                    hmapAppMasterFlags.put("flgVanStockEdit", cursor.getInt(31));
                    hmapAppMasterFlags.put("flgVanStockCalculate", cursor.getInt(32));
                    hmapAppMasterFlags.put("flgVanStockControl", cursor.getInt(33));
                    hmapAppMasterFlags.put("flgStockRefillReq", cursor.getInt(34));
                    hmapAppMasterFlags.put("flgDayEnd", cursor.getInt(35));
                    hmapAppMasterFlags.put("flgStockUnloadAtCycleEnd", cursor.getInt(36));
                    hmapAppMasterFlags.put("flgStockUnloadAtDayEnd", cursor.getInt(37));
                    hmapAppMasterFlags.put("flgCollReqATCycleEnd", cursor.getInt(38));
                    hmapAppMasterFlags.put("flgCollReqATDayEnd", cursor.getInt(39));
                    hmapAppMasterFlags.put("flgDayEndSummary", cursor.getInt(40));
                    hmapAppMasterFlags.put("flgStoreCheckInApplicable", cursor.getInt(41));
                    hmapAppMasterFlags.put("flgStoreCheckInPhotoCompulsory", cursor.getInt(42));


                }
            }
            return hmapAppMasterFlags;
        }
        finally
        {
            if(cursor!=null) {
                cursor.close();
            }
        }
    }
    public LinkedHashMap<String, ArrayList<String>> fetchtblDAGetAddedOutletSummaryReport() {
        LinkedHashMap<String, ArrayList<String>> hmap = new LinkedHashMap<>();
        Cursor cursor = null;
        try {
            cursor = db.rawQuery("SELECT Distinct Header from tblDAGetAddedOutletSummaryReport where FlgNormalOverall=1", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        String abc = cursor.getString(0);
                        hmap.put(abc, fetchOutletSummaryByHeader(abc));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if (cursor != null)
                cursor.close();
            return hmap;
        }

    }

    public String fetchtblDAGetAddedOutletOverAllData() {
        String hmap = "NA";
        Cursor cursor = null;
        try {
            cursor = db.rawQuery("SELECT TotalStores,Validated,Pending from tblDAGetAddedOutletSummaryReport where FlgNormalOverall=0", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmap = cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2);
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if (cursor != null)
                cursor.close();
            return hmap;
        }
    }

    public ArrayList<String> fetchOutletSummaryByHeader(String Header) {
        ArrayList<String> arrData = new ArrayList<>();
        Cursor cursor = null;

        try {
            cursor = db.rawQuery("SELECT Child,TotalStores,Validated,Pending from tblDAGetAddedOutletSummaryReport where Header='" + Header + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        arrData.add(cursor.getString(0) + "^" + cursor.getString(1) + "^" + cursor.getString(2) + "^" + cursor.getString(3));
                        cursor.moveToNext();
                    }
                }
            }
        } finally {
            if (cursor != null)
                cursor.close();
            return arrData;
        }
    }

    public void createtblDAGetAddedOutletSummaryReport() {
        try {
            db.execSQL(DBHelper.DATABASE_CREATE_TABLE_tblDAGetAddedOutletSummaryReport);
        } catch (Exception e) {

        }
    }

    public void droptblDAGetAddedOutletSummaryReport() {
        db.execSQL("DROP TABLE IF EXISTS tblDAGetAddedOutletSummaryReport");

    }

    public int fnGetCountStoreVisitCode(String StoreID) {

        int StoreVisitCodecnt = 0;
        Cursor cursor = db.rawQuery("Select Count(*) from tblStoreVisitMstr Where StoreID='" + StoreID + "'", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                StoreVisitCodecnt = Integer.parseInt(cursor.getString(0));
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        return StoreVisitCodecnt;
    }

    public String fnGetStoreVisitCodeInCaseOfIndrectSales(String StoreID) {

        String StoreVisitCode = "NA";
        Cursor cursor = db.rawQuery("Select StoreVisitCode from tblStoreVisitMstr Where StoreID='" + StoreID + "'", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                StoreVisitCode = cursor.getString(0);
            }
        }
        if (cursor != null) {
            cursor.close();
        }

        return StoreVisitCode;
    }

    public void fnInsertOrUpdate_tblStoreOrderVisitDayActivity(String StoreVisitCode, String StoreID, String TempStoreVisitCode, String ForDate, int Sstat, String VisitTimeStartAtStore, String VisitTimeEndStore) {

        //open();
        try {
            Cursor cursor = db.rawQuery("SELECT TempStoreVisitCode FROM tblStoreOrderVisitDayActivity where StoreVisitCode='" + StoreVisitCode + "' AND StoreID='" + StoreID + "' AND Sstat=1", null);
            ContentValues initialValues = new ContentValues();
            initialValues.put("IMEINumber", CommonInfo.imei.toString());
            initialValues.put("Sstat", Sstat);

            initialValues.put("VisitTimeEndStore", VisitTimeEndStore);
            if (cursor.getCount() > 0) {
                int affected = db.update(DBHelper.DATABASE_TABLE_tblStoreOrderVisitDayActivity, initialValues, "StoreID=? AND StoreVisitCode=? AND TempStoreVisitCode=?", new String[]{StoreID, StoreVisitCode, TempStoreVisitCode});
            } else {
                initialValues.put("StoreVisitCode", StoreVisitCode);
                initialValues.put("StoreID", StoreID);
                initialValues.put("TempStoreVisitCode", TempStoreVisitCode);
                initialValues.put("ForDate", ForDate);
                initialValues.put("VisitTimeStartAtStore", VisitTimeStartAtStore);
                initialValues.put("VisitTimeEndStore", VisitTimeEndStore);
                initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
                initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


                db.insert(DBHelper.DATABASE_TABLE_tblStoreOrderVisitDayActivity, null, initialValues);
            }
        } finally {
            // close();
        }
    }

    public void UpdatetblStoreOrderVisitDayActivitySstat(String StoreID, int Sstat, String StoreVisitCode, String TempStoreVisitCode) {


        final ContentValues values = new ContentValues();
        values.put("Sstat", Sstat);

        int affected22 = db.update("tblStoreOrderVisitDayActivity", values, "StoreID=? AND StoreVisitCode=? AND TempStoreVisitCode=?", new String[]{StoreID, StoreVisitCode, TempStoreVisitCode});

    }

    public String fnGetStoreTempStoreVisitCodeFromtblStoreOrderVisitDayActivity(String StoreID) {
        //open();
        String TempStoreVisitCode = "NA";
        Cursor cursor = db.rawQuery("Select TempStoreVisitCode from tblStoreOrderVisitDayActivity Where StoreID='" + StoreID + "' AND Sstat=1", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                TempStoreVisitCode = cursor.getString(0);
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        //close();
        return TempStoreVisitCode;
    }

    public void UpdateStoreEndVisittblStoreOrderVisitDayActivity(String StoreID, String VisitTimeEndStore, String TempStoreVisitCode) {
        final ContentValues values = new ContentValues();
        values.put("VisitTimeEndStore", VisitTimeEndStore);
        int affected = db.update("tblStoreOrderVisitDayActivity", values, "StoreID=? and TempStoreVisitCode=?", new String[]{StoreID, TempStoreVisitCode});
    }

    public void Delete_bloodGroupMstr() {

        db.execSQL("DELETE FROM tblBloodGroup");
    }

    public void Delete_tblEducationQuali() {

        db.execSQL("DELETE FROM tblEducationQuali");
    }

    public void Delete_tblQuestIDForOutChannel() {

        db.execSQL("DELETE FROM tblQuestIDForOutChannel");
    }

    public void Delete_tblGetPDAQuestMstr() {

        db.execSQL("DELETE FROM tblGetPDAQuestMstr");
    }

    public void savetblQuestionMstrRetroFit(List<TblGetPDAQuestMstr> tblGetPDAQuestMstr) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblGetPDAQuestMstr PDAQuestMstr : tblGetPDAQuestMstr) {
            int flgQuestIDForOutChannel = 0;
            initialValues.put("QuestCode", PDAQuestMstr.getQuestCode());
            initialValues.put("QuestID", PDAQuestMstr.getQuestID());
            initialValues.put("QuestDesc", PDAQuestMstr.getQuestDesc());
            initialValues.put("QuestType", PDAQuestMstr.getQuestType());
            initialValues.put("AnsControlType", PDAQuestMstr.getAnsControlType());
            initialValues.put("AnsControlInputTypeID", PDAQuestMstr.getAsnControlInputTypeID());

            initialValues.put("AnsControlInputTypeMaxLength", PDAQuestMstr.getAnsControlInputTypeMaxLength());
            initialValues.put("AnsMustRequiredFlg", PDAQuestMstr.getAnsMustRequiredFlg());
            initialValues.put("QuestBundleFlg", PDAQuestMstr.getQuestBundleFlg());
            initialValues.put("ApplicationTypeID", PDAQuestMstr.getApplicationTypeID());
            initialValues.put("Sequence", PDAQuestMstr.getSequence());//AnsControlInputTypeMinLength
            initialValues.put("AnsControlInputTypeMinLength", PDAQuestMstr.getAnsControlIntputTypeMinLength());

            initialValues.put("flgStoreVisitFeedback", PDAQuestMstr.getFlgStoreVisitFeedback());
            initialValues.put("flgDSMOverAllFeedback", PDAQuestMstr.getFlgDSMOverAllFeedback());
            initialValues.put("flgDSMVisitFeedback", PDAQuestMstr.getFlgDSMVisitFeedback());
            initialValues.put("flgNewStore", PDAQuestMstr.getFlgNewStore());

            initialValues.put("AnswerHint", PDAQuestMstr.getAnswerHint());
            if (gblQuestIDForOutChannel == PDAQuestMstr.getQuestID()) {
                flgQuestIDForOutChannel = 1;
            }
            initialValues.put("flgQuestIDForOutChannel", flgQuestIDForOutChannel);
            initialValues.put("flgStoreValidation", PDAQuestMstr.getFlgStoreValidation());
            //initialValues.put("QuestDescHindi", );
            db.insert(DBHelper.TABLE_QuestionMstr, null, initialValues);
        }

        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void Delete_tblQuestIDForName() {

        db.execSQL("DELETE FROM tblQuestIDForName");
    }

    public void Delete_tblPDAQuestGrpMappingMstr() {

        db.execSQL("DELETE FROM tblGetPDAQuestGrpMapping");
    }

    public void savetblPDAQuestGrpMappingMstr(List<TblGetPDAQuestGrpMapping> tblGetPDAQuestGrpMappings) {
        ContentValues initialValues = new ContentValues();
        for (TblGetPDAQuestGrpMapping GetPDAQuestGrpMapping : tblGetPDAQuestGrpMappings) {
            initialValues.put("GrpQuestID", GetPDAQuestGrpMapping.getGrpQuestID());
            initialValues.put("QuestID", GetPDAQuestGrpMapping.getQuestID());
            initialValues.put("GrpID", GetPDAQuestGrpMapping.getGrpID());
            initialValues.put("GrpNodeID", GetPDAQuestGrpMapping.getGrpNodeID());
            initialValues.put("GrpDesc", GetPDAQuestGrpMapping.getGrpDesc());
            initialValues.put("SectionNo", GetPDAQuestGrpMapping.getSectionNo());
            initialValues.put("GrpCopyID", GetPDAQuestGrpMapping.getGrpCopyID());
            initialValues.put("QuestCopyID", GetPDAQuestGrpMapping.getQuestCopyID());
            initialValues.put("Sequence", GetPDAQuestGrpMapping.getSequence());
            initialValues.put("flgNewStore", GetPDAQuestGrpMapping.getFlgNewStore());
            initialValues.put("flgStoreValidation", GetPDAQuestGrpMapping.getFlgStoreValidation());
            long inserted = db.insert(DBHelper.TABLE_QuestGrpMappingMstr, null, initialValues);
        }
    }

    public void Delete_tblOptionMstr() {

        db.execSQL("DELETE FROM tblGetPDAQuestOptionMstr");
    }

    public void savetblOptionMstrRetrofit(List<TblGetPDAQuestOptionMstr> tblGetPDAQuestOptionMstr) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblGetPDAQuestOptionMstr GetPDAQuestOptionMstr : tblGetPDAQuestOptionMstr) {
            initialValues.put("OptID", GetPDAQuestOptionMstr.getOptID());
            initialValues.put("QuestID", GetPDAQuestOptionMstr.getQuestID());

            initialValues.put("OptionDescr", GetPDAQuestOptionMstr.getOptionDescr());
            initialValues.put("Sequence", GetPDAQuestOptionMstr.getSequence());

            db.insert(DBHelper.TABLE_OptionMstr, null, initialValues);

        }
        db.setTransactionSuccessful();
        db.endTransaction();

    }

    public void Delete_tblQuestionDependentMstr() {

        db.execSQL("DELETE FROM tblGetPDAQuestionDependentMstr");
    }

    //Add New Store Section wise Code starts Here
    public long savetblQuestionDependentMstr(int QuestionID, String OptionID, int DependentQuestionID, int GrpID, int GrpDepQuestID) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("QuestionID", QuestionID);
        initialValues.put("OptionID", OptionID);
        initialValues.put("DependentQuestionID", DependentQuestionID);
        initialValues.put("GrpID", GrpID);
        initialValues.put("GrpDepQuestID", GrpDepQuestID);

        System.out.println("QuestionID2:" + QuestionID + "OptionID2:" + OptionID + "DependentQuestionID2:" + DependentQuestionID);
        return db.insert(DBHelper.TABLE_QuestionDependentMstr, null, initialValues);
    }

    public void Delete_tblPDAQuestOptionDependentMstr() {

        db.execSQL("DELETE FROM tblPDAQuestOptionDependentMstr");
    }

    public void savetblPDAQuestOptionDependentMstr(int QstID, int DepQstId, int GrpQuestID, int GrpDepQuestID) {

        ContentValues values = new ContentValues();
        values.put("QstID", QstID);
        values.put("DepQstId", DepQstId);
        values.put("GrpQuestID", GrpQuestID);
        values.put("GrpDepQuestID", GrpDepQuestID);
        db.insert(DBHelper.TABLE_QuestOptionDependentMstr, null, values);

    }

    public void Delete_tblPDAQuestOptionValuesDependentMstr() {

        db.execSQL("DELETE FROM tblPDAQuestOptionValuesDependentMstr");
    }

    public void Delete_tblNotificationMstr() {
        db.execSQL("DELETE FROM tblPDANotificationMaster");


    }

    public long inserttblNotificationMstr(int SerialNo, String IMEI, String Noti_text, String Noti_DateTime,
                                          int Noti_ReadStatus, int Noti_NewOld,
                                          String Noti_ReadDateTime, int Sstat, int MsgServerID) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("SerialNo", SerialNo);
        initialValues.put("IMEI", IMEI.trim());
        initialValues.put("Noti_text", Noti_text.trim());
        initialValues.put("Noti_DateTime", Noti_DateTime.trim());
        initialValues.put("Noti_ReadStatus", Noti_ReadStatus);
        initialValues.put("Noti_NewOld", Noti_NewOld);
        initialValues.put("Noti_ReadDateTime", Noti_ReadDateTime.trim());
        initialValues.put("Sstat", Sstat);
        initialValues.put("MsgServerID", MsgServerID);


        return db.insert(DBHelper.TABLE_tblPDANotificationMaster_Define, null, initialValues);
    }
    public int CheckTotalStoreCountFormServiceWorker() throws IOException
    {

        int chkI = 0;
        Cursor cursorE2=null;

        try
        {
            cursorE2 = db.rawQuery("SELECT flgStoreOrder from tblPreAddedStores order by flgStoreOrder desc limit 1", null);
            if(cursorE2.getCount()>0) {
                if (cursorE2.moveToFirst()) {

                    if (cursorE2.getInt(0) > 0) {
                        chkI = cursorE2.getInt(0);
                    } else {
                        chkI = 0;
                    }
                }
            }

        } finally
        {
            if(cursorE2!=null) {
                cursorE2.close();
            }

        }
        return chkI;
    }
    public void saveTblPreAddedStoresRetrofit(List<TblPreAddedStores> tblPreAddedStores, HashMap<String, String> hmapPreAddedStoreIdSstat) {
        db.beginTransaction();

        int flgIfStoreHasRecords=0;
        try {
            flgIfStoreHasRecords=CheckTotalStoreCountFormServiceWorker();
        }
        catch (Exception ex)
        {

        }

        ContentValues initialValues = new ContentValues();
        for (TblPreAddedStores preAddedStores : tblPreAddedStores) {

            if (hmapPreAddedStoreIdSstat.containsKey(preAddedStores.getStoreID())) {
                initialValues.put("StoreID", preAddedStores.getStoreID().toString());
            } else {
                initialValues.put("StoreID", preAddedStores.getStoreIDDB().toString());
            }

            // initialValues.put("StoreID", preAddedStores.getStoreIDDB());
            initialValues.put("StoreName", preAddedStores.getStoreName());
            initialValues.put("LatCode", preAddedStores.getLatCode());
            initialValues.put("LongCode", preAddedStores.getLongCode());
            initialValues.put("DateAdded", preAddedStores.getDateAdded());
            initialValues.put("DistanceNear", 1000);
            initialValues.put("flgOldNewStore", 0);
            initialValues.put("flgReMap", preAddedStores.getFlgRemap());
            initialValues.put("Sstat", 0);
            initialValues.put("RouteNodeID", preAddedStores.getRouteNodeID());
            initialValues.put("RouteNodeType", preAddedStores.getRouteNodeType());



            initialValues.put("CoverageAreaID", preAddedStores.getCoverageAreaID());
            initialValues.put("CoverageAreaType", preAddedStores.getCoverageAreaType());
            initialValues.put("City", preAddedStores.getCity());
            initialValues.put("State", preAddedStores.getState());
            initialValues.put("PinCode", preAddedStores.getPinCode());
if( preAddedStores.getStoreCategoryType()==null)
            initialValues.put("StoreCategoryType", 0);
else
    initialValues.put("StoreCategoryType", preAddedStores.getStoreCategoryType());

            initialValues.put("StoreSectionCount", preAddedStores.getSectionCount());

            initialValues.put("flgApproveOrRejectOrNoActionOrReVisit", preAddedStores.getFlgStoreValidated());
            initialValues.put("SOLatCode", preAddedStores.getSOLatCode());
            initialValues.put("SOLongCode", preAddedStores.getSOLongCode());
            initialValues.put("flgStoreVisitMode", preAddedStores.getFlgStoreVisitMode());


            if( preAddedStores.getVisitStartTS()==null)
                initialValues.put("VisitStartTS", "N/A");
            else
                initialValues.put("VisitStartTS", preAddedStores.getVisitStartTS());

            if( preAddedStores.getVisitEndTS()==null)
                initialValues.put("VisitEndTS", "N/A");
            else
                initialValues.put("VisitEndTS", preAddedStores.getVisitEndTS());


            //initialValues.put("VisitEndTS", preAddedStores.getVisitEndTS());
            initialValues.put("LocProvider", preAddedStores.getLocProvider());
            initialValues.put("Accuracy", preAddedStores.getAccuracy());
            initialValues.put("BateryLeftStatus", preAddedStores.getBateryLeftStatus());

            if( preAddedStores.getIsStoreDataCompleteSaved()==null)
                initialValues.put("IsStoreDataCompleteSaved",0);
            else
                initialValues.put("IsStoreDataCompleteSaved", preAddedStores.getIsStoreDataCompleteSaved());



            initialValues.put("PaymentStage", preAddedStores.getPaymentStage());
            initialValues.put("flgLocationTrackEnabled", preAddedStores.getFlgLocationTrackEnabled());
            initialValues.put("StoreAddress", preAddedStores.getStoreAddress());
            initialValues.put("SOAccuracy", preAddedStores.getSOAccuracy());


            initialValues.put("flgSelfStoreNode", preAddedStores.getFlgSelfStore());
            initialValues.put("flgLocationServicesOnOff", 0);
            initialValues.put("flgGPSOnOff", 0);
            initialValues.put("flgNetworkOnOff", 0);
            initialValues.put("flgFusedOnOff", 0);
            initialValues.put("flgInternetOnOffWhileLocationTracking", 0);
            initialValues.put("flgRestart", 0);

            initialValues.put("flgStoreOrder", (flgIfStoreHasRecords+1));

            db.insert(DBHelper.DATABASE_TABLE_tblPreAddedStores, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();


    }


    public void savetblStoreImageListDetails(List<TblStoreImageList> tblStoreImageListDetails) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblStoreImageList tblStoreImageListDetail : tblStoreImageListDetails) {
            initialValues.put("StoreIDDB", tblStoreImageListDetail.getStoreIDDB());
            initialValues.put("StoreID", tblStoreImageListDetail.getStoreID());
            initialValues.put("StoreImagename", tblStoreImageListDetail.getStoreImagename());
            initialValues.put("ImageType", tblStoreImageListDetail.getImageType());
           initialValues.put("flgManagerUploaded", tblStoreImageListDetail.getFlgManagerUploaded());

            db.insert(DBHelper.DATABASE_TABLE_tblStoreImageList, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();

    }
    public void saveTblPreAddedStoresDataDetailsRetrofit(List<TblPreAddedStoresDataDetails> tblPreAddedStoresDataDetails) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblPreAddedStoresDataDetails preAddedStoresDataDetails : tblPreAddedStoresDataDetails) {
            initialValues.put("StoreIDDB", preAddedStoresDataDetails.getStoreIDDB());
            initialValues.put("GrpQuestID", preAddedStoresDataDetails.getGrpQuestID());
            initialValues.put("QstId", preAddedStoresDataDetails.getQstId());
            initialValues.put("AnsControlTypeID", preAddedStoresDataDetails.getAnsControlTypeID());
            initialValues.put("AnsTextVal", preAddedStoresDataDetails.getAns());
            initialValues.put("flgPrvVal", 2);
            db.insert(DBHelper.DATABASE_TABLE_tblPreAddedStoresDataDetails, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();

    }

    public void saveSOAPdataProductListRetrofit(List<TblProductListMaster> tblProductListMaster) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblProductListMaster ProductListMaster : tblProductListMaster) {
            initialValues.put("CategoryID", ProductListMaster.getCatID());
            initialValues.put("ProductID", ProductListMaster.getProductID());
            initialValues.put("ProductShortName", ProductListMaster.getProductShortName());
            initialValues.put("DisplayUnit", ProductListMaster.getDisplayUnit());
            initialValues.put("CalculateKilo", ProductListMaster.getCalculateKilo());
            initialValues.put("KGLiter", ProductListMaster.getKGLiter());
            initialValues.put("CatOrdr", 0);//as per abhinav sir not present in table
            initialValues.put("PrdOrdr", ProductListMaster.getPrdOrdr());
            initialValues.put("StoreCatNodeId", ProductListMaster.getCatID());
            initialValues.put("SearchField", ProductListMaster.getSearchField());
            initialValues.put("ManufacturerID", ProductListMaster.getManufacturerID());
            initialValues.put("RptUnitName", ProductListMaster.getRptUnitName());
            initialValues.put("PerbaseUnit", ProductListMaster.getPerbaseUnit());
            initialValues.put("HSNCode", ProductListMaster.getHSNCode());

            db.insert(DBHelper.DATABASE_TABLE_MAIN14, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();

    }

    public void saveProductSegementMapRetrofit(List<TblProductSegementMap> tblProductSegementMap) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblProductSegementMap ProductSegementMap : tblProductSegementMap) {

            initialValues.put("ProductID", ProductSegementMap.getProductId());
            initialValues.put("ProductMRP", ProductSegementMap.getProductMRP());
            initialValues.put("ProductRLP", ProductSegementMap.getProductRLP());
            initialValues.put("ProductTaxAmount", ProductSegementMap.getProductTaxAmount());
            initialValues.put("RetMarginPer", ProductSegementMap.getRetMarginPer());
            initialValues.put("VatTax", ProductSegementMap.getTax());//need to be changed
            initialValues.put("StandardRate", ProductSegementMap.getStandardRate());
            initialValues.put("StandardRateBeforeTax", ProductSegementMap.getStandardRateBeforeTax());
            initialValues.put("StandardTax", ProductSegementMap.getStandardTax());
            initialValues.put("flgPriceAva", ProductSegementMap.getFlgPriceAva());

            //flgPriceAva
            initialValues.put("BusinessSegmentId", ProductSegementMap.getBusinessSegmentId());
            initialValues.put("flgWholeSellApplicable", ProductSegementMap.getFlgPrdBulkPriceapplicable());
            initialValues.put("PriceRangeWholeSellApplicable", ProductSegementMap.getCutoffvalue());
            initialValues.put("StandardRateWholeSale", ProductSegementMap.getStandardRateWholeSale());
            initialValues.put("StandardRateBeforeTaxWholeSell", ProductSegementMap.getStandardRateBeforeTaxWholeSale());
            initialValues.put("StandardTaxWholeSale", ProductSegementMap.getStandardRateWholeSale());

            initialValues.put("NHILTax", 0.0);// ProductSegementMap.getNHIL());
            initialValues.put("GetFundTax", 0.0);// ProductSegementMap.getGetFund());
            db.insert(DBHelper.DATABASE_TABLE_MAINProductSegementMap, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();


    }

    public void delete_tblManagerMstr() {
        db.execSQL("DELETE FROM tblManagerMstr");

    }

    public long saveCategory(Integer CategoryID, String CategoryDescr, int CatOrdr) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("CategoryID", CategoryID);
        initialValues.put("CategoryDescr", CategoryDescr);
        initialValues.put("CatOrdr", CatOrdr);

        ////// System.out.println("inserting records in table 3..");

        return db.insert(DBHelper.DATABASE_TABLE_MAIN15, null, initialValues);
    }

    public void deletetblBankMaster() {

        db.execSQL("DELETE FROM tblBankMaster");
        db.execSQL("DELETE FROM tblInstrumentMaster");

    }

    public void savetblBankMaster(List<TblBankMaster> tblBankMaster) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblBankMaster BankMaster : tblBankMaster) {

            initialValues.put("BankId", BankMaster.getBankId());
            initialValues.put("BankName", BankMaster.getBankName());
            /*initialValues.put("LoginIdIns", BankMaster.getLoginIdIns());
            initialValues.put("TimeStampIns", BankMaster.getTimeStampIns());
            initialValues.put("LoginIdUpd", BankMaster.getLoginIdUpd());
            initialValues.put("TimeStampUpd", BankMaster.getTimeStampUpd());*/
            db.insert(DBHelper.DATABASE_TABLE_tblBankMaster, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();


    }

    public long savetblInstrumentMaster(Integer InstrumentModeId, String InstrumentMode, Integer InstrumentType) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("InstrumentModeId", InstrumentModeId);
        initialValues.put("InstrumentMode", InstrumentMode.toString().trim());
        initialValues.put("InstrumentType", InstrumentType);

        return db.insert(DBHelper.DATABASE_TABLE_tblInstrumentMaster, null, initialValues);
    }

    public void insertCycleId(Integer cycleId, String CycStartTime, BigInteger CycleTime) {
        ////open();

        ContentValues values = new ContentValues();

//tblDistributorProductLeft(DistributorNodeIdNodeType text null,OrderId text null,ProductId text null,OrderQntty text null);";
        values.put("CycleID", cycleId);
        values.put("CycStartTime", CycStartTime);
        values.put("CycleTime", "" + CycleTime);

        values.put("Sstat", 3);
        values.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        values.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        db.insert(DBHelper.DATABASE_TABLE_CYCLEID, null, values);


        //close();
    }

    public void Delete_tblGetReturnsReasonForPDAMstr() {
        db.execSQL("DELETE FROM tblGetReturnsReasonForPDAMstr");

    }

    public void fnInsertTBLReturnRsn(Integer stockStatusId, String stockStatus) {
        //tblGetReturnsReasonForPDAMstr(StockStatusId text not null,StockStatus text not null);";
        ContentValues content = new ContentValues();
        content.put("StockStatusId", stockStatusId);
        content.put("StockStatus", stockStatus);
        db.insertOrThrow(DBHelper.TABLE_RETURN_REASON, null, content);
    }

    public void Delete_tblSupplierMstrList() {
        db.execSQL("DELETE FROM tblSupplierMstrList");

    }

    public void savetblLastOutstanding(List<TblLastOutstanding> tblLastOutstanding) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblLastOutstanding tblLastOutstandingData : tblLastOutstanding) {
            initialValues.put("StoreID", "" + tblLastOutstandingData.getStoreid());
            initialValues.put("Outstanding", tblLastOutstandingData.getOutStanding());
            initialValues.put("AmtOverdue", 0.0);
            db.insert(DBHelper.DATABASE_TABLE_tblLastOutstanding, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();
        System.out.println("DATAENSERTEDEnd");


    }

    public void savetblInvoiceLastVisitDetails(List<TblInvoiceLastVisitDetails> tblInvoiceLastVisitDetails) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblInvoiceLastVisitDetails tblInvoiceLastVisitDetailsData : tblInvoiceLastVisitDetails) {
            initialValues.put("StoreID", "" + tblInvoiceLastVisitDetailsData.getStoreid());
            initialValues.put("InvCode", "" + tblInvoiceLastVisitDetailsData.getInvCode());
            initialValues.put("InvDate", "" + tblInvoiceLastVisitDetailsData.getInvDate());
            initialValues.put("OutstandingAmt", "" + tblInvoiceLastVisitDetailsData.getOutStandingAmt());
            // initialValues.put("AmtOverdue", ""));
            db.insert(DBHelper.DATABASE_TABLE_tblInvoiceLastVisitDetails, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();


    }

    public void deltblPDAGetExecutionSummary() {
        db.execSQL("DELETE FROM tblPDAGetExecutionSummary");
    }

    public void inserttblForPDAGetExecutionSummary(List<TblPDAGetExecutionSummary> tblPDAGetExecutionSummary) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblPDAGetExecutionSummary tblPDAGetExecutionSummaryData : tblPDAGetExecutionSummary) {
            initialValues.put("StoreID", tblPDAGetExecutionSummaryData.getStoreID());
            initialValues.put("OrderDate", tblPDAGetExecutionSummaryData.getOrderDate());
            initialValues.put("ProductID", tblPDAGetExecutionSummaryData.getProductID());
            initialValues.put("OrderQty", tblPDAGetExecutionSummaryData.getOrderQty());
            initialValues.put("flgInvStatus", tblPDAGetExecutionSummaryData.getFlgInvStatus());
            initialValues.put("ProductQty", tblPDAGetExecutionSummaryData.getProductQty());
            initialValues.put("PrdName", tblPDAGetExecutionSummaryData.getPrdName());


            db.insert(DBHelper.DATABASE_TABLE_MAIN146, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();


    }

    public void deletetblPDAGetLastOrderDetailsTotalValues() {
        db.execSQL("DELETE from tblPDAGetLastOrderDetailsTotalValues");
    }

    public void inserttblspForPDAGetLastOrderDetails_TotalValues(List<TblPDAGetLastOrderDetailsTotalValues> tblPDAGetLastOrderDetailsTotalValues) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblPDAGetLastOrderDetailsTotalValues tblPDAGetLastOrderDetailsTotalValuesData : tblPDAGetLastOrderDetailsTotalValues) {


            initialValues.put("StoreID", tblPDAGetLastOrderDetailsTotalValuesData.getStoreID());
            initialValues.put("OrderValue", tblPDAGetLastOrderDetailsTotalValuesData.getOrderValue());
            initialValues.put("ExecutionValue", tblPDAGetLastOrderDetailsTotalValuesData.getExecutionValue());

            db.insert(DBHelper.DATABASE_TABLE_MAIN145, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();


    }

    public void deltblPDAGetLastOrderDetailsData() {
        db.execSQL("Delete from tblPDAGetLastOrderDetails");
    }

    public void inserttblForPDAGetLastOrderDetails(List<TblPDAGetLastOrderDetails> tblPDAGetLastOrderDetails) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblPDAGetLastOrderDetails tblPDAGetLastOrderDetailsData : tblPDAGetLastOrderDetails) {
            initialValues.put("StoreID", tblPDAGetLastOrderDetailsData.getStoreID());
            initialValues.put("OrderDate", tblPDAGetLastOrderDetailsData.getOrderDate());
            initialValues.put("ProductID", tblPDAGetLastOrderDetailsData.getProductID());
            initialValues.put("OrderQty", tblPDAGetLastOrderDetailsData.getOrderQty());
            initialValues.put("FreeQty", tblPDAGetLastOrderDetailsData.getFreeQty());
            initialValues.put("PrdName", tblPDAGetLastOrderDetailsData.getPrdName());
            initialValues.put("ExecutionQty", tblPDAGetLastOrderDetailsData.getExecutionQty());

            db.insert(DBHelper.DATABASE_TABLE_MAIN144, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();


    }

    public void deletetblPDAGetLastVisitDetails() {
        db.execSQL("DELETE FROM tblPDAGetLastVisitDetails");

    }

    public void insertDistributorLeftOrderId(String distributorNodeIdNodeType, String orderId, Integer flgProcessedInvoice) {
        ////open();

        ContentValues values = new ContentValues();

//tblDistributorProductLeft(DistributorNodeIdNodeType text null,OrderId text null,ProductId text null,OrderQntty text null);";
        values.put("DistributorNodeIdNodeType", distributorNodeIdNodeType);
        values.put("OrderId", orderId);
        values.put("flgProcessedInvoice", flgProcessedInvoice);

        db.insert(DBHelper.DATABASE_TABLE_DISTRIBUTOR_LEFTPRODUCT, null, values);


        //close();
    }

    public void inserttblForPDAGetLastVisitDetails(List<TblPDAGetLastVisitDetails> tblPDAGetLastVisitDetails) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblPDAGetLastVisitDetails tblPDAGetLastVisitDetailsData : tblPDAGetLastVisitDetails) {
            initialValues.put("StoreID", tblPDAGetLastVisitDetailsData.getStoreID());
            initialValues.put("Date123", tblPDAGetLastVisitDetailsData.getDate());
            initialValues.put("Order123", tblPDAGetLastVisitDetailsData.getOrder());
            initialValues.put("Stock", tblPDAGetLastVisitDetailsData.getStock());
            initialValues.put("SKUName", tblPDAGetLastVisitDetailsData.getSKUName());
            initialValues.put("ExecutionQty", tblPDAGetLastVisitDetailsData.getExecutionQty());
            initialValues.put("ProductID", tblPDAGetLastVisitDetailsData.getProductID());
            // // System.out.println("Tbl creation string for Sunil Data Print Data insert in  DATABASE_TABLE_MAIN143");
            db.insert(DBHelper.DATABASE_TABLE_MAIN143, null, initialValues);

        }
        db.setTransactionSuccessful();
        db.endTransaction();

    }

    public void deletetblPDAGetLastOrderDateData() {
        db.execSQL("Delete from tblPDAGetLastOrderDate");
    }

    public void inserttblForPDAGetLastOrderDate(List<TblPDAGetLastOrderDate> tblPDAGetLastOrderDate) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblPDAGetLastOrderDate tblPDAGetLastOrderDateData : tblPDAGetLastOrderDate) {
            initialValues.put("StoreID", tblPDAGetLastOrderDateData.getStoreID());
            initialValues.put("OrderDate", tblPDAGetLastOrderDateData.getOrderDate());
            initialValues.put("flgExecutionSummary", tblPDAGetLastOrderDateData.getFlgExecutionSummary());


            db.insert(DBHelper.DATABASE_TABLE_MAIN142, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();


    }

    public void deletetblPDAGetLastVisitDate() {
        db.execSQL("Delete from tblPDAGetLastVisitDate");
    }

    public void inserttblForPDAGetLastVisitDate(List<TblPDAGetLastVisitDate> tblPDAGetLastVisitDate) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblPDAGetLastVisitDate tblPDAGetLastVisitDateData : tblPDAGetLastVisitDate) {
            initialValues.put("StoreID", tblPDAGetLastVisitDateData.getStoreID());
            initialValues.put("VisitDate", tblPDAGetLastVisitDateData.getVIsitDate());
            initialValues.put("flgOrder", tblPDAGetLastVisitDateData.getFlgOrder());
            db.insert(DBHelper.DATABASE_TABLE_MAIN141, null, initialValues);
        }

        db.setTransactionSuccessful();
        db.endTransaction();


    }

    public void deletetblPDAGetLODQty() {
        db.execSQL("Delete from tblPDAGetLODQty");
    }

    public void inserttblLODOnLastSalesSummary(List<TblPDAGetLODQty> tblPDAGetLODQty) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblPDAGetLODQty tblPDAGetLODQtyData : tblPDAGetLODQty) {
            initialValues.put("StoreID", tblPDAGetLODQtyData.getStoreID());
            initialValues.put("Date", tblPDAGetLODQtyData.getDate());
            initialValues.put("SKUID", tblPDAGetLODQtyData.getSKUID());
            initialValues.put("Qty", tblPDAGetLODQtyData.getQty());
            initialValues.put("SKUName", tblPDAGetLODQtyData.getSKUName());

            //// // System.out.println("Aaaj insert  value table 103");

            db.insert(DBHelper.DATABASE_TABLE_MAIN103, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();

    }

    public void savetblProductListLastVisitStockOrOrderMstr(List<TblProductListLastVisitStockOrOrderMstr> tblProductListLastVisitStockOrOrderMstr) {
//(tblActualVisitStock (storeID text null,ProductID text null,Stock text null,Sstat integer null);";
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblProductListLastVisitStockOrOrderMstr tblProductListLastVisitStockOrOrderMstrData : tblProductListLastVisitStockOrOrderMstr) {

            initialValues.put("StoreID", tblProductListLastVisitStockOrOrderMstrData.getStoreID());
            initialValues.put("PrdID", tblProductListLastVisitStockOrOrderMstrData.getPrdID());


            db.insert(DBHelper.DATABASE_TABLE_tblProductListLastVisitStockOrOrderMstr, null, initialValues);

        }
        db.endTransaction();
    }

    private void deleteAlreadyStoreIdExist(String CustomStoreID, String StoreIDPDA) {
        db.execSQL("DELETE FROM tblStoreList WHERE StoreID ='" + CustomStoreID + "' OR StoreID='" + StoreIDPDA + "'");
        db.execSQL("DELETE FROM tblNewStoreListEntries WHERE StoreID ='" + CustomStoreID + "' OR StoreID='" + StoreIDPDA + "'");

    }

    public void saveSOAPdataStoreList(List<TblStoreListMaster> tblStoreListMaster, HashMap<String, String> hmapStoreIdSstat, HashMap<String, String> hmapflgOrderType, HashMap<String, String> hmapStoreIdNewStore) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblStoreListMaster tblStoreListMasterData : tblStoreListMaster) {

            deleteAlreadyStoreIdExist(tblStoreListMasterData.getStoreID(), tblStoreListMasterData.getStoreIDPDA());
            int Sstat = 0;
            int flgOrderType = 0;
            int ISNewStore = 0;
            initialValues.put("IMEINumber", CommonInfo.imei.toString());


            if (hmapStoreIdSstat != null && hmapStoreIdSstat.size() > 0) {
                if (hmapStoreIdSstat.containsKey(tblStoreListMasterData.getStoreIDPDA()) || hmapStoreIdSstat.containsKey(tblStoreListMasterData.getStoreID())) {
                    if (hmapStoreIdSstat.containsKey(tblStoreListMasterData.getStoreIDPDA())) {
                        initialValues.put("StoreID", tblStoreListMasterData.getStoreIDPDA().toString());
                        tblStoreListMasterData.setStoreID(tblStoreListMasterData.getStoreIDPDA());
                    } else {
                        initialValues.put("StoreID", tblStoreListMasterData.getStoreID().toString());
                    }

                    // String storeInTable=hmapStoreIdSstat.get(tblStoreListMasterData.getStoreIDPDA());

                } else {
                    initialValues.put("StoreID", tblStoreListMasterData.getStoreID().toString());
                }
                if (hmapStoreIdSstat.containsKey("" + tblStoreListMasterData.getStoreID()) || hmapStoreIdSstat.containsKey("" + tblStoreListMasterData.getStoreIDPDA())) {
                    Sstat = Integer.parseInt(hmapStoreIdSstat.get("" + tblStoreListMasterData.getStoreID()));
                    ISNewStore = Integer.parseInt(hmapStoreIdNewStore.get("" + tblStoreListMasterData.getStoreID()));
                    flgOrderType = Integer.parseInt(hmapflgOrderType.get("" + tblStoreListMasterData.getStoreID()));

                } else {
                    Sstat =Integer.parseInt(tblStoreListMasterData.getSstat().toString()) ;
                    ISNewStore = 0;

                }
            } else {
                Sstat =Integer.parseInt(tblStoreListMasterData.getSstat().toString()) ;
                initialValues.put("StoreID", tblStoreListMasterData.getStoreID());
            }

            // initialValues.put("StoreID", tblStoreListMasterData.getStoreID());
            initialValues.put("OwnerName", tblStoreListMasterData.getOwnerName());
            initialValues.put("StoreContactNo", tblStoreListMasterData.getStoreContactNo());
            initialValues.put("StoreType", tblStoreListMasterData.getStoreType());
            initialValues.put("StoreCatType", tblStoreListMasterData.getStoreCatType());
            initialValues.put("StoreName", tblStoreListMasterData.getStoreName());
            initialValues.put("StoreAddress", tblStoreListMasterData.getStoreAddress());
            initialValues.put("chainID", 1);
            initialValues.put("IsNewStoreDataCompleteSaved", 0);

            initialValues.put("SalesPersonName", tblStoreListMasterData.getSalesPersonName());
            initialValues.put("SalesPersonContact", tblStoreListMasterData.getSalesPersonContact());


            initialValues.put("StoreLatitude", tblStoreListMasterData.getStoreLatitude());
            initialValues.put("StoreLongitude", tblStoreListMasterData.getStoreLongitude());
            if(tblStoreListMasterData.getLastVisitDate()==null)
                initialValues.put("LastVisitDate", "NA");
            else
            initialValues.put("LastVisitDate", tblStoreListMasterData.getLastVisitDate());

            if(tblStoreListMasterData.getLastTransactionDate()==null)
                initialValues.put("LastTransactionDate", "NA");
            else
            initialValues.put("LastTransactionDate", tblStoreListMasterData.getLastTransactionDate());
            // initialValues.put("Sstat", tblStoreListMasterData.getSstat());
            initialValues.put("Sstat", Sstat);
            initialValues.put("ISNewStore", ISNewStore);
            initialValues.put("PaymentStage", tblStoreListMasterData.getPaymentStage());
            initialValues.put("StoreRouteID", tblStoreListMasterData.getRouteID());
            initialValues.put("RouteNodeType", tblStoreListMasterData.getRouteNodeType());


            initialValues.put("flgHasQuote", tblStoreListMasterData.getFlgHasQuote());
            initialValues.put("flgAllowQuotation", tblStoreListMasterData.getFlgAllowQuotation());

            initialValues.put("StoreCatNodeId", "0");
            initialValues.put("flgGSTCapture", "0");
            initialValues.put("flgGSTCompliance", "0");
            initialValues.put("GSTNumber", "0");
            initialValues.put("flgGSTRecordFromServer", "0");
            initialValues.put("flgStoreOrder", "0");

            initialValues.put("OutStanding", tblStoreListMasterData.getOutStanding());
            initialValues.put("OverDue", tblStoreListMasterData.getOverDue());
            initialValues.put("flgRuleTaxVal", tblStoreListMasterData.getFlgRuleTaxVal());


            initialValues.put("StoreCity", tblStoreListMasterData.getStoreCity());
            initialValues.put("StorePinCode", tblStoreListMasterData.getStorePinCode());
            initialValues.put("StoreState", tblStoreListMasterData.getStoreState());

            initialValues.put("DBR", tblStoreListMasterData.getDBR());
            initialValues.put("flgTransType", tblStoreListMasterData.getFlgTransType());

            initialValues.put("StoreClose", tblStoreListMasterData.getIsClose());
            initialValues.put("IsComposite", tblStoreListMasterData.getIsComposite());
            initialValues.put("StoreStateID", tblStoreListMasterData.getStateID());
            initialValues.put("StoreCityID", tblStoreListMasterData.getCityID());
            initialValues.put("flgOrderType", flgOrderType);
            initialValues.put("flgCollDefControl", tblStoreListMasterData.getFlgCollDefControl());
            initialValues.put("CollectionPer", tblStoreListMasterData.getCollectionPer());
            initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
            initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));
            initialValues.put("P3MValue", tblStoreListMasterData.getP3MValue());
            initialValues.put("MTDValue", tblStoreListMasterData.getMTDValue());
            initialValues.put("NoOfBrands", tblStoreListMasterData.getNoOfBrands());
            initialValues.put(DBHelper.CoverageAreaNodeID, tblStoreListMasterData.getCoverageAreaNodeID());
            initialValues.put(DBHelper.CoverageAreaNodeType, tblStoreListMasterData.getCoverageAreaNodeType());

            Log.d("saveSOAPdataStoreList",""+db.insert(DBHelper.DATABASE_TABLE_MAIN13, null, initialValues));
        }
        db.setTransactionSuccessful();
        db.endTransaction();

       /* int flgIfStoreHasRecords=0;
        try {
            flgIfStoreHasRecords=CheckTotalStoreCount();
        }
        catch (Exception ex)
        {

        }

        if(flgGSTCapture.equals(""))
        {
            flgGSTCapture="1";
        }
        if(flgGSTCompliance.equals(""))
        {
            flgGSTCompliance="0";
        }
        if(GSTNumber.equals(""))
        {
            GSTNumber="0";
        }*/


    }

    public void saveSOAPdataStoreListAddressMap(List<TblStoreListWithPaymentAddress> tblStoreListWithPaymentAddress) {
        db.beginTransaction();
        for (TblStoreListWithPaymentAddress tblStoreListWithPaymentAddressData : tblStoreListWithPaymentAddress) {
            ContentValues initialValues = new ContentValues();

            initialValues.put("StoreID", tblStoreListWithPaymentAddressData.getStoreID());
            initialValues.put("OutAddTypeID", tblStoreListWithPaymentAddressData.getOutAddTypeID());
            initialValues.put("Address", tblStoreListWithPaymentAddressData.getAddress());
            initialValues.put("AddressDet", tblStoreListWithPaymentAddressData.getAddressDet());
            initialValues.put("OutAddID", tblStoreListWithPaymentAddressData.getOutAddID());

            db.insert(DBHelper.DATABASE_TABLE_StoreAddressMapDetailsMstr, null, initialValues);
        }
        db.setTransactionSuccessful();
        db.endTransaction();


    }


    //map distributor
 /*  public long  saveSuplierMstrData(int NodeID, int NodeType, String Descr, Double latCode,Double LongCode, int flgMapped,String Address,String State,String City,Integer PinCode,String ContactNumber,String TaxNumber,String EmailID,int flgStockManage,int flgDefault)
    {
        ContentValues initialValues = new ContentValues();

        initialValues.put("NodeID", NodeID);
        initialValues.put("NodeType", NodeType);
        initialValues.put("Descr", Descr);
        initialValues.put("latCode", latCode);
        initialValues.put("LongCode", LongCode);
        initialValues.put("flgMapped", flgMapped);
        initialValues.put("Address", Address);
        initialValues.put("State", State);
        initialValues.put("City", City);
        initialValues.put("PinCode", PinCode);
        initialValues.put("ContactNumber", ContactNumber);
        initialValues.put("TaxNumber", TaxNumber);
        initialValues.put("flgStockManage", flgStockManage);
        initialValues.put("EmailID", EmailID);
        initialValues.put("flgDefault", flgDefault);
        //0=Not To be mapped Again,1=Can Map Distributor

        return db.insert(TABLE_tblSupplierMstrList, null, initialValues);
    }*/

    public void insertMinDelQty(List<TblStoreSomeProdQuotePriceMstr> tblStoreSomeProdQuotePriceMstr) {

        // "create table tblMinDeliverQntty (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
        db.beginTransaction();
        ContentValues values = new ContentValues();
        for (TblStoreSomeProdQuotePriceMstr tblStoreSomeProdQuotePriceMstrData : tblStoreSomeProdQuotePriceMstr) {
            values.put("PrdId", tblStoreSomeProdQuotePriceMstrData.getPrdId());
            values.put("StoreID", tblStoreSomeProdQuotePriceMstrData.getStoreId());
            values.put("QPBT", tblStoreSomeProdQuotePriceMstrData.getQPBT());
            values.put("QPAT", tblStoreSomeProdQuotePriceMstrData.getQPAT());
            values.put("QPTaxAmount", tblStoreSomeProdQuotePriceMstrData.getQPTaxAmt());
            values.put("MinDlvrQty", tblStoreSomeProdQuotePriceMstrData.getMinDlvryQty());
            values.put("UOMID", tblStoreSomeProdQuotePriceMstrData.getUOMID());

            db.insert(DBHelper.TABLE_StoreSomeProdQuotePriceMstr, null, values);
        }
        db.setTransactionSuccessful();
        db.endTransaction();

    }

    public long saveSuplierMstrData(int NodeID, int NodeType, String Descr, Double latCode, Double LongCode, int flgMapped, String Address, String State, String City, String PinCode, String ContactNumber, String TaxNumber, String EmailID, int flgStockManage, int flgDefault) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("NodeID", NodeID);
        initialValues.put("NodeType", NodeType);
        initialValues.put("Descr", Descr);
        initialValues.put("latCode", latCode);
        initialValues.put("LongCode", LongCode);
        initialValues.put("flgMapped", flgMapped);
        initialValues.put("Address", Address);
        initialValues.put("State", State);
        initialValues.put("City", City);
        initialValues.put("PinCode", PinCode);
        initialValues.put("ContactNumber", ContactNumber);
        initialValues.put("TaxNumber", TaxNumber);
        initialValues.put("flgStockManage", flgStockManage);
        initialValues.put("EmailID", EmailID);
        initialValues.put("flgDefault", flgDefault);
        //0=Not To be mapped Again,1=Can Map Distributor

        return db.insert(DBHelper.TABLE_tblSupplierMstrList, null, initialValues);
    }

    public void insertDistributorStock(List<TblVanProductStock> tblVanProductStock) {
        db.beginTransaction();
        ContentValues values = new ContentValues();
        for (TblVanProductStock tblVanProductStockData : tblVanProductStock) {
            values.put("PrdctId", tblVanProductStockData.getProductNodeID());

            values.put("DistributorNodeIdNodeType", tblVanProductStockData.getCustomer());
            values.put("SKUName", tblVanProductStockData.getSKUName());

            values.put("OpeningStock", tblVanProductStockData.getDayOpeningStock());
            values.put("TodaysAddedStock", tblVanProductStockData.getTodaysAddedStock());
            values.put("CycleAddedStock", tblVanProductStockData.getCycleAddedStock());

            values.put("StockQntty", tblVanProductStockData.getFinalStockQty());
            values.put("NetSalesQty", tblVanProductStockData.getNetSalesQty());
            values.put("TodaysUnloadStk", tblVanProductStockData.getTodaysUnloadStock());
            values.put("CycleUnloadStk", tblVanProductStockData.getCycleUnloadStock());

            values.put("CategoryID", tblVanProductStockData.getCategoryID());

            db.insert(DBHelper.DATABASE_TABLE_TMP_DISTRIBUTOR_STOCK, null, values);
        }
        db.setTransactionSuccessful();
        db.endTransaction();

    }


    public void updateflgOrderTypeIntblStoreList(String StoreID, int flgOrderType) {

        try {
            final ContentValues values = new ContentValues();
            values.put("flgOrderType", flgOrderType);

            int affected = db.update("tblStoreList", values, "StoreID=?",
                    new String[]{StoreID});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {
        }

    }


    public int fnGetflgOrderTypeAgainstStore(String StoreID) {

        int flgOrderType = 0;
        Cursor cursor = db.rawQuery("SELECT flgOrderType FROM tblStoreList WHERE StoreID='" + StoreID + "'", null);

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    flgOrderType = Integer.parseInt(cursor.getString(0));
                }

            }
            return flgOrderType;

        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }

    }

    public void fnInsertOrUpdate_tblAllServicesCalledSuccessfull(int flgAllServicesCalledOrNot) {
        try {
            Cursor cursor = db.rawQuery("SELECT * FROM " + DBHelper.TABLE_tblAllServicesCalledSuccessfull + "", null);
            ContentValues initialValues = new ContentValues();
            initialValues.put("flgAllServicesCalledOrNot", flgAllServicesCalledOrNot);
            if (cursor.getCount() > 0) {
                if (cursor != null) {
                    cursor.close();
                }
                db.execSQL("UPDATE tblAllServicesCalledSuccessfull SET flgAllServicesCalledOrNot=" + flgAllServicesCalledOrNot);

            } else {
                if (cursor != null) {
                    cursor.close();
                }
                db.insert(DBHelper.TABLE_tblAllServicesCalledSuccessfull, null, initialValues);
            }
        } catch (Exception ex) {
            String ex1 = ex.getMessage();
        } finally {

        }
    }


    public int fnhasRecodsRetrofitApiCalledSucessfullyOrNot() {
        Cursor cursorE2 = db.rawQuery("SELECT Count(*) FROM tblAllServicesCalledSuccessfull", null);
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                cursorE2.moveToFirst();
                chkI = Integer.parseInt(cursorE2.getString(0).toString());
            }

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        return chkI;
    }

    public int fnCheckRetrofitApiCalledSucessfullyOrNot() {
        Cursor cursorE2 = db.rawQuery("SELECT ifnull(flgAllServicesCalledOrNot,0) FROM tblAllServicesCalledSuccessfull", null);
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                cursorE2.moveToFirst();
                chkI = Integer.parseInt(cursorE2.getString(0).toString());
            }

        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        return chkI;
    }


    public void inserttblInvoiceExecutionProductList(List<TblInvoiceExecutionProductList> tblInvoiceExecutionProductList) {

        db.beginTransaction();
        ContentValues values = new ContentValues();
        for (TblInvoiceExecutionProductList tblInvoiceExecutionProductListData : tblInvoiceExecutionProductList) {
            values.put("ProductId", tblInvoiceExecutionProductListData.getProductId());

            values.put("ProductName", tblInvoiceExecutionProductListData.getProductName());
            System.out.println("Abhinav Raj:" + tblInvoiceExecutionProductListData.getProductId() + "^" + tblInvoiceExecutionProductListData.getProductName());

            db.insert(DBHelper.DATABASE_TABLE_MAIN112, null, values);
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void inserttblProductWiseInvoice(List<TblProductWiseInvoice> tblProductWiseInvoice, HashMap<String, String> hmapInvoiceOrderIDandStatus) {


        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for (TblProductWiseInvoice tblProductWiseInvoiceData : tblProductWiseInvoice) {
            int flgToInsrtOrNot = 0;
            if (hmapInvoiceOrderIDandStatus.containsKey(tblProductWiseInvoiceData.getOrderID())) {
                if (hmapInvoiceOrderIDandStatus.get(tblProductWiseInvoiceData.getOrderID()).equals("4")) {

                } else {
                    flgToInsrtOrNot = 1;

                }
            } else {
                flgToInsrtOrNot = 1;
            }
            if (flgToInsrtOrNot == 1) {
                initialValues.put("StoreID", tblProductWiseInvoiceData.getStoreID());
                initialValues.put("ProductID", tblProductWiseInvoiceData.getProductId());
                initialValues.put("OrderQty", tblProductWiseInvoiceData.getOrderQty());
                initialValues.put("ProductPrice", tblProductWiseInvoiceData.getProductPrice());
                initialValues.put("InvoiceForDate", tblProductWiseInvoiceData.getInVoiceForDate());
                initialValues.put("OrderID", tblProductWiseInvoiceData.getOrderID());
                initialValues.put("CatID", tblProductWiseInvoiceData.getCatID());
                initialValues.put("Freeqty", tblProductWiseInvoiceData.getFreeQty());
                initialValues.put("TotLineDiscVal", tblProductWiseInvoiceData.getTotLineDiscVal());

                db.insert(DBHelper.DATABASE_TABLE_MAIN113, null, initialValues);
            }

        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void truncateAllSummaryDayDataTable() {
        db.execSQL("DELETE FROM tblAllSummaryDay");

    }


    //nitika
    public void savetblAllSummaryDayAndMTD(List<TblAllSummaryDay> tblAllSummaryDays) {
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        int AutoId = 0;
        for (TblAllSummaryDay tblAllSummaryDaysData : tblAllSummaryDays) {
            initialValues.put("AutoId", AutoId);
            initialValues.put("Measures", tblAllSummaryDaysData.getMeasures());
            initialValues.put("TodaysSummary", tblAllSummaryDaysData.getTodaysSummary());
            initialValues.put("MTDSummary", tblAllSummaryDaysData.getMTDSummary());

            initialValues.put("TableNo", tblAllSummaryDaysData.getTableNo());
            initialValues.put("ColorCode", tblAllSummaryDaysData.getColorCode());

            db.insert(DBHelper.DATABASE_TABLE_DayAndSummary, null, initialValues);
            AutoId = AutoId + 1;
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }


    public void savetblSKUWiseDaySummary(List<TblSKUWiseDaySummary> tblSKUWiseDaySummary) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        int AutoId = 0;
        for (TblSKUWiseDaySummary tblSKUWiseDaySummaryData : tblSKUWiseDaySummary) {
            initialValues.put("AutoId", AutoId);
            initialValues.put("ProductId", tblSKUWiseDaySummaryData.getProductId());
            initialValues.put("Product", tblSKUWiseDaySummaryData.getProduct());
            initialValues.put("MRP", tblSKUWiseDaySummaryData.getMRP());
            initialValues.put("Rate", tblSKUWiseDaySummaryData.getRate());
            initialValues.put("NoofStores", tblSKUWiseDaySummaryData.getNoofStores());
            initialValues.put("OrderQty", tblSKUWiseDaySummaryData.getOrderQty());
            initialValues.put("FreeQty", tblSKUWiseDaySummaryData.getFreeQty());
            initialValues.put("DiscValue", tblSKUWiseDaySummaryData.getDiscValue());

            initialValues.put("ValBeforeTax", tblSKUWiseDaySummaryData.getValBeforeTax());
            initialValues.put("TaxValue", tblSKUWiseDaySummaryData.getTaxValue());
            initialValues.put("ValAfterTax", tblSKUWiseDaySummaryData.getValAfterTax());
            initialValues.put("Lvl", tblSKUWiseDaySummaryData.getLvl());
            initialValues.put("Category", tblSKUWiseDaySummaryData.getCategory());
            initialValues.put("UOM", tblSKUWiseDaySummaryData.getUOM());
            db.insert(DBHelper.DATABASE_TABLE_MAIN231, null, initialValues);
            AutoId = AutoId + 1;
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void truncateSKUDataTable() {
        db.execSQL("DELETE FROM tblSKUWiseDaySummary");

    }

    public void savetblStoreWiseDaySummary(List<TblStoreWiseDaySummary> tblStoreWiseDaySummary) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        int AutoId = 0;
        for (TblStoreWiseDaySummary tblStoreWiseDaySummaryData : tblStoreWiseDaySummary) {
            initialValues.put("AutoId", AutoId);
            initialValues.put("Store", tblStoreWiseDaySummaryData.getStore());
            initialValues.put("LinesperBill", tblStoreWiseDaySummaryData.getLinesperBill());
            initialValues.put("StockValue", tblStoreWiseDaySummaryData.getStockValue());
            initialValues.put("DiscValue", tblStoreWiseDaySummaryData.getDiscValue());
            initialValues.put("ValBeforeTax", tblStoreWiseDaySummaryData.getValBeforeTax());
            initialValues.put("TaxValue", tblStoreWiseDaySummaryData.getTaxValue());
            initialValues.put("ValAfterTax", tblStoreWiseDaySummaryData.getValAfterTax());
            initialValues.put("Lvl", tblStoreWiseDaySummaryData.getLvl());
            db.insert(DBHelper.DATABASE_TABLE_MAIN232, null, initialValues);
            AutoId = AutoId + 1;
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void truncateStoreWiseDataTable() {
        db.execSQL("DELETE FROM tblStoreWiseDaySummary");

    }

    public void truncateStoreAndSKUWiseDataTable() {
        db.execSQL("DELETE FROM tblStoreSKUWiseDaySummary");

    }

    public void savetblStoreSKUWiseDaySummary(List<TblStoreSKUWiseDaySummary> tblStoreSKUWiseDaySummary) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        int AutoId = 0;
        for (TblStoreSKUWiseDaySummary tblStoreSKUWiseDaySummaryData : tblStoreSKUWiseDaySummary) {
            initialValues.put("AutoId", AutoId);
            initialValues.put("ProductId", tblStoreSKUWiseDaySummaryData.getProductId());
            initialValues.put("Product", tblStoreSKUWiseDaySummaryData.getProduct());
            initialValues.put("MRP", tblStoreSKUWiseDaySummaryData.getMRP());
            initialValues.put("Rate", tblStoreSKUWiseDaySummaryData.getRate());
            initialValues.put("OrderQty", tblStoreSKUWiseDaySummaryData.getOrderQty());
            initialValues.put("FreeQty", tblStoreSKUWiseDaySummaryData.getFreeQty());
            initialValues.put("DiscValue", tblStoreSKUWiseDaySummaryData.getDiscValue());
            initialValues.put("ValBeforeTax", tblStoreSKUWiseDaySummaryData.getValBeforeTax());
            initialValues.put("TaxValue", tblStoreSKUWiseDaySummaryData.getTaxValue());
            initialValues.put("ValAfterTax", tblStoreSKUWiseDaySummaryData.getValAfterTax());
            initialValues.put("Lvl", tblStoreSKUWiseDaySummaryData.getLvl());
            initialValues.put("StoreId", tblStoreSKUWiseDaySummaryData.getStoreId());
            initialValues.put("StockQty", tblStoreSKUWiseDaySummaryData.getStockQty());
            db.insert(DBHelper.DATABASE_TABLE_MAIN233, null, initialValues);
            AutoId = AutoId + 1;
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }


    public ArrayList<InvoiceList> getDistinctInvoiceNumbersNew() {
        //open();

        Cursor cur = null;
        ArrayList<InvoiceList> arrDistinctInvoiceNumbersNew = new ArrayList<InvoiceList>();

        //tblDistributorOrderPdaId(DistributorNodeIdNodeType text null,OrderPDAID text null,ProductId text null,OrderQntty text null,Sstat integer not null);";
        try {
            if (CommonInfo.flgDrctslsIndrctSls == 1) {
                cur = db.rawQuery("Select DISTINCT ServingDBRId,InvoiceNumber from tblInvoiceDetails", null);
            } else {
                cur = db.rawQuery("Select DISTINCT ServingDBRId,TmpInvoiceCodePDA from tblInvoiceDetails", null);
            }
            if (cur.getCount() > 0) {

                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        InvoiceList invoiceList = new InvoiceList();
                        invoiceList.setCustomer(cur.getString(0));
                        invoiceList.setpDAOrderId(cur.getString(1));
                        arrDistinctInvoiceNumbersNew.add(invoiceList);
                        cur.moveToNext();
                    }
                }

            }
        } catch (Exception e) {

        } finally {
            if (cur != null) {
                cur.close();
            }
            // close();
            return arrDistinctInvoiceNumbersNew;
        }

    }

    public void savetblTargetVsAchievedSummary(List<TblActualVsTargetReport> tblActualVsTargetReport) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        int AutoId = 0;
        for (TblActualVsTargetReport tblActualVsTargetReportData : tblActualVsTargetReport) {
            initialValues.put("AutoId", AutoId);
            initialValues.put("Descr", tblActualVsTargetReportData.getDescr());
            initialValues.put("TodayTarget", tblActualVsTargetReportData.getTodayTarget());
            initialValues.put("TodayAchieved", tblActualVsTargetReportData.getTodayAchieved());
            initialValues.put("TodayBal", tblActualVsTargetReportData.getTodayBal());
            initialValues.put("Todayflg", tblActualVsTargetReportData.getTodayflg());
            initialValues.put("MonthTarget", tblActualVsTargetReportData.getMonthTarget());
            initialValues.put("MonthAchieved", tblActualVsTargetReportData.getMonthAchieved());
            initialValues.put("MonthBal", tblActualVsTargetReportData.getMonthBal());
            initialValues.put("Monthflg", tblActualVsTargetReportData.getMonthflg());
            initialValues.put("ValTgtOrPrdctFlg", 1);
            db.insert(DBHelper.DATABASE_TABLE_MAIN235, null, initialValues);
            AutoId = AutoId + 1;
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }


    public void saveValueVolumeTarget(List<TblValueVolumeTarget> tblValueVolumeTarget) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        int AutoId = 0;
        for (TblValueVolumeTarget tblValueVolumeTargetData : tblValueVolumeTarget) {
            initialValues.put("AutoId", AutoId);
            initialValues.put("Descr", tblValueVolumeTargetData.getDescr());
            initialValues.put("TodayTarget", tblValueVolumeTargetData.getTodayTarget());
            initialValues.put("TodayAchieved", tblValueVolumeTargetData.getTodayAchieved());
            initialValues.put("TodayBal", tblValueVolumeTargetData.getTodayBal());
            initialValues.put("Todayflg", tblValueVolumeTargetData.getTodayflg());
            initialValues.put("MonthTarget", tblValueVolumeTargetData.getMonthTarget());
            initialValues.put("MonthAchieved", tblValueVolumeTargetData.getMonthAchieved());
            initialValues.put("MonthBal", tblValueVolumeTargetData.getMonthBal());
            initialValues.put("Monthflg", tblValueVolumeTargetData.getMonthflg());
            initialValues.put("ValTgtOrPrdctFlg", 0);
            db.insert(DBHelper.DATABASE_TABLE_MAIN235, null, initialValues);
            AutoId = AutoId + 1;
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }


    //outlet summary
    public void savetblDAGetAddedOutletSummaryReport(List<TblDAGetAddedOutletSummaryReport> tblDAGetAddedOutletSummaryReport) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        int AutoId = 0;
        for (TblDAGetAddedOutletSummaryReport tblDAGetAddedOutletSummaryReportData : tblDAGetAddedOutletSummaryReport) {
            initialValues.put("Header", tblDAGetAddedOutletSummaryReportData.getHeader());
            initialValues.put("Child", tblDAGetAddedOutletSummaryReportData.getChild());
            initialValues.put("TotalStores", tblDAGetAddedOutletSummaryReportData.getTotalStores());
            initialValues.put("Validated", tblDAGetAddedOutletSummaryReportData.getValidated());
            initialValues.put("Pending", tblDAGetAddedOutletSummaryReportData.getPending());
            initialValues.put("FlgNormalOverall", 0);
            db.insert(DBHelper.DATABASE_TABLE_tblDAGetAddedOutletSummaryReport, null, initialValues);
            AutoId = AutoId + 1;
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void savetblDAGetAddedOutletSummaryOverallReport(List<TblDAGetAddedOutletSummaryOverallReport> tblDAGetAddedOutletSummaryOverallReport) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        int AutoId = 0;
        for (TblDAGetAddedOutletSummaryOverallReport tblDAGetAddedOutletSummaryOverallReportData : tblDAGetAddedOutletSummaryOverallReport) {
            initialValues.put("Header", tblDAGetAddedOutletSummaryOverallReportData.getHeader());
            initialValues.put("Child", tblDAGetAddedOutletSummaryOverallReportData.getChild());
            initialValues.put("TotalStores", tblDAGetAddedOutletSummaryOverallReportData.getTotalStores());
            initialValues.put("Validated", tblDAGetAddedOutletSummaryOverallReportData.getValidated());
            initialValues.put("Pending", tblDAGetAddedOutletSummaryOverallReportData.getPending());
            initialValues.put("FlgNormalOverall", 1);
            db.insert(DBHelper.DATABASE_TABLE_tblDAGetAddedOutletSummaryReport, null, initialValues);
            AutoId = AutoId + 1;
        }
        db.setTransactionSuccessful();
        db.endTransaction();

    }


    public long savetblDsrRegDetails(String IMEI, String ClickedDateTime, String FirstName, String LastName, String ContactNo, String DOB, String Sex, String MaritalStatus, String MarriedDate, String Qualification, String SelfieName, String SelfiePath, String EmailID, String BloodGroup, String SignName, String SignPath, int Sstat, String PhotoName, String PersonNodeId, String PersonNodeType) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("IMEI", IMEI.trim());
        initialValues.put("ClickedDateTime", ClickedDateTime.trim());
        initialValues.put("FirstName", FirstName.trim());
        initialValues.put("LastName", LastName.trim());
        initialValues.put("ContactNo", ContactNo.trim());
        initialValues.put("DOB", DOB.trim());
        initialValues.put("Sex", Sex.trim());
        initialValues.put("MaritalStatus", MaritalStatus.trim());
        initialValues.put("MarriedDate", MarriedDate.trim());
        initialValues.put("Qualification", Qualification.trim());
        initialValues.put("SelfieName", SelfieName.trim());
        initialValues.put("SelfiePath", SelfiePath.trim());
        initialValues.put("EmailID", EmailID.trim());
        initialValues.put("BloodGroup", BloodGroup.trim());
        initialValues.put("SignName", SignName.trim());
        initialValues.put("SignPath", SignPath.trim());
        initialValues.put("Sstat", Sstat);
        initialValues.put("PhotoName", PhotoName.trim());
        initialValues.put("PersonNodeId", PersonNodeId.trim());
        initialValues.put("PersonNodeType", PersonNodeType.trim());
       /* initialValues.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        initialValues.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));
*/
        long inserted = db.insert(DBHelper.TABLE_tblDsrRegDetails, null, initialValues);
        Log.e("DSRRegistration", String.valueOf(inserted));
        return inserted;
    }

    public long savetblUserRegistarationStatus(Integer Flag, String MsgToDisplay) {

        ContentValues initialValues = new ContentValues();

        initialValues.put("Flag", Flag);
        initialValues.put("MsgToDisplay", MsgToDisplay.trim());

        // System.out.println("Data Insert in Table MAIN1User");

        return db.insert(DBHelper.TABLE_tblUserRegistarationStatus, null, initialValues);
    }


    public int fnCheckForNewInvoiceOrPreviousValue(String StoreID, String StoreVisitCode, int flgDrctslsIndrctSls) {
        int flginvoiceAnyInPErmanentTable = fnCheckForNewInvoiceOrPreviousValueFromPermanentTable(StoreID, StoreVisitCode);
        Cursor cursorE2 = null;
        if (flgDrctslsIndrctSls == 2) {
            if (flginvoiceAnyInPErmanentTable == 0) {
                cursorE2 = db.rawQuery("SELECT * FROM tblTmpInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "' AND Sstat=1", null);
            } else {
                cursorE2 = db.rawQuery("SELECT * FROM tblInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);
            }
        } else {
            cursorE2 = db.rawQuery("SELECT * FROM tblTmpInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "' AND Sstat=1", null);
        }

        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    chkI = 1;
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        return chkI;
    }

    public int fnCheckForNewInvoiceOrPreviousValueFromPermanentTable(String StoreID, String StoreVisitCode) {

        Cursor cursorE2 = db.rawQuery("SELECT * FROM tblInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    chkI = 1;
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        return chkI;
    }

    public String fnGetInvoiceCodePDAFromPermanentTable(String StoreID, String StoreVisitCode) {

        Cursor cursorE2 = db.rawQuery("SELECT TmpInvoiceCodePDA FROM tblInvoiceHeader WHERE StoreID='" + StoreID + "' AND StoreVisitCode='" + StoreVisitCode + "'", null);
        String InvoiceCodePDA = "0";
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {
                    InvoiceCodePDA = cursorE2.getString(0).toString();
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        return InvoiceCodePDA;
    }


    public LinkedHashMap<String, String> getFileredOrderReviewProductListMap(String StoreId, String TmpInvoiceCodePDA, int flgDrctslsIndrctSls, int chkflgInvoiceAlreadyGenerated) {
        //tblProductListMaster (CategoryID text  null,ProductID text  null, ProductShortName text  null, DisplayUnit text null, CalculateKilo real  null,ProductMRP real not null, ProductRLP real not null, ProductTaxAmount real not null, KGLiter string null,RetMarginPer real null,VatTax real null,StandardRate real null,StandardRateBeforeTax real null,StandardTax real null,CatOrdr int null,PrdOrdr int null,StoreCatNodeId int null);";

        String searchString = "";
        Cursor cur = null;
        LinkedHashMap<String, String> hmapFilterProductList = new LinkedHashMap<String, String>();
        try {


            if (flgDrctslsIndrctSls == 2) {
                if (chkflgInvoiceAlreadyGenerated == 1) {
                    int we = 0;
                    cur = db.rawQuery("SELECT * FROM tblTmpInvoiceDetails WHERE StoreID ='" + StoreId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
                    if (cur.getCount() > 0) {
                        we = 1;
                        if (cur != null) {
                            cur.close();
                        }
                    }
                    if (we == 1) {
                        cur = db.rawQuery("Select tblProductListMaster.ProductID,tblProductListMaster.ProductShortName from tblProductListMaster inner join tblTmpInvoiceDetails on tblProductListMaster.ProductID=tblTmpInvoiceDetails.ProdID  where tblTmpInvoiceDetails.StoreID='" + StoreId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' order by tblProductListMaster.CategoryID Asc,tblProductListMaster.PrdOrdr Asc", null);
                    } else {
                        cur = db.rawQuery("Select tblProductListMaster.ProductID,tblProductListMaster.ProductShortName from tblProductListMaster inner join tblInvoiceDetails on tblProductListMaster.ProductID=tblInvoiceDetails.ProdID  where tblInvoiceDetails.StoreID='" + StoreId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' order by tblProductListMaster.CategoryID Asc,tblProductListMaster.PrdOrdr Asc", null);
                        //cur = db.rawQuery("SELECT COUNT(*) FROM tblInvoiceDetails WHERE StoreID ='" + StoreId + "' AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'", null);
                    }
                    // cur=db.rawQuery("Select tblProductListMaster.ProductID,tblProductListMaster.ProductShortName from tblProductListMaster inner join tblTmpInvoiceDetails on tblProductListMaster.ProductID=tblTmpInvoiceDetails.ProdID  where tblTmpInvoiceDetails.StoreID='"+StoreId+"' AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"' order by tblProductListMaster.CategoryID Asc,tblProductListMaster.PrdOrdr Asc", null);
                } else {
                    cur = db.rawQuery("Select tblProductListMaster.ProductID,tblProductListMaster.ProductShortName from tblProductListMaster inner join tblInvoiceDetails on tblProductListMaster.ProductID=tblInvoiceDetails.ProdID  where tblInvoiceDetails.StoreID='" + StoreId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' order by tblProductListMaster.CategoryID Asc,tblProductListMaster.PrdOrdr Asc", null);
                }
            } else {
                cur = db.rawQuery("Select tblProductListMaster.ProductID,tblProductListMaster.ProductShortName from tblProductListMaster inner join tblTmpInvoiceDetails on tblProductListMaster.ProductID=tblTmpInvoiceDetails.ProdID  where tblTmpInvoiceDetails.StoreID='" + StoreId + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "' order by tblProductListMaster.CategoryID Asc,tblProductListMaster.PrdOrdr Asc", null);
            }

            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapFilterProductList.put(cur.getString(0), cur.getString(1));
                        cur.moveToNext();
                    }
                }

            }

        } catch (Exception e) {
            System.out.println(e.toString());
            // TODO: handle exception
        } finally {
            if (cur != null) {
                cur.close();
            }
            return hmapFilterProductList;
        }
    }

    public HashMap<String, String> fnGetProductPurchaseList(String StoreID,String TmpInvoiceCodePDA,int flgDrctslsIndrctSls,int chkflgInvoiceAlreadyGenerated)
    {
        //open();
        HashMap<String, String> hmapPrdctOdrQty=new HashMap<String, String>();
        Cursor cursor =null;
        // cursor = db.rawQuery("SELECT ProdID,OrderQty From tblTmpInvoiceDetails where StoreID='"+StoreID+"'  AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'" , null);
        if(flgDrctslsIndrctSls==2)
        {
            if(chkflgInvoiceAlreadyGenerated==1)
            {
                int we=0;
                cursor = db.rawQuery("SELECT ProdID,OrderQty FROM tblTmpInvoiceDetails WHERE StoreID ='" + StoreID + "' AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'", null);
                if(cursor.getCount()>0) {
                    we=1;
                    if(cursor!=null)
                    {
                        cursor.close();
                    }
                }
                if(we==1)
                {
                    cursor= db.rawQuery("SELECT ProdID,OrderQty From tblTmpInvoiceDetails where StoreID='"+StoreID+"'  AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'" , null);
                }
                else
                {
                    cursor= db.rawQuery("SELECT ProdID,OrderQty From tblInvoiceDetails where StoreID='"+StoreID+"'  AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'" , null);
                    //cur = db.rawQuery("SELECT COUNT(*) FROM tblInvoiceDetails WHERE StoreID ='" + StoreId + "' AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'", null);
                }
                // cur=db.rawQuery("Select tblProductListMaster.ProductID,tblProductListMaster.ProductShortName from tblProductListMaster inner join tblTmpInvoiceDetails on tblProductListMaster.ProductID=tblTmpInvoiceDetails.ProdID  where tblTmpInvoiceDetails.StoreID='"+StoreId+"' AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"' order by tblProductListMaster.CategoryID Asc,tblProductListMaster.PrdOrdr Asc", null);
            }
            else
            {
                cursor= db.rawQuery("SELECT ProdID,OrderQty From tblInvoiceDetails where StoreID='"+StoreID+"'  AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'" , null);
            }
        }
        else
        {
            cursor= db.rawQuery("SELECT ProdID,OrderQty From tblTmpInvoiceDetails where StoreID='"+StoreID+"'  AND TmpInvoiceCodePDA='"+TmpInvoiceCodePDA+"'" , null);
        }

        try {
            String CompleteResult[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapPrdctOdrQty.put( cursor.getString(0),cursor.getString(1)) ;
                        cursor.moveToNext();
                    }
                }
            }
            return hmapPrdctOdrQty;

        } finally {
            if(cursor!=null) {
                cursor.close();
            }
            // close();
        }
    }

    public int fnCheckIfStoreExistInStoreProdcutPurchaseDetails(String StoreID, String TmpInvoiceCodePDA, int flgDrctslsIndrctSls, int chkflgInvoiceAlreadyGenerated) {

        Cursor cursorE2 = null;

        if (flgDrctslsIndrctSls == 2) {
            if (chkflgInvoiceAlreadyGenerated == 1) {
                int we = 0;
                cursorE2 = db.rawQuery("SELECT * FROM tblTmpInvoiceDetails WHERE StoreID ='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
                if (cursorE2.getCount() > 0) {
                    we = 1;
                    if (cursorE2 != null) {
                        cursorE2.close();
                    }
                }
                if (we == 1) {
                    cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblTmpInvoiceDetails WHERE StoreID ='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
                } else {
                    cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblInvoiceDetails WHERE StoreID ='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
                }
            } else {
                cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblInvoiceDetails WHERE StoreID ='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
            }
        } else {
            cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblTmpInvoiceDetails WHERE StoreID ='" + StoreID + "' AND TmpInvoiceCodePDA='" + TmpInvoiceCodePDA + "'", null);
        }
        int chkI = 0;
        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {

                    if (cursorE2.getInt(0) > 0) {
                        chkI = 1;
                    } else {
                        chkI = 0;
                    }
                }
            }
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }
        }
        return chkI;
    }


    //tblSupplierMstrList(NodeID int not null,NodeType int not null,Descr text not null,latCode real null,LongCode real null,flgMapped int not null,Address text null,State text null,City text null,PinCode text null,ContactNumber text null,TaxNumber text null,flgStockManage int not null,EmailID text null,flgDefault int not null);";
    public LinkedHashMap<String, String> getDistLatLng() {
        LinkedHashMap<String, String> hmapDistLatLng = new LinkedHashMap<String, String>();
        Cursor cursor = db.rawQuery("Select NodeID||'^'||NodeType As DistNodeIdNodeType,latCode||'^'||LongCode As LatLong from tblSupplierMstrList", null);
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int i = 0; i < cursor.getCount(); i++) {
                    hmapDistLatLng.put(cursor.getString(0), cursor.getString(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapDistLatLng;
    }


    //tblSupplierMstrList(NodeID int not null,NodeType int not null,Descr text not null,latCode real null,LongCode real null,flgMapped int not null,Address text null,State text null,City text null,PinCode text null,ContactNumber text null,TaxNumber text null,flgStockManage int not null,EmailID text null,flgDefault int not null);";
    public String getDfltDstbtr() {
        String distDescr = "";
        Cursor cursor = db.rawQuery("Select Descr from tblSupplierMstrList where flgDefault=1", null);
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                distDescr = cursor.getString(0);
            }
        }
        return distDescr;
    }


    public void deletePrvsData() {
        db.execSQL("DELETE FROM tblSuplierDetail");
    }

    public void saveSuplierDetail(String distributorId, String distributorNodeType, int Sstat) {
        deletePrvsData();
        ContentValues values = new ContentValues();
        values.put("DistributorNodeId", distributorId);
        values.put("DistributorNodeType", distributorNodeType);
        values.put("Sstat", Sstat);
        values.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        values.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        //tblSuplierDetail(DistributorNodeId text null,DistributorNodeType text null,Sstat int null)
        db.insert(DBHelper.TABLE_tblSuplierDetail, null, values);

    }


    public HashMap<String, Integer> getDistStockCount(String distId) {
        // tblVanProductStock(PrdctId text null,StockQntty text null,DistributorNodeIdNodeType text null);";
        HashMap<String, Integer> hmapDistPrdctStockCount = new HashMap<>();
        //open();
        try {
            // tblVanProductStock(PrdctId text not null,StockQntty text not null,DistributorNodeIdNodeType text not null,SKUName text not null,OpeningStock text not null,TodaysAddedStock text not null,CycleAddedStock text not null,NetSalesQty text not null,TodaysUnloadStk text not null,CycleUnloadStk text not null,CategoryID text not null);";
            Cursor cur = db.rawQuery("Select PrdctId,OriginalStock from tblVanProductStock where DistributorNodeIdNodeType='" + distId + "'", null);
            // Cursor cur=db.rawQuery("Select PrdctId,OriginalStock from tblVanProductStock",null);// where DistributorNodeIdNodeType='"+distId+"'
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapDistPrdctStockCount.put(cur.getString(0), Integer.parseInt(cur.getString(1)));
                        cur.moveToNext();
                    }
                }


            }


        } catch (Exception e) {

        } finally {
            // close();
            return hmapDistPrdctStockCount;
        }


    }

    public int getLeftProductQantity(int stockCount, String distId, String PrdctId) {
        int netStock = 0;
        //tblTmpInvoiceDetails (IMEIno text not null,RouteID int null,StoreID text not null,CatID text  null,ProdID text not null,TransDate string not null,Stock integer not null,OrderQty integer not null,OrderVal real not null,FreeQty integer not null,DisVal real not null,Sstat integer not null,SampleQuantity int null,ProductShortName text null,ProductPrice real null, TaxRate real null,TaxValue real null,StoreCatNodeId int null,OrderIDPDA text null,flgIsQuoteRateApplied int null,distibutorID text null,flgWholeSellApplicable int null,TmpInvoiceCodePDA text null);";
        try {
            boolean isPrdctFound = false;
            // Cursor cur=db.rawQuery("Select tblTmpInvoiceDetails.ProdID , tblTmpInvoiceDetails.OrderQty from tblTmpInvoiceDetails inner join tblDistributorIDOrderIDLeft ON tblTmpInvoiceDetails.FinalAllotedInvoiceIds=tblDistributorIDOrderIDLeft.OrderId where tblTmpInvoiceDetails.distibutorID='"+distId+"' AND tblTmpInvoiceDetails.FinalAllotedInvoiceIds<>'NA'",null);
            Cursor cur = db.rawQuery("Select tblInvoiceDetails.ProdID , tblInvoiceDetails.OrderQty from tblInvoiceDetails inner join tblDistributorIDOrderIDLeft ON tblInvoiceDetails.InvoiceNumber=tblDistributorIDOrderIDLeft.OrderId where  tblInvoiceDetails.InvoiceNumber<>'NA' AND tblDistributorIDOrderIDLeft.flgProcessedInvoice=0", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        if (PrdctId.equals(cur.getString(0))) {
                            netStock = stockCount - Integer.parseInt(cur.getString(1));
                            stockCount = netStock;
                            isPrdctFound = true;

                        }


                        cur.moveToNext();
                    }
                }
            } else {
                netStock = stockCount;
            }

            if (!isPrdctFound) {
                netStock = stockCount;
            }

        } catch (Exception e) {
            Log.e("Error", e.toString());
        } finally {
            {
                return netStock;
            }
        }


    }

    public void deleteDistStock() {


        db.execSQL("DELETE FROM tblDistributorProductStock");
        db.execSQL("DELETE FROM tblDistributorIDOrderIDLeft");


    }


    public void deleteDistributorStock(String distributorId) {
        db.execSQL("DELETE FROM tblDistributorProductStock where DistributorNodeIdNodeType='" + distributorId + "'");
    }

    public void inserttblDistributorProductStock(List<TblDistributorProductStock> tblDistributorProductStock) {

        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        int AutoId = 0;
        for (TblDistributorProductStock tblDistributorProductStockData : tblDistributorProductStock) {

            initialValues.put("DistributorNodeIdNodeType", tblDistributorProductStockData.getCustomer());
            initialValues.put("ProductNodeID", tblDistributorProductStockData.getProductNodeID());
            initialValues.put("ProductNodeType", tblDistributorProductStockData.getProductNodeType());
            initialValues.put("SKUName", tblDistributorProductStockData.getsKUName());
            initialValues.put("StockDate", tblDistributorProductStockData.getStockDate());
            initialValues.put("StockQty", tblDistributorProductStockData.getStockQty());
            int netStock = getLeftProductQantity(tblDistributorProductStockData.getStockQty(), tblDistributorProductStockData.getCustomer(), "" + tblDistributorProductStockData.getProductNodeID());
            initialValues.put("OriginalStock", netStock);

            db.insert(DBHelper.DATABASE_TABLE_DISTRIBUTOR_PRODUCT_STOCK, null, initialValues);
            AutoId = AutoId + 1;
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void inserttblDistributorIDOrderIDLeft(String distributorNodeIdNodeType, String orderId) {
        ////open();

        ContentValues values = new ContentValues();

//tblDistributorProductLeft(DistributorNodeIdNodeType text null,OrderId text null,ProductId text null,OrderQntty text null);";
        values.put("DistributorNodeIdNodeType", distributorNodeIdNodeType);
        values.put("OrderId", orderId);
        values.put("flgProcessedInvoice", 1);//flgProcessedInvoice=1 Processed, flgProcessedInvoice=0 UnProcessed (Not Present But will use in future

        db.insert(DBHelper.DATABASE_TABLE_DISTRIBUTOR_ORDERLEFT, null, values);


        //close();
    }

    public LinkedHashMap<String, Integer> getStockFromDistProduct(String distNodeIdNodeType) {
        LinkedHashMap<String, Integer> hmapStock = new LinkedHashMap<String, Integer>();
        Cursor cursor = db.rawQuery("Select ProductNodeID,StockQty from tblDistributorProductStock where DistributorNodeIdNodeType='" + distNodeIdNodeType + "'", null);
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int i = 0; i < cursor.getCount(); i++) {
                    hmapStock.put(cursor.getString(0), cursor.getInt(1));
                    cursor.moveToNext();
                }
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        return hmapStock;
    }

    public LinkedHashMap<String, Integer> getStockAsPerFlg(String distNodeIdNodeType) {
        LinkedHashMap<String, Integer> hmapStock = new LinkedHashMap<String, Integer>();
        Cursor cursor = null;
        if(CommonInfo.hmapAppMasterFlags.containsKey("flgDBRStockCalculate")) {
            if (CommonInfo.hmapAppMasterFlags.get("flgDBRStockCalculate") == 0) {
                cursor = db.rawQuery("Select ProductNodeID,StockQty from tblDistributorProductStock where DistributorNodeIdNodeType='" + distNodeIdNodeType + "'", null);
            } else {
                //  cursor=db.rawQuery("SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.TmpInvoiceCodePDA=I.TmpInvoiceCodePDA  WHERE I.flgProcessedInvoice=0 GROUP BY ID.ProdID", null);
                cursor = db.rawQuery("SELECT DISTINCT S.ProductNodeID,S.StockQty-ifnull(D.OrderQty,0) AS StockAvailable  from tblDistributorProductStock S left outer join (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.TmpInvoiceCodePDA=I.TmpInvoiceCodePDA   GROUP BY ID.ProdID) D ON D.ProdID=S.ProductNodeID where S.DistributorNodeIdNodeType='" + distNodeIdNodeType + "'", null);
            }
        }
        else
        {
            cursor = db.rawQuery("SELECT DISTINCT S.ProductNodeID,S.StockQty-ifnull(D.OrderQty,0) AS StockAvailable  from tblDistributorProductStock S left outer join (SELECT ID.ProdID,SUM(ID.OrderQty) OrderQty FROM tblInvoiceHeader AS I INNER JOIN tblInvoiceDetails AS ID ON ID.TmpInvoiceCodePDA=I.TmpInvoiceCodePDA   GROUP BY ID.ProdID) D ON D.ProdID=S.ProductNodeID where S.DistributorNodeIdNodeType='" + distNodeIdNodeType + "'", null);
        }

        System.out.println(" cursor = " + cursor.getCount());
        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                for (int i = 0; i < cursor.getCount(); i++) {
                    hmapStock.put(cursor.getString(0), cursor.getInt(1));
                    cursor.moveToNext();
                }
            }
        }
        return hmapStock;
    }

    public ArrayList<Object> FetchStoreCollectionFLag(String storeID) {
        ArrayList<Object> arrayList = new ArrayList<Object>();

        Cursor cursor = db.rawQuery("SELECT flgCollDefControl,CollectionPer FROM tblStoreList WHERE StoreID ='" + storeID + "'", null);
        try {

            String StoreName = "NA";

            if (cursor.moveToFirst()) {


                arrayList.add(cursor.getInt(0));
                arrayList.add(cursor.getDouble(1));


            }

        } catch (Exception e) {
            arrayList.add(0);
            arrayList.add(0.00);
        } finally {
            if (cursor != null) {
                cursor.close();
            }

            return arrayList;
        }


    }


    public void insertReasonCanclOrder(int reasonCodeId, String reasonDescr) {
        ContentValues values = new ContentValues();
        values.put("ReasonCodeID", reasonCodeId);
        values.put("ReasonDescr", reasonDescr);
        db.insert(DBHelper.DATABASE_TABLE_REASON_ORDER_CANCEL, null, values);
    }

    public LinkedHashMap<String, String> getReasonToCancel() {
        LinkedHashMap<String, String> hmapRsnForCncl = new LinkedHashMap<String, String>();
        Cursor cur = null;
        try {
            cur = db.rawQuery("Select * from tblReasonOrderCncl", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        if (i == 0) {
                            hmapRsnForCncl.put("Select Reason", "0");
                        }

                        hmapRsnForCncl.put(cur.getString(1), cur.getString(0));
                        cur.moveToNext();
                    }
                }
            } else {
                hmapRsnForCncl.put("0", "Select Reason");
            }
        } catch (Exception e) {

        } finally {
            if (cur != null) {
                cur.close();
            }
            return hmapRsnForCncl;
        }

    }


    public LinkedHashMap<String, String> fnGetImageDataFrom_tblExecutionImages(String StoreID, String OrderID) {
        LinkedHashMap<String, String> hashMapImages = new LinkedHashMap<String, String>();
        Cursor cursor = null;

        try {
            cursor = db.rawQuery("SELECT  ImageName, ImagePath FROM  tblExecutionImages where StoreID='" + StoreID + "' And OrderID='" + OrderID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hashMapImages.put(cursor.getString(0), cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            return hashMapImages;
        }
    }

    public void deletetblExecutionImages(String StoreID, String OrderID) {
        // db.execSQL("DELETE FROM tblStoreEdit where StoreID='"+StoreID+"'");
        db.execSQL("DELETE FROM tblExecutionImages where StoreID='" + StoreID + "' And OrderID='" + OrderID + "' ");

    }

    public void UpdatetblExecutionImages(int flag2set) {
        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);

            // int affected2 = db.update("tblExecutionImages", values,"Sstat=? And StoreID='"+StoreID+"' And OrderID='"+OrderID+"'", new String[] { "3" });
            int affected2 = db.update("tblExecutionImages", values, "Sstat=? ", new String[]{"3"});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public void updatetblExecutionImages(String PhotoName) {

        try {
            System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
            final ContentValues values = new ContentValues();
            values.put("Sstat", 4);
            ////tableStoreSctnImage(StoreID text null,imageName text null,imagePath text null,ImageClicktime text null,flgSectionPic text null,Sstat integer null);";
            int affected3 = db.update("tblExecutionImages", values, "ImageName=?", new String[]{PhotoName});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {

        }


    }

    public String[] getAllStoreIdOftblExecutionImages() {

        int SnamecolumnIndex1 = 0;


        Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tblExecutionImages where Sstat=5 ", null);
        //Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
        try {
            String StoreName[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                        cursor.moveToNext();
                    }
                }

            }

            return StoreName;
        } finally {
            if (cursor != null) {
                cursor.close();
            }

        }

    }

    public int getImageCOunt(String StoreID) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tblExecutionImages where StoreID='" + StoreID + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            if (cursor != null)
                cursor.close();
        }
    }

    public String[] getImgsCount(String StoreID) {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT ImageName FROM tblExecutionImages WHERE StoreID ='" + StoreID + "'", null);
        try {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1)
                            .toString();

                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            if (cursor != null)
                cursor.close();
        }

    }


    public void insertExecutionImagesTable(String StoreID, String OrderID, String ImageName, String ImagePath, int Sstat, String InvNumber, String InvDate) {
        // "create table tblMinDeliverQntty (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
        ContentValues values = new ContentValues();

        values.put("StoreID", StoreID);
        values.put("OrderID", OrderID);
        values.put("ImageName", ImageName);
        values.put("ImagePath", ImagePath);
        values.put("Sstat", Sstat);
        values.put("InvNumber", InvNumber);
        values.put("InvDate", InvDate);


        db.insert(DBHelper.DATABASE_TABLE_tblExecutionImages, null, values);
    }

    public void updateExecutionImageRecordsSyncd() {

        try {


            final ContentValues values = new ContentValues();
            values.put("Sstat", "4");
									/*int affected = db.update("tblUserLoginMstr", values, "Sstat=?",
											new String[] { "3" });*/

            int affected5 = db.update("tblExecutionImages", values, "Sstat=?",
                    new String[]{"5"});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public int fnGetflgDrctslsIndrctSlsForDSR(int CoverageAreaNodeID, int CoverageAreaNodeType) {
//flgDrctslsIndrctSls
        Cursor cursorE2 = db.rawQuery("SELECT flgDrctslsIndrctSls FROM  tblUserAuthenticationMstr  where CoverageNodeID=" + CoverageAreaNodeID + " AND CoverageNodeType=" + CoverageAreaNodeType, null);
        int flgDrctslsIndrctSls = 0;

        try {
            if (cursorE2.getCount() > 0) {
                if (cursorE2.moveToFirst()) {


                    flgDrctslsIndrctSls = (Integer.parseInt(cursorE2.getString(0).toString()));


                }
            }
            return flgDrctslsIndrctSls;
        } finally {
            if (cursorE2 != null) {
                cursorE2.close();
            }

        }

    }


    public int fnGetCountImageDataFrom_tblExecutionImages(String StoreID, String OrderID) {
        int GetCountImageDataFrom_tblExecutionImages = 0;
        Cursor cursor = null;

        try {
            cursor = db.rawQuery("SELECT  ImageName, ImagePath FROM  tblExecutionImages where StoreID='" + StoreID + "' And OrderID='" + OrderID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    GetCountImageDataFrom_tblExecutionImages = 1;
                }
            }

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            return GetCountImageDataFrom_tblExecutionImages;
        }
    }

    public void saveAppMasterFlagsRetro(List<TblAppMasterFlags> tblAppMasterFlags){
        db.beginTransaction();
        ContentValues initialValues = new ContentValues();
        for(TblAppMasterFlags AppMasterFlags:tblAppMasterFlags){
            initialValues.put("flgDistributorCheckIn",AppMasterFlags.getFlgDistributorCheckIn());
            initialValues.put("flgDBRStockInApp",AppMasterFlags.getFlgDBRStockInApp());
            initialValues.put("flgDBRStockEdit",AppMasterFlags.getFlgDBRStockEdit());
            initialValues.put("flgDBRStockCalculate",AppMasterFlags.getFlgDBRStockCalculate());
            initialValues.put("flgDBRStockControl",AppMasterFlags.getFlgDBRStockControl());
            initialValues.put("flgCollRequired",AppMasterFlags.getFlgCollRequired());
            initialValues.put("flgCollReqOrdr",AppMasterFlags.getFlgCollReqOrdr());
            initialValues.put("flgCollTab",AppMasterFlags.getFlgCollTab());
            initialValues.put("flgCollDefControl",AppMasterFlags.getFlgCollDefControl());
            initialValues.put("flgCashDiscount",AppMasterFlags.getFlgCashDiscount());

            initialValues.put("flgCollControlRule",AppMasterFlags.getFlgCollControlRule());
            initialValues.put("flgSchemeAvailable",AppMasterFlags.getFlgSchemeAvailable());
            initialValues.put("flgSchemeAllowEntry",AppMasterFlags.getFlgSchemeAllowEntry());
            initialValues.put("flgSchemeAllowEdit",AppMasterFlags.getFlgSchemeAllowEdit());
            initialValues.put("flgQuotationIsAvailable",AppMasterFlags.getFlgQuotationIsAvailable());
            initialValues.put("flgExecutionIsAvailable",AppMasterFlags.getFlgExecutionIsAvailable());
            initialValues.put("flgExecutionPhotoCompulsory",AppMasterFlags.getFlgExecutionPhotoCompulsory());
            initialValues.put("flgTargetShowatStart",AppMasterFlags.getFlgTargetShowatStart());
            initialValues.put("flgIncentiveShowatStart",AppMasterFlags.getFlgIncentiveShowatStart());
            initialValues.put("flgInvoicePrint",AppMasterFlags.getFlgInvoicePrint());

            initialValues.put("flgShowPOSM",AppMasterFlags.getFlgShowPOSM());
            initialValues.put("flgVisitStartOutstandingDetails",AppMasterFlags.getFlgVisitStartOutstandingDetails());
            initialValues.put("flgVisitStartSchemeDetails",AppMasterFlags.getFlgVisitStartSchemeDetails());
            initialValues.put("flgStoreDetailsEdit",AppMasterFlags.getFlgStoreDetailsEdit());
            initialValues.put("flgShowDeliveryAddressButtonOnOrder",AppMasterFlags.getFlgShowDeliveryAddressButtonOnOrder());
            initialValues.put("flgShowManagerOnStoreList",AppMasterFlags.getFlgShowManagerOnStoreList());
            initialValues.put("flgRptTargetVsAchived",AppMasterFlags.getFlgRptTargetVsAchived());

            initialValues.put("SalesNodeID",AppMasterFlags.getSalesNodeID());
            initialValues.put("SalesNodetype",AppMasterFlags.getSalesNodetype());
            initialValues.put("WorkingTypeID",AppMasterFlags.getWorkingTypeID());

            initialValues.put("flgVanStockInApp",AppMasterFlags.getFlgVanStockInApp());
            initialValues.put("flgVanStockEdit",AppMasterFlags.getFlgVanStockEdit());
            initialValues.put("flgVanStockCalculate",AppMasterFlags.getFlgVanStockCalculate());
            initialValues.put("flgVanStockControl",AppMasterFlags.getFlgVanStockControl());
            initialValues.put("flgStockRefillReq",AppMasterFlags.getFlgStockRefillReq());
            initialValues.put("flgDayEnd",AppMasterFlags.getFlgDayEnd());
            initialValues.put("flgStockUnloadAtCycleEnd",AppMasterFlags.getFlgStockUnloadAtCycleEnd());
            initialValues.put("flgStockUnloadAtDayEnd",AppMasterFlags.getFlgStockUnloadAtDayEnd());
            initialValues.put("flgCollReqATCycleEnd",AppMasterFlags.getFlgCollReqATCycleEnd());
            initialValues.put("flgCollReqATDayEnd",AppMasterFlags.getFlgCollReqATDayEnd());
            initialValues.put("flgDayEndSummary",AppMasterFlags.getFlgDayEndSummary());
            initialValues.put("flgStoreCheckInApplicable",AppMasterFlags.getFlgStoreCheckInApplicable());
            initialValues.put("flgStoreCheckInPhotoCompulsory",AppMasterFlags.getFlgStoreCheckInPhotoCompulsory());

            db.insert(DBHelper.TABLE_tblAppMasterFlags, null, initialValues);


        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }


    public void delTblReasonOrderCncl() {
        //open();
        db.execSQL("DELETE FROM tblReasonOrderCncl");
        //close();
    }

    //tblDayStartAttendanceOptions(AutoIdStore int not null,ReasonId text not null,ReasonDescr text not null,FlgToShowTextBox integer null,flgSOApplicable int null,flgDSRApplicable int null,flgNoVisitOption int null,SeqNo int null,flgDelayedReason int null,flgMarketVisit int not null);";
    public String getReasonIdForMarketVisit() {
        String reasonId = "0";
        Cursor cur = db.rawQuery("Select ReasonId from tblDayStartAttendanceOptions where flgMarketVisit=1", null);
        if (cur.getCount() > 0) {
            if (cur.moveToFirst()) {
                reasonId = cur.getString(0);
            }
        }
        return reasonId;
    }

    public void deletetblIsDBRStockSubmitted() {

        db.execSQL("DELETE FROM tblIsDBRStockSubmitted");
    }

    public double fnGetStoretblLastOverDue(String storeID) {
        double LastOutstanding = 0.0;
        // tblLastOutstanding(StoreID text null,Outstanding real null,AmtOverdue real null);";
        Cursor cursor = db.rawQuery("Select AmtOverdue from tblLastOutstanding WHERE StoreID='" + storeID + "'", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                LastOutstanding = Double.parseDouble(cursor.getString(0));
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        return LastOutstanding;
    }

    public LinkedHashMap<String, String> fetch_Store_List() {

        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<String, String>();


        Cursor cursor = db.rawQuery("SELECT  tblStoreList.StoreID, tblStoreList.StoreName, Sum(IFNULL(tblInvoiceHeader.InvoiceVal,0.0)) FROM tblStoreList inner join tblInvoiceHeader on tblStoreList.StoreID=tblInvoiceHeader.StoreID WHERE tblInvoiceHeader.InvoiceVal>0 GROUP BY tblStoreList.StoreID ORDER By tblStoreList.StoreName ASC ", null); //order by AutoIdOutlet Desc

        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        //hmapCatgry.put(cursor.getString(0).toString(),cursor.getString(1).toString() + "( Order Value:-"+cursor.getString(2).toString()+")");
                        if (cursor.getCount() == 1) {
                            if (cursor.getString(1) != null && cursor.getString(2) != null)
                                hmapCatgry.put((i + 1) + ")  " + cursor.getString(1).toString() + "   [ Order Value:->" + cursor.getString(2).toString() + " ]", cursor.getString(0).toString());
                            else
                                hmapCatgry.put("No Store", "0");
                        } else {
                            hmapCatgry.put((i + 1) + ")  " + cursor.getString(1).toString() + "   [ Order Value:->" + cursor.getString(2).toString() + " ]", cursor.getString(0).toString());
                            cursor.moveToNext();
                        }

                    }
                }

            } else {
                hmapCatgry.put("No Store", "0");
            }
            return hmapCatgry;
        } finally {
            if (cursor != null) {
                cursor.close();
            }

        }
    }

    public LinkedHashMap<String, String> fetch_Reason_Late() {
        LinkedHashMap<String, String> hmapCatgry = new LinkedHashMap<>();
        Cursor cursor = db.rawQuery("SELECT ReasonId,ReasonDescr FROM tblDayStartAttendanceOptions where flgDSRApplicable='" + 1 + "' and flgDelayedReason=1", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    hmapCatgry.put("Select Reason", "0");
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapCatgry.put(cursor.getString(1), cursor.getString(0));
                        cursor.moveToNext();
                    }
                }

            } else {
                hmapCatgry.put("No Reason", "0");
            }
            return hmapCatgry;
        } finally {
            if (cursor != null) {
                cursor.close();
            }

        }
    }

    public ArrayList<String> fetch_Text_To_Show() {

        ArrayList<String> listTxtBxToShow = new ArrayList<>();
        Cursor cursor = db.rawQuery("SELECT ReasonId FROM tblDayStartAttendanceOptions where flgDSRApplicable='" + 1 + "' and FlgToShowTextBox='" + 1 + "' order by SeqNo asc", null);
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        listTxtBxToShow.add(cursor.getString(0).toString().trim());
                        cursor.moveToNext();
                    }
                }

            } else {
                // hmapCatgry.put(0, "No Reason");
            }
            return listTxtBxToShow;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }

    public int fnflgCheckAnySchemeStoreID(String storeID) {
        int flgCheckAnySchemeStoreID = 0;
        Cursor cursor = db.rawQuery("Select StoreID,SchemeID from tblSchemeStoreMapping where  StoreID ='" + storeID + "'", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                flgCheckAnySchemeStoreID = 1;
            }
        }
        if (cursor != null) {
            cursor.close();
        }

        return flgCheckAnySchemeStoreID;
    }

    public long savetblProductADDONScheme(String ProductID, String PrdString) {

        ContentValues initialValues = new ContentValues();
        initialValues.put("ProductID", ProductID.trim());
        initialValues.put("PrdString", PrdString.trim());

        // System.out.println("Ajay Data Save in table 209");
        return db.insert(DBHelper.DATABASE_TABLE_MAINADDOnScheme, null, initialValues);
    }

    public void fnsavetblStoreProductAddOnSchemeApplied(String StoreID, int ProdID, int schId, int schSlabId, int schSlbBuckId, double schSlabSubBucketValue, int schSubBucketValType,
                                                        int schSlabSubBucketType, int BenifitRowID, int BenSubBucketType,
                                                        int FreeProductID, double BenifitSubBucketValue, double BenifitMaxValue, double BenifitAssignedValue, double BenifitAssignedValueType, int BenifitDiscountApplied, String BenifitCouponCode, double per, double UOM, int WhatFinallyApplied, int schSlbRowId, int SchTypeId, String pdaOrderID, int flgAddOn, int isDiscountOnTotalAmount) {
        //StoreID text not null,ProductID int not null,schId int not null,schSlabId integer not null,schSlbBuckId integer not null,schSlabSubBucketValue real not null,
        //schSubBucketValType integer not null,schSlabSubBucketType int not null,BenifitRowID integer not null,BenSubBucketType int null,FreeProductID int null,
        //BenifitSubBucketValue real null,BenifitMaxValue real null,BenifitAssignedValue real null,BenifitAssignedValueType int null,BenifitDiscountApplied int null,
        //BenifitCouponCode text null

        Cursor cur = db.rawQuery("Select schSlabId from tblStoreProductAddOnSchemeApplied where StoreID='" + StoreID + "' AND ProductID=" + ProdID + " AND schId=" + schId + " AND schSlabId=" + schSlabId, null);
        if (cur != null) {
            if (cur.getCount() > 0) {
                if (cur != null) {
                    cur.close();
                }
            }
        } else {
            ContentValues initialValues = new ContentValues();

            initialValues.put("StoreID", StoreID.trim());
            initialValues.put("ProductID", ProdID);
            initialValues.put("schId", schId);
            initialValues.put("schSlabId", schSlabId);
            initialValues.put("schSlbBuckId", schSlbBuckId);
            initialValues.put("schSlabSubBucketValue", schSlabSubBucketValue);
            initialValues.put("schSubBucketValType", schSubBucketValType);
            initialValues.put("schSlabSubBucketType", schSlabSubBucketType);
            initialValues.put("BenifitRowID", BenifitRowID);

            initialValues.put("BenSubBucketType", BenSubBucketType);

            initialValues.put("FreeProductID", FreeProductID);

            initialValues.put("BenifitSubBucketValue", BenifitSubBucketValue);

            initialValues.put("BenifitMaxValue", BenifitMaxValue);
            initialValues.put("BenifitAssignedValue", BenifitAssignedValue);
            initialValues.put("BenifitAssignedValueType", BenifitAssignedValueType);

            initialValues.put("BenifitDiscountApplied", BenifitDiscountApplied);
            initialValues.put("BenifitCouponCode", BenifitCouponCode);

            initialValues.put("PER", per);
            initialValues.put("UOM", UOM);
            initialValues.put("Sstat", 0);
            initialValues.put("schSlbRowId", schSlbRowId);
            initialValues.put("SchTypeId", SchTypeId);
            initialValues.put("WhatFinallyApplied", WhatFinallyApplied);
            initialValues.put("OrderIDPDA", pdaOrderID);
            initialValues.put("flgAddOn", flgAddOn);
            initialValues.put("isDiscountOnTotalAmount", isDiscountOnTotalAmount);

            // System.out.println("Save Data Save in Table 211");

            db.insert(DBHelper.DATABASE_TABLE_ADDONSCHEME, null, initialValues);

        }
    }

    public HashMap<String, String> fnProductADDOnScheme() {
        Cursor cursor = db.rawQuery("SELECT Distinct tblProductADDONScheme.ProductID,tblProductADDONScheme.PrdString from tblProductADDONScheme inner join tblProductList ON tblProductADDONScheme.ProductID=tblProductList.ProductID", null);
        try {
            HashMap<String, String> SchemeIDFreePRodQtyDetails = new HashMap<String, String>();
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        SchemeIDFreePRodQtyDetails.put(cursor.getString(0).toString(), cursor.getString(1).toString());
                        cursor.moveToNext();
                    }
                }
            }
            return SchemeIDFreePRodQtyDetails;
        } finally {
            if (cursor != null) {
                cursor.close();
            }
        }
    }


    public LinkedHashMap<String, ArrayList<String>> fnGetIncentivesMasterListData() {
        LinkedHashMap<String, ArrayList<String>> HmapIncMasterListData = new LinkedHashMap<String, ArrayList<String>>();
        Cursor cursor = null;
        try {
            cursor = db.rawQuery("SELECT tblIncentiveMaster.IncId,tblIncentiveMaster.OutputType,tblIncentiveMaster.IncentiveName,count(tblIncentiveSecondaryMaster.IncSlabId) as ColumnCount,tblIncentiveMaster.flgAcheived,tblIncentiveMaster.Earning FROM tblIncentiveMaster INNER JOIN tblIncentiveSecondaryMaster ON tblIncentiveMaster.IncId = tblIncentiveSecondaryMaster.IncId", null);// group by tblIncentiveSecondaryMaster.IncId

            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i < cursor.getCount(); i++) {
                        ArrayList<String> list_frstTbl = new ArrayList<String>();
                        list_frstTbl.add(0, cursor.getString(1).toString().trim()); //output type
                        list_frstTbl.add(1, cursor.getString(2).toString().trim()); //incentive name
                        list_frstTbl.add(2, cursor.getString(3).toString().trim()); //count of incId frm columndesc tbl
                        list_frstTbl.add(3, cursor.getString(4).toString().trim()); //flgAchieved
                        list_frstTbl.add(4, cursor.getString(5).toString().trim()); //Earning

                        HmapIncMasterListData.put(cursor.getString(0).toString().trim(), list_frstTbl);


                        cursor.moveToNext();
                    }


                }
            }

        } catch (Exception e) {
            System.out.println("EXception.." + e);
        } finally {
            if (cursor != null) {
                cursor.close();

            }

        }
        return HmapIncMasterListData;
    }


    public long savetblIncentiveMsgToDisplay(String MsgToDisplay, int flgBankDetailsToShow) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("MsgToDisplay", MsgToDisplay);
        initialValues.put("flgBankDetailsToShow", flgBankDetailsToShow);
        System.out.println("MSG..." + MsgToDisplay);
        return db.insert(DBHelper.TABLE_tblIncentiveMsgToDisplay_Define, null, initialValues);
    }

    public long savetblIncentiveMaster(int IncId, int OutputType, String IncentiveName, String flgAcheived, String Earning) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("IncId", IncId);
        initialValues.put("OutputType", OutputType);
        initialValues.put("IncentiveName", IncentiveName.trim());
        initialValues.put("flgAcheived", flgAcheived.trim());
        initialValues.put("Earning", Earning.trim());

        return db.insert(DBHelper.TABLE_tblIncentiveMaster, null, initialValues);
    }

    public void CreateDynamicTables(String Table_Name, String TableColumn[]) {
        db.execSQL("DROP TABLE IF EXISTS " + Table_Name);

        for (int i = 0; i < TableColumn.length; i++) {
            if (i == 0) {
                DBHelper.DATABASE_CREATE_TABLE_tblIncentiveDetailsData = "CREATE TABLE " + Table_Name + "(" + TableColumn[0] + " TEXT";
            } else {
                DBHelper.DATABASE_CREATE_TABLE_tblIncentiveDetailsData = DBHelper.DATABASE_CREATE_TABLE_tblIncentiveDetailsData + ", " + TableColumn[i] + " TEXT";
            }
        }
        DBHelper.DATABASE_CREATE_TABLE_tblIncentiveDetailsData = DBHelper.DATABASE_CREATE_TABLE_tblIncentiveDetailsData + " );";
        db.execSQL(DBHelper.DATABASE_CREATE_TABLE_tblIncentiveDetailsData);

        System.out.println("hi");

    }

    public void insertDynamicTables(String Table_Name, String[] TableColumn, String TableColumnValue[]) {
        ContentValues cv = new ContentValues();

        for (int i = 0; i < TableColumn.length; i++) {
            cv.put(TableColumn[i], TableColumnValue[i]);
        }

        db.insert(Table_Name, null, cv);
    }

    public void CreateDynamicTblIncPastDetails(String Table_Name, String TableColumn[]) {
        db.execSQL("DROP TABLE IF EXISTS " + Table_Name);

        for (int i = 0; i < TableColumn.length; i++) {
            if (i == 0) {
                DBHelper.DATABASE_CREATE_TABLE_tblIncentivePastDetailsData = "CREATE TABLE " + Table_Name + "(" + TableColumn[0] + " TEXT";
            } else {
                DBHelper.DATABASE_CREATE_TABLE_tblIncentivePastDetailsData = DBHelper.DATABASE_CREATE_TABLE_tblIncentivePastDetailsData + ", " + TableColumn[i] + " TEXT";
            }
        }
        DBHelper.DATABASE_CREATE_TABLE_tblIncentivePastDetailsData = DBHelper.DATABASE_CREATE_TABLE_tblIncentivePastDetailsData + " );";
        db.execSQL(DBHelper.DATABASE_CREATE_TABLE_tblIncentivePastDetailsData);

        System.out.println("hi");
    }

    public long savetblIncentiveDetailsColumnsDesc(int IncSlabId, String ReportColumnName, String DisplayColumnName) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("IncSlabId", IncSlabId);
        initialValues.put("ReportColumnName", ReportColumnName.trim());
        initialValues.put("DisplayColumnName", DisplayColumnName.trim());

        return db.insert(DBHelper.TABLE_tblIncentiveDetailsColumnsDesc, null, initialValues);
    }

    public long savetblIncentivePastDetailsColumnsDesc(int IncSlabId, String ReportColumnName, String DisplayColumnName, String Ordr) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("IncSlabId", IncSlabId);
        initialValues.put("ReportColumnName", ReportColumnName.trim());
        initialValues.put("DisplayColumnName", DisplayColumnName.trim());
        initialValues.put("Ordr", Ordr.trim());

        return db.insert(DBHelper.TABLE_tblIncentivePastDetailsColumnsDesc, null, initialValues);
    }


    public long savetblTotalEarning(String Total_Earning) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("Total_Earning", Total_Earning.trim());

        return db.insert(DBHelper.TABLE_tblTotalEarning, null, initialValues);
    }

    public long savetblIncentiveBankDetails(String LvlName, String Value) {
        ContentValues initialValues = new ContentValues();

        initialValues.put("LvlName", LvlName);
        initialValues.put("Value", Value);
        System.out.println("MSG..." + LvlName);
        return db.insert(DBHelper.TABLE_tblIncentiveBankDetails, null, initialValues);
    }

    public long savetblIncentiveSeondaryMaster(int IncSlabId, int IncId, int OutputType, String IncSlabName, String flgAcheived, String Earning) {
        ContentValues initialValues = new ContentValues();
        initialValues.put("IncSlabId", IncSlabId);
        initialValues.put("IncId", IncId);
        initialValues.put("OutputType", OutputType);
        initialValues.put("IncSlabName", IncSlabName.trim());
        initialValues.put("flgAcheived", flgAcheived.trim());
        initialValues.put("Earning", Earning.trim());

        return db.insert(DBHelper.TABLE_tblIncentiveSecondaryMaster, null, initialValues);
    }

    public void updateSstat() {

        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", "5");

            int affected1 = db.update("tblRegistrationDetail", values, "Sstat=?", new String[]{"3"});
            //int affected2 = db.update("tblVRSCheckInPhotoDetail", values, "Sstat=?",new String[] { "3" });
        } catch (Exception ex) {
            // Log.e(TAG, ex.toString());
        }
    }

    public ArrayList fnGetStoreInfoFrom_StoreEdit_Table(String StoreID) {
        ArrayList arrayList = new ArrayList();
        Cursor cursor = null;

        try {
            cursor = db.rawQuery("SELECT StoreID, OwnerName, ContactNumber, StoreAddress, SalesPersonName, SalesPersonContact, Sstat,AddImageFlag,ReplaceImageFlag FROM  tblStoreEdit where StoreID='" + StoreID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    arrayList.add(cursor.getString(0));
                    arrayList.add(cursor.getString(1));
                    arrayList.add(cursor.getString(2));
                    arrayList.add(cursor.getString(3));
                    arrayList.add(cursor.getString(4));
                    arrayList.add(cursor.getString(5));
                    arrayList.add(cursor.getInt(6));
                    arrayList.add(cursor.getInt(7));
                    arrayList.add(cursor.getInt(8));
                }
            }

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (cursor != null) {
                cursor.close();
            }
            return arrayList;
        }
    }

    public LinkedHashMap<String, String> fnGetImageDataFrom_StoreEditImageTable(String StoreID) {
        LinkedHashMap<String, String> hashMapImages = new LinkedHashMap<String, String>();

        Cursor cursor = null;

        try {
            cursor = db.rawQuery("SELECT  ImageName, ImagePath FROM  tblStoreEditImages where StoreID='" + StoreID + "'", null);
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hashMapImages.put(cursor.getString(0), cursor.getString(1));
                        cursor.moveToNext();
                    }
                }
            }

        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (cursor != null) {
                cursor.close();
            }

            return hashMapImages;
        }
    }

    public ArrayList fnGetStoreInfoFrom_StoreList_Table(String StoreID) {
        ArrayList arrayList = new ArrayList();


        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT StoreID, OwnerName, StoreContactNo, StoreAddress, SalesPersonName, SalesPersonContact, Sstat FROM  tblStoreList where StoreID ='" + StoreID + "'", null);
            if (cursor2.getCount() > 0) {
                if (cursor2.moveToFirst()) {
                    arrayList.add(cursor2.getString(0));
                    arrayList.add(cursor2.getString(1));
                    arrayList.add(cursor2.getString(2));
                    arrayList.add(cursor2.getString(3));
                    arrayList.add(cursor2.getString(4));
                    arrayList.add(cursor2.getString(5));
                    arrayList.add(cursor2.getInt(6));
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            if (cursor2 != null) {
                cursor2.close();
            }
            return arrayList;
        }
    }

    public void insertStoreEditTable(String StoreID, String OwnerName, String ContactNumber, String StoreAddress, String SalesPersonName, String SalesPersonContact, int Sstat, int AddImageFlag, int ReplaceImageFlag) {
        // "create table tblMinDeliverQntty (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
        ContentValues values = new ContentValues();
        values.put("StoreID", StoreID);
        values.put("OwnerName", OwnerName);
        values.put("ContactNumber", ContactNumber);
        values.put("StoreAddress", StoreAddress);
        values.put("SalesPersonName", SalesPersonName);
        values.put("SalesPersonContact", SalesPersonContact);
        values.put("Sstat", Sstat);
        values.put("AddImageFlag", AddImageFlag);
        values.put("ReplaceImageFlag", ReplaceImageFlag);
        values.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        values.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        db.insert(DBHelper.DATABASE_TABLE_tblStoreEdit, null, values);
    }

    public void insertStoreEditImagesTable(String StoreID, String ImageName, String ImagePath, int Sstat) {
        // "create table tblMinDeliverQntty (PrdId text null,StoreID text null,QPBT text null,QPTaxAmount text null,MinDlvrQty int null,UOMID text null,Sstat text null);";
        ContentValues values = new ContentValues();
        values.put("StoreID", StoreID);
        values.put("ImageName", ImageName);
        values.put("ImagePath", ImagePath);
        values.put("Sstat", Sstat);
        values.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        values.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));

        db.insert(DBHelper.DATABASE_TABLE_tblStoreEditImages, null, values);
    }

    public void deleteStoreEditTable(String StoreID) {
        db.execSQL("DELETE FROM tblStoreEdit where StoreID='" + StoreID + "'");
        db.execSQL("DELETE FROM tblStoreEditImages where StoreID='" + StoreID + "'");
    }

    public void UpdateTableStoreEdit(int flag2set, String StoreID) {
        try {

            final ContentValues values = new ContentValues();
            values.put("Sstat", flag2set);
            int affected1 = db.update("tblStoreEdit", values, "Sstat=? And StoreID='" + StoreID + "' ", new String[]{"3"});
            int affected2 = db.update("tblStoreEditImages", values, "Sstat=? And StoreID='" + StoreID + "'", new String[]{"3"});


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        }

    }

    public String[] getAllStoreIdOfEditStoteImage() {

        int SnamecolumnIndex1 = 0;


        Cursor cursor = db.rawQuery("SELECT DISTINCT(StoreID) FROM tblStoreEditImages where Sstat=5 ", null);
        //Cursor cursor = db.rawQuery("SELECT StoreID FROM tblStoreMaterialPhotoDetail", null);
        try {
            String StoreName[] = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        StoreName[i] = (String) cursor.getString(SnamecolumnIndex1).toString();
                        cursor.moveToNext();
                    }
                }

            }

            return StoreName;
        } finally {
            if (cursor != null)
                cursor.close();
        }

    }


    public int getImageCountForStoreEdit(String StoreID) {

        int ScodecolumnIndex = 0;

        Cursor cursor = db.rawQuery("SELECT Count(StoreID) FROM tblStoreEditImages where StoreID='" + StoreID + "'", null);
        try {
            int strProdStockQty = 0;
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (!cursor.isNull(ScodecolumnIndex)) {
                        strProdStockQty = Integer.parseInt(cursor.getString(ScodecolumnIndex).toString());
                        cursor.moveToNext();
                    }

                }
            }
            return strProdStockQty;
        } finally {
            cursor.close();
        }
    }

    public String[] getImgsCountStoreEdit(String StoreID) {

        int SnamecolumnIndex1 = 0;

        Cursor cursor = db.rawQuery("SELECT ImageName FROM tblStoreEditImages WHERE StoreID ='" + StoreID + "'", null);
        try {

            String StoreName[] = new String[cursor.getCount()];

            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {

                    StoreName[i] = (String) cursor.getString(SnamecolumnIndex1)
                            .toString();

                    cursor.moveToNext();
                }
            }
            return StoreName;
        } finally {
            cursor.close();
        }

    }

    public void updateStoreEditImages(String PhotoName) {

        try {
            System.out.println("Sunil Doing Testing Response after sending Image inside BD" + PhotoName);
            final ContentValues values = new ContentValues();
            values.put("Sstat", 4);
            ////tableStoreSctnImage(StoreID text null,imageName text null,imagePath text null,ImageClicktime text null,flgSectionPic text null,Sstat integer null);";
            int affected3 = db.update("tblStoreEditImages", values, "ImageName=?", new String[]{PhotoName});
        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {

        }


    }


    public LinkedHashMap<String, String> fngetSubmittedSurvey() {

        Cursor cur = null;
        LinkedHashMap<String, String> hmapDistinctStates = new LinkedHashMap<>();
        try {
            cur = db.rawQuery("Select Distinct StoreID from tblSurveyData where Sstat='" + 4 + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapDistinctStates.put(cur.getString(0), cur.getString(0));
                        cur.moveToNext();
                    }
                }

            }

        } catch (SQLiteException e) {
            // TODO: handle exception
        } finally {
            if (cur != null) {
                cur.close();
            }

            return hmapDistinctStates;
        }
    }


    public String[] FetchStoreListAllRoute() {
        int ScodecolumnIndex = 0;
        int SnamecolumnIndex = 1;
        Cursor cursor = null;
        String StoreName[] = null;


        try {
            cursor = db.rawQuery("SELECT StoreID, StoreName FROM tblStoreList   ORDER BY DistanceNear", null);
            StoreName = new String[cursor.getCount()];
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        StoreName[i] = (String) cursor.getString(ScodecolumnIndex) + "_" + (String) cursor.getString(SnamecolumnIndex);
                        cursor.moveToNext();
                    }

                }
            }
        } finally {
            if (cursor != null)
                cursor.close();
            return StoreName;
        }

    }


    public LinkedHashMap<String, String> fngettblOptionSurvey(String QstnID) {
        Cursor cur = null;
        LinkedHashMap<String, String> hmapDistinctStates = new LinkedHashMap<>();
        try {
            cur = db.rawQuery("Select Distinct OptionID,OptionText,flgaActive from tblOptionSurvey where QstnID='" + QstnID + "'", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapDistinctStates.put(cur.getString(0), cur.getString(1) + "^" + cur.getString(2));
                        cur.moveToNext();
                    }
                }

            }

        } catch (SQLiteException e) {
            // TODO: handle exception
        } finally {
            if (cur != null) {
                cur.close();
            }

            return hmapDistinctStates;
        }
    }

    public void deleteSurveyTables() {

        db.execSQL("DELETE FROM tblQuestionsSurvey");
        db.execSQL("DELETE FROM tblOptionSurvey");


    }

    public void fnsavetblOptionSurvey(String OptionID, String OptionText, String QstnID, String flgaActive) {

        ContentValues values = new ContentValues();
        values.put("OptionID", OptionID);
        values.put("OptionText", OptionText);
        values.put("QstnID", QstnID);
        values.put("flgaActive", flgaActive);


        db.insert(DBHelper.DATABASE_TABLE_tblOptionSurvey, null, values);

    }

    public void deletetblSurveyData(String StoreID) {

        db.execSQL("DELETE FROM tblSurveyData where StoreID='" + StoreID + "'");


    }

    public void fnsavetblQuestionsSurvey(String QstnID, String QstnText, String flgActive, String flgOrder) {

        ContentValues values = new ContentValues();
        values.put("QstnID", QstnID);
        values.put("QstnText", QstnText);
        values.put("flgActive", flgActive);
        values.put("flgOrder", flgOrder);
        db.insert(DBHelper.DATABASE_TABLE_tblQuestionsSurvey, null, values);

    }

    public LinkedHashMap<String, String> fngettblQuestionsSurvey() {

        Cursor cur = null;
        LinkedHashMap<String, String> hmapDistinctStates = new LinkedHashMap<>();
        try {
            cur = db.rawQuery("Select Distinct QstnID,QstnText,flgActive from tblQuestionsSurvey Order BY flgOrder", null);
            if (cur.getCount() > 0) {
                if (cur.moveToFirst()) {
                    for (int i = 0; i < cur.getCount(); i++) {
                        hmapDistinctStates.put(cur.getString(0), cur.getString(1) + "^" + cur.getString(2));
                        cur.moveToNext();
                    }
                }

            }

        } catch (SQLiteException e) {
            // TODO: handle exception
        } finally {
            if (cur != null) {
                cur.close();
            }
            return hmapDistinctStates;
        }
    }

    public void fnsavetblSurveyData(String StoreID, String QstnID, String OptionID, String OptionText, String DateTime, int Sstat, String Latitude, String Longitude, String Accuracy) {

        ContentValues values = new ContentValues();
        values.put("StoreID", StoreID);
        values.put("QstnID", QstnID);
        values.put("OptionID", OptionID);
        values.put("OptionText", OptionText);
        values.put("DateTime", DateTime);
        values.put("Latitude", Latitude);
        values.put("Longitude", Longitude);
        values.put("Accuracy", Accuracy);
        values.put("Sstat", Sstat);
        values.put(DBHelper.IS_NETWORK_TIME_RECORDED, TimeUtils.isNetworkTimeTaken());
        values.put(DBHelper.DEVICE_TIME, TimeUtils.getCurrentDeviceDateTime(TimeUtils.DATE_TIME_FORMAT));


        db.insert(DBHelper.DATABASE_TABLE_tblSurveyData, null, values);

    }

    public void UpdateSstatSurvey(String StoreID) {

        try {

            db.execSQL("UPDATE tblSurveyData SET Sstat= 4 where StoreID='" + StoreID + "' ");


        } catch (Exception ex) {
            Log.e(TAG, ex.toString());
        } finally {

        }

    }

    public void deletetblNotificationMstrOneRow(int SerialNo) {

        db.execSQL("DELETE FROM tblNotificationMstr WHERE SerialNo =" + SerialNo);
        for (int i = 0; i < 9; i++) {
            final ContentValues values = new ContentValues();
            values.put("SerialNo", i + 1);

            int affected = db.update(DBHelper.TABLE_tblPDANotificationMaster_Define, values, "SerialNo=?", new String[]{"" + (i + 2)});

        }

    }

    public int countNoRowIntblNotificationMstr() {
        Cursor cursorE2 = db.rawQuery("SELECT COUNT(*) FROM tblPDANotificationMaster", null);
        int chkI = 0;
        try {
            // // System.out.println("Sunil LastNitificationrList cursorE2.getCount() SerialNo : "+cursorE2.getCount());

            if (cursorE2.getCount() > 0) {
                cursorE2.moveToFirst();
                // // System.out.println("Sunil LastNitificationrList cursorE2.getCount() SerialNo value : "+cursorE2.getString(0).toString());

                chkI = Integer.parseInt(cursorE2.getString(0).toString());
            }


        } finally {
            cursorE2.close();
        }
        return chkI;
    }


    public int fnGetRouteExistOrNot(int CoverageAreaNodeID, int CoverageAreaNodeType) {

        int strStore = 0;

        Cursor cursor2 = db.rawQuery("SELECT Count(*) FROM tblRoutelist WHERE CoverageAreaNodeID='" + CoverageAreaNodeID + "' and CoverageAreaNodeType='" + CoverageAreaNodeType + "'", null);
        try {
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    strStore = Integer.parseInt(cursor2.getString(0));
                    cursor2.moveToNext();

                }

            }
            return strStore;
        } finally {
            cursor2.close();
        }

    }
    public String GetActiveRouteDescrBasedCoverageIDandNodeTyep() {
        int LoncolumnIndex = 0;


        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT Route FROM tblRoutelist WHERE CoverageAreaNodeID='" + CommonInfo.CoverageAreaNodeID + "' and CoverageAreaNodeType='" + CommonInfo.CoverageAreaNodeType + "' and Active = 1 Limit 1", null);

            // cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);

            String activeRouteID = "0";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            if (activeRouteID.equals("0")) {
                activeRouteID = GetNoActiveRouteDescrBasedCoverageIDandNodeTyep();
            }
            return activeRouteID;
        } finally {
            if(cursor2!=null)
            cursor2.close();

        }

    }
    public String GetNoActiveRouteDescrBasedCoverageIDandNodeTyep() {
        int LoncolumnIndex = 0;

        Cursor cursor2 = null;
        try {
            cursor2 = db.rawQuery("SELECT Route FROM tblRoutelist WHERE CoverageAreaNodeID='" + CommonInfo.CoverageAreaNodeID + "' and CoverageAreaNodeType='" + CommonInfo.CoverageAreaNodeType + "' and flgTodayRoute = 0 Limit 1", null);

            // cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr WHERE flgTodayRoute = 1 Limit 1", null);

            String activeRouteID = "0";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            if (activeRouteID.equals("0")) {

            }
            return activeRouteID;
        } finally {
            if(cursor2!=null)
            cursor2.close();

        }

    }
    public String GetActiveRouteIDCrntDSR(int CoverageAreaNodeID, int CoverageAreaNodeType) {
        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT RouteNodeID FROM tblRoutelist WHERE CoverageAreaNodeID='" + CoverageAreaNodeID + "' and CoverageAreaNodeType='" + CoverageAreaNodeType + "' and Active = 1 Limit 1", null);

        try {
            String activeRouteID = "0";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }

            }
            if (activeRouteID.equals("0")) {
                activeRouteID = GetNOActiveRouteIDCrntDSR(CoverageAreaNodeID, CoverageAreaNodeType);
            }
            return activeRouteID;
        } finally {
            cursor2.close();

        }

    }

    public boolean isDataAlreadyExist(int coveAreaNodeId, int coverageNodeType) {
        boolean dataExist = false;
        //tblStoreList(StoreID text not null, StoreType string not null, StoreName string not null, StoreLatitude real not null, StoreLongitude real not null, LastVisitDate string not null, LastTransactionDate string not null, Sstat integer not null, ForDate string not null, ActualLatitude text null, ActualLongitude text null, VisitStartTS text null, VisitEndTS text null,AutoIdStore int null, LocProvider text null, Accuracy text null, BateryLeftStatus text null,StoreClose integer null,StoreNextDay integer null,chainID integer null,ISNewStore int null,StoreRouteID int null,RouteNodeType int null,StoreCatNodeId int null,IsNewStoreDataCompleteSaved int null,flgFromWhereSubmitStatus int null,StoreAddress text null,PaymentStage text null,flgHasQuote int null,flgAllowQuotation int null,flgSubmitFromQuotation int null,flgGSTCapture text null,flgGSTCompliance text null,GSTNumber text null,flgGSTRecordFromServer int null,DistanceNear int null,flgLocationServicesOnOff int null,flgGPSOnOff int null,flgNetworkOnOff int null,flgFusedOnOff int null,flgInternetOnOffWhileLocationTracking int null,flgRestart int null,flgStoreOrder int null,StoreCity text null,StorePinCode text not null,StoreState text null,CoverageAreaNodeID integer null,CoverageAreaNodeType integer null,FlgDSRSO integer null);";
        Cursor cursorE2 = null;
        try {


            cursorE2 = db.rawQuery("SELECT Count(*) from tblStoreList where CoverageAreaNodeID=" + coveAreaNodeId + " AND CoverageAreaNodeType=" + coverageNodeType, null);
            if (cursorE2.moveToFirst()) {

                if (cursorE2.getInt(0) > 0) {
                    dataExist = true;
                }
            }

        } catch (Exception e) {
            System.out.println("Error isDataAlreadyExist =" + e.toString());
        } finally {
            if(cursorE2!=null)
                cursorE2.close();
            return dataExist;
        }
    }

    public String GetNOActiveRouteIDCrntDSR(int CoverageAreaNodeID, int CoverageAreaNodeType) {
        int LoncolumnIndex = 0;

        Cursor cursor2 = db.rawQuery("SELECT RouteNodeID FROM tblRouteMstr WHERE CoverageAreaNodeID='" + CoverageAreaNodeID + "' and CoverageAreaNodeType='" + CoverageAreaNodeType + "' Limit 1", null);
        //Cursor cursor2 = db.rawQuery("SELECT Descr FROM tblRouteMstr where CoverageAreaNodeID='"+CommonInfo.CoverageAreaNodeID+"' and CoverageAreaNodeType='"+CommonInfo.CoverageAreaNodeType+"'", null);

        try {
            String activeRouteID = "0";
            if (cursor2.moveToFirst()) {

                for (int i = 0; i < cursor2.getCount(); i++) {
                    activeRouteID = cursor2.getString(LoncolumnIndex);
                    cursor2.moveToNext();

                }
            }
            return activeRouteID;
        } finally {
            if(cursor2!=null)
                cursor2.close();
        }
    }

    public String fnGetDSRNodeIdAndNodeTypeSO(String PersonNodeType) {
        String SONodeIdAndNodeType = "0^0";

        Cursor cursor = db.rawQuery("Select DISTINCT CoverageAreaNodeID,CoverageAreaNodeType from tblRoutelist where PersonNodeType='" + PersonNodeType + "'", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                SONodeIdAndNodeType = cursor.getString(0) + "^" + cursor.getString(1);
            }
        }
        if(cursor!=null)
            cursor.close();
        return SONodeIdAndNodeType;
    }
    public String fnGetDSRNodeIdAndNodeType(String CoverageArea) {
        String SONodeIdAndNodeType = "0^0";

        Cursor cursor = db.rawQuery("Select CoverageAreaNodeID,CoverageAreaNodeType from tblCoverage where CoverageArea='" + CoverageArea + "'", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                SONodeIdAndNodeType = cursor.getString(0) + "^" + cursor.getString(1);
            }
        }
        if(cursor!=null)
            cursor.close();
        return SONodeIdAndNodeType;
    }
    public String fnGetDSRPersonNodeIdAndNodeType(String CoverageArea) {
        String SONodeIdAndNodeType = "0^0";

        Cursor cursor = db.rawQuery("Select PersonNodeID,PersonNodeType from tblRoutelist where CoverageArea='" + CoverageArea + "'", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                SONodeIdAndNodeType = cursor.getString(0) + "^" + cursor.getString(1);
            }
        }
        if(cursor!=null)
            cursor.close();
        return SONodeIdAndNodeType;
    }

    public void delete_tblRptDistribution() {
        db.delete(DBHelper.TABLE_REPORTDISTRIBUTION, null, null);
    }

    public void insert_tblRptDistribution(List<TblRptDistribution> tblRptDistributionList) {

        db.beginTransaction();
        for (TblRptDistribution tblRptDistribution : tblRptDistributionList) {
            ContentValues values = new ContentValues();
            values.put(DBHelper.DESCRIPTION, tblRptDistribution.getDescription());
            values.put(DBHelper.YTD_TGT, tblRptDistribution.getYTDTgt());
            values.put(DBHelper.YTD_TILLDATE, tblRptDistribution.getYTDTillDate());
            values.put(DBHelper.MTD, tblRptDistribution.getMTD());
            values.put(DBHelper.New_YESTERDAY, tblRptDistribution.getNewYesterDay());
            values.put(DBHelper.FLGCOLLAPSE, tblRptDistribution.getFlgCollapse());
            values.put(DBHelper.flgLEVEL, tblRptDistribution.getFlgLevel());
            db.insert(DBHelper.TABLE_REPORTDISTRIBUTION, null, values);
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void delete_tblRptSecVol() {
        db.delete(DBHelper.TABLE_REPORTSECTIONVOL, null, null);
    }

    public void insert_tblRptSecVol(List<TblRptSecVol> tblRptSecVolList) {
        db.beginTransaction();
        for (TblRptSecVol tblRptSecVol : tblRptSecVolList) {
            ContentValues values = new ContentValues();
            values.put(DBHelper.DESCRIPTION, tblRptSecVol.getDescription());
            values.put(DBHelper.MTD_TGT, tblRptSecVol.getMTDTgt());
            values.put(DBHelper.MTD_TILLDATE, tblRptSecVol.getMTDTillDate());
            values.put(DBHelper.RR_REQUIRED, tblRptSecVol.getRRRequired());
            values.put(DBHelper.FLGCOLLAPSE, tblRptSecVol.getFlgCollapse());
            values.put(DBHelper.flgLEVEL, tblRptSecVol.getFlgLevel());
            values.put(DBHelper.YESTERDAY, tblRptSecVol.getYesterday());
            db.insert(DBHelper.TABLE_REPORTSECTIONVOL, null, values);
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void delete_tblRptPrimaryVol() {
        db.delete(DBHelper.TABLE_REPORTPRIMARYVOL, null, null);
    }

    public void insert_tblRptPrimaryVol(List<TblRptPrimaryVol> tblRptPrimaryVolList) {
        db.beginTransaction();
        for (TblRptPrimaryVol tblRptPrimaryVol : tblRptPrimaryVolList) {
            ContentValues values = new ContentValues();
            values.put(DBHelper.DESCRIPTION, tblRptPrimaryVol.getDescription());
            values.put(DBHelper.MTD_TGT, tblRptPrimaryVol.getMTDTgt());
            values.put(DBHelper.MTD_DELIVERED, tblRptPrimaryVol.getMTDDelivered());
            values.put(DBHelper.PENDING_DELIVERY, tblRptPrimaryVol.getPendingDelivery());
            values.put(DBHelper.FLGCOLLAPSE, tblRptPrimaryVol.getFlgCollapse());
            values.put(DBHelper.YESTERDAY, tblRptPrimaryVol.getYesterday());
            values.put(DBHelper.flgLEVEL, tblRptPrimaryVol.getFlgLevel());

            db.insert(DBHelper.TABLE_REPORTPRIMARYVOL, null, values);
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }

    public void delete_tblRptManDays() {
        db.delete(DBHelper.TABLE_REPORTMANDAYS, null, null);
    }

    public void insert_tblRptManDays(List<TblRptManDays> tblRptManDaysList) {
        db.beginTransaction();
        for (TblRptManDays tblRptManDays : tblRptManDaysList) {
            ContentValues values = new ContentValues();
            values.put(DBHelper.DESCRIPTION, tblRptManDays.getDescription());
            values.put(DBHelper.PLANNED, tblRptManDays.getPlanned());
            values.put(DBHelper.IN_FIELD_MTD, tblRptManDays.getInFieldMTD());
            values.put(DBHelper.IN_FIELD_YESTERDAY, tblRptManDays.getInFieldYesterday());
            db.insert(DBHelper.TABLE_REPORTMANDAYS, null, values);
        }
        db.setTransactionSuccessful();
        db.endTransaction();
    }
    public String[] tblRptDistributionColumns = new String[]{
            DBHelper.DESCRIPTION,
            DBHelper.YTD_TGT,
            DBHelper.YTD_TILLDATE,
            DBHelper.MTD,
            DBHelper.New_YESTERDAY,
            DBHelper.FLGCOLLAPSE,
            DBHelper.flgLEVEL
    };
    public String[] tblRptSecVolColumns = new String[]{
            DBHelper.DESCRIPTION,
            DBHelper.MTD_TGT,
            DBHelper.MTD_TILLDATE,
            DBHelper.RR_REQUIRED,
            DBHelper.FLGCOLLAPSE,
            DBHelper.flgLEVEL,
            DBHelper.YESTERDAY
    };
    public String[] tblRptPrimaryVolColumns = new String[]{
            DBHelper.DESCRIPTION,
            DBHelper.MTD_TGT,
            DBHelper.MTD_DELIVERED,
            DBHelper.PENDING_DELIVERY,
            DBHelper.flgLEVEL,
            DBHelper.YESTERDAY,
            DBHelper.FLGCOLLAPSE

    };

    public String[] tblRptManDaysColumns = new String[]{
            DBHelper.DESCRIPTION,
            DBHelper.PLANNED,
            DBHelper.IN_FIELD_MTD,
            DBHelper.IN_FIELD_YESTERDAY
    };
    private TblRptDistribution cursorToReportDistribution(Cursor cursor) {

        TblRptDistribution tblRptDistribution = new TblRptDistribution();
        tblRptDistribution.setDescription(cursor.getString(0));
        tblRptDistribution.setYTDTgt(cursor.getString(1));
        tblRptDistribution.setYTDTillDate(cursor.getInt(2));
        tblRptDistribution.setMTD(cursor.getInt(3));
        tblRptDistribution.setNewYesterDay(cursor.getInt(4));
        tblRptDistribution.setFlgCollapse(cursor.getInt(5));
        tblRptDistribution.setFlgLevel(cursor.getInt(6));
        return tblRptDistribution;
    }
    private TblRptSecVol cursorToReportSecondaryVols(Cursor cursor) {

        TblRptSecVol tblRptSecVol = new TblRptSecVol();
        tblRptSecVol.setDescription(cursor.getString(0));
        tblRptSecVol.setMTDTgt(cursor.getString(1));
        tblRptSecVol.setMTDTillDate(cursor.getString(2));
        tblRptSecVol.setRRRequired(cursor.getString(3));
        tblRptSecVol.setYesterday(cursor.getString(6));
        tblRptSecVol.setFlgCollapse(cursor.getInt(4));
        tblRptSecVol.setFlgLevel(cursor.getInt(5));
        return tblRptSecVol;
    }
    private TblRptManDays cursorToTblRptManDays(Cursor cursor) {

        TblRptManDays tblRptManDays = new TblRptManDays();
        tblRptManDays.setDescription(cursor.getString(0));
        tblRptManDays.setInFieldYesterday(cursor.getInt(3));
        tblRptManDays.setInFieldMTD(cursor.getInt(2));
        tblRptManDays.setPlanned(cursor.getInt(1));
        return tblRptManDays;
    }

    public ArrayList<TblRptDistribution> getRptDistributions() {

        ArrayList<TblRptDistribution> tblRptDistributionArrayList = new ArrayList<>();
        Cursor cursor = db.query(DBHelper.TABLE_REPORTDISTRIBUTION, tblRptDistributionColumns, null, null, null, null, DBHelper.flgLEVEL + " ASC");
        try {
            if (cursor != null && cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    do {
                        TblRptDistribution tblRptDistribution = cursorToReportDistribution(cursor);
                        tblRptDistributionArrayList.add(tblRptDistribution);
                    } while (cursor.moveToNext());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (cursor != null)
                cursor.close();
        }
        return tblRptDistributionArrayList;

    }
    public ArrayList<TblRptSecVol> getRptSecondaryVols() {

        ArrayList<TblRptSecVol> tblRptSecVolArrayList = new ArrayList<>();
        Cursor cursor = db.query(DBHelper.TABLE_REPORTSECTIONVOL, tblRptSecVolColumns, null, null, null, null, null);
        try {
            if (cursor != null && cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    do {
                        TblRptSecVol tblRptSecVol = cursorToReportSecondaryVols(cursor);
                        tblRptSecVolArrayList.add(tblRptSecVol);
                    } while (cursor.moveToNext());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (cursor != null)
                cursor.close();
        }
        return tblRptSecVolArrayList;

    }
    public ArrayList<TblRptManDays> getManDays() {

        ArrayList<TblRptManDays> tblRptManDaysArrayList = new ArrayList<>();
        Cursor cursor = db.query(DBHelper.TABLE_REPORTMANDAYS, tblRptManDaysColumns, null, null, null, null, null);
        try {
            if (cursor != null && cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    do {
                        TblRptManDays tblRptManDays = cursorToTblRptManDays(cursor);
                        tblRptManDaysArrayList.add(tblRptManDays);
                    } while (cursor.moveToNext());
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (cursor != null)
                cursor.close();
        }
        return tblRptManDaysArrayList;

    }

/*
    public String getSalesArea() {
        Cursor cursor = db.query(DBHelper.TABLE_USERAUTHENTICATION, new String[]{DBHelper.SALESAREANAME, DBHelper.SALESAREANAME1}, null, null, null, null, null);
        String areaName = "";
        try {
            if (cursor != null && cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    areaName = cursor.getString(0);
                    if (areaName == null || areaName.trim().length() <= 0)
                        areaName = cursor.getString(1);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (cursor != null)
                cursor.close();
        }
        return areaName;
    }
*/

    public ArrayList<String[]> FetchStoreOtherDetails() {

        int ScodecolumnIndex = 0;
        ArrayList<String[]> arrStorOtherDetails = new ArrayList<String[]>();
        try (Cursor cursor = db.query(DBHelper.DATABASE_TABLE_MAIN13, new String[]{"LastVisitDate", "NoOfBrands", "P3MValue", "MTDValue", "LastTransactionDate"},null, null, null, null, "StoreID ASC")) {
            String storeLastVisitDate[] = new String[cursor.getCount()];
            String storeFlgProductive[] = new String[cursor.getCount()];
            String storeNoOfBrands[] = new String[cursor.getCount()];
            String storeP3MValue[] = new String[cursor.getCount()];
            String storeMTDValue[] = new String[cursor.getCount()];
            String storeLastOrderDate[] = new String[cursor.getCount()];
            if (cursor.moveToFirst()) {

                for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                    if (cursor.getString(ScodecolumnIndex) != null && !cursor.getString(ScodecolumnIndex).equals("null"))

                        storeLastVisitDate[i] = cursor.getString(ScodecolumnIndex) + "~" + 0;
                    else
                        storeLastVisitDate[i] = "NA" + "~" + 0;
                    storeFlgProductive[i] = 0 + "~" + 0;
                    if (cursor.getString(1) != null) {
                        storeNoOfBrands[i] = cursor.getString(1);
                    } else {
                        storeNoOfBrands[i] = "0.0";
                    }
                    if (cursor.getString(2) != null) {
                        storeP3MValue[i] = "" + Double.parseDouble(cursor.getString(2));
                    } else {
                        storeP3MValue[i] = "0.0";
                    }
                    if (cursor.getString(3) != null) {
                        storeMTDValue[i] = "" + Double.parseDouble(cursor.getString(3));
                    } else {
                        storeMTDValue[i] = "0.0";
                    }
                    if (cursor.getString(4) != null) {
                        storeLastOrderDate[i] = cursor.getString(4);
                    } else {
                        storeLastOrderDate[i] = "NA";
                    }


                    cursor.moveToNext();
                }
                arrStorOtherDetails.add(storeLastVisitDate);
                arrStorOtherDetails.add(storeFlgProductive);
                arrStorOtherDetails.add(storeNoOfBrands);
                arrStorOtherDetails.add(storeP3MValue);
                arrStorOtherDetails.add(storeMTDValue);
                arrStorOtherDetails.add(storeLastOrderDate);
            }
            return arrStorOtherDetails;
        }
    }


    public static void insertintotblCoveragedsr(List<TblCoverageDsr> tblCoverageDsrs)
    {

        ContentValues contentValues = new ContentValues();

        for(TblCoverageDsr tblCoverageDsr : tblCoverageDsrs)
        {
            contentValues.put(DBHelper.CoverageAreaNodeID,tblCoverageDsr.getCoverageID());
            contentValues.put(DBHelper.CoverageAreaNodeType,tblCoverageDsr.getCoverageType());
            contentValues.put(DBHelper.CoverageArea,tblCoverageDsr.getCoverageArea());
            contentValues.put(DBHelper.PersonNodeID,tblCoverageDsr.getPersonNodeID());
            contentValues.put(DBHelper.PersonNodeType,tblCoverageDsr.getPersonNodeType());
            contentValues.put(DBHelper.PersonName,tblCoverageDsr.getPersonName());
            contentValues.put(DBHelper.RouteNodeID,tblCoverageDsr.getRouteNodeID());
            contentValues.put(DBHelper.RouteNodeType,tblCoverageDsr.getRouteNodeType());
            contentValues.put(DBHelper.Route,tblCoverageDsr.getRoute());
            contentValues.put(DBHelper.Active,tblCoverageDsr.getActive());
            contentValues.put(DBHelper.flgTodayRoute,Integer.parseInt(tblCoverageDsr.getActive()));

            db.insert(DBHelper.DATABASE_TABLE_tblCoverageDsr,null,contentValues);

        }

    }

    public static void insertintotblCoverageMstr(List<TblCoverageMaster> tblCoverageMasters)
    {

        ContentValues contentValues = new ContentValues();

        for(TblCoverageMaster tblCoverageMaster : tblCoverageMasters)
        {
            contentValues.put(DBHelper.CoverageAreaNodeID,tblCoverageMaster.getCoverageID());
            contentValues.put(DBHelper.CoverageAreaNodeType,tblCoverageMaster.getCoverageType());
            contentValues.put(DBHelper.CoverageArea,tblCoverageMaster.getCoverageArea());
            contentValues.put(DBHelper.PersonNodeID,tblCoverageMaster.getPersonNodeID());
            contentValues.put(DBHelper.PersonNodeType,tblCoverageMaster.getPersonNodeType());
            contentValues.put(DBHelper.PersonName,tblCoverageMaster.getPersonName());
            contentValues.put(DBHelper.WorkingType,tblCoverageMaster.getWorkingType());


            db.insert(DBHelper.DATABASE_TABLE_tblCoverageMstr,null,contentValues);

        }

    }
    public List<TblCoverageDsr> fngetTblCoverageDsr()
    {
        List<TblCoverageDsr> tblCoverageDsrs = new ArrayList<>();
        Cursor cursor = db.rawQuery("Select DISTINCT CoverageArea,CoverageAreaNodeID,CoverageAreaNodeType from tblRoutelist",null);

        if(cursor.getCount()>0)
        {
            while(cursor.moveToNext())
            {
                TblCoverageDsr tblCoverageDsr = new TblCoverageDsr();
                tblCoverageDsr.setCoverageArea(cursor.getString(0));
                tblCoverageDsr.setCoverageID(cursor.getString(1));
                tblCoverageDsr.setCoverageType(cursor.getString(2));
                tblCoverageDsrs.add(tblCoverageDsr);

            }
        }

        return tblCoverageDsrs;
    }
    public List<TblCoverageDsr> fngetStoreSelectionTblCoverageDsr(String CoverageID,String CoverageAreaNodeType)
    {
        List<TblCoverageDsr> tblCoverageDsrs = new ArrayList<>();
        Cursor cursor = db.rawQuery("Select DISTINCT CoverageArea,CoverageAreaNodeID,CoverageAreaNodeType from tblRoutelist Where CoverageAreaNodeID='"+CoverageID+"' AND CoverageAreaNodeType='"+CoverageAreaNodeType+"'",null);

        if(cursor.getCount()>0)
        {
            while(cursor.moveToNext())
            {
                TblCoverageDsr tblCoverageDsr = new TblCoverageDsr();
                tblCoverageDsr.setCoverageArea(cursor.getString(0));
                tblCoverageDsr.setCoverageID(cursor.getString(1));
                tblCoverageDsr.setCoverageType(cursor.getString(2));
                tblCoverageDsrs.add(tblCoverageDsr);

            }
        }

        return tblCoverageDsrs;
    }
    public void delete_tblCoverageDsr() {
        db.delete(DBHelper.DATABASE_TABLE_tblCoverageDsr, null, null);
        db.delete(DBHelper.DATABASE_TABLE_tblCoverageMstr, null, null);
    }


    public List<TblCoverageDsr> fngetRouteNames(String CoverageID)
    {
        List<TblCoverageDsr> routeNames = new ArrayList<>();

        Cursor cursor  = db.rawQuery("Select DISTINCT RouteNodeID,Route from tblRoutelist where CoverageAreaNodeID = '" + CoverageID + "'",null);

        if(cursor.getCount()>0)
        {
            while(cursor.moveToNext())
            {
                TblCoverageDsr tblCoverageDsr = new TblCoverageDsr();
                tblCoverageDsr.setRoute(cursor.getString(1));
                tblCoverageDsr.setRouteNodeID(cursor.getString(0));
                routeNames.add(tblCoverageDsr);


            }


        }
        return routeNames;

    }

    public String getCoverageID(String CoverageArea)
    {
        String coverageArea = "";
        Cursor cursor = db.rawQuery("Select CoverageAreaNodeID from tblRouteList where CoverageArea  = '" + CoverageArea + "'", null);

        if(cursor.getCount()>0)
        {
            while(cursor.moveToNext())
            {
                coverageArea = cursor.getString(0);
            }
        }

        return coverageArea;
    }
    public String fnGetPersonNodeIDAndPersonNodeTypeForSO() {
        String SONodeIdAndNodeType = "0^0";


        Cursor cursor = db.rawQuery("Select PersonNodeID,PersonNodeType from tblUserAuthenticationMstr", null);
    try {
        if (cursor!=null && cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                SONodeIdAndNodeType = cursor.getString(0) + "^" + cursor.getString(1);
            }
        }
    }
    catch (Exception ex)
    {

    }
    finally{
        if(cursor!=null)
            cursor.close();
    }
        return SONodeIdAndNodeType;
    }
    public void UpdateStoreVisitMstrEndVisit(String StoreID,String StoreVisitCode, String strVisitEndTS) {
        final ContentValues values = new ContentValues();
        values.put("VisitEndTS", strVisitEndTS);
        int affected = db.update("tblStoreVisitMstr", values, "StoreID=? AND StoreVisitCode=?", new String[]{StoreID, StoreVisitCode});
    }

    public LinkedHashMap<String, String> fnGetALLOutletsWithSameNameFromMstr(String StoreNameToBeAdded) {
        Cursor cursor = null;

        LinkedHashMap<String, String> hmapOutletMstr = new LinkedHashMap<String, String>();
        //open();

        cursor = db.rawQuery("SELECT StoreID,ifnull(StoreLatitude,0),ifnull(StoreLongitude,0) from tblStoreList where LOWER(StoreName) ='" + StoreNameToBeAdded.toLowerCase().trim() + "' ", null);


        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    String phoneNum;
                    for (int i = 0; i <= (cursor.getCount() - 1); i++) {
                        hmapOutletMstr.put(cursor.getString(0), cursor.getString(1) + "^" + cursor.getString(2));
                        cursor.moveToNext();
                    }
                }
            }
            return hmapOutletMstr;
        } finally {
            cursor.close();
            //close();
        }
    }
    public int fnGetExistingOutletIDFromStoreMstr(String ODescr, String ContactNumber) {
        int existOutID = 0;
        //open();
        // Cursor cursor = db.rawQuery("SELECT Count(StoreID)  from tblStoreList where LOWER(StoreName) ='"+ODescr.toLowerCase().trim()+"' AND StoreContactNo='"+ContactNumber+"'", null);
        Cursor cursor = db.rawQuery("SELECT Count(StoreID)  from tblStoreList where LOWER(StoreName) ='" + ODescr.toLowerCase().trim() + "'", null);
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        existOutID = 1;
                    }

                }
            }
            return existOutID;
        } finally {
            cursor.close();
            // close();
        }
    }
    public String fnGetExistingRouteNameWithSameNameFromStoreMstr(String ODescr, String ContactNumber) {
        String existOutID = "NA";
        //open();
        // Cursor cursor = db.rawQuery("SELECT Count(StoreID)  from tblStoreList where LOWER(StoreName) ='"+ODescr.toLowerCase().trim()+"' AND StoreContactNo='"+ContactNumber+"'", null);
        Cursor cursor = db.rawQuery("SELECT Distinct tblRoutelist.Route  from tblStoreList inner join tblRoutelist on tblStoreList.StoreRouteID=tblRoutelist.RouteNodeID where LOWER(StoreName) ='" + ODescr.toLowerCase().trim() + "' Limit 1", null);
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {

                    existOutID = cursor.getString(0);


                }
            }
            return existOutID;
        } finally {
            cursor.close();
            // close();
        }
    }
    public int fnGetExistingMobileNoOutletIDFromStoreMstr(String ContactNumber) {
        int existOutID = 0;
        //open();
        Cursor cursor = db.rawQuery("SELECT Count(StoreID)  from tblStoreList where StoreContactNo ='" + ContactNumber.trim() + "'", null);
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    if (cursor.getInt(0) > 0) {
                        existOutID = 1;
                    }

                }
            }
            return existOutID;
        } finally {
            cursor.close();
            // close();
        }
    }
    public String fnGetOutletnamewthMobileNo(String ContactNumber) {
        String existOut = "0";
        //open();
        Cursor cursor = db.rawQuery("SELECT StoreName  from tblStoreList where StoreContactNo ='" + ContactNumber.trim() + "' Limit 1", null);
        // close();
        try {
            if (cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    existOut = cursor.getString(0);

                }
            }
            return existOut;
        } finally {
            cursor.close();
            // close();
        }
    }

    public String fnGetJointVisitId(String StoreID) {
        //open();
        String JointVisitId = "NA";
        Cursor cursor = db.rawQuery("Select JointVisitId from tblStoreVisitMstr Where StoreID='" + StoreID + "' AND Sstat=1", null);

        if (cursor.getCount() > 0) {
            if (cursor.moveToFirst()) {
                JointVisitId = cursor.getString(0);
            }
        }
        if (cursor != null) {
            cursor.close();
        }
        //close();
        return JointVisitId;
    }

    public void insertJointVisitFellowDetails(JointVisitMemberDetail jointVisitMemberDetail) {
        ContentValues values = new ContentValues();
        values.put(DBHelper.JOINTVISITID, jointVisitMemberDetail.getJointVisitId());
        values.put(DBHelper.FELLOWPERSONNODEID, jointVisitMemberDetail.getFellowPersonNodeId());
        values.put(DBHelper.FELLOWPERSONNODETYPE, jointVisitMemberDetail.getFellowPersonNodeType());
        values.put(DBHelper.FELLOWPERSONNAME, jointVisitMemberDetail.getFellowPersonName());
        values.put(DBHelper.SSTAT, 3);
        db.insert(DBHelper.TABLE_JOINTVISITDETAILS, null, values);
    }

    public ArrayList<JointVisitMemberDetail> getJointVisitMembers() {
        ArrayList<JointVisitMemberDetail> jointVisitMemberDetailArrayList = new ArrayList<>();
        Cursor cursor = db.query(DBHelper.TABLE_JOINTVISITDETAILS, tblJointVisitMemberColumns, null, null, null, null, null, null);
        try {
            if (cursor != null && cursor.getCount() > 0) {
                if (cursor.moveToFirst()) {
                    do {
                        JointVisitMemberDetail jointVisitMemberDetail = cursorToJointVisitMember(cursor);
                        jointVisitMemberDetailArrayList.add(jointVisitMemberDetail);
                    } while (cursor.moveToNext());
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (cursor != null)
                cursor.close();
        }

        return jointVisitMemberDetailArrayList;
    }
    private JointVisitMemberDetail cursorToJointVisitMember(Cursor cursor) {

        JointVisitMemberDetail jointVisitMemberDetail = new JointVisitMemberDetail();
        jointVisitMemberDetail.setJointVisitId(cursor.getString(0));
        jointVisitMemberDetail.setFellowPersonNodeId(cursor.getInt(1));
        jointVisitMemberDetail.setFellowPersonNodeType(cursor.getInt(2));
        jointVisitMemberDetail.setFellowPersonName(cursor.getString(3));

        return jointVisitMemberDetail;

    }



    public int fnCheckAlreadyJointVisitIDMarrked(String DSRNodeID,String DSRNodeType,String DSRName) {
        int existJointVisitID = 0;
        //open();
        Cursor cursor = db.rawQuery("SELECT JointVisitId  from "+DBHelper.TABLE_JOINTVISITDETAILS+" where "+DBHelper.FELLOWPERSONNODEID+"=" + Integer.parseInt(DSRNodeID.trim()) + " AND "+DBHelper.FELLOWPERSONNODETYPE+"='"+DSRNodeType+"' AND "+DBHelper.FELLOWPERSONNAME+"='"+DSRName+"'", null);
        // close();
        try {
            if (cursor!=null && cursor.getCount() > 0) {
                cursor.moveToFirst();
                existJointVisitID = 1;
            }
            return existJointVisitID;
        } finally {
            if(cursor!=null)
            cursor.close();
            // close();
        }
    }


    public String fnGetCurrentJointVisitIDMarked(String DSRNodeID,String DSRNodeType,String DSRName) {
        String CurrentJointVisitID = "";
        //open();
        Cursor cursor = db.rawQuery("SELECT JointVisitId  from "+DBHelper.TABLE_JOINTVISITDETAILS+" where "+DBHelper.FELLOWPERSONNODEID+"=" + Integer.parseInt(DSRNodeID.trim()) + " AND "+DBHelper.FELLOWPERSONNODETYPE+"='"+DSRNodeType+"' AND "+DBHelper.FELLOWPERSONNAME+"='"+DSRName+"'", null);
        // close();
        try {
            if (cursor!=null && cursor.getCount() > 0) {
                cursor.moveToFirst();
                CurrentJointVisitID =cursor.getString(0);
            }
            return CurrentJointVisitID;
        } finally {
            if(cursor!=null)
                cursor.close();
            // close();
        }
    }

    public void createJointVisit(JointVisitDetail jointVisitDetail) {
        ContentValues values = new ContentValues();


        values.put(DBHelper.JOINTVISITID, jointVisitDetail.getJointVisitId());
        values.put(DBHelper.MANAGERNODEID, jointVisitDetail.getManagerNodeId());
        values.put(DBHelper.MANAGERNODETYPE, jointVisitDetail.getManagerNodeType());
        values.put(DBHelper.IMEINO, jointVisitDetail.getImei());
        values.put(DBHelper.ROUTEID, jointVisitDetail.getRouteId());
        values.put(DBHelper.ROUTETYPE, jointVisitDetail.getRouteType());
        values.put(DBHelper.COVERAGEAREANODEID, jointVisitDetail.getCoverageId());
        values.put(DBHelper.COVERAGETYPE, jointVisitDetail.getCoverageType());
        values.put(DBHelper.VISITDATE, jointVisitDetail.getVisitDate());
        values.put(DBHelper.VISITSTARTTIME, jointVisitDetail.getVisitStartTime());
        values.put(DBHelper.VISITENDTIME, jointVisitDetail.getVisitEndTime());
        values.put(DBHelper.MAPADDRESS, jointVisitDetail.getMapAddress());
        values.put(DBHelper.MAPPINCODE, jointVisitDetail.getMapPinCode());
        values.put(DBHelper.MAPCITY, jointVisitDetail.getMapCity());
        values.put(DBHelper.MAPSTATE, jointVisitDetail.getMapState());
        values.put(DBHelper.LOCPROVIDER, jointVisitDetail.getLocProvider());
        values.put(DBHelper.ACCURACY, jointVisitDetail.getAccuracy());
        values.put(DBHelper.TIMESTAMPIN, jointVisitDetail.getTimeStampIn());
        values.put(DBHelper.ALLPROVIDERDATA, jointVisitDetail.getAllProviderData());
        values.put(DBHelper.GPSLATITUDE, jointVisitDetail.getGpsLatitude());
        values.put(DBHelper.GPSLONGITUDE, jointVisitDetail.getGpsLongitude());
        values.put(DBHelper.GPSACCURACY, jointVisitDetail.getGpsAccuracy());
        values.put(DBHelper.GPSADDRESS, jointVisitDetail.getGpsAddress());
        values.put(DBHelper.NETWORKLATITUDE, jointVisitDetail.getNetworkLatitude());
        values.put(DBHelper.NETWORKLONGITUDE, jointVisitDetail.getNetworkLongitude());
        values.put(DBHelper.NETWORKACCURACY, jointVisitDetail.getNetworkAccuracy());
        values.put(DBHelper.NETWORKADDRESS, jointVisitDetail.getNetworkAddress());
        values.put(DBHelper.FUSEDLATITUDE, jointVisitDetail.getFusedLatitude());
        values.put(DBHelper.FUSEDLONGITUDE, jointVisitDetail.getFusedLongitude());
        values.put(DBHelper.FUSEDACCURACY, jointVisitDetail.getFusedAccuracy());
        values.put(DBHelper.FUSEDADDRESS, jointVisitDetail.getFusedAddress());
        values.put(DBHelper.FLGLOCATIONSERVICESONOFF, jointVisitDetail.getFlgLocationServiceOnOff());
        values.put(DBHelper.FLGGPSONOFF, jointVisitDetail.getFlgGpsOff());
        values.put(DBHelper.FLGNETWORKONOFF, jointVisitDetail.getFlgNetworkOff());
        values.put(DBHelper.FLGFUSEDONOFF, jointVisitDetail.getFlgFusedOnOff());
        values.put(DBHelper.FLGINTERNETONOFFWHILELOCATIONTRACKING, jointVisitDetail.getFlgInternetOffWhileLocationTracking());
        values.put(DBHelper.FLGREBOOT, jointVisitDetail.getFlgReboot());
        values.put(DBHelper.ADDRESS, jointVisitDetail.getAddress());
        values.put(DBHelper.ISCOMPLETE, jointVisitDetail.getIsCompleted());
        values.put(DBHelper.FLGINTERNETONOFFWHILELOCATIONTRACKING, jointVisitDetail.getFlgInternetOffWhileLocationTracking());
        values.put(DBHelper.SSTAT, jointVisitDetail.getSstat());

        long row = db.insert(DBHelper.TABLE_JOINTVISITMASTER, null, values);


    }


    public String FetchPersonNameNodeIDTypeTypeAgainstRouteIDType(String ID,String Type) {
        int ScodecolumnIndex = 0;
        String PersonNameNodeIDTypeTypeAgainstRouteIDType = "0^0^0";

        Cursor cursor = null;
        try {
            cursor = db.rawQuery("SELECT ifnull(PersonName,'NA'),PersonNodeID,PersonNodeType FROM tblRoutelist  WHERE RouteNodeID='" + ID + "' AND RouteNodeType='"+Type+"' Limit 1", null);


            if (cursor!=null && cursor.getCount()>0 && cursor.moveToFirst()) {

                    PersonNameNodeIDTypeTypeAgainstRouteIDType = (String) cursor.getString(ScodecolumnIndex)+"^"+(String) cursor.getString(1)+"^"+(String) cursor.getString(2);


            }

            return PersonNameNodeIDTypeTypeAgainstRouteIDType;
        } finally {
            if(cursor!=null)
                cursor.close();


        }
    }




    public int fnCheckAlreadyJointVisitIDMarrkedInLocationTable(String JointVisitID,int flgJointVisitLevel,String StoreID) {
        int existJointVisitID = 0;
        //open();
        Cursor cursor = db.rawQuery("SELECT JointVisitId  from "+DBHelper.DATABASE_TABLE_tblLocationDetails+" where JointVisitID='" + JointVisitID + "' AND flgJointVisitLevel="+flgJointVisitLevel+" AND StoreID='"+StoreID+"'", null);
        // close();
        try {
            if (cursor!=null && cursor.getCount() > 0) {
                cursor.moveToFirst();
                existJointVisitID = 1;
            }
            return existJointVisitID;
        } finally {
            if(cursor!=null)
                cursor.close();
            // close();
        }
    }

    public void updateCurrentStoreIdSstat(String crntStoreID) {
        //open();
        ContentValues values = new ContentValues();
        values.put("Sstat", 3);
        db.update(DBHelper.DATABASE_TABLE_MAIN13, values, "StoreID=?", new String[]{crntStoreID});
        //close();
    }



    public void updateJointVisitOfMstr(String jointvisitid) {
        //open();
        ContentValues values = new ContentValues();
        values.put(DBHelper.SSTAT, 3);
        db.update(DBHelper.TABLE_JOINTVISITMASTER, values, DBHelper.JOINTVISITID+"=?", new String[]{jointvisitid});
        db.update(DBHelper.TABLE_JOINTVISITDETAILS, values, DBHelper.JOINTVISITID+"=?", new String[]{jointvisitid});
        //close();
    }


    public String getAttendanceDateTime() {
        String attandanceDateTime = "";
        Cursor cursor = db.query(DBHelper.TABLE_tblAttandanceDetails, new String[]{"AttandanceTime"}, null, null, null, null, null, null);
        try {
            if (cursor != null && cursor.moveToFirst()) {
                attandanceDateTime = cursor.getString(0);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            if (cursor != null)
                cursor.close();
        }

        return attandanceDateTime;
    }
}




